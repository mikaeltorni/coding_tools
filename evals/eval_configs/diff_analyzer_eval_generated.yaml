description: Diff Analyzer Agent Evals - Auto-generated from repository datasets
prompts:
- file://formats/default.json
providers:
- id: llama:gemma-3-1b-it-Q4_K_M
  config:
    temperature: 0
    max_tokens: 4096
    top_p: 0.9
    apiEndpoint: ${LLAMA_BASE_URL:-http://localhost:8080}
defaultTest:
  options:
    provider: openai:gpt-4o-mini-2024-07-18
tests:
- description: 'feat: update registry (#962)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table.json b/public/r/data-table.json\n\
      index 305fe98..64a4494 100644\n--- a/public/r/data-table.json\n+++ b/public/r/data-table.json\n\
      @@ -55,7 +55,7 @@\n     },\n     {\n       \"path\": \"src/components/data-table-slider-filter.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\\
      nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input } from\
      \ \\\"@/components/ui/input\\\";\\nimport { Label } from \\\"@/components/ui/label\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { Separator } from \\\"@/components/ui/separator\\\
      \";\\nimport { Slider } from \\\"@/components/ui/slider\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\nimport { PlusCircle, XCircle } from \\\"lucide-react\\\
      \";\\n\\ninterface Range {\\n  min: number;\\n  max: number;\\n}\\n\\ntype RangeValue\
      \ = [number, number];\\n\\nfunction getIsValidRange(value: unknown): value is\
      \ RangeValue {\\n  return (\\n    Array.isArray(value) &&\\n    value.length\
      \ === 2 &&\\n    typeof value[0] === \\\"number\\\" &&\\n    typeof value[1]\
      \ === \\\"number\\\"\\n  );\\n}\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\ninterface\
      \ RangeInputProps {\\n  id: string;\\n  value: number;\\n  min: number;\\n \
      \ max: number;\\n  unit?: string;\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>)\
      \ => void;\\n  label: string;\\n}\\n\\nconst RangeInput = React.memo(function\
      \ RangeInput({\\n  id,\\n  value,\\n  min,\\n  max,\\n  unit,\\n  onChange,\\\
      n  label,\\n}: RangeInputProps) {\\n  return (\\n    <>\\n      <Label htmlFor={id}\
      \ className=\\\"sr-only\\\">\\n        {label}\\n      </Label>\\n      <div\
      \ className=\\\"relative\\\">\\n        <Input\\n          id={id}\\n      \
      \    type=\\\"number\\\"\\n          aria-valuemin={min}\\n          aria-valuemax={max}\\\
      n          inputMode=\\\"numeric\\\"\\n          pattern=\\\"[0-9]*\\\"\\n \
      \         placeholder={min.toString()}\\n          min={min}\\n          max={max}\\\
      n          value={value.toString()}\\n          onChange={onChange}\\n     \
      \     className={cn(\\\"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n        />\\\
      n        {unit && (\\n          <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n            {unit}\\n          </span>\\n        )}\\n      </div>\\n\
      \    </>\\n  );\\n});\\n\\nexport function DataTableSliderFilter<TData>({\\\
      n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>) {\\n  const id\
      \ = React.useId();\\n\\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\\\
      n    ? (column.getFilterValue() as RangeValue)\\n    : undefined;\\n\\n  const\
      \ defaultRange = column.columnDef.meta?.range;\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const { min, max, step } = React.useMemo<Range & { step: number }>(()\
      \ => {\\n    let minValue = 0;\\n    let maxValue = 100;\\n\\n    if (defaultRange\
      \ && getIsValidRange(defaultRange)) {\\n      [minValue, maxValue] = defaultRange;\\\
      n    } else {\\n      const values = column.getFacetedMinMaxValues();\\n   \
      \   if (values && Array.isArray(values) && values.length === 2) {\\n       \
      \ const [facetMinValue, facetMaxValue] = values;\\n        if (\\n         \
      \ typeof facetMinValue === \\\"number\\\" &&\\n          typeof facetMaxValue\
      \ === \\\"number\\\"\\n        ) {\\n          minValue = facetMinValue;\\n\
      \          maxValue = facetMaxValue;\\n        }\\n      }\\n    }\\n\\n   \
      \ const rangeSize = maxValue - minValue;\\n    const step =\\n      rangeSize\
      \ <= 20\\n        ? 1\\n        : rangeSize <= 100\\n          ? Math.ceil(rangeSize\
      \ / 20)\\n          : Math.ceil(rangeSize / 50);\\n\\n    return { min: minValue,\
      \ max: maxValue, step };\\n  }, [column, defaultRange]);\\n\\n  const range\
      \ = React.useMemo((): RangeValue => {\\n    return columnFilterValue ?? [min,\
      \ max];\\n  }, [columnFilterValue, min, max]);\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, { maximumFractionDigits:\
      \ 0 });\\n  }, []);\\n\\n  const onFromInputChange = React.useCallback(\\n \
      \   (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= range[1]) {\\n        column.setFilterValue([numValue,\
      \ range[1]]);\\n      }\\n    },\\n    [column, min, range],\\n  );\\n\\n  const\
      \ onToInputChange = React.useCallback(\\n    (event: React.ChangeEvent<HTMLInputElement>)\
      \ => {\\n      const numValue = Number(event.target.value);\\n      if (!Number.isNaN(numValue)\
      \ && numValue <= max && numValue >= range[0]) {\\n        column.setFilterValue([range[0],\
      \ numValue]);\\n      }\\n    },\\n    [column, max, range],\\n  );\\n\\n  const\
      \ onSliderValueChange = React.useCallback(\\n    (value: RangeValue) => {\\\
      n      if (Array.isArray(value) && value.length === 2) {\\n        column.setFilterValue(value);\\\
      n      }\\n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    column.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\\
      n  const FilterButton = React.useMemo(\\n    () => (\\n      <Button variant=\\\
      \"outline\\\" size=\\\"sm\\\" className=\\\"border-dashed\\\">\\n        {columnFilterValue\
      \ ? (\\n          <div\\n            role=\\\"button\\\"\\n            aria-label={`Clear\
      \ ${title} filter`}\\n            tabIndex={0}\\n            className=\\\"\
      rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none\
      \ focus-visible:ring-1 focus-visible:ring-ring\\\"\\n            onClick={onReset}\\\
      n          >\\n            <XCircle />\\n          </div>\\n        ) : (\\\
      n          <PlusCircle />\\n        )}\\n        <span>{title}</span>\\n   \
      \     {columnFilterValue && (\\n          <>\\n            <Separator\\n   \
      \           orientation=\\\"vertical\\\"\\n              className=\\\"mx-0.5\
      \ data-[orientation=vertical]:h-4\\\"\\n            />\\n            {formatValue(columnFilterValue[0])}\
      \ -{\\\" \\\"}\\n            {formatValue(columnFilterValue[1])}\\n        \
      \    {unit && ` ${unit}`}\\n          </>\\n        )}\\n      </Button>\\n\
      \    ),\\n    [columnFilterValue, title, unit, onReset, formatValue],\\n  );\\\
      n\\n  return (\\n    <Popover>\\n      <PopoverTrigger asChild>{FilterButton}</PopoverTrigger>\\\
      n      <PopoverContent align=\\\"start\\\" className=\\\"flex w-auto flex-col\
      \ gap-4\\\">\\n        <div className=\\\"flex flex-col gap-3\\\">\\n      \
      \    <p className=\\\"font-medium leading-none peer-disabled:cursor-not-allowed\
      \ peer-disabled:opacity-70\\\">\\n            {title}\\n          </p>\\n  \
      \        <div className=\\\"flex items-center gap-4\\\">\\n            <RangeInput\\\
      n              id={`${id}-from`}\\n              value={range[0]}\\n       \
      \       min={min}\\n              max={max}\\n              unit={unit}\\n \
      \             onChange={onFromInputChange}\\n              label=\\\"From\\\"\
      \\n            />\\n            <RangeInput\\n              id={`${id}-to`}\\\
      n              value={range[1]}\\n              min={min}\\n              max={max}\\\
      n              unit={unit}\\n              onChange={onToInputChange}\\n   \
      \           label=\\\"To\\\"\\n            />\\n          </div>\\n        \
      \  <Label htmlFor={`${id}-slider`} className=\\\"sr-only\\\">\\n           \
      \ {title} slider\\n          </Label>\\n          <Slider\\n            id={`${id}-slider`}\\\
      n            min={min}\\n            max={max}\\n            step={step}\\n\
      \            value={range}\\n            onValueChange={onSliderValueChange}\\\
      n          />\\n        </div>\\n        <Button\\n          aria-label={`Clear\
      \ ${title} filter`}\\n          variant=\\\"outline\\\"\\n          size=\\\"\
      sm\\\"\\n          onClick={onReset}\\n        >\\n          Clear\\n      \
      \  </Button>\\n      </PopoverContent>\\n    </Popover>\\n  );\\n}\\n\",\n+\
      \      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from \\\
      \"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport\
      \ { Button } from \\\"@/components/ui/button\\\";\\nimport { Input } from \\\
      \"@/components/ui/input\\\";\\nimport { Label } from \\\"@/components/ui/label\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { Separator } from \\\"@/components/ui/separator\\\
      \";\\nimport { Slider } from \\\"@/components/ui/slider\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\nimport { PlusCircle, XCircle } from \\\"lucide-react\\\
      \";\\n\\ninterface Range {\\n  min: number;\\n  max: number;\\n}\\n\\ntype RangeValue\
      \ = [number, number];\\n\\nfunction getIsValidRange(value: unknown): value is\
      \ RangeValue {\\n  return (\\n    Array.isArray(value) &&\\n    value.length\
      \ === 2 &&\\n    typeof value[0] === \\\"number\\\" &&\\n    typeof value[1]\
      \ === \\\"number\\\"\\n  );\\n}\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\nexport\
      \ function DataTableSliderFilter<TData>({\\n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>)\
      \ {\\n  const id = React.useId();\\n\\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\\\
      n    ? (column.getFilterValue() as RangeValue)\\n    : undefined;\\n\\n  const\
      \ defaultRange = column.columnDef.meta?.range;\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const { min, max, step } = React.useMemo<Range & { step: number }>(()\
      \ => {\\n    let minValue = 0;\\n    let maxValue = 100;\\n\\n    if (defaultRange\
      \ && getIsValidRange(defaultRange)) {\\n      [minValue, maxValue] = defaultRange;\\\
      n    } else {\\n      const values = column.getFacetedMinMaxValues();\\n   \
      \   if (values && Array.isArray(values) && values.length === 2) {\\n       \
      \ const [facetMinValue, facetMaxValue] = values;\\n        if (\\n         \
      \ typeof facetMinValue === \\\"number\\\" &&\\n          typeof facetMaxValue\
      \ === \\\"number\\\"\\n        ) {\\n          minValue = facetMinValue;\\n\
      \          maxValue = facetMaxValue;\\n        }\\n      }\\n    }\\n\\n   \
      \ const rangeSize = maxValue - minValue;\\n    const step =\\n      rangeSize\
      \ <= 20\\n        ? 1\\n        : rangeSize <= 100\\n          ? Math.ceil(rangeSize\
      \ / 20)\\n          : Math.ceil(rangeSize / 50);\\n\\n    return { min: minValue,\
      \ max: maxValue, step };\\n  }, [column, defaultRange]);\\n\\n  const range\
      \ = React.useMemo((): RangeValue => {\\n    return columnFilterValue ?? [min,\
      \ max];\\n  }, [columnFilterValue, min, max]);\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, { maximumFractionDigits:\
      \ 0 });\\n  }, []);\\n\\n  const onFromInputChange = React.useCallback(\\n \
      \   (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= range[1]) {\\n        column.setFilterValue([numValue,\
      \ range[1]]);\\n      }\\n    },\\n    [column, min, range],\\n  );\\n\\n  const\
      \ onToInputChange = React.useCallback(\\n    (event: React.ChangeEvent<HTMLInputElement>)\
      \ => {\\n      const numValue = Number(event.target.value);\\n      if (!Number.isNaN(numValue)\
      \ && numValue <= max && numValue >= range[0]) {\\n        column.setFilterValue([range[0],\
      \ numValue]);\\n      }\\n    },\\n    [column, max, range],\\n  );\\n\\n  const\
      \ onSliderValueChange = React.useCallback(\\n    (value: RangeValue) => {\\\
      n      if (Array.isArray(value) && value.length === 2) {\\n        column.setFilterValue(value);\\\
      n      }\\n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event: React.MouseEvent) => {\\n      if (event.target instanceof HTMLDivElement)\
      \ {\\n        event.stopPropagation();\\n      }\\n      column.setFilterValue(undefined);\\\
      n    },\\n    [column],\\n  );\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              role=\\\"button\\\"\\n              aria-label={`Clear ${title}\
      \ filter`}\\n              tabIndex={0}\\n              className=\\\"rounded-sm\
      \ opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none\
      \ focus-visible:ring-1 focus-visible:ring-ring\\\"\\n              onClick={onReset}\\\
      n            >\\n              <XCircle />\\n            </div>\\n         \
      \ ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0]?.toString()}\\\
      n                onChange={onFromInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n            <Label htmlFor={`${id}-to`} className=\\\"\
      sr-only\\\">\\n              to\\n            </Label>\\n            <div className=\\\
      \"relative\\\">\\n              <Input\\n                id={`${id}-to`}\\n\
      \                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={max.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[1]?.toString()}\\\
      n                onChange={onToInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n          </div>\\n          <Label htmlFor={`${id}-slider`}\
      \ className=\\\"sr-only\\\">\\n            {title} slider\\n          </Label>\\\
      n          <Slider\\n            id={`${id}-slider`}\\n            min={min}\\\
      n            max={max}\\n            step={step}\\n            value={range}\\\
      n            onValueChange={onSliderValueChange}\\n          />\\n        </div>\\\
      n        <Button\\n          aria-label={`Clear ${title} filter`}\\n       \
      \   variant=\\\"outline\\\"\\n          size=\\\"sm\\\"\\n          onClick={onReset}\\\
      n        >\\n          Clear\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n\
      \     },\n     {\ndiff --git a/src/components/data-table-slider-filter.tsx b/src/components/data-table-slider-filter.tsx\n\
      index c854168..c165b17 100644\n--- a/src/components/data-table-slider-filter.tsx\n\
      +++ b/src/components/data-table-slider-filter.tsx\n@@ -37,55 +37,6 @@ interface\
      \ DataTableSliderFilterProps<TData> {\n   title?: string;\n }\n \n-interface\
      \ RangeInputProps {\n-  id: string;\n-  value: number;\n-  min: number;\n- \
      \ max: number;\n-  unit?: string;\n-  onChange: (event: React.ChangeEvent<HTMLInputElement>)\
      \ => void;\n-  label: string;\n-}\n-\n-const RangeInput = React.memo(function\
      \ RangeInput({\n-  id,\n-  value,\n-  min,\n-  max,\n-  unit,\n-  onChange,\n\
      -  label,\n-}: RangeInputProps) {\n-  return (\n-    <>\n-      <Label htmlFor={id}\
      \ className=\"sr-only\">\n-        {label}\n-      </Label>\n-      <div className=\"\
      relative\">\n-        <Input\n-          id={id}\n-          type=\"number\"\
      \n-          aria-valuemin={min}\n-          aria-valuemax={max}\n-        \
      \  inputMode=\"numeric\"\n-          pattern=\"[0-9]*\"\n-          placeholder={min.toString()}\n\
      -          min={min}\n-          max={max}\n-          value={value.toString()}\n\
      -          onChange={onChange}\n-          className={cn(\"h-8 w-24\", unit\
      \ && \"pr-8\")}\n-        />\n-        {unit && (\n-          <span className=\"\
      absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\">\n-            {unit}\n-          </span>\n\
      -        )}\n-      </div>\n-    </>\n-  );\n-});\n-\n export function DataTableSliderFilter<TData>({\n\
      \   column,\n   title,\n@@ -168,73 +119,100 @@ export function DataTableSliderFilter<TData>({\n\
      \   );\n \n   const onReset = React.useCallback(\n-    (event?: React.MouseEvent)\
      \ => {\n-      event?.stopPropagation();\n+    (event: React.MouseEvent) =>\
      \ {\n+      if (event.target instanceof HTMLDivElement) {\n+        event.stopPropagation();\n\
      +      }\n       column.setFilterValue(undefined);\n     },\n     [column],\n\
      \   );\n \n-  const FilterButton = React.useMemo(\n-    () => (\n-      <Button\
      \ variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n-        {columnFilterValue\
      \ ? (\n-          <div\n-            role=\"button\"\n-            aria-label={`Clear\
      \ ${title} filter`}\n-            tabIndex={0}\n-            className=\"rounded-sm\
      \ opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none\
      \ focus-visible:ring-1 focus-visible:ring-ring\"\n-            onClick={onReset}\n\
      -          >\n-            <XCircle />\n-          </div>\n-        ) : (\n\
      -          <PlusCircle />\n-        )}\n-        <span>{title}</span>\n-   \
      \     {columnFilterValue && (\n-          <>\n-            <Separator\n-   \
      \           orientation=\"vertical\"\n-              className=\"mx-0.5 data-[orientation=vertical]:h-4\"\
      \n-            />\n-            {formatValue(columnFilterValue[0])} -{\" \"\
      }\n-            {formatValue(columnFilterValue[1])}\n-            {unit && `\
      \ ${unit}`}\n-          </>\n-        )}\n-      </Button>\n-    ),\n-    [columnFilterValue,\
      \ title, unit, onReset, formatValue],\n-  );\n-\n   return (\n     <Popover>\n\
      -      <PopoverTrigger asChild>{FilterButton}</PopoverTrigger>\n+      <PopoverTrigger\
      \ asChild>\n+        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\"\
      >\n+          {columnFilterValue ? (\n+            <div\n+              role=\"\
      button\"\n+              aria-label={`Clear ${title} filter`}\n+           \
      \   tabIndex={0}\n+              className=\"rounded-sm opacity-70 transition-opacity\
      \ hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\
      \n+              onClick={onReset}\n+            >\n+              <XCircle\
      \ />\n+            </div>\n+          ) : (\n+            <PlusCircle />\n+\
      \          )}\n+          <span>{title}</span>\n+          {columnFilterValue\
      \ ? (\n+            <>\n+              <Separator\n+                orientation=\"\
      vertical\"\n+                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\
      \n+              />\n+              {formatValue(columnFilterValue[0])} -{\"\
      \ \"}\n+              {formatValue(columnFilterValue[1])}\n+              {unit\
      \ ? ` ${unit}` : \"\"}\n+            </>\n+          ) : null}\n+        </Button>\n\
      +      </PopoverTrigger>\n       <PopoverContent align=\"start\" className=\"\
      flex w-auto flex-col gap-4\">\n         <div className=\"flex flex-col gap-3\"\
      >\n           <p className=\"font-medium leading-none peer-disabled:cursor-not-allowed\
      \ peer-disabled:opacity-70\">\n             {title}\n           </p>\n     \
      \      <div className=\"flex items-center gap-4\">\n-            <RangeInput\n\
      -              id={`${id}-from`}\n-              value={range[0]}\n-       \
      \       min={min}\n-              max={max}\n-              unit={unit}\n- \
      \             onChange={onFromInputChange}\n-              label=\"From\"\n\
      -            />\n-            <RangeInput\n-              id={`${id}-to`}\n\
      -              value={range[1]}\n-              min={min}\n-              max={max}\n\
      -              unit={unit}\n-              onChange={onToInputChange}\n-   \
      \           label=\"To\"\n-            />\n+            <Label htmlFor={`${id}-from`}\
      \ className=\"sr-only\">\n+              From\n+            </Label>\n+    \
      \        <div className=\"relative\">\n+              <Input\n+            \
      \    id={`${id}-from`}\n+                type=\"number\"\n+                aria-valuemin={min}\n\
      +                aria-valuemax={max}\n+                inputMode=\"numeric\"\
      \n+                pattern=\"[0-9]*\"\n+                placeholder={min.toString()}\n\
      +                min={min}\n+                max={max}\n+                value={range[0]?.toString()}\n\
      +                onChange={onFromInputChange}\n+                className={cn(\"\
      h-8 w-24\", unit && \"pr-8\")}\n+              />\n+              {unit && (\n\
      +                <span className=\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n+          \
      \        {unit}\n+                </span>\n+              )}\n+            </div>\n\
      +            <Label htmlFor={`${id}-to`} className=\"sr-only\">\n+         \
      \     to\n+            </Label>\n+            <div className=\"relative\">\n\
      +              <Input\n+                id={`${id}-to`}\n+                type=\"\
      number\"\n+                aria-valuemin={min}\n+                aria-valuemax={max}\n\
      +                inputMode=\"numeric\"\n+                pattern=\"[0-9]*\"\n\
      +                placeholder={max.toString()}\n+                min={min}\n\
      +                max={max}\n+                value={range[1]?.toString()}\n\
      +                onChange={onToInputChange}\n+                className={cn(\"\
      h-8 w-24\", unit && \"pr-8\")}\n+              />\n+              {unit && (\n\
      +                <span className=\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n+          \
      \        {unit}\n+                </span>\n+              )}\n+            </div>\n\
      \           </div>\n           <Label htmlFor={`${id}-slider`} className=\"\
      sr-only\">\n             {title} slider"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: optimize slider (#961)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table.json b/public/r/data-table.json\n\
      index a99e2d8..305fe98 100644\n--- a/public/r/data-table.json\n+++ b/public/r/data-table.json\n\
      @@ -55,7 +55,7 @@\n     },\n     {\n       \"path\": \"src/components/data-table-slider-filter.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\\
      nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input } from\
      \ \\\"@/components/ui/input\\\";\\nimport { Label } from \\\"@/components/ui/label\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { Separator } from \\\"@/components/ui/separator\\\
      \";\\nimport { Slider } from \\\"@/components/ui/slider\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\nimport { PlusCircle, XCircle } from \\\"lucide-react\\\
      \";\\n\\ntype RangeValue = [number, number];\\n\\nfunction getIsValidRange(value:\
      \ unknown): value is RangeValue {\\n  return (\\n    Array.isArray(value) &&\\\
      n    value.length === 2 &&\\n    typeof value[0] === \\\"number\\\" &&\\n  \
      \  typeof value[1] === \\\"number\\\"\\n  );\\n}\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\nexport\
      \ function DataTableSliderFilter<TData>({\\n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>)\
      \ {\\n  const id = React.useId();\\n\\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\\\
      n    ? (column.getFilterValue() as RangeValue)\\n    : undefined;\\n\\n  const\
      \ defaultRange = column.columnDef.meta?.range;\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo((): RangeValue => {\\n    if (defaultRange\
      \ && getIsValidRange(defaultRange)) return defaultRange;\\n\\n    const values\
      \ = column.getFacetedMinMaxValues();\\n    if (values && Array.isArray(values)\
      \ && values.length === 2) {\\n      const [minVal, maxVal] = values;\\n    \
      \  if (typeof minVal === \\\"number\\\" && typeof maxVal === \\\"number\\\"\
      ) {\\n        return [minVal, maxVal];\\n      }\\n    }\\n\\n    return [0,\
      \ 100];\\n  }, [column, defaultRange]);\\n\\n  const step = React.useMemo(()\
      \ => {\\n    const rangeSize = max - min;\\n    if (rangeSize <= 20) return\
      \ 1;\\n    if (rangeSize <= 100) return Math.ceil(rangeSize / 20);\\n    return\
      \ Math.ceil(rangeSize / 50);\\n  }, [min, max]);\\n\\n  const range = React.useMemo(()\
      \ => {\\n    return columnFilterValue ?? [min, max];\\n  }, [columnFilterValue,\
      \ min, max]);\\n\\n  const onReset = React.useCallback(\\n    (event?: React.MouseEvent)\
      \ => {\\n      event?.stopPropagation();\\n      column.setFilterValue(undefined);\\\
      n    },\\n    [column],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  const onFromInputChange = React.useCallback(\\\
      n    (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= max) {\\n        const newRange: RangeValue = [numValue,\
      \ max];\\n        column.setFilterValue(newRange);\\n      }\\n    },\\n   \
      \ [column, min, max],\\n  );\\n\\n  const onToInputChange = React.useCallback(\\\
      n    (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ <= max && numValue >= min) {\\n        const newRange: RangeValue = [min,\
      \ numValue];\\n        column.setFilterValue(newRange);\\n      }\\n    },\\\
      n    [column, max, min],\\n  );\\n\\n  const onSliderValueChange = React.useCallback(\\\
      n    (value: RangeValue) => {\\n      if (Array.isArray(value) && value.length\
      \ === 2) {\\n        column.setFilterValue(value);\\n      }\\n    },\\n   \
      \ [column],\\n  );\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger asChild>\\\
      n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\"border-dashed\\\
      \">\\n          {columnFilterValue ? (\\n            <div\\n              role=\\\
      \"button\\\"\\n              aria-label={`Clear ${title} filter`}\\n       \
      \       tabIndex={0}\\n              className=\\\"rounded-sm opacity-70 transition-opacity\
      \ hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\
      \"\\n              onClick={onReset}\\n            >\\n              <XCircle\
      \ />\\n            </div>\\n          ) : (\\n            <PlusCircle />\\n\
      \          )}\\n          <span>{title}</span>\\n          {columnFilterValue\
      \ ? (\\n            <>\\n              <Separator\\n                orientation=\\\
      \"vertical\\\"\\n                className=\\\"mx-0.5 data-[orientation=vertical]:h-4\\\
      \"\\n              />\\n              {formatValue(columnFilterValue[0])} -{\\\
      \" \\\"}\\n              {formatValue(columnFilterValue[1])}\\n            \
      \  {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n          ) : null}\\\
      n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent align=\\\
      \"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n        <div className=\\\
      \"flex flex-col gap-3\\\">\\n          <p className=\\\"font-medium leading-none\
      \ peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\">\\n        \
      \    {title}\\n          </p>\\n          <div className=\\\"flex items-center\
      \ gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\"sr-only\\\
      \">\\n              From\\n            </Label>\\n            <div className=\\\
      \"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0]?.toString()}\\\
      n                onChange={onFromInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n            <Label htmlFor={`${id}-to`} className=\\\"\
      sr-only\\\">\\n              to\\n            </Label>\\n            <div className=\\\
      \"relative\\\">\\n              <Input\\n                id={`${id}-to`}\\n\
      \                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={max.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[1]?.toString()}\\\
      n                onChange={onToInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n          </div>\\n          <Label htmlFor={`${id}-slider`}\
      \ className=\\\"sr-only\\\">\\n            {title} slider\\n          </Label>\\\
      n          <Slider\\n            id={`${id}-slider`}\\n            min={min}\\\
      n            max={max}\\n            step={step}\\n            value={range}\\\
      n            onValueChange={onSliderValueChange}\\n          />\\n        </div>\\\
      n        <Button\\n          aria-label={`Clear ${title} filter`}\\n       \
      \   variant=\\\"outline\\\"\\n          size=\\\"sm\\\"\\n          onClick={onReset}\\\
      n        >\\n          Clear\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\\
      n\\nimport type { Column } from \\\"@tanstack/react-table\\\";\\nimport * as\
      \ React from \\\"react\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { Label\
      \ } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { Slider } from \\\"@/components/ui/slider\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { PlusCircle, XCircle\
      \ } from \\\"lucide-react\\\";\\n\\ninterface Range {\\n  min: number;\\n  max:\
      \ number;\\n}\\n\\ntype RangeValue = [number, number];\\n\\nfunction getIsValidRange(value:\
      \ unknown): value is RangeValue {\\n  return (\\n    Array.isArray(value) &&\\\
      n    value.length === 2 &&\\n    typeof value[0] === \\\"number\\\" &&\\n  \
      \  typeof value[1] === \\\"number\\\"\\n  );\\n}\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\ninterface\
      \ RangeInputProps {\\n  id: string;\\n  value: number;\\n  min: number;\\n \
      \ max: number;\\n  unit?: string;\\n  onChange: (event: React.ChangeEvent<HTMLInputElement>)\
      \ => void;\\n  label: string;\\n}\\n\\nconst RangeInput = React.memo(function\
      \ RangeInput({\\n  id,\\n  value,\\n  min,\\n  max,\\n  unit,\\n  onChange,\\\
      n  label,\\n}: RangeInputProps) {\\n  return (\\n    <>\\n      <Label htmlFor={id}\
      \ className=\\\"sr-only\\\">\\n        {label}\\n      </Label>\\n      <div\
      \ className=\\\"relative\\\">\\n        <Input\\n          id={id}\\n      \
      \    type=\\\"number\\\"\\n          aria-valuemin={min}\\n          aria-valuemax={max}\\\
      n          inputMode=\\\"numeric\\\"\\n          pattern=\\\"[0-9]*\\\"\\n \
      \         placeholder={min.toString()}\\n          min={min}\\n          max={max}\\\
      n          value={value.toString()}\\n          onChange={onChange}\\n     \
      \     className={cn(\\\"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n        />\\\
      n        {unit && (\\n          <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n            {unit}\\n          </span>\\n        )}\\n      </div>\\n\
      \    </>\\n  );\\n});\\n\\nexport function DataTableSliderFilter<TData>({\\\
      n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>) {\\n  const id\
      \ = React.useId();\\n\\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\\\
      n    ? (column.getFilterValue() as RangeValue)\\n    : undefined;\\n\\n  const\
      \ defaultRange = column.columnDef.meta?.range;\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const { min, max, step } = React.useMemo<Range & { step: number }>(()\
      \ => {\\n    let minValue = 0;\\n    let maxValue = 100;\\n\\n    if (defaultRange\
      \ && getIsValidRange(defaultRange)) {\\n      [minValue, maxValue] = defaultRange;\\\
      n    } else {\\n      const values = column.getFacetedMinMaxValues();\\n   \
      \   if (values && Array.isArray(values) && values.length === 2) {\\n       \
      \ const [facetMinValue, facetMaxValue] = values;\\n        if (\\n         \
      \ typeof facetMinValue === \\\"number\\\" &&\\n          typeof facetMaxValue\
      \ === \\\"number\\\"\\n        ) {\\n          minValue = facetMinValue;\\n\
      \          maxValue = facetMaxValue;\\n        }\\n      }\\n    }\\n\\n   \
      \ const rangeSize = maxValue - minValue;\\n    const step =\\n      rangeSize\
      \ <= 20\\n        ? 1\\n        : rangeSize <= 100\\n          ? Math.ceil(rangeSize\
      \ / 20)\\n          : Math.ceil(rangeSize / 50);\\n\\n    return { min: minValue,\
      \ max: maxValue, step };\\n  }, [column, defaultRange]);\\n\\n  const range\
      \ = React.useMemo((): RangeValue => {\\n    return columnFilterValue ?? [min,\
      \ max];\\n  }, [columnFilterValue, min, max]);\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, { maximumFractionDigits:\
      \ 0 });\\n  }, []);\\n\\n  const onFromInputChange = React.useCallback(\\n \
      \   (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= range[1]) {\\n        column.setFilterValue([numValue,\
      \ range[1]]);\\n      }\\n    },\\n    [column, min, range],\\n  );\\n\\n  const\
      \ onToInputChange = React.useCallback(\\n    (event: React.ChangeEvent<HTMLInputElement>)\
      \ => {\\n      const numValue = Number(event.target.value);\\n      if (!Number.isNaN(numValue)\
      \ && numValue <= max && numValue >= range[0]) {\\n        column.setFilterValue([range[0],\
      \ numValue]);\\n      }\\n    },\\n    [column, max, range],\\n  );\\n\\n  const\
      \ onSliderValueChange = React.useCallback(\\n    (value: RangeValue) => {\\\
      n      if (Array.isArray(value) && value.length === 2) {\\n        column.setFilterValue(value);\\\
      n      }\\n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    column.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\\
      n  const FilterButton = React.useMemo(\\n    () => (\\n      <Button variant=\\\
      \"outline\\\" size=\\\"sm\\\" className=\\\"border-dashed\\\">\\n        {columnFilterValue\
      \ ? (\\n          <div\\n            role=\\\"button\\\"\\n            aria-label={`Clear\
      \ ${title} filter`}\\n            tabIndex={0}\\n            className=\\\"\
      rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none\
      \ focus-visible:ring-1 focus-visible:ring-ring\\\"\\n            onClick={onReset}\\\
      n          >\\n            <XCircle />\\n          </div>\\n        ) : (\\\
      n          <PlusCircle />\\n        )}\\n        <span>{title}</span>\\n   \
      \     {columnFilterValue && (\\n          <>\\n            <Separator\\n   \
      \           orientation=\\\"vertical\\\"\\n              className=\\\"mx-0.5\
      \ data-[orientation=vertical]:h-4\\\"\\n            />\\n            {formatValue(columnFilterValue[0])}\
      \ -{\\\" \\\"}\\n            {formatValue(columnFilterValue[1])}\\n        \
      \    {unit && ` ${unit}`}\\n          </>\\n        )}\\n      </Button>\\n\
      \    ),\\n    [columnFilterValue, title, unit, onReset, formatValue],\\n  );\\\
      n\\n  return (\\n    <Popover>\\n      <PopoverTrigger asChild>{FilterButton}</PopoverTrigger>\\\
      n      <PopoverContent align=\\\"start\\\" className=\\\"flex w-auto flex-col\
      \ gap-4\\\">\\n        <div className=\\\"flex flex-col gap-3\\\">\\n      \
      \    <p className=\\\"font-medium leading-none peer-disabled:cursor-not-allowed\
      \ peer-disabled:opacity-70\\\">\\n            {title}\\n          </p>\\n  \
      \        <div className=\\\"flex items-center gap-4\\\">\\n            <RangeInput\\\
      n              id={`${id}-from`}\\n              value={range[0]}\\n       \
      \       min={min}\\n              max={max}\\n              unit={unit}\\n \
      \             onChange={onFromInputChange}\\n              label=\\\"From\\\"\
      \\n            />\\n            <RangeInput\\n              id={`${id}-to`}\\\
      n              value={range[1]}\\n              min={min}\\n              max={max}\\\
      n              unit={unit}\\n              onChange={onToInputChange}\\n   \
      \           label=\\\"To\\\"\\n            />\\n          </div>\\n        \
      \  <Label htmlFor={`${id}-slider`} className=\\\"sr-only\\\">\\n           \
      \ {title} slider\\n          </Label>\\n          <Slider\\n            id={`${id}-slider`}\\\
      n            min={min}\\n            max={max}\\n            step={step}\\n\
      \            value={range}\\n            onValueChange={onSliderValueChange}\\\
      n          />\\n        </div>\\n        <Button\\n          aria-label={`Clear\
      \ ${title} filter`}\\n          variant=\\\"outline\\\"\\n          size=\\\"\
      sm\\\"\\n          onClick={onReset}\\n        >\\n          Clear\\n      \
      \  </Button>\\n      </PopoverContent>\\n    </Popover>\\n  );\\n}\\n\",\n \
      \      \"type\": \"registry:component\"\n     },\n     {\ndiff --git a/src/components/data-table-slider-filter.tsx\
      \ b/src/components/data-table-slider-filter.tsx\nindex ca3cb39..c854168 100644\n\
      --- a/src/components/data-table-slider-filter.tsx\n+++ b/src/components/data-table-slider-filter.tsx\n\
      @@ -16,6 +16,11 @@ import { Slider } from \"@/components/ui/slider\";\n import\
      \ { cn } from \"@/lib/utils\";\n import { PlusCircle, XCircle } from \"lucide-react\"\
      ;\n \n+interface Range {\n+  min: number;\n+  max: number;\n+}\n+\n type RangeValue\
      \ = [number, number];\n \n function getIsValidRange(value: unknown): value is\
      \ RangeValue {\n@@ -32,6 +37,55 @@ interface DataTableSliderFilterProps<TData>\
      \ {\n   title?: string;\n }\n \n+interface RangeInputProps {\n+  id: string;\n\
      +  value: number;\n+  min: number;\n+  max: number;\n+  unit?: string;\n+  onChange:\
      \ (event: React.ChangeEvent<HTMLInputElement>) => void;\n+  label: string;\n\
      +}\n+\n+const RangeInput = React.memo(function RangeInput({\n+  id,\n+  value,\n\
      +  min,\n+  max,\n+  unit,\n+  onChange,\n+  label,\n+}: RangeInputProps) {\n\
      +  return (\n+    <>\n+      <Label htmlFor={id} className=\"sr-only\">\n+ \
      \       {label}\n+      </Label>\n+      <div className=\"relative\">\n+   \
      \     <Input\n+          id={id}\n+          type=\"number\"\n+          aria-valuemin={min}\n\
      +          aria-valuemax={max}\n+          inputMode=\"numeric\"\n+        \
      \  pattern=\"[0-9]*\"\n+          placeholder={min.toString()}\n+          min={min}\n\
      +          max={max}\n+          value={value.toString()}\n+          onChange={onChange}\n\
      +          className={cn(\"h-8 w-24\", unit && \"pr-8\")}\n+        />\n+  \
      \      {unit && (\n+          <span className=\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\"\
      >\n+            {unit}\n+          </span>\n+        )}\n+      </div>\n+  \
      \  </>\n+  );\n+});\n+\n export function DataTableSliderFilter<TData>({\n  \
      \ column,\n   title,\n@@ -45,65 +99,63 @@ export function DataTableSliderFilter<TData>({\n\
      \   const defaultRange = column.columnDef.meta?.range;\n   const unit = column.columnDef.meta?.unit;\n\
      \ \n-  const [min, max] = React.useMemo((): RangeValue => {\n-    if (defaultRange\
      \ && getIsValidRange(defaultRange)) return defaultRange;\n+  const { min, max,\
      \ step } = React.useMemo<Range & { step: number }>(() => {\n+    let minValue\
      \ = 0;\n+    let maxValue = 100;\n \n-    const values = column.getFacetedMinMaxValues();\n\
      -    if (values && Array.isArray(values) && values.length === 2) {\n-      const\
      \ [minVal, maxVal] = values;\n-      if (typeof minVal === \"number\" && typeof\
      \ maxVal === \"number\") {\n-        return [minVal, maxVal];\n+    if (defaultRange\
      \ && getIsValidRange(defaultRange)) {\n+      [minValue, maxValue] = defaultRange;\n\
      +    } else {\n+      const values = column.getFacetedMinMaxValues();\n+   \
      \   if (values && Array.isArray(values) && values.length === 2) {\n+       \
      \ const [facetMinValue, facetMaxValue] = values;\n+        if (\n+         \
      \ typeof facetMinValue === \"number\" &&\n+          typeof facetMaxValue ===\
      \ \"number\"\n+        ) {\n+          minValue = facetMinValue;\n+        \
      \  maxValue = facetMaxValue;\n+        }\n       }\n     }\n \n-    return [0,\
      \ 100];\n-  }, [column, defaultRange]);\n+    const rangeSize = maxValue - minValue;\n\
      +    const step =\n+      rangeSize <= 20\n+        ? 1\n+        : rangeSize\
      \ <= 100\n+          ? Math.ceil(rangeSize / 20)\n+          : Math.ceil(rangeSize\
      \ / 50);\n \n-  const step = React.useMemo(() => {\n-    const rangeSize = max\
      \ - min;\n-    if (rangeSize <= 20) return 1;\n-    if (rangeSize <= 100) return\
      \ Math.ceil(rangeSize / 20);\n-    return Math.ceil(rangeSize / 50);\n-  },\
      \ [min, max]);\n+    return { min: minValue, max: maxValue, step };\n+  }, [column,\
      \ defaultRange]);\n \n-  const range = React.useMemo(() => {\n+  const range\
      \ = React.useMemo((): RangeValue => {\n     return columnFilterValue ?? [min,\
      \ max];\n   }, [columnFilterValue, min, max]);\n \n-  const onReset = React.useCallback(\n\
      -    (event?: React.MouseEvent) => {\n-      event?.stopPropagation();\n-  \
      \    column.setFilterValue(undefined);\n-    },\n-    [column],\n-  );\n-\n\
      \   const formatValue = React.useCallback((value: number) => {\n-    return\
      \ value.toLocaleString(undefined, {\n-      maximumFractionDigits: 0,\n-   \
      \ });\n+    return value.toLocaleString(undefined, { maximumFractionDigits:\
      \ 0 });\n   }, []);\n \n   const onFromInputChange = React.useCallback(\n  \
      \   (event: React.ChangeEvent<HTMLInputElement>) => {\n       const numValue\
      \ = Number(event.target.value);\n-      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= max) {\n-        const newRange: RangeValue = [numValue,\
      \ max];\n-        column.setFilterValue(newRange);\n+      if (!Number.isNaN(numValue)\
      \ && numValue >= min && numValue <= range[1]) {\n+        column.setFilterValue([numValue,\
      \ range[1]]);\n       }\n     },\n-    [column, min, max],\n+    [column, min,\
      \ range],\n   );\n \n   const onToInputChange = React.useCallback(\n     (event:\
      \ React.ChangeEvent<HTMLInputElement>) => {\n       const numValue = Number(event.target.value);\n\
      -      if (!Number.isNaN(numValue) && numValue <= max && numValue >= min) {\n\
      -        const newRange: RangeValue = [min, numValue];\n-        column.setFilterValue(newRange);\n\
      +      if (!Number.isNaN(numValue) && numValue <= max && numValue >= range[0])\
      \ {\n+        column.setFilterValue([range[0], numValue]);\n       }\n     },\n\
      -    [column, max, min],\n+    [column, max, range],\n   );\n \n   const onSliderValueChange\
      \ = React.useCallback(\n@@ -115,91 +167,74 @@ export function DataTableSliderFilter<TData>({\n\
      \     [column],\n   );\n \n+  const onReset = React.useCallback(\n+    (event?:\
      \ React.MouseEvent) => {\n+      event?.stopPropagation();\n+      column.setFilterValue(undefined);\n\
      +    },\n+    [column],\n+  );\n+\n+  const FilterButton = React.useMemo(\n\
      +    () => (\n+      <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\"\
      >\n+        {columnFilterValue ? (\n+          <div\n+            role=\"button\"\
      \n+            aria-label={`Clear ${title} filter`}\n+            tabIndex={0}\n\
      +            className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n\
      +            onClick={onReset}\n+          >\n+            <XCircle />\n+  \
      \        </div>\n+        ) : (\n+          <PlusCircle />\n+        )}\n+ \
      \       <span>{title}</span>\n+        {columnFilterValue && (\n+          <>\n\
      +            <Separator\n+              orientation=\"vertical\"\n+        \
      \      className=\"mx-0.5 data-[orientation=vertical]:h-4\"\n+            />\n\
      +            {formatValue(columnFilterValue[0])} -{\" \"}\n+            {formatValue(columnFilterValue[1])}\n\
      +            {unit && ` ${unit}`}\n+          </>\n+        )}\n+      </Button>\n\
      +    ),\n+    [columnFilterValue, title, unit, onReset, formatValue],\n+  );\n\
      +\n   return (\n     <Popover>\n-      <PopoverTrigger asChild>\n-        <Button\
      \ variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n-          {columnFilterValue\
      \ ? (\n-            <div\n-              role=\"button\"\n-              aria-label={`Clear\
      \ ${title} filter`}\n-              tabIndex={0}\n-              className=\"\
      rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none\
      \ focus-visible:ring-1 focus-visible:ring-ring\"\n-              onClick={onReset}\n\
      -            >\n-              <XCircle />\n-            </div>\n-         \
      \ ) : (\n-            <PlusCircle />\n-          )}\n-          <span>{title}</span>\n\
      -          {columnFilterValue ? (\n-            <>\n-              <Separator\n\
      -                orientation=\"vertical\"\n-                className=\"mx-0.5\
      \ data-[orientation=vertical]:h-4\"\n-              />\n-              {formatValue(columnFilterValue[0])}\
      \ -{\" \"}\n-              {formatValue(columnFilterValue[1])}\n-          \
      \    {unit ? ` ${unit}` : \"\"}\n-            </>\n-          ) : null}\n- \
      \       </Button>\n-      </PopoverTrigger>\n+      <PopoverTrigger asChild>{FilterButton}</PopoverTrigger>\n\
      \       <PopoverContent align=\"start\" className=\"flex w-auto flex-col gap-4\"\
      >\n         <div className=\"flex flex-col gap-3\">\n           <p className=\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\
      >\n             {title}\n           </p>\n           <div className=\"flex items-center\
      \ gap-4\">\n-            <Label htmlFor={`${id}-from`} className=\"sr-only\"\
      >\n-              From\n-            </Label>\n-            <div className=\"\
      relative\">\n-              <Input\n-                id={`${id}-from`}\n-  \
      \              type=\"number\"\n-                aria-valuemin={min}\n-    \
      \            aria-valuemax={max}\n-                inputMode=\"numeric\"\n-\
      \                pattern=\"[0-9]*\"\n-                placeholder={min.toString()}\n\
      -                min={min}\n-                max={max}\n-                value={range[0]?.toString()}\n\
      -                onChange={onFromInputChange}\n-                className={cn(\"\
      h-8 w-24\", unit && \"pr-8\")}\n-              />\n-              {unit && (\n\
      -                <span className=\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n-          \
      \        {unit}\n-                </span>\n-              )}\n-            </div>\n\
      -            <Label htmlFor={`${id}-to`} className=\"sr-only\">\n-         \
      \     to\n-            </Label>\n-            <div className=\"relative\">\n\
      -              <Input\n-                id={`${id}-to`}\n-                type=\"\
      number\"\n-                aria-valuemin={min}\n-                aria-valuemax={max}\n\
      -                inputMode=\"numeric\"\n-                pattern=\"[0-9]*\"\n\
      -                placeholder={max.toString()}\n-                min={min}\n\
      -                max={max}\n-                value={range[1]?.toString()}\n\
      -                onChange={onToInputChange}\n-                className={cn(\"\
      h-8 w-24\", unit && \"pr-8\")}\n-              />\n-              {unit && (\n\
      -                <span className=\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\n-          \
      \        {unit}\n-                </span>\n-              )}\n-            </div>\n\
      +            <RangeInput\n+              id={`${id}-from`}\n+              value={range[0]}\n\
      +              min={min}\n+              max={max}\n+              unit={unit}\n\
      +              onChange={onFromInputChange}\n+              label=\"From\"\n\
      +            />\n+            <RangeInput\n+              id={`${id}-to`}\n\
      +              value={range[1]}\n+              min={min}\n+              max={max}\n\
      +              unit={unit}\n+              onChange={onToInputChange}\n+   \
      \           label=\"To\"\n+            />\n           </div>\n           <Label\
      \ htmlFor={`${id}-slider`} className=\"sr-only\">\n             {title} slider"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: update slider-filter (#959)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/README.md b/README.md\nindex e1729f0..e5bcacd 100644\n\
      --- a/README.md\n+++ b/README.md\n@@ -75,3 +75,7 @@ See the [documentation](https://diceui.com/docs/components/data-table)\
      \ to get st\n ## How do I deploy this?\n \n Follow the deployment guides for\
      \ [Vercel](https://create.t3.gg/en/deployment/vercel), [Netlify](https://create.t3.gg/en/deployment/netlify)\
      \ and [Docker](https://create.t3.gg/en/deployment/docker) for more information.\n\
      +\n+## Credits\n+\n+- [shadcn/ui](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/tasks)\
      \ - For the initial implementation of the data table.\ndiff --git a/public/r/data-table.json\
      \ b/public/r/data-table.json\nindex 0a1b05c..a99e2d8 100644\n--- a/public/r/data-table.json\n\
      +++ b/public/r/data-table.json\n@@ -55,7 +55,7 @@\n     },\n     {\n       \"\
      path\": \"src/components/data-table-slider-filter.tsx\",\n-      \"content\"\
      : \"\\\"use client\\\";\\n\\nimport type { Column } from \\\"@tanstack/react-table\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport { Label } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\\
      n  PopoverContent,\\n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\
      \";\\nimport { Separator } from \\\"@/components/ui/separator\\\";\\nimport\
      \ { Slider } from \\\"@/components/ui/slider\\\";\\nimport { cn } from \\\"\
      @/lib/utils\\\";\\nimport { PlusCircle, Settings2, XCircle } from \\\"lucide-react\\\
      \";\\n\\ninterface DataTableSliderFilterProps<TData> {\\n  column: Column<TData,\
      \ unknown>;\\n  title?: string;\\n}\\n\\nexport function DataTableSliderFilter<TData>({\\\
      n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const columnFilterValue = column.getFilterValue() as\\\
      n    | [number, number]\\n    | undefined;\\n\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const [range, setRange] = React.useState<[number, number]>(\\\
      n    columnFilterValue ?? [min, max],\\n  );\\n\\n  const onRangeChange = React.useCallback(\\\
      n    (values: [number, number]) => {\\n      setRange(values);\\n      column.setFilterValue(values);\\\
      n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\n\
      \    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    setRange([min, max]);\\n      column.setFilterValue(undefined);\\n    },\\\
      n    [column, min, max],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              role=\\\"button\\\"\\n              aria-label={`Clear ${title}\
      \ filter`}\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue >= min &&\\n  \
      \                  numValue <= range[1]\\n                  ) {\\n         \
      \           onRangeChange([numValue, range[1]]);\\n                  }\\n  \
      \              }}\\n                className={cn(\\\"h-8 w-24\\\", unit &&\
      \ \\\"pr-8\\\")}\\n              />\\n              {unit && (\\n          \
      \      <span className=\\\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\">\\n        \
      \          {unit}\\n                </span>\\n              )}\\n          \
      \  </div>\\n            <Label htmlFor={`${id}-to`} className=\\\"sr-only\\\"\
      >\\n              to\\n            </Label>\\n            <div className=\\\"\
      relative\\\">\\n              <Input\\n                id={`${id}-to`}\\n  \
      \              type=\\\"number\\\"\\n                aria-valuemin={min}\\n\
      \                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={max.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[1].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue <= max &&\\n  \
      \                  numValue >= range[0]\\n                  ) {\\n         \
      \           onRangeChange([range[0], numValue]);\\n                  }\\n  \
      \              }}\\n                className={cn(\\\"h-8 w-24\\\", unit &&\
      \ \\\"pr-8\\\")}\\n              />\\n              {unit && (\\n          \
      \      <span className=\\\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\">\\n        \
      \          {unit}\\n                </span>\\n              )}\\n          \
      \  </div>\\n          </div>\\n          <Slider\\n            aria-label=\\\
      \"Select range\\\"\\n            min={min}\\n            max={max}\\n      \
      \      value={range}\\n            onValueChange={(value) => setRange(value\
      \ as [number, number])}\\n            onValueCommit={(value) => onRangeChange(value\
      \ as [number, number])}\\n            className=\\\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\\\
      \"\\n          />\\n        </div>\\n        <Button\\n          aria-label=\\\
      \"Reset range filter\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\
      \"sm\\\"\\n          onClick={onReset}\\n          className=\\\"px-3 text-xs\\\
      \"\\n        >\\n          Reset\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\\
      n\\nimport type { Column } from \\\"@tanstack/react-table\\\";\\nimport * as\
      \ React from \\\"react\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { Label\
      \ } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { Slider } from \\\"@/components/ui/slider\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { PlusCircle, XCircle\
      \ } from \\\"lucide-react\\\";\\n\\ntype RangeValue = [number, number];\\n\\\
      nfunction getIsValidRange(value: unknown): value is RangeValue {\\n  return\
      \ (\\n    Array.isArray(value) &&\\n    value.length === 2 &&\\n    typeof value[0]\
      \ === \\\"number\\\" &&\\n    typeof value[1] === \\\"number\\\"\\n  );\\n}\\\
      n\\ninterface DataTableSliderFilterProps<TData> {\\n  column: Column<TData,\
      \ unknown>;\\n  title?: string;\\n}\\n\\nexport function DataTableSliderFilter<TData>({\\\
      n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>) {\\n  const id\
      \ = React.useId();\\n\\n  const columnFilterValue = getIsValidRange(column.getFilterValue())\\\
      n    ? (column.getFilterValue() as RangeValue)\\n    : undefined;\\n\\n  const\
      \ defaultRange = column.columnDef.meta?.range;\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo((): RangeValue => {\\n    if (defaultRange\
      \ && getIsValidRange(defaultRange)) return defaultRange;\\n\\n    const values\
      \ = column.getFacetedMinMaxValues();\\n    if (values && Array.isArray(values)\
      \ && values.length === 2) {\\n      const [minVal, maxVal] = values;\\n    \
      \  if (typeof minVal === \\\"number\\\" && typeof maxVal === \\\"number\\\"\
      ) {\\n        return [minVal, maxVal];\\n      }\\n    }\\n\\n    return [0,\
      \ 100];\\n  }, [column, defaultRange]);\\n\\n  const step = React.useMemo(()\
      \ => {\\n    const rangeSize = max - min;\\n    if (rangeSize <= 20) return\
      \ 1;\\n    if (rangeSize <= 100) return Math.ceil(rangeSize / 20);\\n    return\
      \ Math.ceil(rangeSize / 50);\\n  }, [min, max]);\\n\\n  const range = React.useMemo(()\
      \ => {\\n    return columnFilterValue ?? [min, max];\\n  }, [columnFilterValue,\
      \ min, max]);\\n\\n  const onReset = React.useCallback(\\n    (event?: React.MouseEvent)\
      \ => {\\n      event?.stopPropagation();\\n      column.setFilterValue(undefined);\\\
      n    },\\n    [column],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  const onFromInputChange = React.useCallback(\\\
      n    (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= max) {\\n        const newRange: RangeValue = [numValue,\
      \ max];\\n        column.setFilterValue(newRange);\\n      }\\n    },\\n   \
      \ [column, min, max],\\n  );\\n\\n  const onToInputChange = React.useCallback(\\\
      n    (event: React.ChangeEvent<HTMLInputElement>) => {\\n      const numValue\
      \ = Number(event.target.value);\\n      if (!Number.isNaN(numValue) && numValue\
      \ <= max && numValue >= min) {\\n        const newRange: RangeValue = [min,\
      \ numValue];\\n        column.setFilterValue(newRange);\\n      }\\n    },\\\
      n    [column, max, min],\\n  );\\n\\n  const onSliderValueChange = React.useCallback(\\\
      n    (value: RangeValue) => {\\n      if (Array.isArray(value) && value.length\
      \ === 2) {\\n        column.setFilterValue(value);\\n      }\\n    },\\n   \
      \ [column],\\n  );\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger asChild>\\\
      n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\"border-dashed\\\
      \">\\n          {columnFilterValue ? (\\n            <div\\n              role=\\\
      \"button\\\"\\n              aria-label={`Clear ${title} filter`}\\n       \
      \       tabIndex={0}\\n              className=\\\"rounded-sm opacity-70 transition-opacity\
      \ hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\
      \"\\n              onClick={onReset}\\n            >\\n              <XCircle\
      \ />\\n            </div>\\n          ) : (\\n            <PlusCircle />\\n\
      \          )}\\n          <span>{title}</span>\\n          {columnFilterValue\
      \ ? (\\n            <>\\n              <Separator\\n                orientation=\\\
      \"vertical\\\"\\n                className=\\\"mx-0.5 data-[orientation=vertical]:h-4\\\
      \"\\n              />\\n              {formatValue(columnFilterValue[0])} -{\\\
      \" \\\"}\\n              {formatValue(columnFilterValue[1])}\\n            \
      \  {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n          ) : null}\\\
      n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent align=\\\
      \"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n        <div className=\\\
      \"flex flex-col gap-3\\\">\\n          <p className=\\\"font-medium leading-none\
      \ peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\">\\n        \
      \    {title}\\n          </p>\\n          <div className=\\\"flex items-center\
      \ gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\"sr-only\\\
      \">\\n              From\\n            </Label>\\n            <div className=\\\
      \"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0]?.toString()}\\\
      n                onChange={onFromInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n            <Label htmlFor={`${id}-to`} className=\\\"\
      sr-only\\\">\\n              to\\n            </Label>\\n            <div className=\\\
      \"relative\\\">\\n              <Input\\n                id={`${id}-to`}\\n\
      \                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={max.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[1]?.toString()}\\\
      n                onChange={onToInputChange}\\n                className={cn(\\\
      \"h-8 w-24\\\", unit && \\\"pr-8\\\")}\\n              />\\n              {unit\
      \ && (\\n                <span className=\\\"absolute top-0 right-0 bottom-0\
      \ flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\
      \">\\n                  {unit}\\n                </span>\\n              )}\\\
      n            </div>\\n          </div>\\n          <Label htmlFor={`${id}-slider`}\
      \ className=\\\"sr-only\\\">\\n            {title} slider\\n          </Label>\\\
      n          <Slider\\n            id={`${id}-slider`}\\n            min={min}\\\
      n            max={max}\\n            step={step}\\n            value={range}\\\
      n            onValueChange={onSliderValueChange}\\n          />\\n        </div>\\\
      n        <Button\\n          aria-label={`Clear ${title} filter`}\\n       \
      \   variant=\\\"outline\\\"\\n          size=\\\"sm\\\"\\n          onClick={onReset}\\\
      n        >\\n          Clear\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n\
      \     },\n     {\ndiff --git a/src/components/data-table-slider-filter.tsx b/src/components/data-table-slider-filter.tsx\n\
      index e2fb97d..ca3cb39 100644\n--- a/src/components/data-table-slider-filter.tsx\n\
      +++ b/src/components/data-table-slider-filter.tsx\n@@ -14,7 +14,18 @@ import\
      \ {\n import { Separator } from \"@/components/ui/separator\";\n import { Slider\
      \ } from \"@/components/ui/slider\";\n import { cn } from \"@/lib/utils\";\n\
      -import { PlusCircle, Settings2, XCircle } from \"lucide-react\";\n+import {\
      \ PlusCircle, XCircle } from \"lucide-react\";\n+\n+type RangeValue = [number,\
      \ number];\n+\n+function getIsValidRange(value: unknown): value is RangeValue\
      \ {\n+  return (\n+    Array.isArray(value) &&\n+    value.length === 2 &&\n\
      +    typeof value[0] === \"number\" &&\n+    typeof value[1] === \"number\"\n\
      +  );\n+}\n \n interface DataTableSliderFilterProps<TData> {\n   column: Column<TData,\
      \ unknown>;\n@@ -26,41 +37,45 @@ export function DataTableSliderFilter<TData>({\n\
      \   title,\n }: DataTableSliderFilterProps<TData>) {\n   const id = React.useId();\n\
      -  const columnFilterValue = column.getFilterValue() as\n-    | [number, number]\n\
      -    | undefined;\n \n+  const columnFilterValue = getIsValidRange(column.getFilterValue())\n\
      +    ? (column.getFilterValue() as RangeValue)\n+    : undefined;\n+\n+  const\
      \ defaultRange = column.columnDef.meta?.range;\n   const unit = column.columnDef.meta?.unit;\n\
      \ \n-  const [min, max] = React.useMemo(() => {\n-    const range = column.columnDef.meta?.range;\n\
      -    if (range) return range;\n+  const [min, max] = React.useMemo((): RangeValue\
      \ => {\n+    if (defaultRange && getIsValidRange(defaultRange)) return defaultRange;\n\
      \ \n     const values = column.getFacetedMinMaxValues();\n-    if (!values)\
      \ return [0, 100];\n+    if (values && Array.isArray(values) && values.length\
      \ === 2) {\n+      const [minVal, maxVal] = values;\n+      if (typeof minVal\
      \ === \"number\" && typeof maxVal === \"number\") {\n+        return [minVal,\
      \ maxVal];\n+      }\n+    }\n \n-    return [values[0], values[1]];\n-  },\
      \ [column]);\n+    return [0, 100];\n+  }, [column, defaultRange]);\n \n-  const\
      \ [range, setRange] = React.useState<[number, number]>(\n-    columnFilterValue\
      \ ?? [min, max],\n-  );\n+  const step = React.useMemo(() => {\n+    const rangeSize\
      \ = max - min;\n+    if (rangeSize <= 20) return 1;\n+    if (rangeSize <= 100)\
      \ return Math.ceil(rangeSize / 20);\n+    return Math.ceil(rangeSize / 50);\n\
      +  }, [min, max]);\n \n-  const onRangeChange = React.useCallback(\n-    (values:\
      \ [number, number]) => {\n-      setRange(values);\n-      column.setFilterValue(values);\n\
      -    },\n-    [column],\n-  );\n+  const range = React.useMemo(() => {\n+  \
      \  return columnFilterValue ?? [min, max];\n+  }, [columnFilterValue, min, max]);\n\
      \ \n   const onReset = React.useCallback(\n     (event?: React.MouseEvent) =>\
      \ {\n       event?.stopPropagation();\n-      setRange([min, max]);\n      \
      \ column.setFilterValue(undefined);\n     },\n-    [column, min, max],\n+  \
      \  [column],\n   );\n \n   const formatValue = React.useCallback((value: number)\
      \ => {\n@@ -69,6 +84,37 @@ export function DataTableSliderFilter<TData>({\n\
      \     });\n   }, []);\n \n+  const onFromInputChange = React.useCallback(\n\
      +    (event: React.ChangeEvent<HTMLInputElement>) => {\n+      const numValue\
      \ = Number(event.target.value);\n+      if (!Number.isNaN(numValue) && numValue\
      \ >= min && numValue <= max) {\n+        const newRange: RangeValue = [numValue,\
      \ max];\n+        column.setFilterValue(newRange);\n+      }\n+    },\n+   \
      \ [column, min, max],\n+  );\n+\n+  const onToInputChange = React.useCallback(\n\
      +    (event: React.ChangeEvent<HTMLInputElement>) => {\n+      const numValue\
      \ = Number(event.target.value);\n+      if (!Number.isNaN(numValue) && numValue\
      \ <= max && numValue >= min) {\n+        const newRange: RangeValue = [min,\
      \ numValue];\n+        column.setFilterValue(newRange);\n+      }\n+    },\n\
      +    [column, max, min],\n+  );\n+\n+  const onSliderValueChange = React.useCallback(\n\
      +    (value: RangeValue) => {\n+      if (Array.isArray(value) && value.length\
      \ === 2) {\n+        column.setFilterValue(value);\n+      }\n+    },\n+   \
      \ [column],\n+  );\n+\n   return (\n     <Popover>\n       <PopoverTrigger asChild>\n\
      @@ -78,8 +124,8 @@ export function DataTableSliderFilter<TData>({\n        \
      \       role=\"button\"\n               aria-label={`Clear ${title} filter`}\n\
      \               tabIndex={0}\n-              onClick={onReset}\n           \
      \    className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n\
      +              onClick={onReset}\n             >\n               <XCircle />\n\
      \             </div>\n@@ -120,17 +166,8 @@ export function DataTableSliderFilter<TData>({\n\
      \                 placeholder={min.toString()}\n                 min={min}\n\
      \                 max={max}\n-                value={range[0].toString()}\n\
      -                onChange={(event) => {\n-                  const numValue =\
      \ Number(event.target.value);\n-                  if (\n-                  \
      \  !Number.isNaN(numValue) &&\n-                    numValue >= min &&\n-  \
      \                  numValue <= range[1]\n-                  ) {\n-         \
      \           onRangeChange([numValue, range[1]]);\n-                  }\n-  \
      \              }}\n+                value={range[0]?.toString()}\n+        \
      \        onChange={onFromInputChange}\n                 className={cn(\"h-8\
      \ w-24\", unit && \"pr-8\")}\n               />\n               {unit && (\n\
      @@ -153,17 +190,8 @@ export function DataTableSliderFilter<TData>({\n      \
      \           placeholder={max.toString()}\n                 min={min}\n     \
      \            max={max}\n-                value={range[1].toString()}\n-    \
      \            onChange={(event) => {\n-                  const numValue = Number(event.target.value);\n\
      -                  if (\n-                    !Number.isNaN(numValue) &&\n-\
      \                    numValue <= max &&\n-                    numValue >= range[0]\n\
      -                  ) {\n-                    onRangeChange([range[0], numValue]);\n\
      -                  }\n-                }}\n+                value={range[1]?.toString()}\n\
      +                onChange={onToInputChange}\n                 className={cn(\"\
      h-8 w-24\", unit && \"pr-8\")}\n               />\n               {unit && (\n\
      @@ -173,24 +201,25 @@ export function DataTableSliderFilter<TData>({\n     \
      \          )}\n             </div>\n           </div>\n+          <Label htmlFor={`${id}-slider`}\
      \ className=\"sr-only\">\n+            {title} slider\n+          </Label>\n\
      \           <Slider\n-            aria-label=\"Select range\"\n+           \
      \ id={`${id}-slider`}\n             min={min}\n             max={max}\n+   \
      \         step={step}\n             value={range}\n-            onValueChange={(value)\
      \ => setRange(value as [number, number])}\n-            onValueCommit={(value)\
      \ => onRangeChange(value as [number, number])}\n-            className=\"[&_[role=slider]]:h-4\
      \ [&_[role=slider]]:w-4\"\n+            onValueChange={onSliderValueChange}\n\
      \           />\n         </div>\n         <Button\n-          aria-label=\"\
      Reset range filter\"\n+          aria-label={`Clear ${title} filter`}\n    \
      \       variant=\"outline\"\n           size=\"sm\"\n           onClick={onReset}\n\
      -          className=\"px-3 text-xs\"\n         >\n-          Reset\n+     \
      \     Clear\n         </Button>\n       </PopoverContent>\n     </Popover>"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: update number input (#958)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/README.md b/README.md\nindex f1cd235..e1729f0 100644\n\
      --- a/README.md\n+++ b/README.md\n@@ -6,7 +6,7 @@ This is a shadcn table component\
      \ with server-side sorting, filtering, and pagina\n \n ## Documentation\n \n\
      -See the [documentation](https://diceui.com/docs/data-table) to get started.\n\
      +See the [documentation](https://diceui.com/docs/components/data-table) to get\
      \ started.\n \n ## Tech Stack\n \ndiff --git a/public/r/data-table.json b/public/r/data-table.json\n\
      index d5e2a73..0a1b05c 100644\n--- a/public/r/data-table.json\n+++ b/public/r/data-table.json\n\
      @@ -50,12 +50,12 @@\n     },\n     {\n       \"path\": \"src/components/data-table-toolbar.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, Table\
      \ } from \\\"@tanstack/react-table\\\";\\nimport { X } from \\\"lucide-react\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { DataTableDateFilter\
      \ } from \\\"@/components/data-table-date-filter\\\";\\nimport { DataTableFacetedFilter\
      \ } from \\\"@/components/data-table-faceted-filter\\\";\\nimport { DataTableSliderFilter\
      \ } from \\\"@/components/data-table-slider-filter\\\";\\nimport { DataTableViewOptions\
      \ } from \\\"@/components/data-table-view-options\\\";\\nimport { Button } from\
      \ \\\"@/components/ui/button\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\ninterface DataTableToolbarProps<TData>\
      \ extends React.ComponentProps<\\\"div\\\"> {\\n  table: Table<TData>;\\n}\\\
      n\\nexport function DataTableToolbar<TData>({\\n  table,\\n  children,\\n  className,\\\
      n  ...props\\n}: DataTableToolbarProps<TData>) {\\n  const isFiltered = table.getState().columnFilters.length\
      \ > 0;\\n\\n  const columns = React.useMemo(\\n    () => table.getAllColumns().filter((column)\
      \ => column.getCanFilter()),\\n    [table],\\n  );\\n\\n  const onReset = React.useCallback(()\
      \ => {\\n    table.resetColumnFilters();\\n  }, [table]);\\n\\n  return (\\\
      n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\"horizontal\\\
      \"\\n      className={cn(\\n        \\\"flex w-full items-start justify-between\
      \ gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\">\\n \
      \       {columns.map((column) => (\\n          <DataTableToolbarFilter key={column.id}\
      \ column={column} />\\n        ))}\\n        {isFiltered && (\\n          <Button\\\
      n            aria-label=\\\"Reset filters\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"sm\\\"\\n            className=\\\"border-dashed\\\
      \"\\n            onClick={onReset}\\n          >\\n            <X />\\n    \
      \        Reset\\n          </Button>\\n        )}\\n      </div>\\n      <div\
      \ className=\\\"flex items-center gap-2\\\">\\n        {children}\\n       \
      \ <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\n  );\\\
      n}\\ninterface DataTableToolbarFilterProps<TData> {\\n  column: Column<TData>;\\\
      n}\\n\\nfunction DataTableToolbarFilter<TData>({\\n  column,\\n}: DataTableToolbarFilterProps<TData>)\
      \ {\\n  {\\n    const columnMeta = column.columnDef.meta;\\n\\n    const onFilterRender\
      \ = React.useCallback(() => {\\n      if (!columnMeta?.variant) return null;\\\
      n\\n      switch (columnMeta.variant) {\\n        case \\\"text\\\":\\n    \
      \    case \\\"number\\\":\\n          return (\\n            <Input\\n     \
      \         type={columnMeta.variant}\\n              placeholder={columnMeta.placeholder\
      \ ?? columnMeta.label}\\n              value={(column.getFilterValue() as string)\
      \ ?? \\\"\\\"}\\n              onChange={(event) => column.setFilterValue(event.target.value)}\\\
      n              className=\\\"h-8 w-40 lg:w-56\\\"\\n            />\\n      \
      \    );\\n\\n        case \\\"range\\\":\\n          return (\\n           \
      \ <DataTableSliderFilter\\n              column={column}\\n              title={columnMeta.label\
      \ ?? column.id}\\n            />\\n          );\\n\\n        case \\\"date\\\
      \":\\n        case \\\"dateRange\\\":\\n          return (\\n            <DataTableDateFilter\\\
      n              column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n              multiple={columnMeta.variant === \\\"dateRange\\\"}\\n      \
      \      />\\n          );\\n\\n        case \\\"select\\\":\\n        case \\\
      \"multiSelect\\\":\\n          return (\\n            <DataTableFacetedFilter\\\
      n              column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n              options={columnMeta.options ?? []}\\n              multiple={columnMeta.variant\
      \ === \\\"multiSelect\\\"}\\n            />\\n          );\\n\\n        default:\\\
      n          return null;\\n      }\\n    }, [column, columnMeta]);\\n\\n    return\
      \ onFilterRender();\\n  }\\n}\\n\",\n+      \"content\": \"\\\"use client\\\"\
      ;\\n\\nimport type { Column, Table } from \\\"@tanstack/react-table\\\";\\nimport\
      \ { X } from \\\"lucide-react\\\";\\nimport * as React from \\\"react\\\";\\\
      n\\nimport { DataTableDateFilter } from \\\"@/components/data-table-date-filter\\\
      \";\\nimport { DataTableFacetedFilter } from \\\"@/components/data-table-faceted-filter\\\
      \";\\nimport { DataTableSliderFilter } from \\\"@/components/data-table-slider-filter\\\
      \";\\nimport { DataTableViewOptions } from \\\"@/components/data-table-view-options\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input\
      \ } from \\\"@/components/ui/input\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\n\\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n}\\n\\nexport function DataTableToolbar<TData>({\\\
      n  table,\\n  children,\\n  className,\\n  ...props\\n}: DataTableToolbarProps<TData>)\
      \ {\\n  const isFiltered = table.getState().columnFilters.length > 0;\\n\\n\
      \  const columns = React.useMemo(\\n    () => table.getAllColumns().filter((column)\
      \ => column.getCanFilter()),\\n    [table],\\n  );\\n\\n  const onReset = React.useCallback(()\
      \ => {\\n    table.resetColumnFilters();\\n  }, [table]);\\n\\n  return (\\\
      n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\"horizontal\\\
      \"\\n      className={cn(\\n        \\\"flex w-full items-start justify-between\
      \ gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\">\\n \
      \       {columns.map((column) => (\\n          <DataTableToolbarFilter key={column.id}\
      \ column={column} />\\n        ))}\\n        {isFiltered && (\\n          <Button\\\
      n            aria-label=\\\"Reset filters\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"sm\\\"\\n            className=\\\"border-dashed\\\
      \"\\n            onClick={onReset}\\n          >\\n            <X />\\n    \
      \        Reset\\n          </Button>\\n        )}\\n      </div>\\n      <div\
      \ className=\\\"flex items-center gap-2\\\">\\n        {children}\\n       \
      \ <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\n  );\\\
      n}\\ninterface DataTableToolbarFilterProps<TData> {\\n  column: Column<TData>;\\\
      n}\\n\\nfunction DataTableToolbarFilter<TData>({\\n  column,\\n}: DataTableToolbarFilterProps<TData>)\
      \ {\\n  {\\n    const columnMeta = column.columnDef.meta;\\n\\n    const onFilterRender\
      \ = React.useCallback(() => {\\n      if (!columnMeta?.variant) return null;\\\
      n\\n      switch (columnMeta.variant) {\\n        case \\\"text\\\":\\n    \
      \      return (\\n            <Input\\n              placeholder={columnMeta.placeholder\
      \ ?? columnMeta.label}\\n              value={(column.getFilterValue() as string)\
      \ ?? \\\"\\\"}\\n              onChange={(event) => column.setFilterValue(event.target.value)}\\\
      n              className=\\\"h-8 w-40 lg:w-56\\\"\\n            />\\n      \
      \    );\\n\\n        case \\\"number\\\":\\n          return (\\n          \
      \  <div className=\\\"relative\\\">\\n              <Input\\n              \
      \  type=\\\"number\\\"\\n                inputMode=\\\"numeric\\\"\\n      \
      \          placeholder={columnMeta.placeholder ?? columnMeta.label}\\n     \
      \           value={(column.getFilterValue() as string) ?? \\\"\\\"}\\n     \
      \           onChange={(event) => column.setFilterValue(event.target.value)}\\\
      n                className={cn(\\\"h-8 w-[120px]\\\", columnMeta.unit && \\\"\
      pr-8\\\")}\\n              />\\n              {columnMeta.unit && (\\n     \
      \           <span className=\\\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\">\\n        \
      \          {columnMeta.unit}\\n                </span>\\n              )}\\\
      n            </div>\\n          );\\n\\n        case \\\"range\\\":\\n     \
      \     return (\\n            <DataTableSliderFilter\\n              column={column}\\\
      n              title={columnMeta.label ?? column.id}\\n            />\\n   \
      \       );\\n\\n        case \\\"date\\\":\\n        case \\\"dateRange\\\"\
      :\\n          return (\\n            <DataTableDateFilter\\n              column={column}\\\
      n              title={columnMeta.label ?? column.id}\\n              multiple={columnMeta.variant\
      \ === \\\"dateRange\\\"}\\n            />\\n          );\\n\\n        case \\\
      \"select\\\":\\n        case \\\"multiSelect\\\":\\n          return (\\n  \
      \          <DataTableFacetedFilter\\n              column={column}\\n      \
      \        title={columnMeta.label ?? column.id}\\n              options={columnMeta.options\
      \ ?? []}\\n              multiple={columnMeta.variant === \\\"multiSelect\\\"\
      }\\n            />\\n          );\\n\\n        default:\\n          return null;\\\
      n      }\\n    }, [column, columnMeta]);\\n\\n    return onFilterRender();\\\
      n  }\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n \
      \      \"path\": \"src/components/data-table-slider-filter.tsx\",\n-      \"\
      content\": \"\\\"use client\\\";\\n\\nimport type { Column } from \\\"@tanstack/react-table\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport { Label } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\\
      n  PopoverContent,\\n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\
      \";\\nimport { Separator } from \\\"@/components/ui/separator\\\";\\nimport\
      \ { Slider } from \\\"@/components/ui/slider\\\";\\nimport { PlusCircle, Settings2,\
      \ XCircle } from \\\"lucide-react\\\";\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\nexport\
      \ function DataTableSliderFilter<TData>({\\n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>)\
      \ {\\n  const id = React.useId();\\n  const columnFilterValue = column.getFilterValue()\
      \ as\\n    | [number, number]\\n    | undefined;\\n\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const [range, setRange] = React.useState<[number, number]>(\\\
      n    columnFilterValue ?? [min, max],\\n  );\\n\\n  const onRangeChange = React.useCallback(\\\
      n    (values: [number, number]) => {\\n      setRange(values);\\n      column.setFilterValue(values);\\\
      n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\n\
      \    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    setRange([min, max]);\\n      column.setFilterValue(undefined);\\n    },\\\
      n    [column, min, max],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              role=\\\"button\\\"\\n              aria-label={`Clear ${title}\
      \ filter`}\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"text\\\"\\n                aria-valuemin={min}\\n\
      \                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue >= min &&\\n  \
      \                  numValue <= range[1]\\n                  ) {\\n         \
      \           onRangeChange([numValue, range[1]]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n            <Label\
      \ htmlFor={`${id}-to`} className=\\\"sr-only\\\">\\n              to\\n    \
      \        </Label>\\n            <div className=\\\"relative\\\">\\n        \
      \      <Input\\n                id={`${id}-to`}\\n                type=\\\"\
      text\\\"\\n                aria-valuemin={min}\\n                aria-valuemax={max}\\\
      n                inputMode=\\\"numeric\\\"\\n                pattern=\\\"[0-9]*\\\
      \"\\n                placeholder={max.toString()}\\n                min={min}\\\
      n                max={max}\\n                value={range[1].toString()}\\n\
      \                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue <= max &&\\n  \
      \                  numValue >= range[0]\\n                  ) {\\n         \
      \           onRangeChange([range[0], numValue]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n          </div>\\\
      n          <Slider\\n            aria-label=\\\"Select range\\\"\\n        \
      \    min={min}\\n            max={max}\\n            value={range}\\n      \
      \      onValueChange={(value) => setRange(value as [number, number])}\\n   \
      \         onValueCommit={(value) => onRangeChange(value as [number, number])}\\\
      n            className=\\\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\\\"\\\
      n          />\\n        </div>\\n        <Button\\n          aria-label=\\\"\
      Reset range filter\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\
      \"sm\\\"\\n          onClick={onReset}\\n          className=\\\"px-3 text-xs\\\
      \"\\n        >\\n          Reset\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\\
      n\\nimport type { Column } from \\\"@tanstack/react-table\\\";\\nimport * as\
      \ React from \\\"react\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { Label\
      \ } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { Slider } from \\\"@/components/ui/slider\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { PlusCircle, Settings2,\
      \ XCircle } from \\\"lucide-react\\\";\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\nexport\
      \ function DataTableSliderFilter<TData>({\\n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>)\
      \ {\\n  const id = React.useId();\\n  const columnFilterValue = column.getFilterValue()\
      \ as\\n    | [number, number]\\n    | undefined;\\n\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const [range, setRange] = React.useState<[number, number]>(\\\
      n    columnFilterValue ?? [min, max],\\n  );\\n\\n  const onRangeChange = React.useCallback(\\\
      n    (values: [number, number]) => {\\n      setRange(values);\\n      column.setFilterValue(values);\\\
      n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\n\
      \    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    setRange([min, max]);\\n      column.setFilterValue(undefined);\\n    },\\\
      n    [column, min, max],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              role=\\\"button\\\"\\n              aria-label={`Clear ${title}\
      \ filter`}\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"number\\\"\\n                aria-valuemin={min}\\\
      n                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue >= min &&\\n  \
      \                  numValue <= range[1]\\n                  ) {\\n         \
      \           onRangeChange([numValue, range[1]]);\\n                  }\\n  \
      \              }}\\n                className={cn(\\\"h-8 w-24\\\", unit &&\
      \ \\\"pr-8\\\")}\\n              />\\n              {unit && (\\n          \
      \      <span className=\\\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\">\\n        \
      \          {unit}\\n                </span>\\n              )}\\n          \
      \  </div>\\n            <Label htmlFor={`${id}-to`} className=\\\"sr-only\\\"\
      >\\n              to\\n            </Label>\\n            <div className=\\\"\
      relative\\\">\\n              <Input\\n                id={`${id}-to`}\\n  \
      \              type=\\\"number\\\"\\n                aria-valuemin={min}\\n\
      \                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={max.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[1].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue <= max &&\\n  \
      \                  numValue >= range[0]\\n                  ) {\\n         \
      \           onRangeChange([range[0], numValue]);\\n                  }\\n  \
      \              }}\\n                className={cn(\\\"h-8 w-24\\\", unit &&\
      \ \\\"pr-8\\\")}\\n              />\\n              {unit && (\\n          \
      \      <span className=\\\"absolute top-0 right-0 bottom-0 flex items-center\
      \ rounded-r-md bg-accent px-2 text-muted-foreground text-sm\\\">\\n        \
      \          {unit}\\n                </span>\\n              )}\\n          \
      \  </div>\\n          </div>\\n          <Slider\\n            aria-label=\\\
      \"Select range\\\"\\n            min={min}\\n            max={max}\\n      \
      \      value={range}\\n            onValueChange={(value) => setRange(value\
      \ as [number, number])}\\n            onValueCommit={(value) => onRangeChange(value\
      \ as [number, number])}\\n            className=\\\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\\\
      \"\\n          />\\n        </div>\\n        <Button\\n          aria-label=\\\
      \"Reset range filter\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\
      \"sm\\\"\\n          onClick={onReset}\\n          className=\\\"px-3 text-xs\\\
      \"\\n        >\\n          Reset\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n\
      \     },\n     {\ndiff --git a/src/components/data-table-slider-filter.tsx b/src/components/data-table-slider-filter.tsx\n\
      index c69e4c7..e2fb97d 100644\n--- a/src/components/data-table-slider-filter.tsx\n\
      +++ b/src/components/data-table-slider-filter.tsx\n@@ -13,6 +13,7 @@ import\
      \ {\n } from \"@/components/ui/popover\";\n import { Separator } from \"@/components/ui/separator\"\
      ;\n import { Slider } from \"@/components/ui/slider\";\n+import { cn } from\
      \ \"@/lib/utils\";\n import { PlusCircle, Settings2, XCircle } from \"lucide-react\"\
      ;\n \n interface DataTableSliderFilterProps<TData> {\n@@ -111,7 +112,7 @@ export\
      \ function DataTableSliderFilter<TData>({\n             <div className=\"relative\"\
      >\n               <Input\n                 id={`${id}-from`}\n-            \
      \    type=\"text\"\n+                type=\"number\"\n                 aria-valuemin={min}\n\
      \                 aria-valuemax={max}\n                 inputMode=\"numeric\"\
      \n@@ -130,7 +131,7 @@ export function DataTableSliderFilter<TData>({\n     \
      \                onRangeChange([numValue, range[1]]);\n                   }\n\
      \                 }}\n-                className=\"h-8 w-24 pr-8\"\n+      \
      \          className={cn(\"h-8 w-24\", unit && \"pr-8\")}\n               />\n\
      \               {unit && (\n                 <span className=\"absolute top-0\
      \ right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground\
      \ text-sm\">\n@@ -144,7 +145,7 @@ export function DataTableSliderFilter<TData>({\n\
      \             <div className=\"relative\">\n               <Input\n        \
      \         id={`${id}-to`}\n-                type=\"text\"\n+               \
      \ type=\"number\"\n                 aria-valuemin={min}\n                 aria-valuemax={max}\n\
      \                 inputMode=\"numeric\"\n@@ -163,7 +164,7 @@ export function\
      \ DataTableSliderFilter<TData>({\n                     onRangeChange([range[0],\
      \ numValue]);\n                   }\n                 }}\n-                className=\"\
      h-8 w-24 pr-8\"\n+                className={cn(\"h-8 w-24\", unit && \"pr-8\"\
      )}\n               />\n               {unit && (\n                 <span className=\"\
      absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\">\ndiff --git a/src/components/data-table-toolbar.tsx\
      \ b/src/components/data-table-toolbar.tsx\nindex 7329c0b..4af5830 100644\n---\
      \ a/src/components/data-table-toolbar.tsx\n+++ b/src/components/data-table-toolbar.tsx\n\
      @@ -82,10 +82,8 @@ function DataTableToolbarFilter<TData>({\n \n       switch\
      \ (columnMeta.variant) {\n         case \"text\":\n-        case \"number\"\
      :\n           return (\n             <Input\n-              type={columnMeta.variant}\n\
      \               placeholder={columnMeta.placeholder ?? columnMeta.label}\n \
      \              value={(column.getFilterValue() as string) ?? \"\"}\n       \
      \        onChange={(event) => column.setFilterValue(event.target.value)}\n@@\
      \ -93,6 +91,25 @@ function DataTableToolbarFilter<TData>({\n             />\n\
      \           );\n \n+        case \"number\":\n+          return (\n+       \
      \     <div className=\"relative\">\n+              <Input\n+               \
      \ type=\"number\"\n+                inputMode=\"numeric\"\n+               \
      \ placeholder={columnMeta.placeholder ?? columnMeta.label}\n+              \
      \  value={(column.getFilterValue() as string) ?? \"\"}\n+                onChange={(event)\
      \ => column.setFilterValue(event.target.value)}\n+                className={cn(\"\
      h-8 w-[120px]\", columnMeta.unit && \"pr-8\")}\n+              />\n+       \
      \       {columnMeta.unit && (\n+                <span className=\"absolute top-0\
      \ right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground\
      \ text-sm\">\n+                  {columnMeta.unit}\n+                </span>\n\
      +              )}\n+            </div>\n+          );\n+\n         case \"range\"\
      :\n           return (\n             <DataTableSliderFilter\ndiff --git a/src/components/layouts/site-header.tsx\
      \ b/src/components/layouts/site-header.tsx\nindex 5479e0f..ec5fd32 100644\n\
      --- a/src/components/layouts/site-header.tsx\n+++ b/src/components/layouts/site-header.tsx\n\
      @@ -18,7 +18,7 @@ export function SiteHeader() {\n         </Link>\n       \
      \  <nav className=\"flex w-full items-center gap-6 text-sm\">\n           <Link\n\
      -            href=\"https://diceui.com/docs/data-table\"\n+            href=\"\
      https://diceui.com/docs/components/data-table\"\n             target=\"_blank\"\
      \n             rel=\"noopener noreferrer\"\n             className=\"text-foreground/60\
      \ transition-colors hover:text-foreground\""
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: sync registry (#957)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table-filter-list.json b/public/r/data-table-filter-list.json\n\
      index c1ac1df..a952d35 100644\n--- a/public/r/data-table-filter-list.json\n\
      +++ b/public/r/data-table-filter-list.json\n@@ -7,6 +7,7 @@\n   \"dependencies\"\
      : [\n     \"@tanstack/react-table\",\n     \"lucide-react\",\n+    \"nanoid\"\
      ,\n     \"nuqs\"\n   ],\n   \"registryDependencies\": [\n@@ -41,7 +42,7 @@\n\
      \     },\n     {\n       \"path\": \"src/components/ui/faceted.tsx\",\n-   \
      \   \"content\": \"\\\"use client\\\";\\n\\nimport { Check, ChevronsUpDown }\
      \ from \\\"lucide-react\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport\
      \ { Badge } from \\\"@/components/ui/badge\\\";\\nimport {\\n  Command,\\n \
      \ CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\n  CommandList,\\\
      n  CommandSeparator,\\n} from \\\"@/components/ui/command\\\";\\nimport {\\\
      n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\nconst FACETED_NAME = \\\"\
      Faceted\\\";\\nconst TRIGGER_NAME = \\\"FacetedTrigger\\\";\\nconst BADGE_LIST_NAME\
      \ = \\\"FacetedBadgeList\\\";\\nconst CONTENT_NAME = \\\"FacetedContent\\\"\
      ;\\nconst INPUT_NAME = \\\"FacetedInput\\\";\\nconst LIST_NAME = \\\"FacetedList\\\
      \";\\nconst EMPTY_NAME = \\\"FacetedEmpty\\\";\\nconst GROUP_NAME = \\\"FacetedGroup\\\
      \";\\nconst ITEM_NAME = \\\"FacetedItem\\\";\\nconst SEPARATOR_NAME = \\\"FacetedSeparator\\\
      \";\\n\\nconst ERRORS = {\\n  [FACETED_NAME]: `\\\\`${FACETED_NAME}\\\\` must\
      \ be used as root component`,\\n  [TRIGGER_NAME]: `\\\\`${TRIGGER_NAME}\\\\\
      ` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [BADGE_LIST_NAME]: `\\\\`${BADGE_LIST_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [INPUT_NAME]: `\\\\`${INPUT_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [LIST_NAME]: `\\\\`${LIST_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [EMPTY_NAME]: `\\\\`${EMPTY_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [GROUP_NAME]: `\\\\`${GROUP_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [SEPARATOR_NAME]: `\\\\`${SEPARATOR_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n};\\n\\ntype FacetedValue<Multiple\
      \ extends boolean> = Multiple extends true\\n  ? string[]\\n  : string;\\n\\\
      ninterface FacetedContextValue<Multiple extends boolean = boolean> {\\n  value?:\
      \ FacetedValue<Multiple>;\\n  onItemSelect?: (value: string) => void;\\n  multiple?:\
      \ Multiple;\\n}\\n\\nconst FacetedContext = React.createContext<FacetedContextValue<boolean>\
      \ | null>(\\n  null,\\n);\\n\\nfunction useFacetedContext(name: keyof typeof\
      \ ERRORS) {\\n  const context = React.useContext(FacetedContext);\\n  if (!context)\
      \ {\\n    throw new Error(ERRORS[name]);\\n  }\\n  return context;\\n}\\n\\\
      ninterface FacetedProps<Multiple extends boolean = false>\\n  extends React.ComponentProps<typeof\
      \ Popover> {\\n  value?: FacetedValue<Multiple>;\\n  onValueChange?: (value:\
      \ FacetedValue<Multiple> | undefined) => void;\\n  children?: React.ReactNode;\\\
      n  multiple?: Multiple;\\n}\\n\\nfunction Faceted<Multiple extends boolean =\
      \ false>(\\n  props: FacetedProps<Multiple>,\\n) {\\n  const {\\n    open: openProp,\\\
      n    onOpenChange: onOpenChangeProp,\\n    value,\\n    onValueChange,\\n  \
      \  children,\\n    multiple = false,\\n    ...facetedProps\\n  } = props;\\\
      n\\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);\\\
      n  const isControlled = openProp !== undefined;\\n  const open = isControlled\
      \ ? openProp : uncontrolledOpen;\\n\\n  const onOpenChange = React.useCallback(\\\
      n    (newOpen: boolean) => {\\n      if (!isControlled) {\\n        setUncontrolledOpen(newOpen);\\\
      n      }\\n      onOpenChangeProp?.(newOpen);\\n    },\\n    [isControlled,\
      \ onOpenChangeProp],\\n  );\\n\\n  const onItemSelect = React.useCallback(\\\
      n    (selectedValue: string) => {\\n      if (!onValueChange) return;\\n\\n\
      \      if (multiple) {\\n        const currentValue = (Array.isArray(value)\
      \ ? value : []) as string[];\\n        const newValue = currentValue.includes(selectedValue)\\\
      n          ? currentValue.filter((v) => v !== selectedValue)\\n          : [...currentValue,\
      \ selectedValue];\\n        onValueChange(newValue as FacetedValue<Multiple>);\\\
      n      } else {\\n        if (value === selectedValue) {\\n          onValueChange(undefined);\\\
      n        } else {\\n          onValueChange(selectedValue as FacetedValue<Multiple>);\\\
      n        }\\n\\n        requestAnimationFrame(() => onOpenChange(false));\\\
      n      }\\n    },\\n    [multiple, value, onValueChange, onOpenChange],\\n \
      \ );\\n\\n  const contextValue = React.useMemo<FacetedContextValue<typeof multiple>>(\\\
      n    () => ({ value, onItemSelect, multiple }),\\n    [value, onItemSelect,\
      \ multiple],\\n  );\\n\\n  return (\\n    <FacetedContext.Provider value={contextValue}>\\\
      n      <Popover open={open} onOpenChange={onOpenChange} {...facetedProps}>\\\
      n        {children}\\n      </Popover>\\n    </FacetedContext.Provider>\\n \
      \ );\\n}\\n\\nfunction FacetedTrigger(props: React.ComponentProps<typeof PopoverTrigger>)\
      \ {\\n  const { className, children, ...triggerProps } = props;\\n\\n  return\
      \ (\\n    <PopoverTrigger\\n      {...triggerProps}\\n      className={cn(\\\
      \"justify-between text-left\\\", className)}\\n    >\\n      {children}\\n \
      \   </PopoverTrigger>\\n  );\\n}\\n\\ninterface FacetedBadgeListProps extends\
      \ React.ComponentProps<\\\"div\\\"> {\\n  options?: { label: string; value:\
      \ string }[];\\n  max?: number;\\n  badgeClassName?: string;\\n  placeholder?:\
      \ string;\\n}\\n\\nfunction FacetedBadgeList(props: FacetedBadgeListProps) {\\\
      n  const {\\n    options = [],\\n    max = 2,\\n    placeholder = \\\"Select\
      \ options...\\\",\\n    className,\\n    badgeClassName,\\n    ...badgeListProps\\\
      n  } = props;\\n\\n  const context = useFacetedContext(BADGE_LIST_NAME);\\n\
      \  const values = Array.isArray(context.value)\\n    ? context.value\\n    :\
      \ [context.value].filter(Boolean);\\n\\n  const getLabel = React.useCallback(\\\
      n    (value: string) => {\\n      const option = options.find((opt) => opt.value\
      \ === value);\\n      return option?.label ?? value;\\n    },\\n    [options],\\\
      n  );\\n\\n  if (!values || values.length === 0) {\\n    return (\\n      <div\\\
      n        {...badgeListProps}\\n        className=\\\"flex w-full items-center\
      \ gap-1 text-muted-foreground\\\"\\n      >\\n        {placeholder}\\n     \
      \   <ChevronsUpDown className=\\\"ml-auto size-4 shrink-0 opacity-50\\\" />\\\
      n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div\\n      {...badgeListProps}\\\
      n      className={cn(\\\"flex flex-wrap items-center gap-1\\\", className)}\\\
      n    >\\n      {values.length > max ? (\\n        <Badge\\n          variant=\\\
      \"secondary\\\"\\n          className={cn(\\\"rounded-sm px-1 font-normal\\\"\
      , badgeClassName)}\\n        >\\n          {values.length} selected\\n     \
      \   </Badge>\\n      ) : (\\n        values.map((value) => (\\n          <Badge\\\
      n            key={value}\\n            variant=\\\"secondary\\\"\\n        \
      \    className={cn(\\\"rounded-sm px-1 font-normal\\\", badgeClassName)}\\n\
      \          >\\n            <span className=\\\"truncate\\\">{getLabel(value)}</span>\\\
      n          </Badge>\\n        ))\\n      )}\\n    </div>\\n  );\\n}\\n\\nfunction\
      \ FacetedContent(props: React.ComponentProps<typeof PopoverContent>) {\\n  const\
      \ { className, children, ...contentProps } = props;\\n\\n  return (\\n    <PopoverContent\\\
      n      {...contentProps}\\n      align=\\\"start\\\"\\n      className={cn(\\\
      n        \\\"w-[200px] origin-(--radix-popover-content-transform-origin) p-0\\\
      \",\\n        className,\\n      )}\\n    >\\n      <Command>{children}</Command>\\\
      n    </PopoverContent>\\n  );\\n}\\n\\nconst FacetedInput = CommandInput;\\\
      n\\nconst FacetedList = CommandList;\\n\\nconst FacetedEmpty = CommandEmpty;\\\
      n\\nconst FacetedGroup = CommandGroup;\\n\\ninterface FacetedItemProps extends\
      \ React.ComponentProps<typeof CommandItem> {\\n  value: string;\\n}\\n\\nfunction\
      \ FacetedItem(props: FacetedItemProps) {\\n  const { value, onSelect, className,\
      \ children, ...itemProps } = props;\\n  const context = useFacetedContext(ITEM_NAME);\\\
      n\\n  const isSelected = context.multiple\\n    ? Array.isArray(context.value)\
      \ && context.value.includes(value)\\n    : context.value === value;\\n\\n  const\
      \ onItemSelect = React.useCallback(\\n    (currentValue: string) => {\\n   \
      \   if (onSelect) {\\n        onSelect(currentValue);\\n      } else if (context.onItemSelect)\
      \ {\\n        context.onItemSelect(currentValue);\\n      }\\n    },\\n    [onSelect,\
      \ context.onItemSelect],\\n  );\\n\\n  return (\\n    <CommandItem\\n      aria-selected={isSelected}\\\
      n      data-selected={isSelected}\\n      className={cn(\\\"gap-2\\\", className)}\\\
      n      onSelect={() => onItemSelect(value)}\\n      {...itemProps}\\n    >\\\
      n      <span\\n        className={cn(\\n          \\\"flex size-4 items-center\
      \ justify-center rounded-sm border border-primary\\\",\\n          isSelected\\\
      n            ? \\\"bg-primary text-primary-foreground\\\"\\n            : \\\
      \"opacity-50 [&_svg]:invisible\\\",\\n        )}\\n      >\\n        <Check\
      \ className=\\\"size-4\\\" />\\n      </span>\\n      {children}\\n    </CommandItem>\\\
      n  );\\n}\\n\\nconst FacetedSeparator = CommandSeparator;\\n\\nexport {\\n \
      \ Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\n  FacetedGroup,\\\
      n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedSeparator,\\n\
      \  FacetedTrigger,\\n};\\n\",\n+      \"content\": \"\\\"use client\\\";\\n\\\
      nimport { Check, ChevronsUpDown } from \\\"lucide-react\\\";\\nimport * as React\
      \ from \\\"react\\\";\\n\\nimport { Badge } from \\\"@/components/ui/badge\\\
      \";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\\
      n  CommandItem,\\n  CommandList,\\n  CommandSeparator,\\n} from \\\"@/components/ui/command\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { cn } from \\\"@/lib/utils\\\"\
      ;\\n\\ntype FacetedValue<Multiple extends boolean> = Multiple extends true\\\
      n  ? string[]\\n  : string;\\n\\ninterface FacetedContextValue<Multiple extends\
      \ boolean = boolean> {\\n  value?: FacetedValue<Multiple>;\\n  onItemSelect?:\
      \ (value: string) => void;\\n  multiple?: Multiple;\\n}\\n\\nconst FacetedContext\
      \ = React.createContext<FacetedContextValue<boolean> | null>(\\n  null,\\n);\\\
      n\\nfunction useFacetedContext(name: string) {\\n  const context = React.useContext(FacetedContext);\\\
      n  if (!context) {\\n    throw new Error(`\\\\`${name}\\\\` must be within Faceted`);\\\
      n  }\\n  return context;\\n}\\n\\ninterface FacetedProps<Multiple extends boolean\
      \ = false>\\n  extends React.ComponentProps<typeof Popover> {\\n  value?: FacetedValue<Multiple>;\\\
      n  onValueChange?: (value: FacetedValue<Multiple> | undefined) => void;\\n \
      \ children?: React.ReactNode;\\n  multiple?: Multiple;\\n}\\n\\nfunction Faceted<Multiple\
      \ extends boolean = false>(\\n  props: FacetedProps<Multiple>,\\n) {\\n  const\
      \ {\\n    open: openProp,\\n    onOpenChange: onOpenChangeProp,\\n    value,\\\
      n    onValueChange,\\n    children,\\n    multiple = false,\\n    ...facetedProps\\\
      n  } = props;\\n\\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);\\\
      n  const isControlled = openProp !== undefined;\\n  const open = isControlled\
      \ ? openProp : uncontrolledOpen;\\n\\n  const onOpenChange = React.useCallback(\\\
      n    (newOpen: boolean) => {\\n      if (!isControlled) {\\n        setUncontrolledOpen(newOpen);\\\
      n      }\\n      onOpenChangeProp?.(newOpen);\\n    },\\n    [isControlled,\
      \ onOpenChangeProp],\\n  );\\n\\n  const onItemSelect = React.useCallback(\\\
      n    (selectedValue: string) => {\\n      if (!onValueChange) return;\\n\\n\
      \      if (multiple) {\\n        const currentValue = (Array.isArray(value)\
      \ ? value : []) as string[];\\n        const newValue = currentValue.includes(selectedValue)\\\
      n          ? currentValue.filter((v) => v !== selectedValue)\\n          : [...currentValue,\
      \ selectedValue];\\n        onValueChange(newValue as FacetedValue<Multiple>);\\\
      n      } else {\\n        if (value === selectedValue) {\\n          onValueChange(undefined);\\\
      n        } else {\\n          onValueChange(selectedValue as FacetedValue<Multiple>);\\\
      n        }\\n\\n        requestAnimationFrame(() => onOpenChange(false));\\\
      n      }\\n    },\\n    [multiple, value, onValueChange, onOpenChange],\\n \
      \ );\\n\\n  const contextValue = React.useMemo<FacetedContextValue<typeof multiple>>(\\\
      n    () => ({ value, onItemSelect, multiple }),\\n    [value, onItemSelect,\
      \ multiple],\\n  );\\n\\n  return (\\n    <FacetedContext.Provider value={contextValue}>\\\
      n      <Popover open={open} onOpenChange={onOpenChange} {...facetedProps}>\\\
      n        {children}\\n      </Popover>\\n    </FacetedContext.Provider>\\n \
      \ );\\n}\\n\\nfunction FacetedTrigger(props: React.ComponentProps<typeof PopoverTrigger>)\
      \ {\\n  const { className, children, ...triggerProps } = props;\\n\\n  return\
      \ (\\n    <PopoverTrigger\\n      {...triggerProps}\\n      className={cn(\\\
      \"justify-between text-left\\\", className)}\\n    >\\n      {children}\\n \
      \   </PopoverTrigger>\\n  );\\n}\\n\\ninterface FacetedBadgeListProps extends\
      \ React.ComponentProps<\\\"div\\\"> {\\n  options?: { label: string; value:\
      \ string }[];\\n  max?: number;\\n  badgeClassName?: string;\\n  placeholder?:\
      \ string;\\n}\\n\\nfunction FacetedBadgeList(props: FacetedBadgeListProps) {\\\
      n  const {\\n    options = [],\\n    max = 2,\\n    placeholder = \\\"Select\
      \ options...\\\",\\n    className,\\n    badgeClassName,\\n    ...badgeListProps\\\
      n  } = props;\\n\\n  const context = useFacetedContext(\\\"FacetedBadgeList\\\
      \");\\n  const values = Array.isArray(context.value)\\n    ? context.value\\\
      n    : ([context.value].filter(Boolean) as string[]);\\n\\n  const getLabel\
      \ = React.useCallback(\\n    (value: string) => {\\n      const option = options.find((opt)\
      \ => opt.value === value);\\n      return option?.label ?? value;\\n    },\\\
      n    [options],\\n  );\\n\\n  if (!values || values.length === 0) {\\n    return\
      \ (\\n      <div\\n        {...badgeListProps}\\n        className=\\\"flex\
      \ w-full items-center gap-1 text-muted-foreground\\\"\\n      >\\n        {placeholder}\\\
      n        <ChevronsUpDown className=\\\"ml-auto size-4 shrink-0 opacity-50\\\"\
      \ />\\n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div\\n      {...badgeListProps}\\\
      n      className={cn(\\\"flex flex-wrap items-center gap-1\\\", className)}\\\
      n    >\\n      {values.length > max ? (\\n        <Badge\\n          variant=\\\
      \"secondary\\\"\\n          className={cn(\\\"rounded-sm px-1 font-normal\\\"\
      , badgeClassName)}\\n        >\\n          {values.length} selected\\n     \
      \   </Badge>\\n      ) : (\\n        values.map((value) => (\\n          <Badge\\\
      n            key={value}\\n            variant=\\\"secondary\\\"\\n        \
      \    className={cn(\\\"rounded-sm px-1 font-normal\\\", badgeClassName)}\\n\
      \          >\\n            <span className=\\\"truncate\\\">{getLabel(value)}</span>\\\
      n          </Badge>\\n        ))\\n      )}\\n    </div>\\n  );\\n}\\n\\nfunction\
      \ FacetedContent(props: React.ComponentProps<typeof PopoverContent>) {\\n  const\
      \ { className, children, ...contentProps } = props;\\n\\n  return (\\n    <PopoverContent\\\
      n      {...contentProps}\\n      align=\\\"start\\\"\\n      className={cn(\\\
      n        \\\"w-[200px] origin-(--radix-popover-content-transform-origin) p-0\\\
      \",\\n        className,\\n      )}\\n    >\\n      <Command>{children}</Command>\\\
      n    </PopoverContent>\\n  );\\n}\\n\\nconst FacetedInput = CommandInput;\\\
      n\\nconst FacetedList = CommandList;\\n\\nconst FacetedEmpty = CommandEmpty;\\\
      n\\nconst FacetedGroup = CommandGroup;\\n\\ninterface FacetedItemProps extends\
      \ React.ComponentProps<typeof CommandItem> {\\n  value: string;\\n}\\n\\nfunction\
      \ FacetedItem(props: FacetedItemProps) {\\n  const { value, onSelect, className,\
      \ children, ...itemProps } = props;\\n  const context = useFacetedContext(\\\
      \"FacetedItem\\\");\\n\\n  const isSelected = context.multiple\\n    ? Array.isArray(context.value)\
      \ && context.value.includes(value)\\n    : context.value === value;\\n\\n  const\
      \ onItemSelect = React.useCallback(\\n    (currentValue: string) => {\\n   \
      \   if (onSelect) {\\n        onSelect(currentValue);\\n      } else if (context.onItemSelect)\
      \ {\\n        context.onItemSelect(currentValue);\\n      }\\n    },\\n    [onSelect,\
      \ context.onItemSelect],\\n  );\\n\\n  return (\\n    <CommandItem\\n      aria-selected={isSelected}\\\
      n      data-selected={isSelected}\\n      className={cn(\\\"gap-2\\\", className)}\\\
      n      onSelect={() => onItemSelect(value)}\\n      {...itemProps}\\n    >\\\
      n      <span\\n        className={cn(\\n          \\\"flex size-4 items-center\
      \ justify-center rounded-sm border border-primary\\\",\\n          isSelected\\\
      n            ? \\\"bg-primary text-primary-foreground\\\"\\n            : \\\
      \"opacity-50 [&_svg]:invisible\\\",\\n        )}\\n      >\\n        <Check\
      \ className=\\\"size-4\\\" />\\n      </span>\\n      {children}\\n    </CommandItem>\\\
      n  );\\n}\\n\\nconst FacetedSeparator = CommandSeparator;\\n\\nexport {\\n \
      \ Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\n  FacetedGroup,\\\
      n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedSeparator,\\n\
      \  FacetedTrigger,\\n};\\n\",\n       \"type\": \"registry:ui\"\n     },\n \
      \    {\ndiff --git a/public/r/data-table-filter-menu.json b/public/r/data-table-filter-menu.json\n\
      index 1ea3cd4..f1409b1 100644\n--- a/public/r/data-table-filter-menu.json\n\
      +++ b/public/r/data-table-filter-menu.json\n@@ -8,6 +8,7 @@\n     \"@tanstack/react-table\"\
      ,\n     \"lucide-react\",\n     \"motion\",\n+    \"nanoid\",\n     \"nuqs\"\
      \n   ],\n   \"registryDependencies\": [\ndiff --git a/public/r/data-table.json\
      \ b/public/r/data-table.json\nindex 7510fb1..d5e2a73 100644\n--- a/public/r/data-table.json\n\
      +++ b/public/r/data-table.json\n@@ -19,6 +19,7 @@\n     \"popover\",\n     \"\
      select\",\n     \"separator\",\n+    \"slider\",\n     \"table\"\n   ],\n  \
      \ \"files\": [\ndiff --git a/registry.json b/registry.json\nindex 4e0c3c1..0534297\
      \ 100644\n--- a/registry.json\n+++ b/registry.json\n@@ -18,6 +18,7 @@\n    \
      \     \"popover\",\n         \"select\",\n         \"separator\",\n+       \
      \ \"slider\",\n         \"table\"\n       ],\n       \"dependencies\": [\"@tanstack/react-table\"\
      , \"lucide-react\", \"nuqs\"],\n@@ -160,7 +161,12 @@\n         \"popover\",\n\
      \         \"select\"\n       ],\n-      \"dependencies\": [\"@tanstack/react-table\"\
      , \"lucide-react\", \"nuqs\"],\n+      \"dependencies\": [\n+        \"@tanstack/react-table\"\
      ,\n+        \"lucide-react\",\n+        \"nanoid\",\n+        \"nuqs\"\n+  \
      \    ],\n       \"files\": [\n         {\n           \"path\": \"src/components/data-table-filter-list.tsx\"\
      ,\n@@ -240,6 +246,7 @@\n         \"@tanstack/react-table\",\n         \"lucide-react\"\
      ,\n         \"motion\",\n+        \"nanoid\",\n         \"nuqs\"\n       ],\n\
      \       \"files\": [\n@@ -290,19 +297,6 @@\n           \"target\": \"src/types/data-table.ts\"\
      \n         }\n       ]\n-    },\n-    {\n-      \"name\": \"data-table-ts-doc\"\
      ,\n-      \"type\": \"registry:file\",\n-      \"title\": \"Data Table TypeScript\
      \ Doc\",\n-      \"description\": \"A TypeScript doc for the data table\",\n\
      -      \"files\": [\n-        {\n-          \"path\": \"src/types/doc.ts\",\n\
      -          \"type\": \"registry:file\",\n-          \"target\": \"src/types/doc.ts\"\
      \n-        }\n-      ]\n     }\n   ]\n }\ndiff --git a/src/components/ui/faceted.tsx\
      \ b/src/components/ui/faceted.tsx\nindex 770d75b..eb12ff7 100644\n--- a/src/components/ui/faceted.tsx\n\
      +++ b/src/components/ui/faceted.tsx\n@@ -20,30 +20,6 @@ import {\n } from \"\
      @/components/ui/popover\";\n import { cn } from \"@/lib/utils\";\n \n-const\
      \ FACETED_NAME = \"Faceted\";\n-const TRIGGER_NAME = \"FacetedTrigger\";\n-const\
      \ BADGE_LIST_NAME = \"FacetedBadgeList\";\n-const CONTENT_NAME = \"FacetedContent\"\
      ;\n-const INPUT_NAME = \"FacetedInput\";\n-const LIST_NAME = \"FacetedList\"\
      ;\n-const EMPTY_NAME = \"FacetedEmpty\";\n-const GROUP_NAME = \"FacetedGroup\"\
      ;\n-const ITEM_NAME = \"FacetedItem\";\n-const SEPARATOR_NAME = \"FacetedSeparator\"\
      ;\n-\n-const ERRORS = {\n-  [FACETED_NAME]: `\\`${FACETED_NAME}\\` must be used\
      \ as root component`,\n-  [TRIGGER_NAME]: `\\`${TRIGGER_NAME}\\` must be within\
      \ \\`${FACETED_NAME}\\``,\n-  [BADGE_LIST_NAME]: `\\`${BADGE_LIST_NAME}\\` must\
      \ be within \\`${FACETED_NAME}\\``,\n-  [CONTENT_NAME]: `\\`${CONTENT_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [INPUT_NAME]: `\\`${INPUT_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [LIST_NAME]: `\\`${LIST_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [EMPTY_NAME]: `\\`${EMPTY_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [GROUP_NAME]: `\\`${GROUP_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [ITEM_NAME]: `\\`${ITEM_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-  [SEPARATOR_NAME]: `\\`${SEPARATOR_NAME}\\\
      ` must be within \\`${FACETED_NAME}\\``,\n-};\n-\n type FacetedValue<Multiple\
      \ extends boolean> = Multiple extends true\n   ? string[]\n   : string;\n@@\
      \ -58,10 +34,10 @@ const FacetedContext = React.createContext<FacetedContextValue<boolean>\
      \ | null>(\n   null,\n );\n \n-function useFacetedContext(name: keyof typeof\
      \ ERRORS) {\n+function useFacetedContext(name: string) {\n   const context =\
      \ React.useContext(FacetedContext);\n   if (!context) {\n-    throw new Error(ERRORS[name]);\n\
      +    throw new Error(`\\`${name}\\` must be within Faceted`);\n   }\n   return\
      \ context;\n }\n@@ -168,10 +144,10 @@ function FacetedBadgeList(props: FacetedBadgeListProps)\
      \ {\n     ...badgeListProps\n   } = props;\n \n-  const context = useFacetedContext(BADGE_LIST_NAME);\n\
      +  const context = useFacetedContext(\"FacetedBadgeList\");\n   const values\
      \ = Array.isArray(context.value)\n     ? context.value\n-    : [context.value].filter(Boolean);\n\
      +    : ([context.value].filter(Boolean) as string[]);\n \n   const getLabel\
      \ = React.useCallback(\n     (value: string) => {\n@@ -251,7 +227,7 @@ interface\
      \ FacetedItemProps extends React.ComponentProps<typeof CommandItem> {\n \n function\
      \ FacetedItem(props: FacetedItemProps) {\n   const { value, onSelect, className,\
      \ children, ...itemProps } = props;\n-  const context = useFacetedContext(ITEM_NAME);\n\
      +  const context = useFacetedContext(\"FacetedItem\");\n \n   const isSelected\
      \ = context.multiple\n     ? Array.isArray(context.value) && context.value.includes(value)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'chore: add fallback (#956)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table-filter-list.json b/public/r/data-table-filter-list.json\n\
      index 77d66c0..c1ac1df 100644\n--- a/public/r/data-table-filter-list.json\n\
      +++ b/public/r/data-table-filter-list.json\n@@ -76,7 +76,7 @@\n     },\n   \
      \  {\n       \"path\": \"src/lib/parsers.ts\",\n-      \"content\": \"import\
      \ { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\"zod\\\"\
      ;\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\";\\n\\nimport\
      \ type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from \\\"@/types/data-table\\\
      \";\\n\\nconst sortingItemSchema = z.object({\\n  id: z.string(),\\n  desc:\
      \ z.boolean(),\\n});\\n\\nexport const getSortingStateParser = <TData>(\\n \
      \ columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\\
      n    ? columnIds instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\\
      n    : null;\\n\\n  return createParser({\\n    parse: (value) => {\\n     \
      \ try {\\n        const parsed = JSON.parse(value);\\n        const result =\
      \ z.array(sortingItemSchema).safeParse(parsed);\\n\\n        if (!result.success)\
      \ return null;\\n\\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id)))\
      \ {\\n          return null;\\n        }\\n\\n        return result.data as\
      \ ExtendedColumnSort<TData>[];\\n      } catch {\\n        return null;\\n \
      \     }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\n    eq:\
      \ (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n        (item,\
      \ index) =>\\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\\\
      n      ),\\n  });\\n};\\n\\nconst filterSchema = z.object({\\n  id: z.string(),\\\
      n  value: z.union([z.string(), z.array(z.string())]),\\n  variant: z.enum(dataTableConfig.filterVariants),\\\
      n  operator: z.enum(dataTableConfig.operators),\\n  filterId: z.string(),\\\
      n});\\n\\nexport type FilterSchema = z.infer<typeof filterSchema>;\\n\\nexport\
      \ const getFiltersStateParser = <TData>(\\n  columnIds?: string[] | Set<string>,\\\
      n) => {\\n  const validKeys = columnIds\\n    ? columnIds instanceof Set\\n\
      \      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\n\\n  return\
      \ createParser({\\n    parse: (value) => {\\n      try {\\n        const parsed\
      \ = JSON.parse(value);\\n        const result = z.array(filterSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnFilter<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (filter, index) =>\\n          filter.id\
      \ === b[index]?.id &&\\n          filter.value === b[index]?.value &&\\n   \
      \       filter.variant === b[index]?.variant &&\\n          filter.operator\
      \ === b[index]?.operator,\\n      ),\\n  });\\n};\\n\",\n+      \"content\"\
      : \"import { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\
      \"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\"\
      ;\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from\
      \ \\\"@/types/data-table\\\";\\n\\nconst sortingItemSchema = z.object({\\n \
      \ id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport const getSortingStateParser\
      \ = <TData>(\\n  columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys\
      \ = columnIds\\n    ? columnIds instanceof Set\\n      ? columnIds\\n      :\
      \ new Set(columnIds)\\n    : null;\\n\\n  return createParser({\\n    parse:\
      \ (value) => {\\n      try {\\n        const parsed = JSON.parse(value);\\n\
      \        const result = z.array(sortingItemSchema).safeParse(parsed);\\n\\n\
      \        if (!result.success) return null;\\n\\n        if (validKeys && result.data.some((item)\
      \ => !validKeys.has(item.id))) {\\n          return null;\\n        }\\n\\n\
      \        return result.data as ExtendedColumnSort<TData>[];\\n      } catch\
      \ {\\n        return null;\\n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\\
      n    eq: (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n    \
      \    (item, index) =>\\n          item.id === b[index]?.id && item.desc ===\
      \ b[index]?.desc,\\n      ),\\n  });\\n};\\n\\nconst filterItemSchema = z.object({\\\
      n  id: z.string(),\\n  value: z.union([z.string(), z.array(z.string())]),\\\
      n  variant: z.enum(dataTableConfig.filterVariants),\\n  operator: z.enum(dataTableConfig.operators),\\\
      n  filterId: z.string(),\\n});\\n\\nexport type FilterItemSchema = z.infer<typeof\
      \ filterItemSchema>;\\n\\nexport const getFiltersStateParser = <TData>(\\n \
      \ columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\\
      n    ? columnIds instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\\
      n    : null;\\n\\n  return createParser({\\n    parse: (value) => {\\n     \
      \ try {\\n        const parsed = JSON.parse(value);\\n        const result =\
      \ z.array(filterItemSchema).safeParse(parsed);\\n\\n        if (!result.success)\
      \ return null;\\n\\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id)))\
      \ {\\n          return null;\\n        }\\n\\n        return result.data as\
      \ ExtendedColumnFilter<TData>[];\\n      } catch {\\n        return null;\\\
      n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\n    eq:\
      \ (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n        (filter,\
      \ index) =>\\n          filter.id === b[index]?.id &&\\n          filter.value\
      \ === b[index]?.value &&\\n          filter.variant === b[index]?.variant &&\\\
      n          filter.operator === b[index]?.operator,\\n      ),\\n  });\\n};\\\
      n\",\n       \"type\": \"registry:lib\"\n     },\n     {\n@@ -87,7 +87,7 @@\n\
      \     },\n     {\n       \"path\": \"src/types/data-table.ts\",\n-      \"content\"\
      : \"import type { DataTableConfig } from \\\"@/config/data-table\\\";\\nimport\
      \ type { FilterSchema } from \\\"@/lib/parsers\\\";\\nimport type { ColumnSort,\
      \ Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\ndeclare module \\\"\
      @tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterSchema {\\\
      n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n+      \"content\": \"import type { DataTableConfig } from \\\"@/config/data-table\\\
      \";\\nimport type { FilterItemSchema } from \\\"@/lib/parsers\\\";\\nimport\
      \ type { ColumnSort, Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\\
      ndeclare module \\\"@tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema\
      \ {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n       \"type\": \"registry:file\",\n       \"target\": \"src/types/data-table.ts\"\
      \n     }\ndiff --git a/public/r/data-table-filter-menu.json b/public/r/data-table-filter-menu.json\n\
      index b74f77f..1ea3cd4 100644\n--- a/public/r/data-table-filter-menu.json\n\
      +++ b/public/r/data-table-filter-menu.json\n@@ -62,7 +62,7 @@\n     },\n   \
      \  {\n       \"path\": \"src/lib/parsers.ts\",\n-      \"content\": \"import\
      \ { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\"zod\\\"\
      ;\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\";\\n\\nimport\
      \ type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from \\\"@/types/data-table\\\
      \";\\n\\nconst sortingItemSchema = z.object({\\n  id: z.string(),\\n  desc:\
      \ z.boolean(),\\n});\\n\\nexport const getSortingStateParser = <TData>(\\n \
      \ columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\\
      n    ? columnIds instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\\
      n    : null;\\n\\n  return createParser({\\n    parse: (value) => {\\n     \
      \ try {\\n        const parsed = JSON.parse(value);\\n        const result =\
      \ z.array(sortingItemSchema).safeParse(parsed);\\n\\n        if (!result.success)\
      \ return null;\\n\\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id)))\
      \ {\\n          return null;\\n        }\\n\\n        return result.data as\
      \ ExtendedColumnSort<TData>[];\\n      } catch {\\n        return null;\\n \
      \     }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\n    eq:\
      \ (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n        (item,\
      \ index) =>\\n          item.id === b[index]?.id && item.desc === b[index]?.desc,\\\
      n      ),\\n  });\\n};\\n\\nconst filterSchema = z.object({\\n  id: z.string(),\\\
      n  value: z.union([z.string(), z.array(z.string())]),\\n  variant: z.enum(dataTableConfig.filterVariants),\\\
      n  operator: z.enum(dataTableConfig.operators),\\n  filterId: z.string(),\\\
      n});\\n\\nexport type FilterSchema = z.infer<typeof filterSchema>;\\n\\nexport\
      \ const getFiltersStateParser = <TData>(\\n  columnIds?: string[] | Set<string>,\\\
      n) => {\\n  const validKeys = columnIds\\n    ? columnIds instanceof Set\\n\
      \      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\n\\n  return\
      \ createParser({\\n    parse: (value) => {\\n      try {\\n        const parsed\
      \ = JSON.parse(value);\\n        const result = z.array(filterSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnFilter<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (filter, index) =>\\n          filter.id\
      \ === b[index]?.id &&\\n          filter.value === b[index]?.value &&\\n   \
      \       filter.variant === b[index]?.variant &&\\n          filter.operator\
      \ === b[index]?.operator,\\n      ),\\n  });\\n};\\n\",\n+      \"content\"\
      : \"import { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\
      \"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\"\
      ;\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from\
      \ \\\"@/types/data-table\\\";\\n\\nconst sortingItemSchema = z.object({\\n \
      \ id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport const getSortingStateParser\
      \ = <TData>(\\n  columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys\
      \ = columnIds\\n    ? columnIds instanceof Set\\n      ? columnIds\\n      :\
      \ new Set(columnIds)\\n    : null;\\n\\n  return createParser({\\n    parse:\
      \ (value) => {\\n      try {\\n        const parsed = JSON.parse(value);\\n\
      \        const result = z.array(sortingItemSchema).safeParse(parsed);\\n\\n\
      \        if (!result.success) return null;\\n\\n        if (validKeys && result.data.some((item)\
      \ => !validKeys.has(item.id))) {\\n          return null;\\n        }\\n\\n\
      \        return result.data as ExtendedColumnSort<TData>[];\\n      } catch\
      \ {\\n        return null;\\n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\\
      n    eq: (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n    \
      \    (item, index) =>\\n          item.id === b[index]?.id && item.desc ===\
      \ b[index]?.desc,\\n      ),\\n  });\\n};\\n\\nconst filterItemSchema = z.object({\\\
      n  id: z.string(),\\n  value: z.union([z.string(), z.array(z.string())]),\\\
      n  variant: z.enum(dataTableConfig.filterVariants),\\n  operator: z.enum(dataTableConfig.operators),\\\
      n  filterId: z.string(),\\n});\\n\\nexport type FilterItemSchema = z.infer<typeof\
      \ filterItemSchema>;\\n\\nexport const getFiltersStateParser = <TData>(\\n \
      \ columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\\
      n    ? columnIds instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\\
      n    : null;\\n\\n  return createParser({\\n    parse: (value) => {\\n     \
      \ try {\\n        const parsed = JSON.parse(value);\\n        const result =\
      \ z.array(filterItemSchema).safeParse(parsed);\\n\\n        if (!result.success)\
      \ return null;\\n\\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id)))\
      \ {\\n          return null;\\n        }\\n\\n        return result.data as\
      \ ExtendedColumnFilter<TData>[];\\n      } catch {\\n        return null;\\\
      n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\n    eq:\
      \ (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n        (filter,\
      \ index) =>\\n          filter.id === b[index]?.id &&\\n          filter.value\
      \ === b[index]?.value &&\\n          filter.variant === b[index]?.variant &&\\\
      n          filter.operator === b[index]?.operator,\\n      ),\\n  });\\n};\\\
      n\",\n       \"type\": \"registry:lib\"\n     },\n     {\n@@ -73,7 +73,7 @@\n\
      \     },\n     {\n       \"path\": \"src/types/data-table.ts\",\n-      \"content\"\
      : \"import type { DataTableConfig } from \\\"@/config/data-table\\\";\\nimport\
      \ type { FilterSchema } from \\\"@/lib/parsers\\\";\\nimport type { ColumnSort,\
      \ Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\ndeclare module \\\"\
      @tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterSchema {\\\
      n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n+      \"content\": \"import type { DataTableConfig } from \\\"@/config/data-table\\\
      \";\\nimport type { FilterItemSchema } from \\\"@/lib/parsers\\\";\\nimport\
      \ type { ColumnSort, Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\\
      ndeclare module \\\"@tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema\
      \ {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n       \"type\": \"registry:file\",\n       \"target\": \"src/types/data-table.ts\"\
      \n     }\ndiff --git a/public/r/data-table-sort-list.json b/public/r/data-table-sort-list.json\n\
      index e288816..9a4bd92 100644\n--- a/public/r/data-table-sort-list.json\n+++\
      \ b/public/r/data-table-sort-list.json\n@@ -36,6 +36,12 @@\n       \"content\"\
      : \"export type DataTableConfig = typeof dataTableConfig;\\n\\nexport const\
      \ dataTableConfig = {\\n  textOperators: [\\n    { label: \\\"Contains\\\",\
      \ value: \\\"iLike\\\" as const },\\n    { label: \\\"Does not contain\\\",\
      \ value: \\\"notILike\\\" as const },\\n    { label: \\\"Is\\\", value: \\\"\
      eq\\\" as const },\\n    { label: \\\"Is not\\\", value: \\\"ne\\\" as const\
      \ },\\n    { label: \\\"Is empty\\\", value: \\\"isEmpty\\\" as const },\\n\
      \    { label: \\\"Is not empty\\\", value: \\\"isNotEmpty\\\" as const },\\\
      n  ],\\n  numericOperators: [\\n    { label: \\\"Is\\\", value: \\\"eq\\\" as\
      \ const },\\n    { label: \\\"Is not\\\", value: \\\"ne\\\" as const },\\n \
      \   { label: \\\"Is less than\\\", value: \\\"lt\\\" as const },\\n    { label:\
      \ \\\"Is less than or equal to\\\", value: \\\"lte\\\" as const },\\n    { label:\
      \ \\\"Is greater than\\\", value: \\\"gt\\\" as const },\\n    { label: \\\"\
      Is greater than or equal to\\\", value: \\\"gte\\\" as const },\\n    { label:\
      \ \\\"Is between\\\", value: \\\"isBetween\\\" as const },\\n    { label: \\\
      \"Is empty\\\", value: \\\"isEmpty\\\" as const },\\n    { label: \\\"Is not\
      \ empty\\\", value: \\\"isNotEmpty\\\" as const },\\n  ],\\n  dateOperators:\
      \ [\\n    { label: \\\"Is\\\", value: \\\"eq\\\" as const },\\n    { label:\
      \ \\\"Is not\\\", value: \\\"ne\\\" as const },\\n    { label: \\\"Is before\\\
      \", value: \\\"lt\\\" as const },\\n    { label: \\\"Is after\\\", value: \\\
      \"gt\\\" as const },\\n    { label: \\\"Is on or before\\\", value: \\\"lte\\\
      \" as const },\\n    { label: \\\"Is on or after\\\", value: \\\"gte\\\" as\
      \ const },\\n    { label: \\\"Is between\\\", value: \\\"isBetween\\\" as const\
      \ },\\n    { label: \\\"Is relative to today\\\", value: \\\"isRelativeToToday\\\
      \" as const },\\n    { label: \\\"Is empty\\\", value: \\\"isEmpty\\\" as const\
      \ },\\n    { label: \\\"Is not empty\\\", value: \\\"isNotEmpty\\\" as const\
      \ },\\n  ],\\n  selectOperators: [\\n    { label: \\\"Is\\\", value: \\\"eq\\\
      \" as const },\\n    { label: \\\"Is not\\\", value: \\\"ne\\\" as const },\\\
      n    { label: \\\"Is empty\\\", value: \\\"isEmpty\\\" as const },\\n    { label:\
      \ \\\"Is not empty\\\", value: \\\"isNotEmpty\\\" as const },\\n  ],\\n  multiSelectOperators:\
      \ [\\n    { label: \\\"Has any of\\\", value: \\\"inArray\\\" as const },\\\
      n    { label: \\\"Has none of\\\", value: \\\"notInArray\\\" as const },\\n\
      \    { label: \\\"Is empty\\\", value: \\\"isEmpty\\\" as const },\\n    { label:\
      \ \\\"Is not empty\\\", value: \\\"isNotEmpty\\\" as const },\\n  ],\\n  booleanOperators:\
      \ [\\n    { label: \\\"Is\\\", value: \\\"eq\\\" as const },\\n    { label:\
      \ \\\"Is not\\\", value: \\\"ne\\\" as const },\\n  ],\\n  sortOrders: [\\n\
      \    { label: \\\"Asc\\\", value: \\\"asc\\\" as const },\\n    { label: \\\"\
      Desc\\\", value: \\\"desc\\\" as const },\\n  ],\\n  filterVariants: [\\n  \
      \  \\\"text\\\",\\n    \\\"number\\\",\\n    \\\"range\\\",\\n    \\\"date\\\
      \",\\n    \\\"dateRange\\\",\\n    \\\"boolean\\\",\\n    \\\"select\\\",\\\
      n    \\\"multiSelect\\\",\\n  ] as const,\\n  operators: [\\n    \\\"iLike\\\
      \",\\n    \\\"notILike\\\",\\n    \\\"eq\\\",\\n    \\\"ne\\\",\\n    \\\"inArray\\\
      \",\\n    \\\"notInArray\\\",\\n    \\\"isEmpty\\\",\\n    \\\"isNotEmpty\\\"\
      ,\\n    \\\"lt\\\",\\n    \\\"lte\\\",\\n    \\\"gt\\\",\\n    \\\"gte\\\",\\\
      n    \\\"isBetween\\\",\\n    \\\"isRelativeToToday\\\",\\n  ] as const,\\n\
      \  joinOperators: [\\\"and\\\", \\\"or\\\"] as const,\\n};\\n\",\n       \"\
      type\": \"registry:file\",\n       \"target\": \"src/config/data-table.ts\"\n\
      +    },\n+    {\n+      \"path\": \"src/types/data-table.ts\",\n+      \"content\"\
      : \"import type { DataTableConfig } from \\\"@/config/data-table\\\";\\nimport\
      \ type { FilterItemSchema } from \\\"@/lib/parsers\\\";\\nimport type { ColumnSort,\
      \ Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\ndeclare module \\\"\
      @tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema\
      \ {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n+      \"type\": \"registry:file\",\n+      \"target\": \"src/types/data-table.ts\"\
      \n     }\n   ]\n }\n\\ No newline at end of file\ndiff --git a/public/r/data-table.json\
      \ b/public/r/data-table.json\nindex d444442..7510fb1 100644\n--- a/public/r/data-table.json\n\
      +++ b/public/r/data-table.json\n@@ -34,7 +34,7 @@\n     },\n     {\n       \"\
      path\": \"src/components/data-table-pagination.tsx\",\n-      \"content\": \"\
      import type { Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  ChevronLeft,\\\
      n  ChevronRight,\\n  ChevronsLeft,\\n  ChevronsRight,\\n} from \\\"lucide-react\\\
      \";\\n\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport {\\\
      n  Select,\\n  SelectContent,\\n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\\
      n} from \\\"@/components/ui/select\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\n\\ninterface DataTablePaginationProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n  pageSizeOptions?: number[];\\n}\\\
      n\\nexport function DataTablePagination<TData>({\\n  table,\\n  pageSizeOptions\
      \ = [10, 20, 30, 40, 50],\\n  className,\\n  ...props\\n}: DataTablePaginationProps<TData>)\
      \ {\\n  return (\\n    <div\\n      className={cn(\\n        \\\"flex w-full\
      \ flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row\
      \ sm:gap-8\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex-1 whitespace-nowrap text-muted-foreground text-sm\\\
      \">\\n        {table.getFilteredSelectedRowModel().rows.length} of{\\\" \\\"\
      }\\n        {table.getFilteredRowModel().rows.length} row(s) selected.\\n  \
      \    </div>\\n      <div className=\\\"flex flex-col-reverse items-center gap-4\
      \ sm:flex-row sm:gap-6 lg:gap-8\\\">\\n        <div className=\\\"flex items-center\
      \ space-x-2\\\">\\n          <p className=\\\"whitespace-nowrap font-medium\
      \ text-sm\\\">Rows per page</p>\\n          <Select\\n            value={`${table.getState().pagination.pageSize}`}\\\
      n            onValueChange={(value) => {\\n              table.setPageSize(Number(value));\\\
      n            }}\\n          >\\n            <SelectTrigger size=\\\"sm\\\" className=\\\
      \"w-[4.5rem]\\\">\\n              <SelectValue placeholder={table.getState().pagination.pageSize}\
      \ />\\n            </SelectTrigger>\\n            <SelectContent side=\\\"top\\\
      \">\\n              {pageSizeOptions.map((pageSize) => (\\n                <SelectItem\
      \ key={pageSize} value={`${pageSize}`}>\\n                  {pageSize}\\n  \
      \              </SelectItem>\\n              ))}\\n            </SelectContent>\\\
      n          </Select>\\n        </div>\\n        <div className=\\\"flex items-center\
      \ justify-center font-medium text-sm\\\">\\n          Page {table.getState().pagination.pageIndex\
      \ + 1} of{\\\" \\\"}\\n          {table.getPageCount()}\\n        </div>\\n\
      \        <div className=\\\"flex items-center space-x-2\\\">\\n          <Button\\\
      n            aria-label=\\\"Go to first page\\\"\\n            variant=\\\"\
      outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"hidden\
      \ size-8 lg:flex\\\"\\n            onClick={() => table.setPageIndex(0)}\\n\
      \            disabled={!table.getCanPreviousPage()}\\n          >\\n       \
      \     <ChevronsLeft />\\n          </Button>\\n          <Button\\n        \
      \    aria-label=\\\"Go to previous page\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"icon\\\"\\n            className=\\\"size-8\\\"\\\
      n            onClick={() => table.previousPage()}\\n            disabled={!table.getCanPreviousPage()}\\\
      n          >\\n            <ChevronLeft />\\n          </Button>\\n        \
      \  <Button\\n            aria-label=\\\"Go to next page\\\"\\n            variant=\\\
      \"outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"size-8\\\
      \"\\n            onClick={() => table.nextPage()}\\n            disabled={!table.getCanNextPage()}\\\
      n          >\\n            <ChevronRight />\\n          </Button>\\n       \
      \   <Button\\n            aria-label=\\\"Go to last page\\\"\\n            variant=\\\
      \"outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"hidden\
      \ size-8 lg:flex\\\"\\n            onClick={() => table.setPageIndex(table.getPageCount()\
      \ - 1)}\\n            disabled={!table.getCanNextPage()}\\n          >\\n  \
      \          <ChevronsRight />\\n          </Button>\\n        </div>\\n     \
      \ </div>\\n    </div>\\n  );\\n}\\n\",\n+      \"content\": \"import type {\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  ChevronLeft,\\\
      n  ChevronRight,\\n  ChevronsLeft,\\n  ChevronsRight,\\n} from \\\"lucide-react\\\
      \";\\n\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport {\\\
      n  Select,\\n  SelectContent,\\n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\\
      n} from \\\"@/components/ui/select\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\n\\ninterface DataTablePaginationProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n  pageSizeOptions?: number[];\\n}\\\
      n\\nexport function DataTablePagination<TData>({\\n  table,\\n  pageSizeOptions\
      \ = [10, 20, 30, 40, 50],\\n  className,\\n  ...props\\n}: DataTablePaginationProps<TData>)\
      \ {\\n  return (\\n    <div\\n      className={cn(\\n        \\\"flex w-full\
      \ flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row\
      \ sm:gap-8\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex-1 whitespace-nowrap text-muted-foreground text-sm\\\
      \">\\n        {table.getFilteredSelectedRowModel().rows.length} of{\\\" \\\"\
      }\\n        {table.getFilteredRowModel().rows.length} row(s) selected.\\n  \
      \    </div>\\n      <div className=\\\"flex flex-col-reverse items-center gap-4\
      \ sm:flex-row sm:gap-6 lg:gap-8\\\">\\n        <div className=\\\"flex items-center\
      \ space-x-2\\\">\\n          <p className=\\\"whitespace-nowrap font-medium\
      \ text-sm\\\">Rows per page</p>\\n          <Select\\n            value={`${table.getState().pagination.pageSize}`}\\\
      n            onValueChange={(value) => {\\n              table.setPageSize(Number(value));\\\
      n            }}\\n          >\\n            <SelectTrigger className=\\\"h-8\
      \ w-[4.5rem] [&[data-size]]:h-8\\\">\\n              <SelectValue placeholder={table.getState().pagination.pageSize}\
      \ />\\n            </SelectTrigger>\\n            <SelectContent side=\\\"top\\\
      \">\\n              {pageSizeOptions.map((pageSize) => (\\n                <SelectItem\
      \ key={pageSize} value={`${pageSize}`}>\\n                  {pageSize}\\n  \
      \              </SelectItem>\\n              ))}\\n            </SelectContent>\\\
      n          </Select>\\n        </div>\\n        <div className=\\\"flex items-center\
      \ justify-center font-medium text-sm\\\">\\n          Page {table.getState().pagination.pageIndex\
      \ + 1} of{\\\" \\\"}\\n          {table.getPageCount()}\\n        </div>\\n\
      \        <div className=\\\"flex items-center space-x-2\\\">\\n          <Button\\\
      n            aria-label=\\\"Go to first page\\\"\\n            variant=\\\"\
      outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"hidden\
      \ size-8 lg:flex\\\"\\n            onClick={() => table.setPageIndex(0)}\\n\
      \            disabled={!table.getCanPreviousPage()}\\n          >\\n       \
      \     <ChevronsLeft />\\n          </Button>\\n          <Button\\n        \
      \    aria-label=\\\"Go to previous page\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"icon\\\"\\n            className=\\\"size-8\\\"\\\
      n            onClick={() => table.previousPage()}\\n            disabled={!table.getCanPreviousPage()}\\\
      n          >\\n            <ChevronLeft />\\n          </Button>\\n        \
      \  <Button\\n            aria-label=\\\"Go to next page\\\"\\n            variant=\\\
      \"outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"size-8\\\
      \"\\n            onClick={() => table.nextPage()}\\n            disabled={!table.getCanNextPage()}\\\
      n          >\\n            <ChevronRight />\\n          </Button>\\n       \
      \   <Button\\n            aria-label=\\\"Go to last page\\\"\\n            variant=\\\
      \"outline\\\"\\n            size=\\\"icon\\\"\\n            className=\\\"hidden\
      \ size-8 lg:flex\\\"\\n            onClick={() => table.setPageIndex(table.getPageCount()\
      \ - 1)}\\n            disabled={!table.getCanNextPage()}\\n          >\\n  \
      \          <ChevronsRight />\\n          </Button>\\n        </div>\\n     \
      \ </div>\\n    </div>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\
      \n     },\n     {\n@@ -74,7 +74,7 @@\n     },\n     {\n       \"path\": \"src/hooks/use-data-table.ts\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport {\\n  type ColumnFiltersState,\\\
      n  type PaginationState,\\n  type RowSelectionState,\\n  type SortingState,\\\
      n  type TableOptions,\\n  type TableState,\\n  type Updater,\\n  type VisibilityState,\\\
      n  getCoreRowModel,\\n  getFacetedMinMaxValues,\\n  getFacetedRowModel,\\n \
      \ getFacetedUniqueValues,\\n  getFilteredRowModel,\\n  getPaginationRowModel,\\\
      n  getSortedRowModel,\\n  useReactTable,\\n} from \\\"@tanstack/react-table\\\
      \";\\nimport {\\n  type Parser,\\n  type UseQueryStateOptions,\\n  parseAsArrayOf,\\\
      n  parseAsInteger,\\n  parseAsString,\\n  useQueryState,\\n  useQueryStates,\\\
      n} from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport {\
      \ useDebouncedCallback } from \\\"@/hooks/use-debounced-callback\\\";\\nimport\
      \ { getSortingStateParser } from \\\"@/lib/parsers\\\";\\nimport type { ExtendedColumnSort\
      \ } from \\\"@/types/data-table\\\";\\n\\nconst PAGE_KEY = \\\"page\\\";\\nconst\
      \ PER_PAGE_KEY = \\\"perPage\\\";\\nconst SORT_KEY = \\\"sort\\\";\\nconst ARRAY_SEPARATOR\
      \ = \\\",\\\";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\n\\ninterface\
      \ UseDataTableProps<TData>\\n  extends Omit<\\n      TableOptions<TData>,\\\
      n      | \\\"state\\\"\\n      | \\\"pageCount\\\"\\n      | \\\"getCoreRowModel\\\
      \"\\n      | \\\"manualFiltering\\\"\\n      | \\\"manualPagination\\\"\\n \
      \     | \\\"manualSorting\\\"\\n    >,\\n    Required<Pick<TableOptions<TData>,\
      \ \\\"pageCount\\\">> {\\n  initialState?: Omit<Partial<TableState>, \\\"sorting\\\
      \"> & {\\n    sorting?: ExtendedColumnSort<TData>[];\\n  };\\n  history?: \\\
      \"push\\\" | \\\"replace\\\";\\n  debounceMs?: number;\\n  throttleMs?: number;\\\
      n  clearOnDefault?: boolean;\\n  enableAdvancedFilter?: boolean;\\n  scroll?:\
      \ boolean;\\n  shallow?: boolean;\\n  startTransition?: React.TransitionStartFunction;\\\
      n}\\n\\nexport function useDataTable<TData>(props: UseDataTableProps<TData>)\
      \ {\\n  const {\\n    columns,\\n    pageCount = -1,\\n    initialState,\\n\
      \    history = \\\"replace\\\",\\n    debounceMs = DEBOUNCE_MS,\\n    throttleMs\
      \ = THROTTLE_MS,\\n    clearOnDefault = false,\\n    enableAdvancedFilter =\
      \ false,\\n    scroll = false,\\n    shallow = true,\\n    startTransition,\\\
      n    ...tableProps\\n  } = props;\\n\\n  const queryStateOptions = React.useMemo<\\\
      n    Omit<UseQueryStateOptions<string>, \\\"parse\\\">\\n  >(\\n    () => ({\\\
      n      history,\\n      scroll,\\n      shallow,\\n      throttleMs,\\n    \
      \  debounceMs,\\n      clearOnDefault,\\n      startTransition,\\n    }),\\\
      n    [\\n      history,\\n      scroll,\\n      shallow,\\n      throttleMs,\\\
      n      debounceMs,\\n      clearOnDefault,\\n      startTransition,\\n    ],\\\
      n  );\\n\\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(\\\
      n    initialState?.rowSelection ?? {},\\n  );\\n  const [columnVisibility, setColumnVisibility]\
      \ =\\n    React.useState<VisibilityState>(initialState?.columnVisibility ??\
      \ {});\\n\\n  const [page, setPage] = useQueryState(\\n    PAGE_KEY,\\n    parseAsInteger.withOptions(queryStateOptions).withDefault(1),\\\
      n  );\\n  const [perPage, setPerPage] = useQueryState(\\n    PER_PAGE_KEY,\\\
      n    parseAsInteger\\n      .withOptions(queryStateOptions)\\n      .withDefault(initialState?.pagination?.pageSize\
      \ ?? 10),\\n  );\\n\\n  const pagination: PaginationState = React.useMemo(()\
      \ => {\\n    return {\\n      pageIndex: page - 1, // zero-based index -> one-based\
      \ index\\n      pageSize: perPage,\\n    };\\n  }, [page, perPage]);\\n\\n \
      \ const onPaginationChange = React.useCallback(\\n    (updaterOrValue: Updater<PaginationState>)\
      \ => {\\n      if (typeof updaterOrValue === \\\"function\\\") {\\n        const\
      \ newPagination = updaterOrValue(pagination);\\n        void setPage(newPagination.pageIndex\
      \ + 1);\\n        void setPerPage(newPagination.pageSize);\\n      } else {\\\
      n        void setPage(updaterOrValue.pageIndex + 1);\\n        void setPerPage(updaterOrValue.pageSize);\\\
      n      }\\n    },\\n    [pagination, setPage, setPerPage],\\n  );\\n\\n  const\
      \ columnIds = React.useMemo(() => {\\n    return new Set(columns.map((column)\
      \ => column.id).filter(Boolean));\\n  }, [columns]);\\n\\n  const [sorting,\
      \ setSorting] = useQueryState(\\n    SORT_KEY,\\n    getSortingStateParser<TData>(columnIds)\\\
      n      .withOptions(queryStateOptions)\\n      .withDefault(initialState?.sorting\
      \ ?? []),\\n  );\\n\\n  const onSortingChange = React.useCallback(\\n    (updaterOrValue:\
      \ Updater<SortingState>) => {\\n      if (typeof updaterOrValue === \\\"function\\\
      \") {\\n        const newSorting = updaterOrValue(sorting);\\n        setSorting(newSorting\
      \ as ExtendedColumnSort<TData>[]);\\n      } else {\\n        setSorting(updaterOrValue\
      \ as ExtendedColumnSort<TData>[]);\\n      }\\n    },\\n    [sorting, setSorting],\\\
      n  );\\n\\n  const filterableColumns = React.useMemo(() => {\\n    if (enableAdvancedFilter)\
      \ return [];\\n\\n    return columns.filter((column) => column.enableColumnFilter);\\\
      n  }, [columns, enableAdvancedFilter]);\\n\\n  const filterParsers = React.useMemo(()\
      \ => {\\n    if (enableAdvancedFilter) return {};\\n\\n    return filterableColumns.reduce<\\\
      n      Record<string, Parser<string> | Parser<string[]>>\\n    >((acc, column)\
      \ => {\\n      if (column.meta?.options) {\\n        acc[column.id ?? \\\"\\\
      \"] = parseAsArrayOf(\\n          parseAsString,\\n          ARRAY_SEPARATOR,\\\
      n        ).withOptions(queryStateOptions);\\n      } else {\\n        acc[column.id\
      \ ?? \\\"\\\"] = parseAsString.withOptions(queryStateOptions);\\n      }\\n\
      \      return acc;\\n    }, {});\\n  }, [filterableColumns, queryStateOptions,\
      \ enableAdvancedFilter]);\\n\\n  const [filterValues, setFilterValues] = useQueryStates(filterParsers);\\\
      n\\n  const debouncedSetFilterValues = useDebouncedCallback(\\n    (values:\
      \ typeof filterValues) => {\\n      void setPage(1);\\n      void setFilterValues(values);\\\
      n    },\\n    debounceMs,\\n  );\\n\\n  const initialColumnFilters: ColumnFiltersState\
      \ = React.useMemo(() => {\\n    if (enableAdvancedFilter) return [];\\n\\n \
      \   return Object.entries(filterValues).reduce<ColumnFiltersState>(\\n     \
      \ (filters, [key, value]) => {\\n        if (value !== null) {\\n          const\
      \ processedValue = Array.isArray(value)\\n            ? value\\n           \
      \ : typeof value === \\\"string\\\" && /[^a-zA-Z0-9]/.test(value)\\n       \
      \       ? value.split(/[^a-zA-Z0-9]+/).filter(Boolean)\\n              : [value];\\\
      n\\n          filters.push({\\n            id: key,\\n            value: processedValue,\\\
      n          });\\n        }\\n        return filters;\\n      },\\n      [],\\\
      n    );\\n  }, [filterValues, enableAdvancedFilter]);\\n\\n  const [columnFilters,\
      \ setColumnFilters] =\\n    React.useState<ColumnFiltersState>(initialColumnFilters);\\\
      n\\n  const onColumnFiltersChange = React.useCallback(\\n    (updaterOrValue:\
      \ Updater<ColumnFiltersState>) => {\\n      if (enableAdvancedFilter) return;\\\
      n\\n      setColumnFilters((prev) => {\\n        const next =\\n          typeof\
      \ updaterOrValue === \\\"function\\\"\\n            ? updaterOrValue(prev)\\\
      n            : updaterOrValue;\\n\\n        const filterUpdates = next.reduce<\\\
      n          Record<string, string | string[] | null>\\n        >((acc, filter)\
      \ => {\\n          if (filterableColumns.find((column) => column.id === filter.id))\
      \ {\\n            acc[filter.id] = filter.value as string | string[];\\n   \
      \       }\\n          return acc;\\n        }, {});\\n\\n        for (const\
      \ prevFilter of prev) {\\n          if (!next.some((filter) => filter.id ===\
      \ prevFilter.id)) {\\n            filterUpdates[prevFilter.id] = null;\\n  \
      \        }\\n        }\\n\\n        debouncedSetFilterValues(filterUpdates);\\\
      n        return next;\\n      });\\n    },\\n    [debouncedSetFilterValues,\
      \ filterableColumns, enableAdvancedFilter],\\n  );\\n\\n  const table = useReactTable({\\\
      n    ...tableProps,\\n    columns,\\n    initialState,\\n    pageCount,\\n \
      \   state: {\\n      pagination,\\n      sorting,\\n      columnVisibility,\\\
      n      rowSelection,\\n      columnFilters,\\n    },\\n    defaultColumn: {\\\
      n      ...tableProps.defaultColumn,\\n      enableColumnFilter: false,\\n  \
      \  },\\n    enableRowSelection: true,\\n    onRowSelectionChange: setRowSelection,\\\
      n    onPaginationChange,\\n    onSortingChange,\\n    onColumnFiltersChange,\\\
      n    onColumnVisibilityChange: setColumnVisibility,\\n    getCoreRowModel: getCoreRowModel(),\\\
      n    getFilteredRowModel: getFilteredRowModel(),\\n    getPaginationRowModel:\
      \ getPaginationRowModel(),\\n    getSortedRowModel: getSortedRowModel(),\\n\
      \    getFacetedRowModel: getFacetedRowModel(),\\n    getFacetedUniqueValues:\
      \ getFacetedUniqueValues(),\\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\\\
      n    manualPagination: true,\\n    manualSorting: true,\\n    manualFiltering:\
      \ true,\\n  });\\n\\n  return { table, shallow, debounceMs, throttleMs };\\\
      n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\n\\nimport {\\n  type ColumnFiltersState,\\\
      n  type PaginationState,\\n  type RowSelectionState,\\n  type SortingState,\\\
      n  type TableOptions,\\n  type TableState,\\n  type Updater,\\n  type VisibilityState,\\\
      n  getCoreRowModel,\\n  getFacetedMinMaxValues,\\n  getFacetedRowModel,\\n \
      \ getFacetedUniqueValues,\\n  getFilteredRowModel,\\n  getPaginationRowModel,\\\
      n  getSortedRowModel,\\n  useReactTable,\\n} from \\\"@tanstack/react-table\\\
      \";\\nimport {\\n  type Parser,\\n  type UseQueryStateOptions,\\n  parseAsArrayOf,\\\
      n  parseAsInteger,\\n  parseAsString,\\n  useQueryState,\\n  useQueryStates,\\\
      n} from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport {\
      \ useDebouncedCallback } from \\\"@/hooks/use-debounced-callback\\\";\\nimport\
      \ { getSortingStateParser } from \\\"@/lib/parsers\\\";\\nimport type { ExtendedColumnSort\
      \ } from \\\"@/types/data-table\\\";\\n\\nconst PAGE_KEY = \\\"page\\\";\\nconst\
      \ PER_PAGE_KEY = \\\"perPage\\\";\\nconst SORT_KEY = \\\"sort\\\";\\nconst ARRAY_SEPARATOR\
      \ = \\\",\\\";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\n\\ninterface\
      \ UseDataTableProps<TData>\\n  extends Omit<\\n      TableOptions<TData>,\\\
      n      | \\\"state\\\"\\n      | \\\"pageCount\\\"\\n      | \\\"getCoreRowModel\\\
      \"\\n      | \\\"manualFiltering\\\"\\n      | \\\"manualPagination\\\"\\n \
      \     | \\\"manualSorting\\\"\\n    >,\\n    Required<Pick<TableOptions<TData>,\
      \ \\\"pageCount\\\">> {\\n  initialState?: Omit<Partial<TableState>, \\\"sorting\\\
      \"> & {\\n    sorting?: ExtendedColumnSort<TData>[];\\n  };\\n  history?: \\\
      \"push\\\" | \\\"replace\\\";\\n  debounceMs?: number;\\n  throttleMs?: number;\\\
      n  clearOnDefault?: boolean;\\n  enableAdvancedFilter?: boolean;\\n  scroll?:\
      \ boolean;\\n  shallow?: boolean;\\n  startTransition?: React.TransitionStartFunction;\\\
      n}\\n\\nexport function useDataTable<TData>(props: UseDataTableProps<TData>)\
      \ {\\n  const {\\n    columns,\\n    pageCount = -1,\\n    initialState,\\n\
      \    history = \\\"replace\\\",\\n    debounceMs = DEBOUNCE_MS,\\n    throttleMs\
      \ = THROTTLE_MS,\\n    clearOnDefault = false,\\n    enableAdvancedFilter =\
      \ false,\\n    scroll = false,\\n    shallow = true,\\n    startTransition,\\\
      n    ...tableProps\\n  } = props;\\n\\n  const queryStateOptions = React.useMemo<\\\
      n    Omit<UseQueryStateOptions<string>, \\\"parse\\\">\\n  >(\\n    () => ({\\\
      n      history,\\n      scroll,\\n      shallow,\\n      throttleMs,\\n    \
      \  debounceMs,\\n      clearOnDefault,\\n      startTransition,\\n    }),\\\
      n    [\\n      history,\\n      scroll,\\n      shallow,\\n      throttleMs,\\\
      n      debounceMs,\\n      clearOnDefault,\\n      startTransition,\\n    ],\\\
      n  );\\n\\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(\\\
      n    initialState?.rowSelection ?? {},\\n  );\\n  const [columnVisibility, setColumnVisibility]\
      \ =\\n    React.useState<VisibilityState>(initialState?.columnVisibility ??\
      \ {});\\n\\n  const [page, setPage] = useQueryState(\\n    PAGE_KEY,\\n    parseAsInteger.withOptions(queryStateOptions).withDefault(1),\\\
      n  );\\n  const [perPage, setPerPage] = useQueryState(\\n    PER_PAGE_KEY,\\\
      n    parseAsInteger\\n      .withOptions(queryStateOptions)\\n      .withDefault(initialState?.pagination?.pageSize\
      \ ?? 10),\\n  );\\n\\n  const pagination: PaginationState = React.useMemo(()\
      \ => {\\n    return {\\n      pageIndex: page - 1, // zero-based index -> one-based\
      \ index\\n      pageSize: perPage,\\n    };\\n  }, [page, perPage]);\\n\\n \
      \ const onPaginationChange = React.useCallback(\\n    (updaterOrValue: Updater<PaginationState>)\
      \ => {\\n      if (typeof updaterOrValue === \\\"function\\\") {\\n        const\
      \ newPagination = updaterOrValue(pagination);\\n        void setPage(newPagination.pageIndex\
      \ + 1);\\n        void setPerPage(newPagination.pageSize);\\n      } else {\\\
      n        void setPage(updaterOrValue.pageIndex + 1);\\n        void setPerPage(updaterOrValue.pageSize);\\\
      n      }\\n    },\\n    [pagination, setPage, setPerPage],\\n  );\\n\\n  const\
      \ columnIds = React.useMemo(() => {\\n    return new Set(\\n      columns.map((column)\
      \ => column.id).filter(Boolean) as string[],\\n    );\\n  }, [columns]);\\n\\\
      n  const [sorting, setSorting] = useQueryState(\\n    SORT_KEY,\\n    getSortingStateParser<TData>(columnIds)\\\
      n      .withOptions(queryStateOptions)\\n      .withDefault(initialState?.sorting\
      \ ?? []),\\n  );\\n\\n  const onSortingChange = React.useCallback(\\n    (updaterOrValue:\
      \ Updater<SortingState>) => {\\n      if (typeof updaterOrValue === \\\"function\\\
      \") {\\n        const newSorting = updaterOrValue(sorting);\\n        setSorting(newSorting\
      \ as ExtendedColumnSort<TData>[]);\\n      } else {\\n        setSorting(updaterOrValue\
      \ as ExtendedColumnSort<TData>[]);\\n      }\\n    },\\n    [sorting, setSorting],\\\
      n  );\\n\\n  const filterableColumns = React.useMemo(() => {\\n    if (enableAdvancedFilter)\
      \ return [];\\n\\n    return columns.filter((column) => column.enableColumnFilter);\\\
      n  }, [columns, enableAdvancedFilter]);\\n\\n  const filterParsers = React.useMemo(()\
      \ => {\\n    if (enableAdvancedFilter) return {};\\n\\n    return filterableColumns.reduce<\\\
      n      Record<string, Parser<string> | Parser<string[]>>\\n    >((acc, column)\
      \ => {\\n      if (column.meta?.options) {\\n        acc[column.id ?? \\\"\\\
      \"] = parseAsArrayOf(\\n          parseAsString,\\n          ARRAY_SEPARATOR,\\\
      n        ).withOptions(queryStateOptions);\\n      } else {\\n        acc[column.id\
      \ ?? \\\"\\\"] = parseAsString.withOptions(queryStateOptions);\\n      }\\n\
      \      return acc;\\n    }, {});\\n  }, [filterableColumns, queryStateOptions,\
      \ enableAdvancedFilter]);\\n\\n  const [filterValues, setFilterValues] = useQueryStates(filterParsers);\\\
      n\\n  const debouncedSetFilterValues = useDebouncedCallback(\\n    (values:\
      \ typeof filterValues) => {\\n      void setPage(1);\\n      void setFilterValues(values);\\\
      n    },\\n    debounceMs,\\n  );\\n\\n  const initialColumnFilters: ColumnFiltersState\
      \ = React.useMemo(() => {\\n    if (enableAdvancedFilter) return [];\\n\\n \
      \   return Object.entries(filterValues).reduce<ColumnFiltersState>(\\n     \
      \ (filters, [key, value]) => {\\n        if (value !== null) {\\n          const\
      \ processedValue = Array.isArray(value)\\n            ? value\\n           \
      \ : typeof value === \\\"string\\\" && /[^a-zA-Z0-9]/.test(value)\\n       \
      \       ? value.split(/[^a-zA-Z0-9]+/).filter(Boolean)\\n              : [value];\\\
      n\\n          filters.push({\\n            id: key,\\n            value: processedValue,\\\
      n          });\\n        }\\n        return filters;\\n      },\\n      [],\\\
      n    );\\n  }, [filterValues, enableAdvancedFilter]);\\n\\n  const [columnFilters,\
      \ setColumnFilters] =\\n    React.useState<ColumnFiltersState>(initialColumnFilters);\\\
      n\\n  const onColumnFiltersChange = React.useCallback(\\n    (updaterOrValue:\
      \ Updater<ColumnFiltersState>) => {\\n      if (enableAdvancedFilter) return;\\\
      n\\n      setColumnFilters((prev) => {\\n        const next =\\n          typeof\
      \ updaterOrValue === \\\"function\\\"\\n            ? updaterOrValue(prev)\\\
      n            : updaterOrValue;\\n\\n        const filterUpdates = next.reduce<\\\
      n          Record<string, string | string[] | null>\\n        >((acc, filter)\
      \ => {\\n          if (filterableColumns.find((column) => column.id === filter.id))\
      \ {\\n            acc[filter.id] = filter.value as string | string[];\\n   \
      \       }\\n          return acc;\\n        }, {});\\n\\n        for (const\
      \ prevFilter of prev) {\\n          if (!next.some((filter) => filter.id ===\
      \ prevFilter.id)) {\\n            filterUpdates[prevFilter.id] = null;\\n  \
      \        }\\n        }\\n\\n        debouncedSetFilterValues(filterUpdates);\\\
      n        return next;\\n      });\\n    },\\n    [debouncedSetFilterValues,\
      \ filterableColumns, enableAdvancedFilter],\\n  );\\n\\n  const table = useReactTable({\\\
      n    ...tableProps,\\n    columns,\\n    initialState,\\n    pageCount,\\n \
      \   state: {\\n      pagination,\\n      sorting,\\n      columnVisibility,\\\
      n      rowSelection,\\n      columnFilters,\\n    },\\n    defaultColumn: {\\\
      n      ...tableProps.defaultColumn,\\n      enableColumnFilter: false,\\n  \
      \  },\\n    enableRowSelection: true,\\n    onRowSelectionChange: setRowSelection,\\\
      n    onPaginationChange,\\n    onSortingChange,\\n    onColumnFiltersChange,\\\
      n    onColumnVisibilityChange: setColumnVisibility,\\n    getCoreRowModel: getCoreRowModel(),\\\
      n    getFilteredRowModel: getFilteredRowModel(),\\n    getPaginationRowModel:\
      \ getPaginationRowModel(),\\n    getSortedRowModel: getSortedRowModel(),\\n\
      \    getFacetedRowModel: getFacetedRowModel(),\\n    getFacetedUniqueValues:\
      \ getFacetedUniqueValues(),\\n    getFacetedMinMaxValues: getFacetedMinMaxValues(),\\\
      n    manualPagination: true,\\n    manualSorting: true,\\n    manualFiltering:\
      \ true,\\n  });\\n\\n  return { table, shallow, debounceMs, throttleMs };\\\
      n}\\n\",\n       \"type\": \"registry:hook\"\n     },\n     {\n@@ -94,7 +94,7\
      \ @@\n     },\n     {\n       \"path\": \"src/lib/parsers.ts\",\n-      \"content\"\
      : \"import { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\
      \"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\"\
      ;\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from\
      \ \\\"@/types/data-table\\\";\\n\\nconst sortingItemSchema = z.object({\\n \
      \ id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport const getSortingStateParser\
      \ = <TData>(\\n  columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys\
      \ = columnIds\\n    ? columnIds instanceof Set\\n      ? columnIds\\n      :\
      \ new Set(columnIds)\\n    : null;\\n\\n  return createParser({\\n    parse:\
      \ (value) => {\\n      try {\\n        const parsed = JSON.parse(value);\\n\
      \        const result = z.array(sortingItemSchema).safeParse(parsed);\\n\\n\
      \        if (!result.success) return null;\\n\\n        if (validKeys && result.data.some((item)\
      \ => !validKeys.has(item.id))) {\\n          return null;\\n        }\\n\\n\
      \        return result.data as ExtendedColumnSort<TData>[];\\n      } catch\
      \ {\\n        return null;\\n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\\
      n    eq: (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n    \
      \    (item, index) =>\\n          item.id === b[index]?.id && item.desc ===\
      \ b[index]?.desc,\\n      ),\\n  });\\n};\\n\\nconst filterSchema = z.object({\\\
      n  id: z.string(),\\n  value: z.union([z.string(), z.array(z.string())]),\\\
      n  variant: z.enum(dataTableConfig.filterVariants),\\n  operator: z.enum(dataTableConfig.operators),\\\
      n  filterId: z.string(),\\n});\\n\\nexport type FilterSchema = z.infer<typeof\
      \ filterSchema>;\\n\\nexport const getFiltersStateParser = <TData>(\\n  columnIds?:\
      \ string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\n    ? columnIds\
      \ instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\\
      n\\n  return createParser({\\n    parse: (value) => {\\n      try {\\n     \
      \   const parsed = JSON.parse(value);\\n        const result = z.array(filterSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnFilter<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (filter, index) =>\\n          filter.id\
      \ === b[index]?.id &&\\n          filter.value === b[index]?.value &&\\n   \
      \       filter.variant === b[index]?.variant &&\\n          filter.operator\
      \ === b[index]?.operator,\\n      ),\\n  });\\n};\\n\",\n+      \"content\"\
      : \"import { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\
      \"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\"\
      ;\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from\
      \ \\\"@/types/data-table\\\";\\n\\nconst sortingItemSchema = z.object({\\n \
      \ id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport const getSortingStateParser\
      \ = <TData>(\\n  columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys\
      \ = columnIds\\n    ? columnIds instanceof Set\\n      ? columnIds\\n      :\
      \ new Set(columnIds)\\n    : null;\\n\\n  return createParser({\\n    parse:\
      \ (value) => {\\n      try {\\n        const parsed = JSON.parse(value);\\n\
      \        const result = z.array(sortingItemSchema).safeParse(parsed);\\n\\n\
      \        if (!result.success) return null;\\n\\n        if (validKeys && result.data.some((item)\
      \ => !validKeys.has(item.id))) {\\n          return null;\\n        }\\n\\n\
      \        return result.data as ExtendedColumnSort<TData>[];\\n      } catch\
      \ {\\n        return null;\\n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\\
      n    eq: (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n    \
      \    (item, index) =>\\n          item.id === b[index]?.id && item.desc ===\
      \ b[index]?.desc,\\n      ),\\n  });\\n};\\n\\nconst filterItemSchema = z.object({\\\
      n  id: z.string(),\\n  value: z.union([z.string(), z.array(z.string())]),\\\
      n  variant: z.enum(dataTableConfig.filterVariants),\\n  operator: z.enum(dataTableConfig.operators),\\\
      n  filterId: z.string(),\\n});\\n\\nexport type FilterItemSchema = z.infer<typeof\
      \ filterItemSchema>;\\n\\nexport const getFiltersStateParser = <TData>(\\n \
      \ columnIds?: string[] | Set<string>,\\n) => {\\n  const validKeys = columnIds\\\
      n    ? columnIds instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\\
      n    : null;\\n\\n  return createParser({\\n    parse: (value) => {\\n     \
      \ try {\\n        const parsed = JSON.parse(value);\\n        const result =\
      \ z.array(filterItemSchema).safeParse(parsed);\\n\\n        if (!result.success)\
      \ return null;\\n\\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id)))\
      \ {\\n          return null;\\n        }\\n\\n        return result.data as\
      \ ExtendedColumnFilter<TData>[];\\n      } catch {\\n        return null;\\\
      n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\n    eq:\
      \ (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n        (filter,\
      \ index) =>\\n          filter.id === b[index]?.id &&\\n          filter.value\
      \ === b[index]?.value &&\\n          filter.variant === b[index]?.variant &&\\\
      n          filter.operator === b[index]?.operator,\\n      ),\\n  });\\n};\\\
      n\",\n       \"type\": \"registry:lib\"\n     },\n     {\n@@ -105,7 +105,7 @@\n\
      \     },\n     {\n       \"path\": \"src/types/data-table.ts\",\n-      \"content\"\
      : \"import type { DataTableConfig } from \\\"@/config/data-table\\\";\\nimport\
      \ type { FilterSchema } from \\\"@/lib/parsers\\\";\\nimport type { ColumnSort,\
      \ Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\ndeclare module \\\"\
      @tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterSchema {\\\
      n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n+      \"content\": \"import type { DataTableConfig } from \\\"@/config/data-table\\\
      \";\\nimport type { FilterItemSchema } from \\\"@/lib/parsers\\\";\\nimport\
      \ type { ColumnSort, Row, RowData } from \\\"@tanstack/react-table\\\";\\n\\\
      ndeclare module \\\"@tanstack/react-table\\\" {\\n  // biome-ignore lint/correctness/noUnusedVariables:\
      \ <explanation>\\n  interface ColumnMeta<TData extends RowData, TValue> {\\\
      n    label?: string;\\n    placeholder?: string;\\n    variant?: FilterVariant;\\\
      n    options?: Option[];\\n    range?: [number, number];\\n    unit?: string;\\\
      n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n  }\\n}\\n\\nexport interface\
      \ Option {\\n  label: string;\\n  value: string;\\n  count?: number;\\n  icon?:\
      \ React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\n\\nexport type FilterOperator\
      \ = DataTableConfig[\\\"operators\\\"][number];\\nexport type FilterVariant\
      \ = DataTableConfig[\\\"filterVariants\\\"][number];\\nexport type JoinOperator\
      \ = DataTableConfig[\\\"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema\
      \ {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface DataTableRowAction<TData>\
      \ {\\n  row: Row<TData>;\\n  variant: \\\"update\\\" | \\\"delete\\\";\\n}\\\
      n\",\n       \"type\": \"registry:file\",\n       \"target\": \"src/types/data-table.ts\"\
      \n     }\ndiff --git a/registry.json b/registry.json\nindex ee4b6a5..4e0c3c1\
      \ 100644\n--- a/registry.json\n+++ b/registry.json\n@@ -138,6 +138,11 @@\n \
      \          \"path\": \"src/config/data-table.ts\",\n           \"type\": \"\
      registry:file\",\n           \"target\": \"src/config/data-table.ts\"\n+   \
      \     },\n+        {\n+          \"path\": \"src/types/data-table.ts\",\n+ \
      \         \"type\": \"registry:file\",\n+          \"target\": \"src/types/data-table.ts\"\
      \n         }\n       ]\n     },\ndiff --git a/src/components/data-table-pagination.tsx\
      \ b/src/components/data-table-pagination.tsx\nindex edcd80c..46d680f 100644\n\
      --- a/src/components/data-table-pagination.tsx\n+++ b/src/components/data-table-pagination.tsx\n\
      @@ -48,7 +48,7 @@ export function DataTablePagination<TData>({\n           \
      \    table.setPageSize(Number(value));\n             }}\n           >\n-   \
      \         <SelectTrigger size=\"sm\" className=\"w-[4.5rem]\">\n+          \
      \  <SelectTrigger className=\"h-8 w-[4.5rem] [&[data-size]]:h-8\">\n       \
      \        <SelectValue placeholder={table.getState().pagination.pageSize} />\n\
      \             </SelectTrigger>\n             <SelectContent side=\"top\">\n\
      diff --git a/src/hooks/use-data-table.ts b/src/hooks/use-data-table.ts\nindex\
      \ 96a7abc..a7885b5 100644\n--- a/src/hooks/use-data-table.ts\n+++ b/src/hooks/use-data-table.ts\n\
      @@ -142,7 +142,9 @@ export function useDataTable<TData>(props: UseDataTableProps<TData>)\
      \ {\n   );\n \n   const columnIds = React.useMemo(() => {\n-    return new Set(columns.map((column)\
      \ => column.id).filter(Boolean));\n+    return new Set(\n+      columns.map((column)\
      \ => column.id).filter(Boolean) as string[],\n+    );\n   }, [columns]);\n \n\
      \   const [sorting, setSorting] = useQueryState(\ndiff --git a/src/lib/parsers.ts\
      \ b/src/lib/parsers.ts\nindex 0246731..ea4f0dd 100644\n--- a/src/lib/parsers.ts\n\
      +++ b/src/lib/parsers.ts\n@@ -49,7 +49,7 @@ export const getSortingStateParser\
      \ = <TData>(\n   });\n };\n \n-const filterSchema = z.object({\n+const filterItemSchema\
      \ = z.object({\n   id: z.string(),\n   value: z.union([z.string(), z.array(z.string())]),\n\
      \   variant: z.enum(dataTableConfig.filterVariants),\n@@ -57,7 +57,7 @@ const\
      \ filterSchema = z.object({\n   filterId: z.string(),\n });\n \n-export type\
      \ FilterSchema = z.infer<typeof filterSchema>;\n+export type FilterItemSchema\
      \ = z.infer<typeof filterItemSchema>;\n \n export const getFiltersStateParser\
      \ = <TData>(\n   columnIds?: string[] | Set<string>,\n@@ -72,7 +72,7 @@ export\
      \ const getFiltersStateParser = <TData>(\n     parse: (value) => {\n       try\
      \ {\n         const parsed = JSON.parse(value);\n-        const result = z.array(filterSchema).safeParse(parsed);\n\
      +        const result = z.array(filterItemSchema).safeParse(parsed);\n \n  \
      \       if (!result.success) return null;\n \ndiff --git a/src/types/data-table.ts\
      \ b/src/types/data-table.ts\nindex 349d5ea..2c0fd5f 100644\n--- a/src/types/data-table.ts\n\
      +++ b/src/types/data-table.ts\n@@ -1,5 +1,5 @@\n import type { DataTableConfig\
      \ } from \"@/config/data-table\";\n-import type { FilterSchema } from \"@/lib/parsers\"\
      ;\n+import type { FilterItemSchema } from \"@/lib/parsers\";\n import type {\
      \ ColumnSort, Row, RowData } from \"@tanstack/react-table\";\n \n declare module\
      \ \"@tanstack/react-table\" {\n@@ -30,7 +30,7 @@ export interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \"id\"> {\n   id: Extract<keyof TData, string>;\n\
      \ }\n \n-export interface ExtendedColumnFilter<TData> extends FilterSchema {\n\
      +export interface ExtendedColumnFilter<TData> extends FilterItemSchema {\n \
      \  id: Extract<keyof TData, string>;\n }\n "
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'chore: update imports (#955)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table-action-bar.json b/public/r/data-table-action-bar.json\n\
      index 3cca56a..398035d 100644\n--- a/public/r/data-table-action-bar.json\n+++\
      \ b/public/r/data-table-action-bar.json\n@@ -15,7 +15,7 @@\n   ],\n   \"files\"\
      : [\n     {\n-      \"path\": \"src/components/data-table/data-table-action-bar.tsx\"\
      ,\n+      \"path\": \"src/components/data-table-action-bar.tsx\",\n       \"\
      content\": \"\\\"use client\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport {\\n  Tooltip,\\n  TooltipContent,\\n  TooltipTrigger,\\n} from\
      \ \\\"@/components/ui/tooltip\\\";\\nimport { cn } from \\\"@/lib/utils\\\"\
      ;\\nimport type { Table } from \\\"@tanstack/react-table\\\";\\nimport { Loader\
      \ } from \\\"lucide-react\\\";\\nimport { AnimatePresence, motion } from \\\"\
      motion/react\\\";\\nimport * as React from \\\"react\\\";\\nimport * as ReactDOM\
      \ from \\\"react-dom\\\";\\n\\ninterface DataTableActionBarProps<TData>\\n \
      \ extends React.ComponentProps<typeof motion.div> {\\n  table: Table<TData>;\\\
      n  visible?: boolean;\\n  container?: Element | DocumentFragment | null;\\n}\\\
      n\\nfunction DataTableActionBar<TData>({\\n  table,\\n  visible: visibleProp,\\\
      n  container: containerProp,\\n  children,\\n  className,\\n  ...props\\n}:\
      \ DataTableActionBarProps<TData>) {\\n  const [mounted, setMounted] = React.useState(false);\\\
      n\\n  React.useLayoutEffect(() => {\\n    setMounted(true);\\n  }, []);\\n\\\
      n  React.useEffect(() => {\\n    function onKeyDown(event: KeyboardEvent) {\\\
      n      if (event.key === \\\"Escape\\\") {\\n        table.toggleAllRowsSelected(false);\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [table]);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  const visible =\\n   \
      \ visibleProp ?? table.getFilteredSelectedRowModel().rows.length > 0;\\n\\n\
      \  return ReactDOM.createPortal(\\n    <AnimatePresence>\\n      {visible &&\
      \ (\\n        <motion.div\\n          role=\\\"toolbar\\\"\\n          aria-orientation=\\\
      \"horizontal\\\"\\n          initial={{ opacity: 0, y: 20 }}\\n          animate={{\
      \ opacity: 1, y: 0 }}\\n          exit={{ opacity: 0, y: 20 }}\\n          transition={{\
      \ duration: 0.2, ease: \\\"easeInOut\\\" }}\\n          className={cn(\\n  \
      \          \\\"fixed inset-x-0 bottom-6 z-50 mx-auto flex w-fit flex-wrap items-center\
      \ justify-center gap-2 rounded-md border bg-background p-2 text-foreground shadow-sm\\\
      \",\\n            className,\\n          )}\\n          {...props}\\n      \
      \  >\\n          {children}\\n        </motion.div>\\n      )}\\n    </AnimatePresence>,\\\
      n    container,\\n  );\\n}\\n\\ninterface DataTableActionBarActionProps\\n \
      \ extends React.ComponentProps<typeof Button> {\\n  tooltip?: string;\\n  isPending?:\
      \ boolean;\\n}\\n\\nfunction DataTableActionBarAction({\\n  size = \\\"sm\\\"\
      ,\\n  tooltip,\\n  isPending,\\n  disabled,\\n  className,\\n  children,\\n\
      \  ...props\\n}: DataTableActionBarActionProps) {\\n  const trigger = (\\n \
      \   <Button\\n      variant=\\\"secondary\\\"\\n      size={size}\\n      className={cn(\\\
      n        \\\"gap-1.5 border border-secondary bg-secondary/50 hover:bg-secondary/70\
      \ [&>svg]:size-3.5\\\",\\n        size === \\\"icon\\\" ? \\\"size-7\\\" : \\\
      \"h-7\\\",\\n        className,\\n      )}\\n      disabled={disabled || isPending}\\\
      n      {...props}\\n    >\\n      {isPending ? <Loader className=\\\"animate-spin\\\
      \" /> : children}\\n    </Button>\\n  );\\n\\n  if (!tooltip) return trigger;\\\
      n\\n  return (\\n    <Tooltip>\\n      <TooltipTrigger asChild>{trigger}</TooltipTrigger>\\\
      n      <TooltipContent\\n        sideOffset={6}\\n        className=\\\"border\
      \ bg-accent font-semibold text-foreground dark:bg-zinc-900 [&>span]:hidden\\\
      \"\\n      >\\n        <p>{tooltip}</p>\\n      </TooltipContent>\\n    </Tooltip>\\\
      n  );\\n}\\n\\nexport { DataTableActionBar, DataTableActionBarAction };\\n\"\
      ,\n       \"type\": \"registry:component\"\n     }\ndiff --git a/public/r/data-table-filter-list.json\
      \ b/public/r/data-table-filter-list.json\nindex 7924a4f..77d66c0 100644\n---\
      \ a/public/r/data-table-filter-list.json\n+++ b/public/r/data-table-filter-list.json\n\
      @@ -20,18 +20,18 @@\n   ],\n   \"files\": [\n     {\n-      \"path\": \"src/components/data-table/data-table-filter-list.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, ColumnMeta,\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  CalendarIcon,\\\
      n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\n  Trash2,\\\
      n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState }\
      \ from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport { DataTableRangeFilter\
      \ } from \\\"@/components/data-table/data-table-range-filter\\\";\\nimport {\
      \ Badge } from \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\
      \";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\\
      n  CommandItem,\\n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\\
      nimport {\\n  Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\\
      n  FacetedGroup,\\n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\\
      n} from \\\"@/components/ui/faceted\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport {\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\\
      n  SortableOverlay,\\n} from \\\"@/components/ui/sortable\\\";\\nimport { dataTableConfig\
      \ } from \\\"@/config/data-table\\\";\\nimport { useDebouncedCallback } from\
      \ \\\"@/hooks/use-debounced-callback\\\";\\nimport { getDefaultFilterOperator,\
      \ getFilterOperators } from \\\"@/lib/data-table\\\";\\nimport { formatDate\
      \ } from \\\"@/lib/format\\\";\\nimport { generateId } from \\\"@/lib/id\\\"\
      ;\\nimport { getFiltersStateParser } from \\\"@/lib/parsers\\\";\\nimport {\
      \ cn } from \\\"@/lib/utils\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/types/data-table\\\";\\\
      n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\"joinOperator\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterList<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  ...props\\n}: DataTableFilterListProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const labelId = React.useId();\\n  const descriptionId\
      \ = React.useId();\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ addButtonRef = React.useRef<HTMLButtonElement>(null);\\n\\n  const columns\
      \ = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\n   \
      \   .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n+      \"path\": \"src/components/data-table-filter-list.tsx\"\
      ,\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, ColumnMeta,\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  CalendarIcon,\\\
      n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\n  Trash2,\\\
      n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState }\
      \ from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport { DataTableRangeFilter\
      \ } from \\\"@/components/data-table-range-filter\\\";\\nimport { Badge } from\
      \ \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\";\\nimport {\\\
      n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\\
      n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\nimport {\\n  Faceted,\\\
      n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\n  FacetedGroup,\\\
      n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\n} from\
      \ \\\"@/components/ui/faceted\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport {\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\\
      n  SortableOverlay,\\n} from \\\"@/components/ui/sortable\\\";\\nimport { dataTableConfig\
      \ } from \\\"@/config/data-table\\\";\\nimport { useDebouncedCallback } from\
      \ \\\"@/hooks/use-debounced-callback\\\";\\nimport { getDefaultFilterOperator,\
      \ getFilterOperators } from \\\"@/lib/data-table\\\";\\nimport { formatDate\
      \ } from \\\"@/lib/format\\\";\\nimport { generateId } from \\\"@/lib/id\\\"\
      ;\\nimport { getFiltersStateParser } from \\\"@/lib/parsers\\\";\\nimport {\
      \ cn } from \\\"@/lib/utils\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/types/data-table\\\";\\\
      n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\"joinOperator\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterList<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  ...props\\n}: DataTableFilterListProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const labelId = React.useId();\\n  const descriptionId\
      \ = React.useId();\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ addButtonRef = React.useRef<HTMLButtonElement>(null);\\n\\n  const columns\
      \ = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\n   \
      \   .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n-\
      \      \"path\": \"src/components/data-table/data-table-range-filter.tsx\",\n\
      +      \"path\": \"src/components/data-table-range-filter.tsx\",\n       \"\
      content\": \"\\\"use client\\\";\\n\\nimport type { Column } from \\\"@tanstack/react-table\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { Input } from \\\"\
      @/components/ui/input\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport\
      \ type { ExtendedColumnFilter } from \\\"@/types/data-table\\\";\\n\\ninterface\
      \ DataTableRangeFilterProps<TData> extends React.ComponentProps<\\\"div\\\"\
      > {\\n  filter: ExtendedColumnFilter<TData>;\\n  column: Column<TData>;\\n \
      \ inputId: string;\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n}\\n\\nexport function DataTableRangeFilter<TData>({\\n  filter,\\n  column,\\\
      n  inputId,\\n  onFilterUpdate,\\n  className,\\n  ...props\\n}: DataTableRangeFilterProps<TData>)\
      \ {\\n  const meta = column.columnDef.meta;\\n\\n  const [min, max] = React.useMemo(()\
      \ => {\\n    const range = column.columnDef.meta?.range;\\n    if (range) return\
      \ range;\\n\\n    const values = column.getFacetedMinMaxValues();\\n    if (!values)\
      \ return [0, 100];\\n\\n    return [values[0], values[1]];\\n  }, [column]);\\\
      n\\n  const formatValue = React.useCallback(\\n    (value: string | number |\
      \ undefined) => {\\n      if (value === undefined || value === \\\"\\\") return\
      \ \\\"\\\";\\n      const numValue = Number(value);\\n      return Number.isNaN(numValue)\\\
      n        ? \\\"\\\"\\n        : numValue.toLocaleString(undefined, {\\n    \
      \        maximumFractionDigits: 0,\\n          });\\n    },\\n    [],\\n  );\\\
      n\\n  const value = React.useMemo(() => {\\n    if (Array.isArray(filter.value))\
      \ return filter.value.map(formatValue);\\n    return [formatValue(filter.value),\
      \ \\\"\\\"];\\n  }, [filter.value, formatValue]);\\n\\n  const onRangeValueChange\
      \ = React.useCallback(\\n    (value: string, isMin?: boolean) => {\\n      const\
      \ numValue = Number(value);\\n      const currentValues = Array.isArray(filter.value)\\\
      n        ? filter.value\\n        : [\\\"\\\", \\\"\\\"];\\n      const otherValue\
      \ = isMin\\n        ? (currentValues[1] ?? \\\"\\\")\\n        : (currentValues[0]\
      \ ?? \\\"\\\");\\n\\n      if (\\n        value === \\\"\\\" ||\\n        (!Number.isNaN(numValue)\
      \ &&\\n          (isMin\\n            ? numValue >= min && numValue <= (Number(otherValue)\
      \ || max)\\n            : numValue <= max && numValue >= (Number(otherValue)\
      \ || min)))\\n      ) {\\n        onFilterUpdate(filter.filterId, {\\n     \
      \     value: isMin ? [value, otherValue] : [otherValue, value],\\n        });\\\
      n      }\\n    },\\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\\\
      n  );\\n\\n  return (\\n    <div\\n      data-slot=\\\"range\\\"\\n      className={cn(\\\
      \"flex w-full items-center gap-2\\\", className)}\\n      {...props}\\n    >\\\
      n      <Input\\n        id={`${inputId}-min`}\\n        type=\\\"number\\\"\\\
      n        aria-label={`${meta?.label} minimum value`}\\n        aria-valuemin={min}\\\
      n        aria-valuemax={max}\\n        data-slot=\\\"range-min\\\"\\n      \
      \  inputMode=\\\"numeric\\\"\\n        placeholder={min.toString()}\\n     \
      \   min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[0]}\\n        onChange={(event) => onRangeValueChange(event.target.value,\
      \ true)}\\n      />\\n      <span className=\\\"sr-only shrink-0 text-muted-foreground\\\
      \">to</span>\\n      <Input\\n        id={`${inputId}-max`}\\n        type=\\\
      \"number\\\"\\n        aria-label={`${meta?.label} maximum value`}\\n      \
      \  aria-valuemin={min}\\n        aria-valuemax={max}\\n        data-slot=\\\"\
      range-max\\\"\\n        inputMode=\\\"numeric\\\"\\n        placeholder={max.toString()}\\\
      n        min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[1]}\\n        onChange={(event) => onRangeValueChange(event.target.value)}\\\
      n      />\\n    </div>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\
      \n     },\n     {\n-      \"path\": \"src/components/data-table/data-table-advanced-toolbar.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Table } from\
      \ \\\"@tanstack/react-table\\\";\\nimport type * as React from \\\"react\\\"\
      ;\\n\\nimport { DataTableViewOptions } from \\\"@/components/data-table/data-table-view-options\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\ninterface DataTableAdvancedToolbarProps<TData>\\\
      n  extends React.ComponentProps<\\\"div\\\"> {\\n  table: Table<TData>;\\n}\\\
      n\\nexport function DataTableAdvancedToolbar<TData>({\\n  table,\\n  children,\\\
      n  className,\\n  ...props\\n}: DataTableAdvancedToolbarProps<TData>) {\\n \
      \ return (\\n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\
      \"horizontal\\\"\\n      className={cn(\\n        \\\"flex w-full items-start\
      \ justify-between gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\\
      n    >\\n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\
      \">{children}</div>\\n      <div className=\\\"flex items-center gap-2\\\">\\\
      n        <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\\
      n  );\\n}\\n\",\n+      \"path\": \"src/components/data-table-advanced-toolbar.tsx\"\
      ,\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type { Table } from\
      \ \\\"@tanstack/react-table\\\";\\nimport type * as React from \\\"react\\\"\
      ;\\n\\nimport { DataTableViewOptions } from \\\"@/components/data-table-view-options\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\ninterface DataTableAdvancedToolbarProps<TData>\\\
      n  extends React.ComponentProps<\\\"div\\\"> {\\n  table: Table<TData>;\\n}\\\
      n\\nexport function DataTableAdvancedToolbar<TData>({\\n  table,\\n  children,\\\
      n  className,\\n  ...props\\n}: DataTableAdvancedToolbarProps<TData>) {\\n \
      \ return (\\n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\
      \"horizontal\\\"\\n      className={cn(\\n        \\\"flex w-full items-start\
      \ justify-between gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\\
      n    >\\n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\
      \">{children}</div>\\n      <div className=\\\"flex items-center gap-2\\\">\\\
      n        <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\\
      n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n\
      diff --git a/public/r/data-table-filter-menu.json b/public/r/data-table-filter-menu.json\n\
      index 459ff98..b74f77f 100644\n--- a/public/r/data-table-filter-menu.json\n\
      +++ b/public/r/data-table-filter-menu.json\n@@ -21,18 +21,18 @@\n   ],\n   \"\
      files\": [\n     {\n-      \"path\": \"src/components/data-table/data-table-filter-menu.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, Table\
      \ } from \\\"@tanstack/react-table\\\";\\nimport {\\n  BadgeCheck,\\n  CalendarIcon,\\\
      n  Check,\\n  ListFilter,\\n  Text,\\n  X,\\n} from \\\"lucide-react\\\";\\\
      nimport { useQueryState } from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\
      \";\\n\\nimport { DataTableRangeFilter } from \\\"@/components/data-table/data-table-range-filter\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Calendar\
      \ } from \\\"@/components/ui/calendar\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\\
      n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n} from\
      \ \\\"@/components/ui/command\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport { useDebouncedCallback } from \\\"@/hooks/use-debounced-callback\\\
      \";\\nimport { getDefaultFilterOperator, getFilterOperators } from \\\"@/lib/data-table\\\
      \";\\nimport { formatDate } from \\\"@/lib/format\\\";\\nimport { generateId\
      \ } from \\\"@/lib/id\\\";\\nimport { getFiltersStateParser } from \\\"@/lib/parsers\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport type { ExtendedColumnFilter,\
      \ FilterOperator } from \\\"@/types/data-table\\\";\\n\\nconst FILTERS_KEY =\
      \ \\\"filters\\\";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst\
      \ OPEN_MENU_SHORTCUT = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\
      \", \\\"delete\\\"];\\n\\ninterface DataTableFilterMenuProps<TData>\\n  extends\
      \ React.ComponentProps<typeof PopoverContent> {\\n  table: Table<TData>;\\n\
      \  debounceMs?: number;\\n  throttleMs?: number;\\n  shallow?: boolean;\\n}\\\
      n\\nexport function DataTableFilterMenu<TData>({\\n  table,\\n  debounceMs =\
      \ DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow = true,\\n  align =\
      \ \\\"start\\\",\\n  ...props\\n}: DataTableFilterMenuProps<TData>) {\\n  const\
      \ id = React.useId();\\n\\n  const columns = React.useMemo(() => {\\n    return\
      \ table\\n      .getAllColumns()\\n      .filter((column) => column.columnDef.enableColumnFilter);\\\
      n  }, [table]);\\n\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ [selectedColumn, setSelectedColumn] =\\n    React.useState<Column<TData> |\
      \ null>(null);\\n  const [inputValue, setInputValue] = React.useState(\\\"\\\
      \");\\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\\n  const\
      \ inputRef = React.useRef<HTMLInputElement>(null);\\n\\n  const onOpenChange\
      \ = React.useCallback((open: boolean) => {\\n    setOpen(open);\\n\\n    if\
      \ (!open) {\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\\
      n        setInputValue(\\\"\\\");\\n      }, 100);\\n    }\\n  }, []);\\n\\\
      n  const onInputKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLInputElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        !inputValue &&\\n        selectedColumn\\n      ) {\\n      \
      \  event.preventDefault();\\n        setSelectedColumn(null);\\n      }\\n \
      \   },\\n    [inputValue, selectedColumn],\\n  );\\n\\n  const [filters, setFilters]\
      \ = useQueryState(\\n    FILTERS_KEY,\\n    getFiltersStateParser<TData>(columns.map((field)\
      \ => field.id))\\n      .withDefault([])\\n      .withOptions({\\n        clearOnDefault:\
      \ true,\\n        shallow,\\n        throttleMs,\\n      }),\\n  );\\n  const\
      \ debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\\n\\n\
      \  const onFilterAdd = React.useCallback(\\n    (column: Column<TData>, value:\
      \ string) => {\\n      if (!value.trim() && column.columnDef.meta?.variant !==\
      \ \\\"boolean\\\") {\\n        return;\\n      }\\n\\n      const filterValue\
      \ =\\n        column.columnDef.meta?.variant === \\\"multiSelect\\\" ? [value]\
      \ : value;\\n\\n      const newFilter: ExtendedColumnFilter<TData> = {\\n  \
      \      id: column.id as Extract<keyof TData, string>,\\n        value: filterValue,\\\
      n        variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\n       \
      \ operator: getDefaultFilterOperator(\\n          column.columnDef.meta?.variant\
      \ ?? \\\"text\\\",\\n        ),\\n        filterId: generateId({ length: 8 }),\\\
      n      };\\n\\n      debouncedSetFilters([...filters, newFilter]);\\n      setOpen(false);\\\
      n\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\n        setInputValue(\\\
      \"\\\");\\n      }, 100);\\n    },\\n    [filters, debouncedSetFilters],\\n\
      \  );\\n\\n  const onFilterRemove = React.useCallback(\\n    (filterId: string)\
      \ => {\\n      const updatedFilters = filters.filter(\\n        (filter) =>\
      \ filter.filterId !== filterId,\\n      );\\n      debouncedSetFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        triggerRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, debouncedSetFilters],\\n  );\\n\\n  const\
      \ onFilterUpdate = React.useCallback(\\n    (\\n      filterId: string,\\n \
      \     updates: Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\\
      n    ) => {\\n      debouncedSetFilters((prevFilters) => {\\n        const updatedFilters\
      \ = prevFilters.map((filter) => {\\n          if (filter.filterId === filterId)\
      \ {\\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\\\
      n          }\\n          return filter;\\n        });\\n        return updatedFilters;\\\
      n      });\\n    },\\n    [debouncedSetFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    debouncedSetFilters([]);\\n  }, [debouncedSetFilters]);\\\
      n\\n  React.useEffect(() => {\\n    function onKeyDown(event: KeyboardEvent)\
      \ {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\n  \
      \      event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        !event.ctrlKey &&\\n        !event.metaKey &&\\n        !event.shiftKey\\\
      n      ) {\\n        event.preventDefault();\\n        setOpen(true);\\n   \
      \   }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        event.shiftKey &&\\n        !open &&\\n        filters.length\
      \ > 0\\n      ) {\\n        event.preventDefault();\\n        onFilterRemove(filters[filters.length\
      \ - 1]?.filterId ?? \\\"\\\");\\n      }\\n    }\\n\\n    window.addEventListener(\\\
      \"keydown\\\", onKeyDown);\\n    return () => window.removeEventListener(\\\"\
      keydown\\\", onKeyDown);\\n  }, [open, filters, onFilterRemove]);\\n\\n  const\
      \ onTriggerKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLButtonElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\\
      n    <div className=\\\"flex flex-wrap items-center gap-2\\\">\\n      {filters.map((filter)\
      \ => (\\n        <DataTableFilterItem\\n          key={filter.filterId}\\n \
      \         filter={filter}\\n          filterItemId={`${id}-filter-${filter.filterId}`}\\\
      n          columns={columns}\\n          onFilterUpdate={onFilterUpdate}\\n\
      \          onFilterRemove={onFilterRemove}\\n        />\\n      ))}\\n     \
      \ {filters.length > 0 && (\\n        <Button\\n          aria-label=\\\"Reset\
      \ all filters\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\"\
      icon\\\"\\n          className=\\\"size-8\\\"\\n          onClick={onFiltersReset}\\\
      n        >\\n          <X />\\n        </Button>\\n      )}\\n      <Popover\
      \ open={open} onOpenChange={onOpenChange}>\\n        <PopoverTrigger asChild>\\\
      n          <Button\\n            aria-label=\\\"Open filter command menu\\\"\
      \\n            variant=\\\"outline\\\"\\n            size={filters.length >\
      \ 0 ? \\\"icon\\\" : \\\"sm\\\"}\\n            className={cn(filters.length\
      \ > 0 && \\\"size-8\\\", \\\"h-8\\\")}\\n            ref={triggerRef}\\n   \
      \         onKeyDown={onTriggerKeyDown}\\n          >\\n            <ListFilter\
      \ />\\n            {filters.length > 0 ? null : \\\"Filter\\\"}\\n         \
      \ </Button>\\n        </PopoverTrigger>\\n        <PopoverContent\\n       \
      \   align={align}\\n          className=\\\"w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] p-0\\\"\\n        \
      \  {...props}\\n        >\\n          <Command loop className=\\\"[&_[cmdk-input-wrapper]_svg]:hidden\\\
      \">\\n            <CommandInput\\n              ref={inputRef}\\n          \
      \    placeholder={\\n                selectedColumn\\n                  ? (selectedColumn.columnDef.meta?.label\
      \ ?? selectedColumn.id)\\n                  : \\\"Search fields...\\\"\\n  \
      \            }\\n              value={inputValue}\\n              onValueChange={setInputValue}\\\
      n              onKeyDown={onInputKeyDown}\\n            />\\n            <CommandList>\\\
      n              {selectedColumn ? (\\n                <>\\n                 \
      \ {selectedColumn.columnDef.meta?.options && (\\n                    <CommandEmpty>No\
      \ options found.</CommandEmpty>\\n                  )}\\n                  <FilterValueSelector\\\
      n                    column={selectedColumn}\\n                    value={inputValue}\\\
      n                    onSelect={(value) => onFilterAdd(selectedColumn, value)}\\\
      n                  />\\n                </>\\n              ) : (\\n       \
      \         <>\\n                  <CommandEmpty>No fields found.</CommandEmpty>\\\
      n                  <CommandGroup>\\n                    {columns.map((column)\
      \ => (\\n                      <CommandItem\\n                        key={column.id}\\\
      n                        value={column.id}\\n                        onSelect={()\
      \ => {\\n                          setSelectedColumn(column);\\n           \
      \               setInputValue(\\\"\\\");\\n                          requestAnimationFrame(()\
      \ => {\\n                            inputRef.current?.focus();\\n         \
      \                 });\\n                        }}\\n                      >\\\
      n                        {column.columnDef.meta?.icon && (\\n              \
      \            <column.columnDef.meta.icon />\\n                        )}\\n\
      \                        <span className=\\\"truncate\\\">\\n              \
      \            {column.columnDef.meta?.label ?? column.id}\\n                \
      \        </span>\\n                      </CommandItem>\\n                 \
      \   ))}\\n                  </CommandGroup>\\n                </>\\n       \
      \       )}\\n            </CommandList>\\n          </Command>\\n        </PopoverContent>\\\
      n      </Popover>\\n    </div>\\n  );\\n}\\n\\ninterface DataTableFilterItemProps<TData>\
      \ {\\n  filter: ExtendedColumnFilter<TData>;\\n  filterItemId: string;\\n  columns:\
      \ Column<TData>[];\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n  onFilterRemove: (filterId: string) => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\\
      n  filter,\\n  filterItemId,\\n  columns,\\n  onFilterUpdate,\\n  onFilterRemove,\\\
      n}: DataTableFilterItemProps<TData>) {\\n  {\\n    const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n    const [showOperatorSelector,\
      \ setShowOperatorSelector] =\\n      React.useState(false);\\n    const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n    const column = columns.find((column)\
      \ => column.id === filter.id);\\n    if (!column) return null;\\n\\n    const\
      \ operatorListboxId = `${filterItemId}-operator-listbox`;\\n    const inputId\
      \ = `${filterItemId}-input`;\\n\\n    const columnMeta = column.columnDef.meta;\\\
      n    const filterOperators = getFilterOperators(filter.variant);\\n\\n    const\
      \ onItemKeyDown = React.useCallback(\\n      (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n        if (\\n          event.target instanceof HTMLInputElement ||\\\
      n          event.target instanceof HTMLTextAreaElement\\n        ) {\\n    \
      \      return;\\n        }\\n\\n        if (showFieldSelector || showOperatorSelector\
      \ || showValueSelector) {\\n          return;\\n        }\\n\\n        if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n          event.preventDefault();\\n          onFilterRemove(filter.filterId);\\\
      n        }\\n      },\\n      [\\n        filter.filterId,\\n        showFieldSelector,\\\
      n        showOperatorSelector,\\n        showValueSelector,\\n        onFilterRemove,\\\
      n      ],\\n    );\\n\\n    return (\\n      <div\\n        key={filter.filterId}\\\
      n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n        className=\\\
      \"flex h-8 items-center rounded-md bg-background\\\"\\n        onKeyDown={onItemKeyDown}\\\
      n      >\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              variant=\\\
      \"ghost\\\"\\n              size=\\\"sm\\\"\\n              className=\\\"rounded-none\
      \ rounded-l-md border border-r-0 font-normal dark:bg-input/30\\\"\\n       \
      \     >\\n              {columnMeta?.icon && (\\n                <columnMeta.icon\
      \ className=\\\"text-muted-foreground\\\" />\\n              )}\\n         \
      \     {columnMeta?.label ?? column.id}\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            align=\\\"start\\\"\\n            className=\\\
      \"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\\\"\\n   \
      \       >\\n            <Command loop>\\n              <CommandInput placeholder=\\\
      \"Search fields...\\\" />\\n              <CommandList>\\n                <CommandEmpty>No\
      \ fields found.</CommandEmpty>\\n                <CommandGroup>\\n         \
      \         {columns.map((column) => (\\n                    <CommandItem\\n \
      \                     key={column.id}\\n                      value={column.id}\\\
      n                      onSelect={() => {\\n                        onFilterUpdate(filter.filterId,\
      \ {\\n                          id: column.id as Extract<keyof TData, string>,\\\
      n                          variant: column.columnDef.meta?.variant ?? \\\"text\\\
      \",\\n                          operator: getDefaultFilterOperator(\\n     \
      \                       column.columnDef.meta?.variant ?? \\\"text\\\",\\n \
      \                         ),\\n                          value: \\\"\\\",\\\
      n                        });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      {column.columnDef.meta?.icon\
      \ && (\\n                        <column.columnDef.meta.icon />\\n         \
      \             )}\\n                      <span className=\\\"truncate\\\">\\\
      n                        {column.columnDef.meta?.label ?? column.id}\\n    \
      \                  </span>\\n                      <Check\\n               \
      \         className={cn(\\n                          \\\"ml-auto\\\",\\n   \
      \                       column.id === filter.id ? \\\"opacity-100\\\" : \\\"\
      opacity-0\\\",\\n                        )}\\n                      />\\n  \
      \                  </CommandItem>\\n                  ))}\\n               \
      \ </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 rounded-none border-r-0 px-2.5 lowercase [&[data-size]]:h-8\
      \ [&_svg]:hidden\\\"\\n          >\\n            <SelectValue placeholder={filter.operator}\
      \ />\\n          </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    className=\\\"lowercase\\\"\\n                value={operator.value}\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ {onFilterInputRender({\\n          filter,\\n          column,\\n        \
      \  inputId,\\n          onFilterUpdate,\\n          showValueSelector,\\n  \
      \        setShowValueSelector,\\n        })}\\n        <Button\\n          aria-controls={filterItemId}\\\
      n          variant=\\\"ghost\\\"\\n          size=\\\"sm\\\"\\n          className=\\\
      \"h-full rounded-none rounded-r-md border border-l-0 px-1.5 font-normal dark:bg-input/30\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <X className=\\\"size-3.5\\\" />\\n        </Button>\\n      </div>\\\
      n    );\\n  }\\n}\\n\\ninterface FilterValueSelectorProps<TData> {\\n  column:\
      \ Column<TData>;\\n  value: string;\\n  onSelect: (value: string) => void;\\\
      n}\\n\\nfunction FilterValueSelector<TData>({\\n  column,\\n  value,\\n  onSelect,\\\
      n}: FilterValueSelectorProps<TData>) {\\n  const variant = column.columnDef.meta?.variant\
      \ ?? \\\"text\\\";\\n\\n  switch (variant) {\\n    case \\\"boolean\\\":\\n\
      \      return (\\n        <CommandGroup>\\n          <CommandItem value=\\\"\
      true\\\" onSelect={() => onSelect(\\\"true\\\")}>\\n            True\\n    \
      \      </CommandItem>\\n          <CommandItem value=\\\"false\\\" onSelect={()\
      \ => onSelect(\\\"false\\\")}>\\n            False\\n          </CommandItem>\\\
      n        </CommandGroup>\\n      );\\n\\n    case \\\"select\\\":\\n    case\
      \ \\\"multiSelect\\\":\\n      return (\\n        <CommandGroup>\\n        \
      \  {column.columnDef.meta?.options?.map((option) => (\\n            <CommandItem\\\
      n              key={option.value}\\n              value={option.value}\\n  \
      \            onSelect={() => onSelect(option.value)}\\n            >\\n    \
      \          {option.icon && <option.icon />}\\n              <span className=\\\
      \"truncate\\\">{option.label}</span>\\n              {option.count && (\\n \
      \               <span className=\\\"ml-auto font-mono text-xs\\\">\\n      \
      \            {option.count}\\n                </span>\\n              )}\\n\
      \            </CommandItem>\\n          ))}\\n        </CommandGroup>\\n   \
      \   );\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\\n      return\
      \ (\\n        <Calendar\\n          initialFocus\\n          mode=\\\"single\\\
      \"\\n          selected={value ? new Date(value) : undefined}\\n          onSelect={(date)\
      \ => onSelect(date?.getTime().toString() ?? \\\"\\\")}\\n        />\\n     \
      \ );\\n\\n    default: {\\n      const isEmpty = !value.trim();\\n\\n      return\
      \ (\\n        <CommandGroup>\\n          <CommandItem\\n            value={value}\\\
      n            onSelect={() => onSelect(value)}\\n            disabled={isEmpty}\\\
      n          >\\n            {isEmpty ? (\\n              <>\\n              \
      \  <Text />\\n                <span>Type to add filter...</span>\\n        \
      \      </>\\n            ) : (\\n              <>\\n                <BadgeCheck\
      \ />\\n                <span className=\\\"truncate\\\">Filter by &quot;{value}&quot;</span>\\\
      n              </>\\n            )}\\n          </CommandItem>\\n        </CommandGroup>\\\
      n      );\\n    }\\n  }\\n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\\
      n  column,\\n  inputId,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  column: Column<TData>;\\\
      n  inputId: string;\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n  showValueSelector: boolean;\\n  setShowValueSelector: (value: boolean) =>\
      \ void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\" || filter.operator\
      \ === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\n        id={inputId}\\\
      n        role=\\\"status\\\"\\n        aria-label={`${column.columnDef.meta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-full w-16 rounded-none border bg-transparent px-1.5\
      \ py-0.5 text-muted-foreground dark:bg-input/30\\\"\\n      />\\n    );\\n \
      \ }\\n\\n  switch (filter.variant) {\\n    case \\\"text\\\":\\n    case \\\"\
      number\\\":\\n    case \\\"range\\\": {\\n      if (\\n        (filter.variant\
      \ === \\\"range\\\" && filter.operator === \\\"isBetween\\\") ||\\n        filter.operator\
      \ === \\\"isBetween\\\"\\n      ) {\\n        return (\\n          <DataTableRangeFilter\\\
      n            filter={filter}\\n            column={column}\\n            inputId={inputId}\\\
      n            onFilterUpdate={onFilterUpdate}\\n            className=\\\"size-full\
      \ max-w-28 gap-0 [&_[data-slot='range-min']]:border-r-0 [&_input]:rounded-none\
      \ [&_input]:px-1.5\\\"\\n          />\\n        );\\n      }\\n\\n      const\
      \ isNumber =\\n        filter.variant === \\\"number\\\" || filter.variant ===\
      \ \\\"range\\\";\\n\\n      return (\\n        <Input\\n          id={inputId}\\\
      n          type={isNumber ? \\\"number\\\" : \\\"text\\\"}\\n          inputMode={isNumber\
      \ ? \\\"numeric\\\" : undefined}\\n          placeholder={column.columnDef.meta?.placeholder\
      \ ?? \\\"Enter value...\\\"}\\n          className=\\\"h-full w-24 rounded-none\
      \ px-1.5\\\"\\n          defaultValue={typeof filter.value === \\\"string\\\"\
      \ ? filter.value : \\\"\\\"}\\n          onChange={(event) =>\\n           \
      \ onFilterUpdate(filter.filterId, { value: event.target.value })\\n        \
      \  }\\n        />\\n      );\\n    }\\n\\n    case \\\"boolean\\\": {\\n   \
      \   const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\n    \
      \    <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={typeof filter.value === \\\"string\\\" ? filter.value : \\\
      \"true\\\"}\\n          onValueChange={(value: \\\"true\\\" | \\\"false\\\"\
      ) =>\\n            onFilterUpdate(filter.filterId, { value })\\n          }\\\
      n        >\\n          <SelectTrigger\\n            id={inputId}\\n        \
      \    aria-controls={inputListboxId}\\n            className=\\\"rounded-none\
      \ bg-transparent px-1.5 py-0.5 [&_svg]:hidden\\\"\\n          >\\n         \
      \   <SelectValue placeholder={filter.value ? \\\"True\\\" : \\\"False\\\"} />\\\
      n          </SelectTrigger>\\n          <SelectContent id={inputListboxId}>\\\
      n            <SelectItem value=\\\"true\\\">True</SelectItem>\\n           \
      \ <SelectItem value=\\\"false\\\">False</SelectItem>\\n          </SelectContent>\\\
      n        </Select>\\n      );\\n    }\\n\\n    case \\\"select\\\":\\n    case\
      \ \\\"multiSelect\\\": {\\n      const inputListboxId = `${inputId}-listbox`;\\\
      n\\n      const options = column.columnDef.meta?.options ?? [];\\n      const\
      \ selectedValues = Array.isArray(filter.value)\\n        ? filter.value\\n \
      \       : [filter.value];\\n\\n      const selectedOptions = options.filter((option)\
      \ =>\\n        selectedValues.includes(option.value),\\n      );\\n\\n     \
      \ return (\\n        <Popover open={showValueSelector} onOpenChange={setShowValueSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              id={inputId}\\\
      n              aria-controls={inputListboxId}\\n              variant=\\\"ghost\\\
      \"\\n              size=\\\"sm\\\"\\n              className=\\\"h-full min-w-16\
      \ rounded-none border px-1.5 font-normal dark:bg-input/30\\\"\\n           \
      \ >\\n              {selectedOptions.length === 0 ? (\\n                filter.variant\
      \ === \\\"multiSelect\\\" ? (\\n                  \\\"Select options...\\\"\\\
      n                ) : (\\n                  \\\"Select option...\\\"\\n     \
      \           )\\n              ) : (\\n                <>\\n                \
      \  <div className=\\\"-space-x-2 flex items-center rtl:space-x-reverse\\\">\\\
      n                    {selectedOptions.map((selectedOption) =>\\n           \
      \           selectedOption.icon ? (\\n                        <div\\n      \
      \                    key={selectedOption.value}\\n                         \
      \ className=\\\"rounded-full border bg-background p-0.5\\\"\\n             \
      \           >\\n                          <selectedOption.icon className=\\\"\
      size-3.5\\\" />\\n                        </div>\\n                      ) :\
      \ null,\\n                    )}\\n                  </div>\\n             \
      \     <span className=\\\"truncate\\\">\\n                    {selectedOptions.length\
      \ > 1\\n                      ? `${selectedOptions.length} selected`\\n    \
      \                  : selectedOptions[0]?.label}\\n                  </span>\\\
      n                </>\\n              )}\\n            </Button>\\n         \
      \ </PopoverTrigger>\\n          <PopoverContent\\n            id={inputListboxId}\\\
      n            align=\\\"start\\\"\\n            className=\\\"w-48 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search options...\\\" />\\n              <CommandList>\\n\
      \                <CommandEmpty>No options found.</CommandEmpty>\\n         \
      \       <CommandGroup>\\n                  {options.map((option) => (\\n   \
      \                 <CommandItem\\n                      key={option.value}\\\
      n                      value={option.value}\\n                      onSelect={()\
      \ => {\\n                        const value =\\n                          filter.variant\
      \ === \\\"multiSelect\\\"\\n                            ? selectedValues.includes(option.value)\\\
      n                              ? selectedValues.filter((v) => v !== option.value)\\\
      n                              : [...selectedValues, option.value]\\n      \
      \                      : option.value;\\n                        onFilterUpdate(filter.filterId,\
      \ { value });\\n                      }}\\n                    >\\n        \
      \              {option.icon && <option.icon />}\\n                      <span\
      \ className=\\\"truncate\\\">{option.label}</span>\\n                      {filter.variant\
      \ === \\\"multiSelect\\\" && (\\n                        <Check\\n         \
      \                 className={cn(\\n                            \\\"ml-auto\\\
      \",\\n                            selectedValues.includes(option.value)\\n \
      \                             ? \\\"opacity-100\\\"\\n                     \
      \         : \\\"opacity-0\\\",\\n                          )}\\n           \
      \             />\\n                      )}\\n                    </CommandItem>\\\
      n                  ))}\\n                </CommandGroup>\\n              </CommandList>\\\
      n            </Command>\\n          </PopoverContent>\\n        </Popover>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick date...\\\";\\n\\n      return (\\n        <Popover\
      \ open={showValueSelector} onOpenChange={setShowValueSelector}>\\n         \
      \ <PopoverTrigger asChild>\\n            <Button\\n              id={inputId}\\\
      n              aria-controls={inputListboxId}\\n              variant=\\\"ghost\\\
      \"\\n              size=\\\"sm\\\"\\n              className={cn(\\n       \
      \         \\\"h-full rounded-none border px-1.5 font-normal dark:bg-input/30\\\
      \",\\n                !filter.value && \\\"text-muted-foreground\\\",\\n   \
      \           )}\\n            >\\n              <CalendarIcon className=\\\"\
      size-3.5\\\" />\\n              <span className=\\\"truncate\\\">{displayValue}</span>\\\
      n            </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                mode=\\\"range\\\"\\n    \
      \            initialFocus\\n                selected={\\n                  dateValue.length\
      \ === 2\\n                    ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                mode=\\\"single\\\"\\n                initialFocus\\n     \
      \           selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n+      \"path\": \"src/components/data-table-filter-menu.tsx\"\
      ,\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, Table\
      \ } from \\\"@tanstack/react-table\\\";\\nimport {\\n  BadgeCheck,\\n  CalendarIcon,\\\
      n  Check,\\n  ListFilter,\\n  Text,\\n  X,\\n} from \\\"lucide-react\\\";\\\
      nimport { useQueryState } from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\
      \";\\n\\nimport { DataTableRangeFilter } from \\\"@/components/data-table-range-filter\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Calendar\
      \ } from \\\"@/components/ui/calendar\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\\
      n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n} from\
      \ \\\"@/components/ui/command\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport { useDebouncedCallback } from \\\"@/hooks/use-debounced-callback\\\
      \";\\nimport { getDefaultFilterOperator, getFilterOperators } from \\\"@/lib/data-table\\\
      \";\\nimport { formatDate } from \\\"@/lib/format\\\";\\nimport { generateId\
      \ } from \\\"@/lib/id\\\";\\nimport { getFiltersStateParser } from \\\"@/lib/parsers\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport type { ExtendedColumnFilter,\
      \ FilterOperator } from \\\"@/types/data-table\\\";\\n\\nconst FILTERS_KEY =\
      \ \\\"filters\\\";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst\
      \ OPEN_MENU_SHORTCUT = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\
      \", \\\"delete\\\"];\\n\\ninterface DataTableFilterMenuProps<TData>\\n  extends\
      \ React.ComponentProps<typeof PopoverContent> {\\n  table: Table<TData>;\\n\
      \  debounceMs?: number;\\n  throttleMs?: number;\\n  shallow?: boolean;\\n}\\\
      n\\nexport function DataTableFilterMenu<TData>({\\n  table,\\n  debounceMs =\
      \ DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow = true,\\n  align =\
      \ \\\"start\\\",\\n  ...props\\n}: DataTableFilterMenuProps<TData>) {\\n  const\
      \ id = React.useId();\\n\\n  const columns = React.useMemo(() => {\\n    return\
      \ table\\n      .getAllColumns()\\n      .filter((column) => column.columnDef.enableColumnFilter);\\\
      n  }, [table]);\\n\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ [selectedColumn, setSelectedColumn] =\\n    React.useState<Column<TData> |\
      \ null>(null);\\n  const [inputValue, setInputValue] = React.useState(\\\"\\\
      \");\\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\\n  const\
      \ inputRef = React.useRef<HTMLInputElement>(null);\\n\\n  const onOpenChange\
      \ = React.useCallback((open: boolean) => {\\n    setOpen(open);\\n\\n    if\
      \ (!open) {\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\\
      n        setInputValue(\\\"\\\");\\n      }, 100);\\n    }\\n  }, []);\\n\\\
      n  const onInputKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLInputElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        !inputValue &&\\n        selectedColumn\\n      ) {\\n      \
      \  event.preventDefault();\\n        setSelectedColumn(null);\\n      }\\n \
      \   },\\n    [inputValue, selectedColumn],\\n  );\\n\\n  const [filters, setFilters]\
      \ = useQueryState(\\n    FILTERS_KEY,\\n    getFiltersStateParser<TData>(columns.map((field)\
      \ => field.id))\\n      .withDefault([])\\n      .withOptions({\\n        clearOnDefault:\
      \ true,\\n        shallow,\\n        throttleMs,\\n      }),\\n  );\\n  const\
      \ debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\\n\\n\
      \  const onFilterAdd = React.useCallback(\\n    (column: Column<TData>, value:\
      \ string) => {\\n      if (!value.trim() && column.columnDef.meta?.variant !==\
      \ \\\"boolean\\\") {\\n        return;\\n      }\\n\\n      const filterValue\
      \ =\\n        column.columnDef.meta?.variant === \\\"multiSelect\\\" ? [value]\
      \ : value;\\n\\n      const newFilter: ExtendedColumnFilter<TData> = {\\n  \
      \      id: column.id as Extract<keyof TData, string>,\\n        value: filterValue,\\\
      n        variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\n       \
      \ operator: getDefaultFilterOperator(\\n          column.columnDef.meta?.variant\
      \ ?? \\\"text\\\",\\n        ),\\n        filterId: generateId({ length: 8 }),\\\
      n      };\\n\\n      debouncedSetFilters([...filters, newFilter]);\\n      setOpen(false);\\\
      n\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\n        setInputValue(\\\
      \"\\\");\\n      }, 100);\\n    },\\n    [filters, debouncedSetFilters],\\n\
      \  );\\n\\n  const onFilterRemove = React.useCallback(\\n    (filterId: string)\
      \ => {\\n      const updatedFilters = filters.filter(\\n        (filter) =>\
      \ filter.filterId !== filterId,\\n      );\\n      debouncedSetFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        triggerRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, debouncedSetFilters],\\n  );\\n\\n  const\
      \ onFilterUpdate = React.useCallback(\\n    (\\n      filterId: string,\\n \
      \     updates: Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\\
      n    ) => {\\n      debouncedSetFilters((prevFilters) => {\\n        const updatedFilters\
      \ = prevFilters.map((filter) => {\\n          if (filter.filterId === filterId)\
      \ {\\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\\\
      n          }\\n          return filter;\\n        });\\n        return updatedFilters;\\\
      n      });\\n    },\\n    [debouncedSetFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    debouncedSetFilters([]);\\n  }, [debouncedSetFilters]);\\\
      n\\n  React.useEffect(() => {\\n    function onKeyDown(event: KeyboardEvent)\
      \ {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\n  \
      \      event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        !event.ctrlKey &&\\n        !event.metaKey &&\\n        !event.shiftKey\\\
      n      ) {\\n        event.preventDefault();\\n        setOpen(true);\\n   \
      \   }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        event.shiftKey &&\\n        !open &&\\n        filters.length\
      \ > 0\\n      ) {\\n        event.preventDefault();\\n        onFilterRemove(filters[filters.length\
      \ - 1]?.filterId ?? \\\"\\\");\\n      }\\n    }\\n\\n    window.addEventListener(\\\
      \"keydown\\\", onKeyDown);\\n    return () => window.removeEventListener(\\\"\
      keydown\\\", onKeyDown);\\n  }, [open, filters, onFilterRemove]);\\n\\n  const\
      \ onTriggerKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLButtonElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\\
      n    <div className=\\\"flex flex-wrap items-center gap-2\\\">\\n      {filters.map((filter)\
      \ => (\\n        <DataTableFilterItem\\n          key={filter.filterId}\\n \
      \         filter={filter}\\n          filterItemId={`${id}-filter-${filter.filterId}`}\\\
      n          columns={columns}\\n          onFilterUpdat\n... (truncated)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: add ui (#954)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/README.md b/README.md\nindex bf13cd5..f1cd235 100644\n\
      --- a/README.md\n+++ b/README.md\n@@ -6,7 +6,7 @@ This is a shadcn table component\
      \ with server-side sorting, filtering, and pagina\n \n ## Documentation\n \n\
      -See the [documentation](https://diceui.com/docs/data-table) for more information.\n\
      +See the [documentation](https://diceui.com/docs/data-table) to get started.\n\
      \ \n ## Tech Stack\n \ndiff --git a/public/images/screenshot.png b/public/images/screenshot.png\n\
      index 025b448..d2efe1b 100644\nBinary files a/public/images/screenshot.png and\
      \ b/public/images/screenshot.png differ\ndiff --git a/public/r/data-table-filter-list.json\
      \ b/public/r/data-table-filter-list.json\nindex 654e394..7924a4f 100644\n---\
      \ a/public/r/data-table-filter-list.json\n+++ b/public/r/data-table-filter-list.json\n\
      @@ -37,12 +37,12 @@\n     {\n       \"path\": \"src/components/ui/sortable.tsx\"\
      ,\n       \"content\": \"\\\"use client\\\";\\n\\nimport {\\n  type Announcements,\\\
      n  DndContext,\\n  type DndContextProps,\\n  type DragEndEvent,\\n  DragOverlay,\\\
      n  type DraggableSyntheticListeners,\\n  type DropAnimation,\\n  KeyboardSensor,\\\
      n  MouseSensor,\\n  type ScreenReaderInstructions,\\n  TouchSensor,\\n  type\
      \ UniqueIdentifier,\\n  closestCenter,\\n  closestCorners,\\n  defaultDropAnimationSideEffects,\\\
      n  useSensor,\\n  useSensors,\\n} from \\\"@dnd-kit/core\\\";\\nimport {\\n\
      \  restrictToHorizontalAxis,\\n  restrictToParentElement,\\n  restrictToVerticalAxis,\\\
      n} from \\\"@dnd-kit/modifiers\\\";\\nimport {\\n  SortableContext,\\n  type\
      \ SortableContextProps,\\n  arrayMove,\\n  horizontalListSortingStrategy,\\\
      n  sortableKeyboardCoordinates,\\n  useSortable,\\n  verticalListSortingStrategy,\\\
      n} from \\\"@dnd-kit/sortable\\\";\\nimport { CSS } from \\\"@dnd-kit/utilities\\\
      \";\\nimport { Slot } from \\\"@radix-ui/react-slot\\\";\\nimport * as React\
      \ from \\\"react\\\";\\n\\nimport { composeEventHandlers, useComposedRefs }\
      \ from \\\"@/lib/composition\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\\
      nimport * as ReactDOM from \\\"react-dom\\\";\\n\\nconst orientationConfig =\
      \ {\\n  vertical: {\\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\\\
      n    strategy: verticalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  horizontal: {\\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\\\
      n    strategy: horizontalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  mixed: {\\n    modifiers: [restrictToParentElement],\\n    strategy:\
      \ undefined,\\n    collisionDetection: closestCorners,\\n  },\\n};\\n\\nconst\
      \ ROOT_NAME = \\\"Sortable\\\";\\nconst CONTENT_NAME = \\\"SortableContent\\\
      \";\\nconst ITEM_NAME = \\\"SortableItem\\\";\\nconst ITEM_HANDLE_NAME = \\\"\
      SortableItemHandle\\\";\\nconst OVERLAY_NAME = \\\"SortableOverlay\\\";\\n\\\
      nconst SORTABLE_ERRORS = {\\n  [ROOT_NAME]: `\\\\`${ROOT_NAME}\\\\` components\
      \ must be within \\\\`${ROOT_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${ROOT_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${CONTENT_NAME}\\\\``,\\n  [ITEM_HANDLE_NAME]: `\\\\\
      `${ITEM_HANDLE_NAME}\\\\` must be within \\\\`${ITEM_NAME}\\\\``,\\n  [OVERLAY_NAME]:\
      \ `\\\\`${OVERLAY_NAME}\\\\` must be within \\\\`${ROOT_NAME}\\\\``,\\n} as\
      \ const;\\n\\ninterface SortableRootContextValue<T> {\\n  id: string;\\n  items:\
      \ UniqueIdentifier[];\\n  modifiers: DndContextProps[\\\"modifiers\\\"];\\n\
      \  strategy: SortableContextProps[\\\"strategy\\\"];\\n  activeId: UniqueIdentifier\
      \ | null;\\n  setActiveId: (id: UniqueIdentifier | null) => void;\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n  flatCursor: boolean;\\n}\\n\\nconst SortableRootContext\
      \ =\\n  React.createContext<SortableRootContextValue<unknown> | null>(null);\\\
      nSortableRootContext.displayName = ROOT_NAME;\\n\\nfunction useSortableContext(name:\
      \ keyof typeof SORTABLE_ERRORS) {\\n  const context = React.useContext(SortableRootContext);\\\
      n  if (!context) {\\n    throw new Error(SORTABLE_ERRORS[name]);\\n  }\\n  return\
      \ context;\\n}\\n\\ninterface GetItemValue<T> {\\n  /**\\n   * Callback that\
      \ returns a unique identifier for each sortable item. Required for array of\
      \ objects.\\n   * @example getItemValue={(item) => item.id}\\n   */\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n}\\n\\ntype SortableProps<T> = DndContextProps\
      \ & {\\n  value: T[];\\n  onValueChange?: (items: T[]) => void;\\n  onMove?:\
      \ (\\n    event: DragEndEvent & { activeIndex: number; overIndex: number },\\\
      n  ) => void;\\n  strategy?: SortableContextProps[\\\"strategy\\\"];\\n  orientation?:\
      \ \\\"vertical\\\" | \\\"horizontal\\\" | \\\"mixed\\\";\\n  flatCursor?: boolean;\\\
      n} & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\\n\\nfunction\
      \ Sortable<T>(props: SortableProps<T>) {\\n  const {\\n    value,\\n    onValueChange,\\\
      n    collisionDetection,\\n    modifiers,\\n    strategy,\\n    onMove,\\n \
      \   orientation = \\\"vertical\\\",\\n    flatCursor = false,\\n    getItemValue:\
      \ getItemValueProp,\\n    accessibility,\\n    ...sortableProps\\n  } = props;\\\
      n  const id = React.useId();\\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier\
      \ | null>(null);\\n\\n  const sensors = useSensors(\\n    useSensor(MouseSensor),\\\
      n    useSensor(TouchSensor),\\n    useSensor(KeyboardSensor, {\\n      coordinateGetter:\
      \ sortableKeyboardCoordinates,\\n    }),\\n  );\\n  const config = React.useMemo(\\\
      n    () => orientationConfig[orientation],\\n    [orientation],\\n  );\\n\\\
      n  const getItemValue = React.useCallback(\\n    (item: T): UniqueIdentifier\
      \ => {\\n      if (typeof item === \\\"object\\\" && !getItemValueProp) {\\\
      n        throw new Error(\\n          \\\"getItemValue is required when using\
      \ array of objects.\\\",\\n        );\\n      }\\n      return getItemValueProp\\\
      n        ? getItemValueProp(item)\\n        : (item as UniqueIdentifier);\\\
      n    },\\n    [getItemValueProp],\\n  );\\n\\n  const items = React.useMemo(()\
      \ => {\\n    return value.map((item) => getItemValue(item));\\n  }, [value,\
      \ getItemValue]);\\n\\n  const onDragEnd = React.useCallback(\\n    (event:\
      \ DragEndEvent) => {\\n      const { active, over } = event;\\n      if (over\
      \ && active.id !== over?.id) {\\n        const activeIndex = value.findIndex(\\\
      n          (item) => getItemValue(item) === active.id,\\n        );\\n     \
      \   const overIndex = value.findIndex(\\n          (item) => getItemValue(item)\
      \ === over.id,\\n        );\\n\\n        if (onMove) {\\n          onMove({\
      \ ...event, activeIndex, overIndex });\\n        } else {\\n          onValueChange?.(arrayMove(value,\
      \ activeIndex, overIndex));\\n        }\\n      }\\n      setActiveId(null);\\\
      n    },\\n    [value, onValueChange, onMove, getItemValue],\\n  );\\n\\n  const\
      \ announcements: Announcements = React.useMemo(\\n    () => ({\\n      onDragStart({\
      \ active }) {\\n        const activeValue = active.id.toString();\\n       \
      \ return `Grabbed sortable item \\\"${activeValue}\\\". Current position is\
      \ ${active.data.current?.sortable.index + 1} of ${value.length}. Use arrow keys\
      \ to move, space to drop.`;\\n      },\\n      onDragOver({ active, over })\
      \ {\\n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" moved ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n      onDragEnd({ active, over }) {\\n        const activeValue\
      \ = active.id.toString();\\n        if (over) {\\n          const overIndex\
      \ = over.data.current?.sortable.index ?? 0;\\n          return `Sortable item\
      \ \\\"${activeValue}\\\" dropped at position ${overIndex + 1} of ${value.length}.`;\\\
      n        }\\n        return `Sortable item \\\"${activeValue}\\\" dropped. No\
      \ changes were made.`;\\n      },\\n      onDragCancel({ active }) {\\n    \
      \    const activeIndex = active.data.current?.sortable.index ?? 0;\\n      \
      \  const activeValue = active.id.toString();\\n        return `Sorting cancelled.\
      \ Sortable item \\\"${activeValue}\\\" returned to position ${activeIndex +\
      \ 1} of ${value.length}.`;\\n      },\\n      onDragMove({ active, over }) {\\\
      n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" is moving ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n    }),\\n    [value],\\n  );\\n\\n  const screenReaderInstructions:\
      \ ScreenReaderInstructions = React.useMemo(\\n    () => ({\\n      draggable:\
      \ `\\n        To pick up a sortable item, press space or enter.\\n        While\
      \ dragging, use the ${orientation === \\\"vertical\\\" ? \\\"up and down\\\"\
      \ : orientation === \\\"horizontal\\\" ? \\\"left and right\\\" : \\\"arrow\\\
      \"} keys to move the item.\\n        Press space or enter again to drop the\
      \ item in its new position, or press escape to cancel.\\n      `,\\n    }),\\\
      n    [orientation],\\n  );\\n\\n  const contextValue = React.useMemo(\\n   \
      \ () => ({\\n      id,\\n      items,\\n      modifiers: modifiers ?? config.modifiers,\\\
      n      strategy: strategy ?? config.strategy,\\n      activeId,\\n      setActiveId,\\\
      n      getItemValue,\\n      flatCursor,\\n    }),\\n    [\\n      id,\\n  \
      \    items,\\n      modifiers,\\n      strategy,\\n      config.modifiers,\\\
      n      config.strategy,\\n      activeId,\\n      getItemValue,\\n      flatCursor,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableRootContext.Provider\\n      value={contextValue\
      \ as SortableRootContextValue<unknown>}\\n    >\\n      <DndContext\\n     \
      \   collisionDetection={collisionDetection ?? config.collisionDetection}\\n\
      \        modifiers={modifiers ?? config.modifiers}\\n        sensors={sensors}\\\
      n        {...sortableProps}\\n        id={id}\\n        onDragStart={composeEventHandlers(\\\
      n          sortableProps.onDragStart,\\n          ({ active }) => setActiveId(active.id),\\\
      n        )}\\n        onDragEnd={composeEventHandlers(sortableProps.onDragEnd,\
      \ onDragEnd)}\\n        onDragCancel={composeEventHandlers(sortableProps.onDragCancel,\
      \ () =>\\n          setActiveId(null),\\n        )}\\n        accessibility={{\\\
      n          announcements,\\n          screenReaderInstructions,\\n         \
      \ ...accessibility,\\n        }}\\n      />\\n    </SortableRootContext.Provider>\\\
      n  );\\n}\\n\\nconst SortableContentContext = React.createContext<boolean>(false);\\\
      nSortableContentContext.displayName = CONTENT_NAME;\\n\\ninterface SortableContentProps\
      \ extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\n  strategy?: SortableContextProps[\\\
      \"strategy\\\"];\\n  children: React.ReactNode;\\n  asChild?: boolean;\\n  withoutSlot?:\
      \ boolean;\\n}\\n\\nconst SortableContent = React.forwardRef<HTMLDivElement,\
      \ SortableContentProps>(\\n  (props, forwardedRef) => {\\n    const {\\n   \
      \   strategy: strategyProp,\\n      asChild,\\n      withoutSlot,\\n      children,\\\
      n      ...contentProps\\n    } = props;\\n    const context = useSortableContext(CONTENT_NAME);\\\
      n\\n    const ContentPrimitive = asChild ? Slot : \\\"div\\\";\\n\\n    return\
      \ (\\n      <SortableContentContext.Provider value={true}>\\n        <SortableContext\\\
      n          items={context.items}\\n          strategy={strategyProp ?? context.strategy}\\\
      n        >\\n          {withoutSlot ? (\\n            children\\n          )\
      \ : (\\n            <ContentPrimitive {...contentProps} ref={forwardedRef}>\\\
      n              {children}\\n            </ContentPrimitive>\\n          )}\\\
      n        </SortableContext>\\n      </SortableContentContext.Provider>\\n  \
      \  );\\n  },\\n);\\nSortableContent.displayName = CONTENT_NAME;\\n\\ninterface\
      \ SortableItemContextValue {\\n  id: string;\\n  attributes: React.HTMLAttributes<HTMLElement>;\\\
      n  listeners: DraggableSyntheticListeners | undefined;\\n  setActivatorNodeRef:\
      \ (node: HTMLElement | null) => void;\\n  isDragging?: boolean;\\n  disabled?:\
      \ boolean;\\n}\\n\\nconst SortableItemContext =\\n  React.createContext<SortableItemContextValue\
      \ | null>(null);\\nSortableItemContext.displayName = ITEM_NAME;\\n\\ninterface\
      \ SortableItemProps extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\\
      n  value: UniqueIdentifier;\\n  asHandle?: boolean;\\n  asChild?: boolean;\\\
      n  disabled?: boolean;\\n}\\n\\nconst SortableItem = React.forwardRef<HTMLDivElement,\
      \ SortableItemProps>(\\n  (props, forwardedRef) => {\\n    const {\\n      value,\\\
      n      style,\\n      asHandle,\\n      asChild,\\n      disabled,\\n      className,\\\
      n      ...itemProps\\n    } = props;\\n    const inSortableContent = React.useContext(SortableContentContext);\\\
      n    const inSortableOverlay = React.useContext(SortableOverlayContext);\\n\\\
      n    if (!inSortableContent && !inSortableOverlay) {\\n      throw new Error(SORTABLE_ERRORS[ITEM_NAME]);\\\
      n    }\\n\\n    if (value === \\\"\\\") {\\n      throw new Error(`\\\\`${ITEM_NAME}\\\
      \\` value cannot be an empty string`);\\n    }\\n\\n    const context = useSortableContext(ITEM_NAME);\\\
      n    const id = React.useId();\\n    const {\\n      attributes,\\n      listeners,\\\
      n      setNodeRef,\\n      setActivatorNodeRef,\\n      transform,\\n      transition,\\\
      n      isDragging,\\n    } = useSortable({ id: value, disabled });\\n\\n   \
      \ const composedRef = useComposedRefs(forwardedRef, (node) => {\\n      if (disabled)\
      \ return;\\n      setNodeRef(node);\\n      if (asHandle) setActivatorNodeRef(node);\\\
      n    });\\n\\n    const composedStyle = React.useMemo<React.CSSProperties>(()\
      \ => {\\n      return {\\n        transform: CSS.Translate.toString(transform),\\\
      n        transition,\\n        ...style,\\n      };\\n    }, [transform, transition,\
      \ style]);\\n\\n    const itemContext = React.useMemo<SortableItemContextValue>(\\\
      n      () => ({\\n        id,\\n        attributes,\\n        listeners,\\n\
      \        setActivatorNodeRef,\\n        isDragging,\\n        disabled,\\n \
      \     }),\\n      [id, attributes, listeners, setActivatorNodeRef, isDragging,\
      \ disabled],\\n    );\\n\\n    const ItemPrimitive = asChild ? Slot : \\\"div\\\
      \";\\n\\n    return (\\n      <SortableItemContext.Provider value={itemContext}>\\\
      n        <ItemPrimitive\\n          id={id}\\n          data-dragging={isDragging\
      \ ? \\\"\\\" : undefined}\\n          {...itemProps}\\n          {...(asHandle\
      \ ? attributes : {})}\\n          {...(asHandle ? listeners : {})}\\n      \
      \    tabIndex={disabled ? undefined : 0}\\n          ref={composedRef}\\n  \
      \        style={composedStyle}\\n          className={cn(\\n            \\\"\
      focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\\\
      \",\\n            {\\n              \\\"touch-none select-none\\\": asHandle,\\\
      n              \\\"cursor-default\\\": context.flatCursor,\\n              \\\
      \"data-dragging:cursor-grabbing\\\": !context.flatCursor,\\n              \\\
      \"cursor-grab\\\": !isDragging && asHandle && !context.flatCursor,\\n      \
      \        \\\"opacity-50\\\": isDragging,\\n              \\\"pointer-events-none\
      \ opacity-50\\\": disabled,\\n            },\\n            className,\\n   \
      \       )}\\n        />\\n      </SortableItemContext.Provider>\\n    );\\n\
      \  },\\n);\\nSortableItem.displayName = ITEM_NAME;\\n\\ninterface SortableItemHandleProps\\\
      n  extends React.ComponentPropsWithoutRef<\\\"button\\\"> {\\n  asChild?: boolean;\\\
      n}\\n\\nconst SortableItemHandle = React.forwardRef<\\n  HTMLButtonElement,\\\
      n  SortableItemHandleProps\\n>((props, forwardedRef) => {\\n  const { asChild,\
      \ disabled, className, ...itemHandleProps } = props;\\n  const itemContext =\
      \ React.useContext(SortableItemContext);\\n  if (!itemContext) {\\n    throw\
      \ new Error(SORTABLE_ERRORS[ITEM_HANDLE_NAME]);\\n  }\\n  const context = useSortableContext(ITEM_HANDLE_NAME);\\\
      n\\n  const isDisabled = disabled ?? itemContext.disabled;\\n\\n  const composedRef\
      \ = useComposedRefs(forwardedRef, (node) => {\\n    if (!isDisabled) return;\\\
      n    itemContext.setActivatorNodeRef(node);\\n  });\\n\\n  const HandlePrimitive\
      \ = asChild ? Slot : \\\"button\\\";\\n\\n  return (\\n    <HandlePrimitive\\\
      n      type=\\\"button\\\"\\n      aria-controls={itemContext.id}\\n      data-dragging={itemContext.isDragging\
      \ ? \\\"\\\" : undefined}\\n      {...itemHandleProps}\\n      {...itemContext.attributes}\\\
      n      {...itemContext.listeners}\\n      ref={composedRef}\\n      className={cn(\\\
      n        \\\"select-none disabled:pointer-events-none disabled:opacity-50\\\"\
      ,\\n        context.flatCursor\\n          ? \\\"cursor-default\\\"\\n     \
      \     : \\\"cursor-grab data-dragging:cursor-grabbing\\\",\\n        className,\\\
      n      )}\\n      disabled={isDisabled}\\n    />\\n  );\\n});\\nSortableItemHandle.displayName\
      \ = ITEM_HANDLE_NAME;\\n\\nconst SortableOverlayContext = React.createContext(false);\\\
      nSortableOverlayContext.displayName = OVERLAY_NAME;\\n\\nconst dropAnimation:\
      \ DropAnimation = {\\n  sideEffects: defaultDropAnimationSideEffects({\\n  \
      \  styles: {\\n      active: {\\n        opacity: \\\"0.4\\\",\\n      },\\\
      n    },\\n  }),\\n};\\n\\ninterface SortableOverlayProps\\n  extends Omit<React.ComponentPropsWithoutRef<typeof\
      \ DragOverlay>, \\\"children\\\"> {\\n  container?: Element | DocumentFragment\
      \ | null;\\n  children?:\\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\\\
      n    | React.ReactNode;\\n}\\n\\nfunction SortableOverlay(props: SortableOverlayProps)\
      \ {\\n  const { container: containerProp, children, ...overlayProps } = props;\\\
      n  const context = useSortableContext(OVERLAY_NAME);\\n\\n  const [mounted,\
      \ setMounted] = React.useState(false);\\n  React.useLayoutEffect(() => setMounted(true),\
      \ []);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  return ReactDOM.createPortal(\\\
      n    <DragOverlay\\n      dropAnimation={dropAnimation}\\n      modifiers={context.modifiers}\\\
      n      className={cn(!context.flatCursor && \\\"cursor-grabbing\\\")}\\n   \
      \   {...overlayProps}\\n    >\\n      <SortableOverlayContext.Provider value={true}>\\\
      n        {context.activeId\\n          ? typeof children === \\\"function\\\"\
      \\n            ? children({ value: context.activeId })\\n            : children\\\
      n          : null}\\n      </SortableOverlayContext.Provider>\\n    </DragOverlay>,\\\
      n    container,\\n  );\\n}\\n\\nconst Root = Sortable;\\nconst Content = SortableContent;\\\
      nconst Item = SortableItem;\\nconst ItemHandle = SortableItemHandle;\\nconst\
      \ Overlay = SortableOverlay;\\n\\nexport {\\n  Root,\\n  Content,\\n  Item,\\\
      n  ItemHandle,\\n  Overlay,\\n  //\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\\
      n  SortableItemHandle,\\n  SortableOverlay,\\n};\\n\",\n-      \"type\": \"\
      registry:component\"\n+      \"type\": \"registry:ui\"\n     },\n     {\n  \
      \     \"path\": \"src/components/ui/faceted.tsx\",\n       \"content\": \"\\\
      \"use client\\\";\\n\\nimport { Check, ChevronsUpDown } from \\\"lucide-react\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { Badge } from \\\"\
      @/components/ui/badge\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\\
      n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n  CommandSeparator,\\n}\
      \ from \\\"@/components/ui/command\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\n\\nconst FACETED_NAME = \\\"Faceted\\\";\\nconst\
      \ TRIGGER_NAME = \\\"FacetedTrigger\\\";\\nconst BADGE_LIST_NAME = \\\"FacetedBadgeList\\\
      \";\\nconst CONTENT_NAME = \\\"FacetedContent\\\";\\nconst INPUT_NAME = \\\"\
      FacetedInput\\\";\\nconst LIST_NAME = \\\"FacetedList\\\";\\nconst EMPTY_NAME\
      \ = \\\"FacetedEmpty\\\";\\nconst GROUP_NAME = \\\"FacetedGroup\\\";\\nconst\
      \ ITEM_NAME = \\\"FacetedItem\\\";\\nconst SEPARATOR_NAME = \\\"FacetedSeparator\\\
      \";\\n\\nconst ERRORS = {\\n  [FACETED_NAME]: `\\\\`${FACETED_NAME}\\\\` must\
      \ be used as root component`,\\n  [TRIGGER_NAME]: `\\\\`${TRIGGER_NAME}\\\\\
      ` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [BADGE_LIST_NAME]: `\\\\`${BADGE_LIST_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [INPUT_NAME]: `\\\\`${INPUT_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [LIST_NAME]: `\\\\`${LIST_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [EMPTY_NAME]: `\\\\`${EMPTY_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [GROUP_NAME]: `\\\\`${GROUP_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n  [SEPARATOR_NAME]: `\\\\`${SEPARATOR_NAME}\\\
      \\` must be within \\\\`${FACETED_NAME}\\\\``,\\n};\\n\\ntype FacetedValue<Multiple\
      \ extends boolean> = Multiple extends true\\n  ? string[]\\n  : string;\\n\\\
      ninterface FacetedContextValue<Multiple extends boolean = boolean> {\\n  value?:\
      \ FacetedValue<Multiple>;\\n  onItemSelect?: (value: string) => void;\\n  multiple?:\
      \ Multiple;\\n}\\n\\nconst FacetedContext = React.createContext<FacetedContextValue<boolean>\
      \ | null>(\\n  null,\\n);\\n\\nfunction useFacetedContext(name: keyof typeof\
      \ ERRORS) {\\n  const context = React.useContext(FacetedContext);\\n  if (!context)\
      \ {\\n    throw new Error(ERRORS[name]);\\n  }\\n  return context;\\n}\\n\\\
      ninterface FacetedProps<Multiple extends boolean = false>\\n  extends React.ComponentProps<typeof\
      \ Popover> {\\n  value?: FacetedValue<Multiple>;\\n  onValueChange?: (value:\
      \ FacetedValue<Multiple> | undefined) => void;\\n  children?: React.ReactNode;\\\
      n  multiple?: Multiple;\\n}\\n\\nfunction Faceted<Multiple extends boolean =\
      \ false>(\\n  props: FacetedProps<Multiple>,\\n) {\\n  const {\\n    open: openProp,\\\
      n    onOpenChange: onOpenChangeProp,\\n    value,\\n    onValueChange,\\n  \
      \  children,\\n    multiple = false,\\n    ...facetedProps\\n  } = props;\\\
      n\\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);\\\
      n  const isControlled = openProp !== undefined;\\n  const open = isControlled\
      \ ? openProp : uncontrolledOpen;\\n\\n  const onOpenChange = React.useCallback(\\\
      n    (newOpen: boolean) => {\\n      if (!isControlled) {\\n        setUncontrolledOpen(newOpen);\\\
      n      }\\n      onOpenChangeProp?.(newOpen);\\n    },\\n    [isControlled,\
      \ onOpenChangeProp],\\n  );\\n\\n  const onItemSelect = React.useCallback(\\\
      n    (selectedValue: string) => {\\n      if (!onValueChange) return;\\n\\n\
      \      if (multiple) {\\n        const currentValue = (Array.isArray(value)\
      \ ? value : []) as string[];\\n        const newValue = currentValue.includes(selectedValue)\\\
      n          ? currentValue.filter((v) => v !== selectedValue)\\n          : [...currentValue,\
      \ selectedValue];\\n        onValueChange(newValue as FacetedValue<Multiple>);\\\
      n      } else {\\n        if (value === selectedValue) {\\n          onValueChange(undefined);\\\
      n        } else {\\n          onValueChange(selectedValue as FacetedValue<Multiple>);\\\
      n        }\\n\\n        requestAnimationFrame(() => onOpenChange(false));\\\
      n      }\\n    },\\n    [multiple, value, onValueChange, onOpenChange],\\n \
      \ );\\n\\n  const contextValue = React.useMemo<FacetedContextValue<typeof multiple>>(\\\
      n    () => ({ value, onItemSelect, multiple }),\\n    [value, onItemSelect,\
      \ multiple],\\n  );\\n\\n  return (\\n    <FacetedContext.Provider value={contextValue}>\\\
      n      <Popover open={open} onOpenChange={onOpenChange} {...facetedProps}>\\\
      n        {children}\\n      </Popover>\\n    </FacetedContext.Provider>\\n \
      \ );\\n}\\n\\nfunction FacetedTrigger(props: React.ComponentProps<typeof PopoverTrigger>)\
      \ {\\n  const { className, children, ...triggerProps } = props;\\n\\n  return\
      \ (\\n    <PopoverTrigger\\n      {...triggerProps}\\n      className={cn(\\\
      \"justify-between text-left\\\", className)}\\n    >\\n      {children}\\n \
      \   </PopoverTrigger>\\n  );\\n}\\n\\ninterface FacetedBadgeListProps extends\
      \ React.ComponentProps<\\\"div\\\"> {\\n  options?: { label: string; value:\
      \ string }[];\\n  max?: number;\\n  badgeClassName?: string;\\n  placeholder?:\
      \ string;\\n}\\n\\nfunction FacetedBadgeList(props: FacetedBadgeListProps) {\\\
      n  const {\\n    options = [],\\n    max = 2,\\n    placeholder = \\\"Select\
      \ options...\\\",\\n    className,\\n    badgeClassName,\\n    ...badgeListProps\\\
      n  } = props;\\n\\n  const context = useFacetedContext(BADGE_LIST_NAME);\\n\
      \  const values = Array.isArray(context.value)\\n    ? context.value\\n    :\
      \ [context.value].filter(Boolean);\\n\\n  const getLabel = React.useCallback(\\\
      n    (value: string) => {\\n      const option = options.find((opt) => opt.value\
      \ === value);\\n      return option?.label ?? value;\\n    },\\n    [options],\\\
      n  );\\n\\n  if (!values || values.length === 0) {\\n    return (\\n      <div\\\
      n        {...badgeListProps}\\n        className=\\\"flex w-full items-center\
      \ gap-1 text-muted-foreground\\\"\\n      >\\n        {placeholder}\\n     \
      \   <ChevronsUpDown className=\\\"ml-auto size-4 shrink-0 opacity-50\\\" />\\\
      n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div\\n      {...badgeListProps}\\\
      n      className={cn(\\\"flex flex-wrap items-center gap-1\\\", className)}\\\
      n    >\\n      {values.length > max ? (\\n        <Badge\\n          variant=\\\
      \"secondary\\\"\\n          className={cn(\\\"rounded-sm px-1 font-normal\\\"\
      , badgeClassName)}\\n        >\\n          {values.length} selected\\n     \
      \   </Badge>\\n      ) : (\\n        values.map((value) => (\\n          <Badge\\\
      n            key={value}\\n            variant=\\\"secondary\\\"\\n        \
      \    className={cn(\\\"rounded-sm px-1 font-normal\\\", badgeClassName)}\\n\
      \          >\\n            <span className=\\\"truncate\\\">{getLabel(value)}</span>\\\
      n          </Badge>\\n        ))\\n      )}\\n    </div>\\n  );\\n}\\n\\nfunction\
      \ FacetedContent(props: React.ComponentProps<typeof PopoverContent>) {\\n  const\
      \ { className, children, ...contentProps } = props;\\n\\n  return (\\n    <PopoverContent\\\
      n      {...contentProps}\\n      align=\\\"start\\\"\\n      className={cn(\\\
      n        \\\"w-[200px] origin-(--radix-popover-content-transform-origin) p-0\\\
      \",\\n        className,\\n      )}\\n    >\\n      <Command>{children}</Command>\\\
      n    </PopoverContent>\\n  );\\n}\\n\\nconst FacetedInput = CommandInput;\\\
      n\\nconst FacetedList = CommandList;\\n\\nconst FacetedEmpty = CommandEmpty;\\\
      n\\nconst FacetedGroup = CommandGroup;\\n\\ninterface FacetedItemProps extends\
      \ React.ComponentProps<typeof CommandItem> {\\n  value: string;\\n}\\n\\nfunction\
      \ FacetedItem(props: FacetedItemProps) {\\n  const { value, onSelect, className,\
      \ children, ...itemProps } = props;\\n  const context = useFacetedContext(ITEM_NAME);\\\
      n\\n  const isSelected = context.multiple\\n    ? Array.isArray(context.value)\
      \ && context.value.includes(value)\\n    : context.value === value;\\n\\n  const\
      \ onItemSelect = React.useCallback(\\n    (currentValue: string) => {\\n   \
      \   if (onSelect) {\\n        onSelect(currentValue);\\n      } else if (context.onItemSelect)\
      \ {\\n        context.onItemSelect(currentValue);\\n      }\\n    },\\n    [onSelect,\
      \ context.onItemSelect],\\n  );\\n\\n  return (\\n    <CommandItem\\n      aria-selected={isSelected}\\\
      n      data-selected={isSelected}\\n      className={cn(\\\"gap-2\\\", className)}\\\
      n      onSelect={() => onItemSelect(value)}\\n      {...itemProps}\\n    >\\\
      n      <span\\n        className={cn(\\n          \\\"flex size-4 items-center\
      \ justify-center rounded-sm border border-primary\\\",\\n          isSelected\\\
      n            ? \\\"bg-primary text-primary-foreground\\\"\\n            : \\\
      \"opacity-50 [&_svg]:invisible\\\",\\n        )}\\n      >\\n        <Check\
      \ className=\\\"size-4\\\" />\\n      </span>\\n      {children}\\n    </CommandItem>\\\
      n  );\\n}\\n\\nconst FacetedSeparator = CommandSeparator;\\n\\nexport {\\n \
      \ Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\n  FacetedGroup,\\\
      n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedSeparator,\\n\
      \  FacetedTrigger,\\n};\\n\",\n-      \"type\": \"registry:component\"\n+  \
      \    \"type\": \"registry:ui\"\n     },\n     {\n       \"path\": \"src/hooks/use-callback-ref.ts\"\
      ,\ndiff --git a/public/r/data-table-sort-list.json b/public/r/data-table-sort-list.json\n\
      index 04c673b..383c45a 100644\n--- a/public/r/data-table-sort-list.json\n+++\
      \ b/public/r/data-table-sort-list.json\n@@ -24,7 +24,7 @@\n     {\n       \"\
      path\": \"src/components/ui/sortable.tsx\",\n       \"content\": \"\\\"use client\\\
      \";\\n\\nimport {\\n  type Announcements,\\n  DndContext,\\n  type DndContextProps,\\\
      n  type DragEndEvent,\\n  DragOverlay,\\n  type DraggableSyntheticListeners,\\\
      n  type DropAnimation,\\n  KeyboardSensor,\\n  MouseSensor,\\n  type ScreenReaderInstructions,\\\
      n  TouchSensor,\\n  type UniqueIdentifier,\\n  closestCenter,\\n  closestCorners,\\\
      n  defaultDropAnimationSideEffects,\\n  useSensor,\\n  useSensors,\\n} from\
      \ \\\"@dnd-kit/core\\\";\\nimport {\\n  restrictToHorizontalAxis,\\n  restrictToParentElement,\\\
      n  restrictToVerticalAxis,\\n} from \\\"@dnd-kit/modifiers\\\";\\nimport {\\\
      n  SortableContext,\\n  type SortableContextProps,\\n  arrayMove,\\n  horizontalListSortingStrategy,\\\
      n  sortableKeyboardCoordinates,\\n  useSortable,\\n  verticalListSortingStrategy,\\\
      n} from \\\"@dnd-kit/sortable\\\";\\nimport { CSS } from \\\"@dnd-kit/utilities\\\
      \";\\nimport { Slot } from \\\"@radix-ui/react-slot\\\";\\nimport * as React\
      \ from \\\"react\\\";\\n\\nimport { composeEventHandlers, useComposedRefs }\
      \ from \\\"@/lib/composition\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\\
      nimport * as ReactDOM from \\\"react-dom\\\";\\n\\nconst orientationConfig =\
      \ {\\n  vertical: {\\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\\\
      n    strategy: verticalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  horizontal: {\\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\\\
      n    strategy: horizontalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  mixed: {\\n    modifiers: [restrictToParentElement],\\n    strategy:\
      \ undefined,\\n    collisionDetection: closestCorners,\\n  },\\n};\\n\\nconst\
      \ ROOT_NAME = \\\"Sortable\\\";\\nconst CONTENT_NAME = \\\"SortableContent\\\
      \";\\nconst ITEM_NAME = \\\"SortableItem\\\";\\nconst ITEM_HANDLE_NAME = \\\"\
      SortableItemHandle\\\";\\nconst OVERLAY_NAME = \\\"SortableOverlay\\\";\\n\\\
      nconst SORTABLE_ERRORS = {\\n  [ROOT_NAME]: `\\\\`${ROOT_NAME}\\\\` components\
      \ must be within \\\\`${ROOT_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${ROOT_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${CONTENT_NAME}\\\\``,\\n  [ITEM_HANDLE_NAME]: `\\\\\
      `${ITEM_HANDLE_NAME}\\\\` must be within \\\\`${ITEM_NAME}\\\\``,\\n  [OVERLAY_NAME]:\
      \ `\\\\`${OVERLAY_NAME}\\\\` must be within \\\\`${ROOT_NAME}\\\\``,\\n} as\
      \ const;\\n\\ninterface SortableRootContextValue<T> {\\n  id: string;\\n  items:\
      \ UniqueIdentifier[];\\n  modifiers: DndContextProps[\\\"modifiers\\\"];\\n\
      \  strategy: SortableContextProps[\\\"strategy\\\"];\\n  activeId: UniqueIdentifier\
      \ | null;\\n  setActiveId: (id: UniqueIdentifier | null) => void;\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n  flatCursor: boolean;\\n}\\n\\nconst SortableRootContext\
      \ =\\n  React.createContext<SortableRootContextValue<unknown> | null>(null);\\\
      nSortableRootContext.displayName = ROOT_NAME;\\n\\nfunction useSortableContext(name:\
      \ keyof typeof SORTABLE_ERRORS) {\\n  const context = React.useContext(SortableRootContext);\\\
      n  if (!context) {\\n    throw new Error(SORTABLE_ERRORS[name]);\\n  }\\n  return\
      \ context;\\n}\\n\\ninterface GetItemValue<T> {\\n  /**\\n   * Callback that\
      \ returns a unique identifier for each sortable item. Required for array of\
      \ objects.\\n   * @example getItemValue={(item) => item.id}\\n   */\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n}\\n\\ntype SortableProps<T> = DndContextProps\
      \ & {\\n  value: T[];\\n  onValueChange?: (items: T[]) => void;\\n  onMove?:\
      \ (\\n    event: DragEndEvent & { activeIndex: number; overIndex: number },\\\
      n  ) => void;\\n  strategy?: SortableContextProps[\\\"strategy\\\"];\\n  orientation?:\
      \ \\\"vertical\\\" | \\\"horizontal\\\" | \\\"mixed\\\";\\n  flatCursor?: boolean;\\\
      n} & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\\n\\nfunction\
      \ Sortable<T>(props: SortableProps<T>) {\\n  const {\\n    value,\\n    onValueChange,\\\
      n    collisionDetection,\\n    modifiers,\\n    strategy,\\n    onMove,\\n \
      \   orientation = \\\"vertical\\\",\\n    flatCursor = false,\\n    getItemValue:\
      \ getItemValueProp,\\n    accessibility,\\n    ...sortableProps\\n  } = props;\\\
      n  const id = React.useId();\\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier\
      \ | null>(null);\\n\\n  const sensors = useSensors(\\n    useSensor(MouseSensor),\\\
      n    useSensor(TouchSensor),\\n    useSensor(KeyboardSensor, {\\n      coordinateGetter:\
      \ sortableKeyboardCoordinates,\\n    }),\\n  );\\n  const config = React.useMemo(\\\
      n    () => orientationConfig[orientation],\\n    [orientation],\\n  );\\n\\\
      n  const getItemValue = React.useCallback(\\n    (item: T): UniqueIdentifier\
      \ => {\\n      if (typeof item === \\\"object\\\" && !getItemValueProp) {\\\
      n        throw new Error(\\n          \\\"getItemValue is required when using\
      \ array of objects.\\\",\\n        );\\n      }\\n      return getItemValueProp\\\
      n        ? getItemValueProp(item)\\n        : (item as UniqueIdentifier);\\\
      n    },\\n    [getItemValueProp],\\n  );\\n\\n  const items = React.useMemo(()\
      \ => {\\n    return value.map((item) => getItemValue(item));\\n  }, [value,\
      \ getItemValue]);\\n\\n  const onDragEnd = React.useCallback(\\n    (event:\
      \ DragEndEvent) => {\\n      const { active, over } = event;\\n      if (over\
      \ && active.id !== over?.id) {\\n        const activeIndex = value.findIndex(\\\
      n          (item) => getItemValue(item) === active.id,\\n        );\\n     \
      \   const overIndex = value.findIndex(\\n          (item) => getItemValue(item)\
      \ === over.id,\\n        );\\n\\n        if (onMove) {\\n          onMove({\
      \ ...event, activeIndex, overIndex });\\n        } else {\\n          onValueChange?.(arrayMove(value,\
      \ activeIndex, overIndex));\\n        }\\n      }\\n      setActiveId(null);\\\
      n    },\\n    [value, onValueChange, onMove, getItemValue],\\n  );\\n\\n  const\
      \ announcements: Announcements = React.useMemo(\\n    () => ({\\n      onDragStart({\
      \ active }) {\\n        const activeValue = active.id.toString();\\n       \
      \ return `Grabbed sortable item \\\"${activeValue}\\\". Current position is\
      \ ${active.data.current?.sortable.index + 1} of ${value.length}. Use arrow keys\
      \ to move, space to drop.`;\\n      },\\n      onDragOver({ active, over })\
      \ {\\n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" moved ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n      onDragEnd({ active, over }) {\\n        const activeValue\
      \ = active.id.toString();\\n        if (over) {\\n          const overIndex\
      \ = over.data.current?.sortable.index ?? 0;\\n          return `Sortable item\
      \ \\\"${activeValue}\\\" dropped at position ${overIndex + 1} of ${value.length}.`;\\\
      n        }\\n        return `Sortable item \\\"${activeValue}\\\" dropped. No\
      \ changes were made.`;\\n      },\\n      onDragCancel({ active }) {\\n    \
      \    const activeIndex = active.data.current?.sortable.index ?? 0;\\n      \
      \  const activeValue = active.id.toString();\\n        return `Sorting cancelled.\
      \ Sortable item \\\"${activeValue}\\\" returned to position ${activeIndex +\
      \ 1} of ${value.length}.`;\\n      },\\n      onDragMove({ active, over }) {\\\
      n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" is moving ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n    }),\\n    [value],\\n  );\\n\\n  const screenReaderInstructions:\
      \ ScreenReaderInstructions = React.useMemo(\\n    () => ({\\n      draggable:\
      \ `\\n        To pick up a sortable item, press space or enter.\\n        While\
      \ dragging, use the ${orientation === \\\"vertical\\\" ? \\\"up and down\\\"\
      \ : orientation === \\\"horizontal\\\" ? \\\"left and right\\\" : \\\"arrow\\\
      \"} keys to move the item.\\n        Press space or enter again to drop the\
      \ item in its new position, or press escape to cancel.\\n      `,\\n    }),\\\
      n    [orientation],\\n  );\\n\\n  const contextValue = React.useMemo(\\n   \
      \ () => ({\\n      id,\\n      items,\\n      modifiers: modifiers ?? config.modifiers,\\\
      n      strategy: strategy ?? config.strategy,\\n      activeId,\\n      setActiveId,\\\
      n      getItemValue,\\n      flatCursor,\\n    }),\\n    [\\n      id,\\n  \
      \    items,\\n      modifiers,\\n      strategy,\\n      config.modifiers,\\\
      n      config.strategy,\\n      activeId,\\n      getItemValue,\\n      flatCursor,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableRootContext.Provider\\n      value={contextValue\
      \ as SortableRootContextValue<unknown>}\\n    >\\n      <DndContext\\n     \
      \   collisionDetection={collisionDetection ?? config.collisionDetection}\\n\
      \        modifiers={modifiers ?? config.modifiers}\\n        sensors={sensors}\\\
      n        {...sortableProps}\\n        id={id}\\n        onDragStart={composeEventHandlers(\\\
      n          sortableProps.onDragStart,\\n          ({ active }) => setActiveId(active.id),\\\
      n        )}\\n        onDragEnd={composeEventHandlers(sortableProps.onDragEnd,\
      \ onDragEnd)}\\n        onDragCancel={composeEventHandlers(sortableProps.onDragCancel,\
      \ () =>\\n          setActiveId(null),\\n        )}\\n        accessibility={{\\\
      n          announcements,\\n          screenReaderInstructions,\\n         \
      \ ...accessibility,\\n        }}\\n      />\\n    </SortableRootContext.Provider>\\\
      n  );\\n}\\n\\nconst SortableContentContext = React.createContext<boolean>(false);\\\
      nSortableContentContext.displayName = CONTENT_NAME;\\n\\ninterface SortableContentProps\
      \ extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\n  strategy?: SortableContextProps[\\\
      \"strategy\\\"];\\n  children: React.ReactNode;\\n  asChild?: boolean;\\n  withoutSlot?:\
      \ boolean;\\n}\\n\\nconst SortableContent = React.forwardRef<HTMLDivElement,\
      \ SortableContentProps>(\\n  (props, forwardedRef) => {\\n    const {\\n   \
      \   strategy: strategyProp,\\n      asChild,\\n      withoutSlot,\\n      children,\\\
      n      ...contentProps\\n    } = props;\\n    const context = useSortableContext(CONTENT_NAME);\\\
      n\\n    const ContentPrimitive = asChild ? Slot : \\\"div\\\";\\n\\n    return\
      \ (\\n      <SortableContentContext.Provider value={true}>\\n        <SortableContext\\\
      n          items={context.items}\\n          strategy={strategyProp ?? context.strategy}\\\
      n        >\\n          {withoutSlot ? (\\n            children\\n          )\
      \ : (\\n            <ContentPrimitive {...contentProps} ref={forwardedRef}>\\\
      n              {children}\\n            </ContentPrimitive>\\n          )}\\\
      n        </SortableContext>\\n      </SortableContentContext.Provider>\\n  \
      \  );\\n  },\\n);\\nSortableContent.displayName = CONTENT_NAME;\\n\\ninterface\
      \ SortableItemContextValue {\\n  id: string;\\n  attributes: React.HTMLAttributes<HTMLElement>;\\\
      n  listeners: DraggableSyntheticListeners | undefined;\\n  setActivatorNodeRef:\
      \ (node: HTMLElement | null) => void;\\n  isDragging?: boolean;\\n  disabled?:\
      \ boolean;\\n}\\n\\nconst SortableItemContext =\\n  React.createContext<SortableItemContextValue\
      \ | null>(null);\\nSortableItemContext.displayName = ITEM_NAME;\\n\\ninterface\
      \ SortableItemProps extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\\
      n  value: UniqueIdentifier;\\n  asHandle?: boolean;\\n  asChild?: boolean;\\\
      n  disabled?: boolean;\\n}\\n\\nconst SortableItem = React.forwardRef<HTMLDivElement,\
      \ SortableItemProps>(\\n  (props, forwardedRef) => {\\n    const {\\n      value,\\\
      n      style,\\n      asHandle,\\n      asChild,\\n      disabled,\\n      className,\\\
      n      ...itemProps\\n    } = props;\\n    const inSortableContent = React.useContext(SortableContentContext);\\\
      n    const inSortableOverlay = React.useContext(SortableOverlayContext);\\n\\\
      n    if (!inSortableContent && !inSortableOverlay) {\\n      throw new Error(SORTABLE_ERRORS[ITEM_NAME]);\\\
      n    }\\n\\n    if (value === \\\"\\\") {\\n      throw new Error(`\\\\`${ITEM_NAME}\\\
      \\` value cannot be an empty string`);\\n    }\\n\\n    const context = useSortableContext(ITEM_NAME);\\\
      n    const id = React.useId();\\n    const {\\n      attributes,\\n      listeners,\\\
      n      setNodeRef,\\n      setActivatorNodeRef,\\n      transform,\\n      transition,\\\
      n      isDragging,\\n    } = useSortable({ id: value, disabled });\\n\\n   \
      \ const composedRef = useComposedRefs(forwardedRef, (node) => {\\n      if (disabled)\
      \ return;\\n      setNodeRef(node);\\n      if (asHandle) setActivatorNodeRef(node);\\\
      n    });\\n\\n    const composedStyle = React.useMemo<React.CSSProperties>(()\
      \ => {\\n      return {\\n        transform: CSS.Translate.toString(transform),\\\
      n        transition,\\n        ...style,\\n      };\\n    }, [transform, transition,\
      \ style]);\\n\\n    const itemContext = React.useMemo<SortableItemContextValue>(\\\
      n      () => ({\\n        id,\\n        attributes,\\n        listeners,\\n\
      \        setActivatorNodeRef,\\n        isDragging,\\n        disabled,\\n \
      \     }),\\n      [id, attributes, listeners, setActivatorNodeRef, isDragging,\
      \ disabled],\\n    );\\n\\n    const ItemPrimitive = asChild ? Slot : \\\"div\\\
      \";\\n\\n    return (\\n      <SortableItemContext.Provider value={itemContext}>\\\
      n        <ItemPrimitive\\n          id={id}\\n          data-dragging={isDragging\
      \ ? \\\"\\\" : undefined}\\n          {...itemProps}\\n          {...(asHandle\
      \ ? attributes : {})}\\n          {...(asHandle ? listeners : {})}\\n      \
      \    tabIndex={disabled ? undefined : 0}\\n          ref={composedRef}\\n  \
      \        style={composedStyle}\\n          className={cn(\\n            \\\"\
      focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\\\
      \",\\n            {\\n              \\\"touch-none select-none\\\": asHandle,\\\
      n              \\\"cursor-default\\\": context.flatCursor,\\n              \\\
      \"data-dragging:cursor-grabbing\\\": !context.flatCursor,\\n              \\\
      \"cursor-grab\\\": !isDragging && asHandle && !context.flatCursor,\\n      \
      \        \\\"opacity-50\\\": isDragging,\\n              \\\"pointer-events-none\
      \ opacity-50\\\": disabled,\\n            },\\n            className,\\n   \
      \       )}\\n        />\\n      </SortableItemContext.Provider>\\n    );\\n\
      \  },\\n);\\nSortableItem.displayName = ITEM_NAME;\\n\\ninterface SortableItemHandleProps\\\
      n  extends React.ComponentPropsWithoutRef<\\\"button\\\"> {\\n  asChild?: boolean;\\\
      n}\\n\\nconst SortableItemHandle = React.forwardRef<\\n  HTMLButtonElement,\\\
      n  SortableItemHandleProps\\n>((props, forwardedRef) => {\\n  const { asChild,\
      \ disabled, className, ...itemHandleProps } = props;\\n  const itemContext =\
      \ React.useContext(SortableItemContext);\\n  if (!itemContext) {\\n    throw\
      \ new Error(SORTABLE_ERRORS[ITEM_HANDLE_NAME]);\\n  }\\n  const context = useSortableContext(ITEM_HANDLE_NAME);\\\
      n\\n  const isDisabled = disabled ?? itemContext.disabled;\\n\\n  const composedRef\
      \ = useComposedRefs(forwardedRef, (node) => {\\n    if (!isDisabled) return;\\\
      n    itemContext.setActivatorNodeRef(node);\\n  });\\n\\n  const HandlePrimitive\
      \ = asChild ? Slot : \\\"button\\\";\\n\\n  return (\\n    <HandlePrimitive\\\
      n      type=\\\"button\\\"\\n      aria-controls={itemContext.id}\\n      data-dragging={itemContext.isDragging\
      \ ? \\\"\\\" : undefined}\\n      {...itemHandleProps}\\n      {...itemContext.attributes}\\\
      n      {...itemContext.listeners}\\n      ref={composedRef}\\n      className={cn(\\\
      n        \\\"select-none disabled:pointer-events-none disabled:opacity-50\\\"\
      ,\\n        context.flatCursor\\n          ? \\\"cursor-default\\\"\\n     \
      \     : \\\"cursor-grab data-dragging:cursor-grabbing\\\",\\n        className,\\\
      n      )}\\n      disabled={isDisabled}\\n    />\\n  );\\n});\\nSortableItemHandle.displayName\
      \ = ITEM_HANDLE_NAME;\\n\\nconst SortableOverlayContext = React.createContext(false);\\\
      nSortableOverlayContext.displayName = OVERLAY_NAME;\\n\\nconst dropAnimation:\
      \ DropAnimation = {\\n  sideEffects: defaultDropAnimationSideEffects({\\n  \
      \  styles: {\\n      active: {\\n        opacity: \\\"0.4\\\",\\n      },\\\
      n    },\\n  }),\\n};\\n\\ninterface SortableOverlayProps\\n  extends Omit<React.ComponentPropsWithoutRef<typeof\
      \ DragOverlay>, \\\"children\\\"> {\\n  container?: Element | DocumentFragment\
      \ | null;\\n  children?:\\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\\\
      n    | React.ReactNode;\\n}\\n\\nfunction SortableOverlay(props: SortableOverlayProps)\
      \ {\\n  const { container: containerProp, children, ...overlayProps } = props;\\\
      n  const context = useSortableContext(OVERLAY_NAME);\\n\\n  const [mounted,\
      \ setMounted] = React.useState(false);\\n  React.useLayoutEffect(() => setMounted(true),\
      \ []);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  return ReactDOM.createPortal(\\\
      n    <DragOverlay\\n      dropAnimation={dropAnimation}\\n      modifiers={context.modifiers}\\\
      n      className={cn(!context.flatCursor && \\\"cursor-grabbing\\\")}\\n   \
      \   {...overlayProps}\\n    >\\n      <SortableOverlayContext.Provider value={true}>\\\
      n        {context.activeId\\n          ? typeof children === \\\"function\\\"\
      \\n            ? children({ value: context.activeId })\\n            : children\\\
      n          : null}\\n      </SortableOverlayContext.Provider>\\n    </DragOverlay>,\\\
      n    container,\\n  );\\n}\\n\\nconst Root = Sortable;\\nconst Content = SortableContent;\\\
      nconst Item = SortableItem;\\nconst ItemHandle = SortableItemHandle;\\nconst\
      \ Overlay = SortableOverlay;\\n\\nexport {\\n  Root,\\n  Content,\\n  Item,\\\
      n  ItemHandle,\\n  Overlay,\\n  //\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\\
      n  SortableItemHandle,\\n  SortableOverlay,\\n};\\n\",\n-      \"type\": \"\
      registry:component\"\n+      \"type\": \"registry:ui\"\n     },\n     {\n  \
      \     \"path\": \"src/lib/composition.ts\",\ndiff --git a/public/r/data-table.json\
      \ b/public/r/data-table.json\nindex 8a1fe40..f0abc1f 100644\n--- a/public/r/data-table.json\n\
      +++ b/public/r/data-table.json\n@@ -44,22 +44,22 @@\n     },\n     {\n     \
      \  \"path\": \"src/components/data-table/data-table-faceted-filter.tsx\",\n\
      -      \"content\": \"\\\"use client\\\";\\n\\nimport type { Option } from \\\
      \"@/types/data-table\\\";\\nimport type { Column } from \\\"@tanstack/react-table\\\
      \";\\nimport { Check, PlusCircle, XCircle } from \\\"lucide-react\\\";\\n\\\
      nimport { Badge } from \\\"@/components/ui/badge\\\";\\nimport { Button } from\
      \ \\\"@/components/ui/button\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\\
      n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n  CommandSeparator,\\\
      n} from \\\"@/components/ui/command\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\ninterface DataTableFacetedFilterProps<TData,\
      \ TValue> {\\n  column?: Column<TData, TValue>;\\n  title?: string;\\n  options:\
      \ Option[];\\n  multiple?: boolean;\\n}\\n\\nexport function DataTableFacetedFilter<TData,\
      \ TValue>({\\n  column,\\n  title,\\n  options,\\n  multiple,\\n}: DataTableFacetedFilterProps<TData,\
      \ TValue>) {\\n  const [open, setOpen] = React.useState(false);\\n\\n  const\
      \ columnFilterValue = column?.getFilterValue();\\n  const selectedValues = new\
      \ Set(\\n    Array.isArray(columnFilterValue) ? columnFilterValue : [],\\n \
      \ );\\n\\n  const onItemSelect = React.useCallback(\\n    (option: Option, isSelected:\
      \ boolean) => {\\n      if (!column) return;\\n\\n      if (multiple) {\\n \
      \       const newSelectedValues = new Set(selectedValues);\\n        if (isSelected)\
      \ {\\n          newSelectedValues.delete(option.value);\\n        } else {\\\
      n          newSelectedValues.add(option.value);\\n        }\\n        const\
      \ filterValues = Array.from(newSelectedValues);\\n        column.setFilterValue(filterValues.length\
      \ ? filterValues : undefined);\\n      } else {\\n        column.setFilterValue(isSelected\
      \ ? undefined : [option.value]);\\n        setOpen(false);\\n      }\\n    },\\\
      n    [column, multiple, selectedValues],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    column?.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\\
      n  return (\\n    <Popover open={open} onOpenChange={setOpen}>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {selectedValues?.size > 0 ? (\\n          \
      \  <div\\n              aria-label={`Clear ${title} filter`}\\n            \
      \  role=\\\"button\\\"\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          {title}\\\
      n          {selectedValues?.size > 0 && (\\n            <>\\n              <Separator\
      \ orientation=\\\"vertical\\\" className=\\\"mx-0.5 h-4\\\" />\\n          \
      \    <Badge\\n                variant=\\\"secondary\\\"\\n                className=\\\
      \"rounded-sm px-1 font-normal lg:hidden\\\"\\n              >\\n           \
      \     {selectedValues.size}\\n              </Badge>\\n              <div className=\\\
      \"hidden items-center gap-1 lg:flex\\\">\\n                {selectedValues.size\
      \ > 2 ? (\\n                  <Badge\\n                    variant=\\\"secondary\\\
      \"\\n                    className=\\\"rounded-sm px-1 font-normal\\\"\\n  \
      \                >\\n                    {selectedValues.size} selected\\n \
      \                 </Badge>\\n                ) : (\\n                  options\\\
      n                    .filter((option) => selectedValues.has(option.value))\\\
      n                    .map((option) => (\\n                      <Badge\\n  \
      \                      variant=\\\"secondary\\\"\\n                        key={option.value}\\\
      n                        className=\\\"rounded-sm px-1 font-normal\\\"\\n  \
      \                    >\\n                        {option.label}\\n         \
      \             </Badge>\\n                    ))\\n                )}\\n    \
      \          </div>\\n            </>\\n          )}\\n        </Button>\\n  \
      \    </PopoverTrigger>\\n      <PopoverContent className=\\\"w-[12.5rem] p-0\\\
      \" align=\\\"start\\\">\\n        <Command>\\n          <CommandInput placeholder={title}\
      \ />\\n          <CommandList className=\\\"max-h-full\\\">\\n            <CommandEmpty>No\
      \ results found.</CommandEmpty>\\n            <CommandGroup className=\\\"max-h-[18.75rem]\
      \ overflow-y-auto overflow-x-hidden\\\">\\n              {options.map((option)\
      \ => {\\n                const isSelected = selectedValues.has(option.value);\\\
      n\\n                return (\\n                  <CommandItem\\n           \
      \         key={option.value}\\n                    onSelect={() => onItemSelect(option,\
      \ isSelected)}\\n                  >\\n                    <div\\n         \
      \             className={cn(\\n                        \\\"flex size-4 items-center\
      \ justify-center rounded-sm border border-primary\\\",\\n                  \
      \      isSelected\\n                          ? \\\"bg-primary\\\"\\n      \
      \                    : \\\"opacity-50 [&_svg]:invisible\\\",\\n            \
      \          )}\\n                    >\\n                      <Check />\\n \
      \                   </div>\\n                    {option.icon && <option.icon\
      \ />}\\n                    <span className=\\\"truncate\\\">{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </CommandItem>\\n                );\\n              })}\\n            </CommandGroup>\\\
      n            {selectedValues.size > 0 && (\\n              <>\\n           \
      \     <CommandSeparator />\\n                <CommandGroup>\\n             \
      \     <CommandItem\\n                    onSelect={() => onReset()}\\n     \
      \               className=\\\"justify-center text-center\\\"\\n            \
      \      >\\n                    Clear filters\\n                  </CommandItem>\\\
      n                </CommandGroup>\\n              </>\\n            )}\\n   \
      \       </CommandList>\\n        </Command>\\n      </PopoverContent>\\n   \
      \ </Popover>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\n\\\
      nimport type { Option } from \\\"@/types/data-table\\\";\\nimport type { Column\
      \ } from \\\"@tanstack/react-table\\\";\\nimport { Check, PlusCircle, XCircle\
      \ } from \\\"lucide-react\\\";\\n\\nimport { Badge } from \\\"@/components/ui/badge\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport {\\n \
      \ Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\\
      n  CommandList,\\n  CommandSeparator,\\n} from \\\"@/components/ui/command\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { Separator } from \\\"@/components/ui/separator\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport * as React from \\\"\
      react\\\";\\n\\ninterface DataTableFacetedFilterProps<TData, TValue> {\\n  column?:\
      \ Column<TData, TValue>;\\n  title?: string;\\n  options: Option[];\\n  multiple?:\
      \ boolean;\\n}\\n\\nexport function DataTableFacetedFilter<TData, TValue>({\\\
      n  column,\\n  title,\\n  options,\\n  multiple,\\n}: DataTableFacetedFilterProps<TData,\
      \ TValue>) {\\n  const [open, setOpen] = React.useState(false);\\n\\n  const\
      \ columnFilterValue = column?.getFilterValue();\\n  const selectedValues = new\
      \ Set(\\n    Array.isArray(columnFilterValue) ? columnFilterValue : [],\\n \
      \ );\\n\\n  const onItemSelect = React.useCallback(\\n    (option: Option, isSelected:\
      \ boolean) => {\\n      if (!column) return;\\n\\n      if (multiple) {\\n \
      \       const newSelectedValues = new Set(selectedValues);\\n        if (isSelected)\
      \ {\\n          newSelectedValues.delete(option.value);\\n        } else {\\\
      n          newSelectedValues.add(option.value);\\n        }\\n        const\
      \ filterValues = Array.from(newSelectedValues);\\n        column.setFilterValue(filterValues.length\
      \ ? filterValues : undefined);\\n      } else {\\n        column.setFilterValue(isSelected\
      \ ? undefined : [option.value]);\\n        setOpen(false);\\n      }\\n    },\\\
      n    [column, multiple, selectedValues],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    column?.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\\
      n  return (\\n    <Popover open={open} onOpenChange={setOpen}>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {selectedValues?.size > 0 ? (\\n          \
      \  <div\\n              role=\\\"button\\\"\\n              aria-label={`Clear\
      \ ${title} filter`}\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          {title}\\\
      n          {selectedValues?.size > 0 && (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     <Badge\\n                variant=\\\"secondary\\\"\\n                className=\\\
      \"rounded-sm px-1 font-normal lg:hidden\\\"\\n              >\\n           \
      \     {selectedValues.size}\\n              </Badge>\\n              <div className=\\\
      \"hidden items-center gap-1 lg:flex\\\">\\n                {selectedValues.size\
      \ > 2 ? (\\n                  <Badge\\n                    variant=\\\"secondary\\\
      \"\\n                    className=\\\"rounded-sm px-1 font-normal\\\"\\n  \
      \                >\\n                    {selectedValues.size} selected\\n \
      \                 </Badge>\\n                ) : (\\n                  options\\\
      n                    .filter((option) => selectedValues.has(option.value))\\\
      n                    .map((option) => (\\n                      <Badge\\n  \
      \                      variant=\\\"secondary\\\"\\n                        key={option.value}\\\
      n                        className=\\\"rounded-sm px-1 font-normal\\\"\\n  \
      \                    >\\n                        {option.label}\\n         \
      \             </Badge>\\n                    ))\\n                )}\\n    \
      \          </div>\\n            </>\\n          )}\\n        </Button>\\n  \
      \    </PopoverTrigger>\\n      <PopoverContent className=\\\"w-[12.5rem] p-0\\\
      \" align=\\\"start\\\">\\n        <Command>\\n          <CommandInput placeholder={title}\
      \ />\\n          <CommandList className=\\\"max-h-full\\\">\\n            <CommandEmpty>No\
      \ results found.</CommandEmpty>\\n            <CommandGroup className=\\\"max-h-[18.75rem]\
      \ overflow-y-auto overflow-x-hidden\\\">\\n              {options.map((option)\
      \ => {\\n                const isSelected = selectedValues.has(option.value);\\\
      n\\n                return (\\n                  <CommandItem\\n           \
      \         key={option.value}\\n                    onSelect={() => onItemSelect(option,\
      \ isSelected)}\\n                  >\\n                    <div\\n         \
      \             className={cn(\\n                        \\\"flex size-4 items-center\
      \ justify-center rounded-sm border border-primary\\\",\\n                  \
      \      isSelected\\n                          ? \\\"bg-primary\\\"\\n      \
      \                    : \\\"opacity-50 [&_svg]:invisible\\\",\\n            \
      \          )}\\n                    >\\n                      <Check />\\n \
      \                   </div>\\n                    {option.icon && <option.icon\
      \ />}\\n                    <span className=\\\"truncate\\\">{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </CommandItem>\\n                );\\n              })}\\n            </CommandGroup>\\\
      n            {selectedValues.size > 0 && (\\n              <>\\n           \
      \     <CommandSeparator />\\n                <CommandGroup>\\n             \
      \     <CommandItem\\n                    onSelect={() => onReset()}\\n     \
      \               className=\\\"justify-center text-center\\\"\\n            \
      \      >\\n                    Clear filters\\n                  </CommandItem>\\\
      n                </CommandGroup>\\n              </>\\n            )}\\n   \
      \       </CommandList>\\n        </Command>\\n      </PopoverContent>\\n   \
      \ </Popover>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n   \
      \  },\n     {\n       \"path\": \"src/components/data-table/data-table-toolbar.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, Table\
      \ } from \\\"@tanstack/react-table\\\";\\nimport { X } from \\\"lucide-react\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { DataTableDateFilter\
      \ } from \\\"@/components/data-table/data-table-date-filter\\\";\\nimport {\
      \ DataTableFacetedFilter } from \\\"@/components/data-table/data-table-faceted-filter\\\
      \";\\nimport { DataTableSliderFilter } from \\\"@/components/data-table/data-table-slider-filter\\\
      \";\\nimport { DataTableViewOptions } from \\\"@/components/data-table/data-table-view-options\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input\
      \ } from \\\"@/components/ui/input\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\n\\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n}\\n\\nexport function DataTableToolbar<TData>({\\\
      n  table,\\n  children,\\n  className,\\n  ...props\\n}: DataTableToolbarProps<TData>)\
      \ {\\n  const isFiltered = table.getState().columnFilters.length > 0;\\n\\n\
      \  const columns = React.useMemo(\\n    () => table.getAllColumns().filter((column)\
      \ => column.getCanFilter()),\\n    [table],\\n  );\\n\\n  const onReset = React.useCallback(()\
      \ => {\\n    table.resetColumnFilters();\\n  }, [table]);\\n\\n  return (\\\
      n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\"horizontal\\\
      \"\\n      className={cn(\\n        \\\"flex w-full items-start justify-between\
      \ gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\">\\n \
      \       {columns.map((column) => (\\n          <DataTableToolbarFilter key={column.id}\
      \ column={column} />\\n        ))}\\n        {isFiltered && (\\n          <Button\\\
      n            aria-label=\\\"Reset filters\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"sm\\\"\\n            className=\\\"border-dashed\\\
      \"\\n            onClick={onReset}\\n          >\\n            <X />\\n    \
      \        Reset\\n          </Button>\\n        )}\\n      </div>\\n      <div\
      \ className=\\\"flex items-center gap-2\\\">\\n        {children}\\n       \
      \ <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\n  );\\\
      n}\\ninterface DataTableToolbarFilterProps<TData> {\\n  column: Column<TData>;\\\
      n}\\n\\nfunction DataTableToolbarFilter<TData>({\\n  column,\\n}: DataTableToolbarFilterProps<TData>)\
      \ {\\n  {\\n    const columnMeta = column.columnDef.meta;\\n\\n    const onFilterRender\
      \ = React.useCallback(() => {\\n      if (!columnMeta?.variant) return null;\\\
      n\\n      switch (columnMeta.variant) {\\n        case \\\"text\\\":\\n    \
      \    case \\\"number\\\":\\n          return (\\n            <Input\\n     \
      \         type={columnMeta.variant}\\n              placeholder={columnMeta.placeholder\
      \ ?? columnMeta.label}\\n              value={(column.getFilterValue() as string)\
      \ ?? \\\"\\\"}\\n              onChange={(event) => column.setFilterValue(event.target.value)}\\\
      n              className=\\\"h-8 w-40 lg:w-56\\\"\\n            />\\n      \
      \    );\\n\\n        case \\\"date\\\":\\n        case \\\"dateRange\\\":\\\
      n          return (\\n            <DataTableDateFilter\\n              column={column}\\\
      n              title={columnMeta.label ?? column.id}\\n              multiple={columnMeta.variant\
      \ === \\\"dateRange\\\"}\\n            />\\n          );\\n\\n        case \\\
      \"range\\\":\\n          return (\\n            <DataTableSliderFilter\\n  \
      \            column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n            />\\n          );\\n\\n        case \\\"select\\\":\\n        case\
      \ \\\"multiSelect\\\":\\n          return (\\n            <DataTableFacetedFilter\\\
      n              column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n              options={columnMeta.options ?? []}\\n              multiple={columnMeta.variant\
      \ === \\\"multiSelect\\\"}\\n            />\\n          );\\n\\n        default:\\\
      n          return null;\\n      }\\n    }, [column, columnMeta]);\\n\\n    return\
      \ onFilterRender();\\n  }\\n}\\n\",\n+      \"content\": \"\\\"use client\\\"\
      ;\\n\\nimport type { Column, Table } from \\\"@tanstack/react-table\\\";\\nimport\
      \ { X } from \\\"lucide-react\\\";\\nimport * as React from \\\"react\\\";\\\
      n\\nimport { DataTableDateFilter } from \\\"@/components/data-table/data-table-date-filter\\\
      \";\\nimport { DataTableFacetedFilter } from \\\"@/components/data-table/data-table-faceted-filter\\\
      \";\\nimport { DataTableSliderFilter } from \\\"@/components/data-table/data-table-slider-filter\\\
      \";\\nimport { DataTableViewOptions } from \\\"@/components/data-table/data-table-view-options\\\
      \";\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input\
      \ } from \\\"@/components/ui/input\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\n\\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n}\\n\\nexport function DataTableToolbar<TData>({\\\
      n  table,\\n  children,\\n  className,\\n  ...props\\n}: DataTableToolbarProps<TData>)\
      \ {\\n  const isFiltered = table.getState().columnFilters.length > 0;\\n\\n\
      \  const columns = React.useMemo(\\n    () => table.getAllColumns().filter((column)\
      \ => column.getCanFilter()),\\n    [table],\\n  );\\n\\n  const onReset = React.useCallback(()\
      \ => {\\n    table.resetColumnFilters();\\n  }, [table]);\\n\\n  return (\\\
      n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\"horizontal\\\
      \"\\n      className={cn(\\n        \\\"flex w-full items-start justify-between\
      \ gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\\
      n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\">\\n \
      \       {columns.map((column) => (\\n          <DataTableToolbarFilter key={column.id}\
      \ column={column} />\\n        ))}\\n        {isFiltered && (\\n          <Button\\\
      n            aria-label=\\\"Reset filters\\\"\\n            variant=\\\"outline\\\
      \"\\n            size=\\\"sm\\\"\\n            className=\\\"border-dashed\\\
      \"\\n            onClick={onReset}\\n          >\\n            <X />\\n    \
      \        Reset\\n          </Button>\\n        )}\\n      </div>\\n      <div\
      \ className=\\\"flex items-center gap-2\\\">\\n        {children}\\n       \
      \ <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\n  );\\\
      n}\\ninterface DataTableToolbarFilterProps<TData> {\\n  column: Column<TData>;\\\
      n}\\n\\nfunction DataTableToolbarFilter<TData>({\\n  column,\\n}: DataTableToolbarFilterProps<TData>)\
      \ {\\n  {\\n    const columnMeta = column.columnDef.meta;\\n\\n    const onFilterRender\
      \ = React.useCallback(() => {\\n      if (!columnMeta?.variant) return null;\\\
      n\\n      switch (columnMeta.variant) {\\n        case \\\"text\\\":\\n    \
      \    case \\\"number\\\":\\n          return (\\n            <Input\\n     \
      \         type={columnMeta.variant}\\n              placeholder={columnMeta.placeholder\
      \ ?? columnMeta.label}\\n              value={(column.getFilterValue() as string)\
      \ ?? \\\"\\\"}\\n              onChange={(event) => column.setFilterValue(event.target.value)}\\\
      n              className=\\\"h-8 w-40 lg:w-56\\\"\\n            />\\n      \
      \    );\\n\\n        case \\\"range\\\":\\n          return (\\n           \
      \ <DataTableSliderFilter\\n              column={column}\\n              title={columnMeta.label\
      \ ?? column.id}\\n            />\\n          );\\n\\n        case \\\"date\\\
      \":\\n        case \\\"dateRange\\\":\\n          return (\\n            <DataTableDateFilter\\\
      n              column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n              multiple={columnMeta.variant === \\\"dateRange\\\"}\\n      \
      \      />\\n          );\\n\\n        case \\\"select\\\":\\n        case \\\
      \"multiSelect\\\":\\n          return (\\n            <DataTableFacetedFilter\\\
      n              column={column}\\n              title={columnMeta.label ?? column.id}\\\
      n              options={columnMeta.options ?? []}\\n              multiple={columnMeta.variant\
      \ === \\\"multiSelect\\\"}\\n            />\\n          );\\n\\n        default:\\\
      n          return null;\\n      }\\n    }, [column, columnMeta]);\\n\\n    return\
      \ onFilterRender();\\n  }\\n}\\n\",\n       \"type\": \"registry:component\"\
      \n     },\n     {\n       \"path\": \"src/components/data-table/data-table-slider-filter.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\\
      nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Input } from\
      \ \\\"@/components/ui/input\\\";\\nimport { Label } from \\\"@/components/ui/label\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport { Separator } from \\\"@/components/ui/separator\\\
      \";\\nimport { Slider } from \\\"@/components/ui/slider\\\";\\nimport { PlusCircle,\
      \ Settings2, XCircle } from \\\"lucide-react\\\";\\n\\ninterface DataTableSliderFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n}\\n\\nexport\
      \ function DataTableSliderFilter<TData>({\\n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>)\
      \ {\\n  const id = React.useId();\\n  const columnFilterValue = column.getFilterValue()\
      \ as\\n    | [number, number]\\n    | undefined;\\n\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const [range, setRange] = React.useState<[number, number]>(\\\
      n    columnFilterValue ?? [min, max],\\n  );\\n\\n  const onRangeChange = React.useCallback(\\\
      n    (values: [number, number]) => {\\n      setRange(values);\\n      column.setFilterValue(values);\\\
      n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\n\
      \    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    setRange([min, max]);\\n      column.setFilterValue(undefined);\\n    },\\\
      n    [column, min, max],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              aria-label=\\\"Clear filter\\\"\\n              role=\\\"button\\\
      \"\\n              tabIndex={0}\\n              onClick={onReset}\\n       \
      \       className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\
      \ orientation=\\\"vertical\\\" className=\\\"mx-0.5 h-4\\\" />\\n          \
      \    {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"text\\\"\\n                aria-valuemin={min}\\n\
      \                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue >= min &&\\n  \
      \                  numValue <= range[1]\\n                  ) {\\n         \
      \           onRangeChange([numValue, range[1]]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n            <Label\
      \ htmlFor={`${id}-to`} className=\\\"sr-only\\\">\\n              to\\n    \
      \        </Label>\\n            <div className=\\\"relative\\\">\\n        \
      \      <Input\\n                id={`${id}-to`}\\n                type=\\\"\
      text\\\"\\n                aria-valuemin={min}\\n                aria-valuemax={max}\\\
      n                inputMode=\\\"numeric\\\"\\n                pattern=\\\"[0-9]*\\\
      \"\\n                placeholder={max.toString()}\\n                min={min}\\\
      n                max={max}\\n                value={range[1].toString()}\\n\
      \                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue <= max &&\\n  \
      \                  numValue >= range[0]\\n                  ) {\\n         \
      \           onRangeChange([range[0], numValue]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n          </div>\\\
      n          <Slider\\n            aria-label=\\\"Select range\\\"\\n        \
      \    min={min}\\n            max={max}\\n            value={range}\\n      \
      \      onValueChange={(value) => onRangeChange(value as [number, number])}\\\
      n            className=\\\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\\\"\\\
      n          />\\n        </div>\\n        <Button\\n          aria-label=\\\"\
      Reset range filter\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\
      \"sm\\\"\\n          onClick={onReset}\\n          className=\\\"px-3 text-xs\\\
      \"\\n        >\\n          Reset\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\\
      n\\nimport type { Column } from \\\"@tanstack/react-table\\\";\\nimport * as\
      \ React from \\\"react\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { Label\
      \ } from \\\"@/components/ui/label\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { Slider } from \\\"@/components/ui/slider\\\
      \";\\nimport { PlusCircle, Settings2, XCircle } from \\\"lucide-react\\\";\\\
      n\\ninterface DataTableSliderFilterProps<TData> {\\n  column: Column<TData,\
      \ unknown>;\\n  title?: string;\\n}\\n\\nexport function DataTableSliderFilter<TData>({\\\
      n  column,\\n  title,\\n}: DataTableSliderFilterProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const columnFilterValue = column.getFilterValue() as\\\
      n    | [number, number]\\n    | undefined;\\n\\n  const unit = column.columnDef.meta?.unit;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const [range, setRange] = React.useState<[number, number]>(\\\
      n    columnFilterValue ?? [min, max],\\n  );\\n\\n  const onRangeChange = React.useCallback(\\\
      n    (values: [number, number]) => {\\n      setRange(values);\\n      column.setFilterValue(values);\\\
      n    },\\n    [column],\\n  );\\n\\n  const onReset = React.useCallback(\\n\
      \    (event?: React.MouseEvent) => {\\n      event?.stopPropagation();\\n  \
      \    setRange([min, max]);\\n      column.setFilterValue(undefined);\\n    },\\\
      n    [column, min, max],\\n  );\\n\\n  const formatValue = React.useCallback((value:\
      \ number) => {\\n    return value.toLocaleString(undefined, {\\n      maximumFractionDigits:\
      \ 0,\\n    });\\n  }, []);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {columnFilterValue ? (\\n            <div\\\
      n              role=\\\"button\\\"\\n              aria-label={`Clear ${title}\
      \ filter`}\\n              tabIndex={0}\\n              onClick={onReset}\\\
      n              className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <PlusCircle />\\n          )}\\n          <span>{title}</span>\\\
      n          {columnFilterValue ? (\\n            <>\\n              <Separator\\\
      n                orientation=\\\"vertical\\\"\\n                className=\\\
      \"mx-0.5 data-[orientation=vertical]:h-4\\\"\\n              />\\n         \
      \     {formatValue(columnFilterValue[0])} -{\\\" \\\"}\\n              {formatValue(columnFilterValue[1])}\\\
      n              {unit ? ` ${unit}` : \\\"\\\"}\\n            </>\\n         \
      \ ) : null}\\n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent\
      \ align=\\\"start\\\" className=\\\"flex w-auto flex-col gap-4\\\">\\n     \
      \   <div className=\\\"flex flex-col gap-3\\\">\\n          <p className=\\\"\
      font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\\\
      \">\\n            {title}\\n          </p>\\n          <div className=\\\"flex\
      \ items-center gap-4\\\">\\n            <Label htmlFor={`${id}-from`} className=\\\
      \"sr-only\\\">\\n              From\\n            </Label>\\n            <div\
      \ className=\\\"relative\\\">\\n              <Input\\n                id={`${id}-from`}\\\
      n                type=\\\"text\\\"\\n                aria-valuemin={min}\\n\
      \                aria-valuemax={max}\\n                inputMode=\\\"numeric\\\
      \"\\n                pattern=\\\"[0-9]*\\\"\\n                placeholder={min.toString()}\\\
      n                min={min}\\n                max={max}\\n                value={range[0].toString()}\\\
      n                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue >= min &&\\n  \
      \                  numValue <= range[1]\\n                  ) {\\n         \
      \           onRangeChange([numValue, range[1]]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n            <Label\
      \ htmlFor={`${id}-to`} className=\\\"sr-only\\\">\\n              to\\n    \
      \        </Label>\\n            <div className=\\\"relative\\\">\\n        \
      \      <Input\\n                id={`${id}-to`}\\n                type=\\\"\
      text\\\"\\n                aria-valuemin={min}\\n                aria-valuemax={max}\\\
      n                inputMode=\\\"numeric\\\"\\n                pattern=\\\"[0-9]*\\\
      \"\\n                placeholder={max.toString()}\\n                min={min}\\\
      n                max={max}\\n                value={range[1].toString()}\\n\
      \                onChange={(event) => {\\n                  const numValue =\
      \ Number(event.target.value);\\n                  if (\\n                  \
      \  !Number.isNaN(numValue) &&\\n                    numValue <= max &&\\n  \
      \                  numValue >= range[0]\\n                  ) {\\n         \
      \           onRangeChange([range[0], numValue]);\\n                  }\\n  \
      \              }}\\n                className=\\\"h-8 w-24 pr-8\\\"\\n     \
      \         />\\n              {unit && (\\n                <span className=\\\
      \"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2\
      \ text-muted-foreground text-sm\\\">\\n                  {unit}\\n         \
      \       </span>\\n              )}\\n            </div>\\n          </div>\\\
      n          <Slider\\n            aria-label=\\\"Select range\\\"\\n        \
      \    min={min}\\n            max={max}\\n            value={range}\\n      \
      \      onValueChange={(value) => setRange(value as [number, number])}\\n   \
      \         onValueCommit={(value) => onRangeChange(value as [number, number])}\\\
      n            className=\\\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4\\\"\\\
      n          />\\n        </div>\\n        <Button\\n          aria-label=\\\"\
      Reset range filter\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\
      \"sm\\\"\\n          onClick={onReset}\\n          className=\\\"px-3 text-xs\\\
      \"\\n        >\\n          Reset\\n        </Button>\\n      </PopoverContent>\\\
      n    </Popover>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n\
      \     },\n     {\n       \"path\": \"src/components/data-table/data-table-date-filter.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport { CalendarIcon, XCircle } from \\\"\
      lucide-react\\\";\\nimport * as React from \\\"react\\\";\\nimport type { DateRange\
      \ } from \\\"react-day-picker\\\";\\n\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\";\\nimport {\\\
      n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\
      \";\\nimport { Separator } from \\\"@/components/ui/separator\\\";\\nimport\
      \ { formatDate } from \\\"@/lib/format\\\";\\n\\ntype DateSelection = Date[]\
      \ | DateRange;\\n\\nfunction isDateRange(value: DateSelection): value is DateRange\
      \ {\\n  return value && typeof value === \\\"object\\\" && !Array.isArray(value);\\\
      n}\\n\\nfunction validateDate(\\n  timestamp: number | string | undefined,\\\
      n): Date | undefined {\\n  if (!timestamp) return undefined;\\n  const numericTimestamp\
      \ =\\n    typeof timestamp === \\\"string\\\" ? Number(timestamp) : timestamp;\\\
      n  const date = new Date(numericTimestamp);\\n  return !Number.isNaN(date.getTime())\
      \ ? date : undefined;\\n}\\n\\nfunction parseColumnFilterValue(\\n  value: unknown,\\\
      n): (number | string | undefined)[] {\\n  if (Array.isArray(value)) {\\n   \
      \ return value as (number | string)[];\\n  }\\n  if (typeof value === \\\"string\\\
      \") {\\n    return [value];\\n  }\\n  return [value as number | string | undefined];\\\
      n}\\n\\ninterface DataTableDateFilterProps<TData> {\\n  column: Column<TData,\
      \ unknown>;\\n  title?: string;\\n  multiple?: boolean;\\n}\\n\\nexport function\
      \ DataTableDateFilter<TData>({\\n  column,\\n  title,\\n  multiple,\\n}: DataTableDateFilterProps<TData>)\
      \ {\\n  const columnFilterValue = column.getFilterValue();\\n\\n  const selectedDates\
      \ = React.useMemo<DateSelection>(() => {\\n    if (!columnFilterValue) {\\n\
      \      return multiple ? { from: undefined, to: undefined } : [];\\n    }\\\
      n\\n    if (multiple) {\\n      const timestamps = parseColumnFilterValue(columnFilterValue);\\\
      n      return {\\n        from: validateDate(timestamps[0]),\\n        to: validateDate(timestamps[1]),\\\
      n      };\\n    }\\n\\n    const timestamps = parseColumnFilterValue(columnFilterValue);\\\
      n    const date = validateDate(timestamps[0]);\\n    return date ? [date] :\
      \ [];\\n  }, [columnFilterValue, multiple]);\\n\\n  const onSelect = React.useCallback(\\\
      n    (date: Date | DateRange | undefined) => {\\n      if (!date) {\\n     \
      \   column.setFilterValue(undefined);\\n        return;\\n      }\\n\\n    \
      \  if (multiple && !(\\\"getTime\\\" in date)) {\\n        const from = date.from?.getTime();\\\
      n        const to = date.to?.getTime();\\n        column.setFilterValue(from\
      \ || to ? [from, to] : undefined);\\n      } else if (!multiple && \\\"getTime\\\
      \" in date) {\\n        column.setFilterValue(date.getTime());\\n      }\\n\
      \    },\\n    [column, multiple],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event: React.MouseEvent) => {\\n      event.stopPropagation();\\n    \
      \  column.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\n \
      \ const hasValue = React.useMemo(() => {\\n    if (multiple) {\\n      if (!isDateRange(selectedDates))\
      \ return false;\\n      return selectedDates.from || selectedDates.to;\\n  \
      \  }\\n    if (!Array.isArray(selectedDates)) return false;\\n    return selectedDates.length\
      \ > 0;\\n  }, [multiple, selectedDates]);\\n\\n  const formatDateRange = React.useCallback((range:\
      \ DateRange) => {\\n    if (!range.from && !range.to) return \\\"\\\";\\n  \
      \  if (range.from && range.to) {\\n      return `${formatDate(range.from)} -\
      \ ${formatDate(range.to)}`;\\n    }\\n    return formatDate(range.from ?? range.to);\\\
      n  }, []);\\n\\n  const label = React.useMemo(() => {\\n    if (multiple) {\\\
      n      if (!isDateRange(selectedDates)) return null;\\n\\n      const hasSelectedDates\
      \ = selectedDates.from || selectedDates.to;\\n      const dateText = hasSelectedDates\\\
      n        ? formatDateRange(selectedDates)\\n        : \\\"Select date range\\\
      \";\\n\\n      return (\\n        <span className=\\\"flex items-center gap-2\\\
      \">\\n          <span>{title}</span>\\n          {hasSelectedDates && (\\n \
      \           <>\\n              <Separator orientation=\\\"vertical\\\" className=\\\
      \"mx-0.5 h-4\\\" />\\n              <span>{dateText}</span>\\n            </>\\\
      n          )}\\n        </span>\\n      );\\n    }\\n\\n    if (isDateRange(selectedDates))\
      \ return null;\\n\\n    const hasSelectedDate = selectedDates.length > 0;\\\
      n    const dateText = hasSelectedDate\\n      ? formatDate(selectedDates[0])\\\
      n      : \\\"Select date\\\";\\n\\n    return (\\n      <span className=\\\"\
      flex items-center gap-2\\\">\\n        <span>{title}</span>\\n        {hasSelectedDate\
      \ && (\\n          <>\\n            <Separator orientation=\\\"vertical\\\"\
      \ className=\\\"mx-0.5 h-4\\\" />\\n            <span>{dateText}</span>\\n \
      \         </>\\n        )}\\n      </span>\\n    );\\n  }, [selectedDates, multiple,\
      \ formatDateRange, title]);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger\
      \ asChild>\\n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\
      \"border-dashed\\\">\\n          {hasValue ? (\\n            <div\\n       \
      \       aria-label={`Clear ${title} filter`}\\n              role=\\\"button\\\
      \"\\n              tabIndex={0}\\n              onClick={onReset}\\n       \
      \       className=\\\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\\\"\
      \\n            >\\n              <XCircle />\\n            </div>\\n       \
      \   ) : (\\n            <CalendarIcon />\\n          )}\\n          {label}\\\
      n        </Button>\\n      </PopoverTrigger>\\n      <PopoverContent className=\\\
      \"w-auto p-0\\\" align=\\\"start\\\">\\n        {multiple ? (\\n          <Calendar\\\
      n            initialFocus\\n            mode=\\\"range\\\"\\n            selected={\\\
      n              isDateRange(selectedDates)\\n                ? selectedDates\\\
      n                : { from: undefined, to: undefined }\\n            }\\n   \
      \         onSelect={onSelect}\\n          />\\n        ) : (\\n          <Calendar\\\
      n            initialFocus\\n            mode=\\\"single\\\"\\n            selected={\\\
      n              !isDateRange(selectedDates) ? selectedDates[0] : undefined\\\
      n            }\\n            onSelect={onSelect}\\n          />\\n        )}\\\
      n      </PopoverContent>\\n    </Popover>\\n  );\\n}\\n\",\n+      \"content\"\
      : \"\\\"use client\\\";\\n\\nimport type { Column } from \\\"@tanstack/react-table\\\
      \";\\nimport { CalendarIcon, XCircle } from \\\"lucide-react\\\";\\nimport *\
      \ as React from \\\"react\\\";\\nimport type { DateRange } from \\\"react-day-picker\\\
      \";\\n\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Calendar\
      \ } from \\\"@/components/ui/calendar\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { Separator\
      \ } from \\\"@/components/ui/separator\\\";\\nimport { formatDate } from \\\"\
      @/lib/format\\\";\\n\\ntype DateSelection = Date[] | DateRange;\\n\\nfunction\
      \ getIsDateRange(value: DateSelection): value is DateRange {\\n  return value\
      \ && typeof value === \\\"object\\\" && !Array.isArray(value);\\n}\\n\\nfunction\
      \ parseAsDate(timestamp: number | string | undefined): Date | undefined {\\\
      n  if (!timestamp) return undefined;\\n  const numericTimestamp =\\n    typeof\
      \ timestamp === \\\"string\\\" ? Number(timestamp) : timestamp;\\n  const date\
      \ = new Date(numericTimestamp);\\n  return !Number.isNaN(date.getTime()) ? date\
      \ : undefined;\\n}\\n\\nfunction parseColumnFilterValue(value: unknown) {\\\
      n  if (value === null || value === undefined) {\\n    return [];\\n  }\\n\\\
      n  if (Array.isArray(value)) {\\n    return value.map((item) => {\\n      if\
      \ (typeof item === \\\"number\\\" || typeof item === \\\"string\\\") {\\n  \
      \      return item;\\n      }\\n      return undefined;\\n    });\\n  }\\n\\\
      n  if (typeof value === \\\"string\\\" || typeof value === \\\"number\\\") {\\\
      n    return [value];\\n  }\\n\\n  return [];\\n}\\n\\ninterface DataTableDateFilterProps<TData>\
      \ {\\n  column: Column<TData, unknown>;\\n  title?: string;\\n  multiple?: boolean;\\\
      n}\\n\\nexport function DataTableDateFilter<TData>({\\n  column,\\n  title,\\\
      n  multiple,\\n}: DataTableDateFilterProps<TData>) {\\n  const columnFilterValue\
      \ = column.getFilterValue();\\n\\n  const selectedDates = React.useMemo<DateSelection>(()\
      \ => {\\n    if (!columnFilterValue) {\\n      return multiple ? { from: undefined,\
      \ to: undefined } : [];\\n    }\\n\\n    if (multiple) {\\n      const timestamps\
      \ = parseColumnFilterValue(columnFilterValue);\\n      return {\\n        from:\
      \ parseAsDate(timestamps[0]),\\n        to: parseAsDate(timestamps[1]),\\n \
      \     };\\n    }\\n\\n    const timestamps = parseColumnFilterValue(columnFilterValue);\\\
      n    const date = parseAsDate(timestamps[0]);\\n    return date ? [date] : [];\\\
      n  }, [columnFilterValue, multiple]);\\n\\n  const onSelect = React.useCallback(\\\
      n    (date: Date | DateRange | undefined) => {\\n      if (!date) {\\n     \
      \   column.setFilterValue(undefined);\\n        return;\\n      }\\n\\n    \
      \  if (multiple && !(\\\"getTime\\\" in date)) {\\n        const from = date.from?.getTime();\\\
      n        const to = date.to?.getTime();\\n        column.setFilterValue(from\
      \ || to ? [from, to] : undefined);\\n      } else if (!multiple && \\\"getTime\\\
      \" in date) {\\n        column.setFilterValue(date.getTime());\\n      }\\n\
      \    },\\n    [column, multiple],\\n  );\\n\\n  const onReset = React.useCallback(\\\
      n    (event: React.MouseEvent) => {\\n      event.stopPropagation();\\n    \
      \  column.setFilterValue(undefined);\\n    },\\n    [column],\\n  );\\n\\n \
      \ const hasValue = React.useMemo(() => {\\n    if (multiple) {\\n      if (!getIsDateRange(selectedDates))\
      \ return false;\\n      return selectedDates.from || selectedDates.to;\\n  \
      \  }\\n    if (!Array.isArray(selectedDates)) return false;\\n    return selectedDates.length\
      \ > 0;\\n  }, [multiple, selectedDates]);\\n\\n  const formatDateRange = React.useCallback((range:\
      \ DateRange) => {\\n    if (!range.from && !range.to) return \\\"\\\";\\n  \
      \  if (range.from && range.to) {\\n      return `${formatDate(range.from)} -\
      \ ${formatDate(range.to)}`;\\n    }\\n    return formatDate(range.from ?? range.to);\\\
      n  }, []);\\n\\n  const label = React.useMemo(() => {\\n    if (multiple) {\\\
      n      if (!getIsDateRange(selectedDates)) return null;\\n\\n      const hasSelectedDates\
      \ = selectedDates.from || selectedDates.to;\\n      const dateText = hasSelectedDates\\\
      n        ? formatDateRange(selectedDates)\\n        : \\\"Select date range\\\
      \";\\n\\n      return (\\n        <span className=\\\"flex items-center gap-2\\\
      \">\\n          <span>{title}</span>\\n          {hasSelectedDates && (\\n \
      \           <>\\n              <Separator\\n                orientation=\\\"\
      vertical\\\"\\n                className=\\\"mx-0.5 data-[orientation=vertical]:h-4\\\
      \"\\n              />\\n              <span>{dateText}</span>\\n           \
      \ </>\\n          )}\\n        </span>\\n      );\\n    }\\n\\n    if (getIsDateRange(selectedDates))\
      \ return null;\\n\\n    const hasSelectedDate = selectedDates.length > 0;\\\
      n    const dateText = hasSelectedDate\\n      ? formatDate(selectedDates[0])\\\
      n      : \\\"Select date\\\";\\n\\n    return (\\n      <span className=\\\"\
      flex items-center gap-2\\\">\\n        <span>{title}</span>\\n        {hasSelectedDate\
      \ && (\\n          <>\\n            <Separator\\n              orientation=\\\
      \"vertical\\\"\\n              className=\\\"mx-0.5 data-[orientation=vertical]:h-4\\\
      \"\\n            />\\n            <span>{dateText}</span>\\n          </>\\\
      n        )}\\n      </span>\\n    );\\n  }, [selectedDates, multiple, formatDateRange,\
      \ title]);\\n\\n  return (\\n    <Popover>\\n      <PopoverTrigger asChild>\\\
      n        <Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\"border-dashed\\\
      \">\\n          {hasValue ? (\\n            <div\\n              role=\\\"button\\\
      \"\\n              aria-label={`Clear ${title} filter`}\\n              tabIndex={0}\\\
      n              onClick={onReset}\\n              className=\\\"rounded-sm opacity-70\
      \ transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1\
      \ focus-visible:ring-ring\\\"\\n            >\\n              <XCircle />\\\
      n            </div>\\n          ) : (\\n            <CalendarIcon />\\n    \
      \      )}\\n          {label}\\n        </Button>\\n      </PopoverTrigger>\\\
      n      <PopoverContent className=\\\"w-auto p-0\\\" align=\\\"start\\\">\\n\
      \        {multiple ? (\\n          <Calendar\\n            initialFocus\\n \
      \           mode=\\\"range\\\"\\n            selected={\\n              getIsDateRange(selectedDates)\\\
      n                ? selectedDates\\n                : { from: undefined, to:\
      \ undefined }\\n            }\\n            onSelect={onSelect}\\n         \
      \ />\\n        ) : (\\n          <Calendar\\n            initialFocus\\n   \
      \         mode=\\\"single\\\"\\n            selected={\\n              !getIsDateRange(selectedDates)\
      \ ? selectedDates[0] : undefined\\n            }\\n            onSelect={onSelect}\\\
      n          />\\n        )}\\n      </PopoverContent>\\n    </Popover>\\n  );\\\
      n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\ndiff --git\
      \ a/registry.json b/registry.json\nindex b986148..e1ca525 100644\n--- a/registry.json\n\
      +++ b/registry.json\n@@ -128,7 +128,7 @@\n         },\n         {\n        \
      \   \"path\": \"src/components/ui/sortable.tsx\",\n-          \"type\": \"registry:component\"\
      \n+          \"type\": \"registry:ui\"\n         },\n         {\n          \
      \ \"path\": \"src/lib/composition.ts\",\n@@ -171,11 +171,11 @@\n         },\n\
      \         {\n           \"path\": \"src/components/ui/sortable.tsx\",\n-   \
      \       \"type\": \"registry:component\"\n+          \"type\": \"registry:ui\"\
      \n         },\n         {\n           \"path\": \"src/components/ui/faceted.tsx\"\
      ,\n-          \"type\": \"registry:component\"\n+          \"type\": \"registry:ui\"\
      \n         },\n         {\n           \"path\": \"src/hooks/use-callback-ref.ts\"\
      ,\ndiff --git a/src/app/_components/tasks-table-action-bar.tsx b/src/app/_components/tasks-table-action-bar.tsx\n\
      index 902c00a..238287c 100644\n--- a/src/app/_components/tasks-table-action-bar.tsx\n\
      +++ b/src/app/_components/tasks-table-action-bar.tsx\n@@ -108,7 +108,10 @@ export\
      \ function TasksTableActionBar({ table }: TasksTableActionBarProps) {\n    \
      \     <span className=\"whitespace-nowrap text-xs\">\n           {rows.length}\
      \ selected\n         </span>\n-        <Separator orientation=\"vertical\" className=\"\
      mr-1 ml-2\" />\n+        <Separator\n+          orientation=\"vertical\"\n+\
      \          className=\"mr-1 ml-2 data-[orientation=vertical]:h-4\"\n+      \
      \  />\n         <Tooltip>\n           <TooltipTrigger asChild>\n           \
      \  <Button\n@@ -130,7 +133,10 @@ export function TasksTableActionBar({ table\
      \ }: TasksTableActionBarProps) {\n           </TooltipContent>\n         </Tooltip>\n\
      \       </div>\n-      <Separator orientation=\"vertical\" className=\"hidden\
      \ h-5 sm:block\" />\n+      <Separator\n+        orientation=\"vertical\"\n\
      +        className=\"hidden data-[orientation=vertical]:h-5 sm:block\"\n+  \
      \    />\n       <div className=\"flex items-center gap-1.5\">\n         <Select\n\
      \           onValueChange={(value: Task[\"status\"]) =>\ndiff --git a/src/app/_components/tasks-table-columns.tsx\
      \ b/src/app/_components/tasks-table-columns.tsx\nindex 9a06c6a..1634dc7 100644\n\
      --- a/src/app/_components/tasks-table-columns.tsx\n+++ b/src/app/_components/tasks-table-columns.tsx\n\
      @@ -115,8 +115,6 @@ export function getTasksTableColumns({\n         icon: Text,\n\
      \       },\n       enableColumnFilter: true,\n-      enableHiding: false,\n\
      -      enableSorting: false,\n     },\n     {\n       id: \"status\",\n@@ -142,7\
      \ +140,7 @@ export function getTasksTableColumns({\n       },\n       meta:\
      \ {\n         label: \"Status\",\n-        variant: \"select\",\n+        variant:\
      \ \"multiSelect\",\n         options: tasks.status.enumValues.map((status) =>\
      \ ({\n           label: status.charAt(0).toUpperCase() + status.slice(1),\n\
      \           value: status,\ndiff --git a/src/components/data-table/data-table-date-filter.tsx\
      \ b/src/components/data-table/data-table-date-filter.tsx\nindex ca56756..9291fa3\
      \ 100644\n--- a/src/components/data-table/data-table-date-filter.tsx\n+++ b/src/components/data-table/data-table-date-filter.tsx\n\
      @@ -17,13 +17,11 @@ import { formatDate } from \"@/lib/format\";\n \n type DateSelection\
      \ = Date[] | DateRange;\n \n-function isDateRange(value: DateSelection): value\
      \ is DateRange {\n+function getIsDateRange(value: DateSelection): value is DateRange\
      \ {\n   return value && typeof value === \"object\" && !Array.isArray(value);\n\
      \ }\n \n-function validateDate(\n-  timestamp: number | string | undefined,\n\
      -): Date | undefined {\n+function parseAsDate(timestamp: number | string | undefined):\
      \ Date | undefined {\n   if (!timestamp) return undefined;\n   const numericTimestamp\
      \ =\n     typeof timestamp === \"string\" ? Number(timestamp) : timestamp;\n\
      @@ -31,16 +29,25 @@ function validateDate(\n   return !Number.isNaN(date.getTime())\
      \ ? date : undefined;\n }\n \n-function parseColumnFilterValue(\n-  value: unknown,\n\
      -): (number | string | undefined)[] {\n+function parseColumnFilterValue(value:\
      \ unknown) {\n+  if (value === null || value === undefined) {\n+    return [];\n\
      +  }\n+\n   if (Array.isArray(value)) {\n-    return value as (number | string)[];\n\
      +    return value.map((item) => {\n+      if (typeof item === \"number\" ||\
      \ typeof item === \"string\") {\n+        return item;\n+      }\n+      return\
      \ undefined;\n+    });\n   }\n-  if (typeof value === \"string\") {\n+\n+  if\
      \ (typeof value === \"string\" || typeof value === \"number\") {\n     return\
      \ [value];\n   }\n-  return [value as number | string | undefined];\n+\n+  return\
      \ [];\n }\n \n interface DataTableDateFilterProps<TData> {\n@@ -64,13 +71,13\
      \ @@ export function DataTableDateFilter<TData>({\n     if (multiple) {\n  \
      \     const timestamps = parseColumnFilterValue(columnFilterValue);\n      \
      \ return {\n-        from: validateDate(timestamps[0]),\n-        to: validateDate(timestamps[1]),\n\
      +        from: parseAsDate(timestamps[0]),\n+        to: parseAsDate(timestamps[1]),\n\
      \       };\n     }\n \n     const timestamps = parseColumnFilterValue(columnFilterValue);\n\
      -    const date = validateDate(timestamps[0]);\n+    const date = parseAsDate(timestamps[0]);\n\
      \     return date ? [date] : [];\n   }, [columnFilterValue, multiple]);\n \n\
      @@ -102,7 +109,7 @@ export function DataTableDateFilter<TData>({\n \n   const\
      \ hasValue = React.useMemo(() => {\n     if (multiple) {\n-      if (!isDateRange(selectedDates))\
      \ return false;\n+      if (!getIsDateRange(selectedDates)) return false;\n\
      \       return selectedDates.from || selectedDates.to;\n     }\n     if (!Array.isArray(selectedDates))\
      \ return false;\n@@ -119,7 +126,7 @@ export function DataTableDateFilter<TData>({\n\
      \ \n   const label = React.useMemo(() => {\n     if (multiple) {\n-      if\
      \ (!isDateRange(selectedDates)) return null;\n+      if (!getIsDateRange(selectedDates))\
      \ return null;\n \n       const hasSelectedDates = selectedDates.from || selectedDates.to;\n\
      \       const dateText = hasSelectedDates\n@@ -131,7 +138,10 @@ export function\
      \ DataTableDateFilter<TData>({\n           <span>{title}</span>\n          \
      \ {hasSelectedDates && (\n             <>\n-              <Separator orientation=\"\
      vertical\" className=\"mx-0.5 h-4\" />\n+              <Separator\n+       \
      \         orientation=\"vertical\"\n+                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\
      \n+              />\n               <span>{dateText}</span>\n             </>\n\
      \           )}\n@@ -139,7 +149,7 @@ export function DataTableDateFilter<TData>({\n\
      \       );\n     }\n \n-    if (isDateRange(selectedDates)) return null;\n+\
      \    if (getIsDateRange(selectedDates)) return null;\n \n     const hasSelectedDate\
      \ = selectedDates.length > 0;\n     const dateText = hasSelectedDate\n@@ -151,7\
      \ +161,10 @@ export function DataTableDateFilter<TData>({\n         <span>{title}</span>\n\
      \         {hasSelectedDate && (\n           <>\n-            <Separator orientation=\"\
      vertical\" className=\"mx-0.5 h-4\" />\n+            <Separator\n+         \
      \     orientation=\"vertical\"\n+              className=\"mx-0.5 data-[orientation=vertical]:h-4\"\
      \n+            />\n             <span>{dateText}</span>\n           </>\n  \
      \       )}\n@@ -165,8 +178,8 @@ export function DataTableDateFilter<TData>({\n\
      \         <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\"\
      >\n           {hasValue ? (\n             <div\n-              aria-label={`Clear\
      \ ${title} filter`}\n               role=\"button\"\n+              aria-label={`Clear\
      \ ${title} filter`}\n               tabIndex={0}\n               onClick={onReset}\n\
      \               className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n\
      @@ -185,7 +198,7 @@ export function DataTableDateFilter<TData>({\n         \
      \    initialFocus\n             mode=\"range\"\n             selected={\n- \
      \             isDateRange(selectedDates)\n+              getIsDateRange(selectedDates)\n\
      \                 ? selectedDates\n                 : { from: undefined, to:\
      \ undefined }\n             }\n@@ -196,7 +209,7 @@ export function DataTableDateFilter<TData>({\n\
      \             initialFocus\n             mode=\"single\"\n             selected={\n\
      -              !isDateRange(selectedDates) ? selectedDates[0] : undefined\n\
      +              !getIsDateRange(selectedDates) ? selectedDates[0] : undefined\n\
      \             }\n             onSelect={onSelect}\n           />\ndiff --git\
      \ a/src/components/data-table/data-table-faceted-filter.tsx b/src/components/data-table/data-table-faceted-filter.tsx\n\
      index c5a20ba..22e0fff 100644\n--- a/src/components/data-table/data-table-faceted-filter.tsx\n\
      +++ b/src/components/data-table/data-table-faceted-filter.tsx\n@@ -79,8 +79,8\
      \ @@ export function DataTableFacetedFilter<TData, TValue>({\n         <Button\
      \ variant=\"outline\" size=\"sm\" className=\"border-dashed\">\n           {selectedValues?.size\
      \ > 0 ? (\n             <div\n-              aria-label={`Clear ${title} filter`}\n\
      \               role=\"button\"\n+              aria-label={`Clear ${title}\
      \ filter`}\n               tabIndex={0}\n               onClick={onReset}\n\
      \               className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100\
      \ focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n\
      @@ -93,7 +93,10 @@ export function DataTableFacetedFilter<TData, TValue>({\n\
      \           {title}\n           {selectedValues?.size > 0 && (\n           \
      \  <>\n-     \n... (truncated)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'chore: cleanup registry (#953)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table-action-bar.json b/public/r/data-table-action-bar.json\n\
      index 8d57987..3cca56a 100644\n--- a/public/r/data-table-action-bar.json\n+++\
      \ b/public/r/data-table-action-bar.json\n@@ -15,7 +15,7 @@\n   ],\n   \"files\"\
      : [\n     {\n-      \"path\": \"src/registry/new-york/components/data-table/data-table-action-bar.tsx\"\
      ,\n+      \"path\": \"src/components/data-table/data-table-action-bar.tsx\"\
      ,\n       \"content\": \"\\\"use client\\\";\\n\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport {\\n  Tooltip,\\n  TooltipContent,\\n \
      \ TooltipTrigger,\\n} from \\\"@/components/ui/tooltip\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\nimport type { Table } from \\\"@tanstack/react-table\\\
      \";\\nimport { Loader } from \\\"lucide-react\\\";\\nimport { AnimatePresence,\
      \ motion } from \\\"motion/react\\\";\\nimport * as React from \\\"react\\\"\
      ;\\nimport * as ReactDOM from \\\"react-dom\\\";\\n\\ninterface DataTableActionBarProps<TData>\\\
      n  extends React.ComponentProps<typeof motion.div> {\\n  table: Table<TData>;\\\
      n  visible?: boolean;\\n  container?: Element | DocumentFragment | null;\\n}\\\
      n\\nfunction DataTableActionBar<TData>({\\n  table,\\n  visible: visibleProp,\\\
      n  container: containerProp,\\n  children,\\n  className,\\n  ...props\\n}:\
      \ DataTableActionBarProps<TData>) {\\n  const [mounted, setMounted] = React.useState(false);\\\
      n\\n  React.useLayoutEffect(() => {\\n    setMounted(true);\\n  }, []);\\n\\\
      n  React.useEffect(() => {\\n    function onKeyDown(event: KeyboardEvent) {\\\
      n      if (event.key === \\\"Escape\\\") {\\n        table.toggleAllRowsSelected(false);\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [table]);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  const visible =\\n   \
      \ visibleProp ?? table.getFilteredSelectedRowModel().rows.length > 0;\\n\\n\
      \  return ReactDOM.createPortal(\\n    <AnimatePresence>\\n      {visible &&\
      \ (\\n        <motion.div\\n          role=\\\"toolbar\\\"\\n          aria-orientation=\\\
      \"horizontal\\\"\\n          initial={{ opacity: 0, y: 20 }}\\n          animate={{\
      \ opacity: 1, y: 0 }}\\n          exit={{ opacity: 0, y: 20 }}\\n          transition={{\
      \ duration: 0.2, ease: \\\"easeInOut\\\" }}\\n          className={cn(\\n  \
      \          \\\"fixed inset-x-0 bottom-6 z-50 mx-auto flex w-fit flex-wrap items-center\
      \ justify-center gap-2 rounded-md border bg-background p-2 text-foreground shadow-sm\\\
      \",\\n            className,\\n          )}\\n          {...props}\\n      \
      \  >\\n          {children}\\n        </motion.div>\\n      )}\\n    </AnimatePresence>,\\\
      n    container,\\n  );\\n}\\n\\ninterface DataTableActionBarActionProps\\n \
      \ extends React.ComponentProps<typeof Button> {\\n  tooltip?: string;\\n  isPending?:\
      \ boolean;\\n}\\n\\nfunction DataTableActionBarAction({\\n  size = \\\"sm\\\"\
      ,\\n  tooltip,\\n  isPending,\\n  disabled,\\n  className,\\n  children,\\n\
      \  ...props\\n}: DataTableActionBarActionProps) {\\n  const trigger = (\\n \
      \   <Button\\n      variant=\\\"secondary\\\"\\n      size={size}\\n      className={cn(\\\
      n        \\\"gap-1.5 border border-secondary bg-secondary/50 hover:bg-secondary/70\
      \ [&>svg]:size-3.5\\\",\\n        size === \\\"icon\\\" ? \\\"size-7\\\" : \\\
      \"h-7\\\",\\n        className,\\n      )}\\n      disabled={disabled || isPending}\\\
      n      {...props}\\n    >\\n      {isPending ? <Loader className=\\\"animate-spin\\\
      \" /> : children}\\n    </Button>\\n  );\\n\\n  if (!tooltip) return trigger;\\\
      n\\n  return (\\n    <Tooltip>\\n      <TooltipTrigger asChild>{trigger}</TooltipTrigger>\\\
      n      <TooltipContent\\n        sideOffset={6}\\n        className=\\\"border\
      \ bg-accent font-semibold text-foreground dark:bg-zinc-900 [&>span]:hidden\\\
      \"\\n      >\\n        <p>{tooltip}</p>\\n      </TooltipContent>\\n    </Tooltip>\\\
      n  );\\n}\\n\\nexport { DataTableActionBar, DataTableActionBarAction };\\n\"\
      ,\n       \"type\": \"registry:component\"\n     }\ndiff --git a/public/r/data-table-filter-list.json\
      \ b/public/r/data-table-filter-list.json\nindex bc48bb9..654e394 100644\n---\
      \ a/public/r/data-table-filter-list.json\n+++ b/public/r/data-table-filter-list.json\n\
      @@ -20,63 +20,63 @@\n   ],\n   \"files\": [\n     {\n-      \"path\": \"src/registry/new-york/components/data-table/data-table-filter-list.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, ColumnMeta,\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  CalendarIcon,\\\
      n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\n  Trash2,\\\
      n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState }\
      \ from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport { Badge\
      \ } from \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\";\\nimport {\\\
      n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\\
      n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\nimport { Input }\
      \ from \\\"@/components/ui/input\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport {\\n \
      \ Select,\\n  SelectContent,\\n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\\
      n} from \\\"@/components/ui/select\\\";\\nimport { dataTableConfig } from \\\
      \"@/config/data-table\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport\
      \ { DataTableRangeFilter } from \\\"@/registry/new-york/components/data-table/data-table-range-filter\\\
      \";\\nimport {\\n  Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\\
      n  FacetedGroup,\\n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\\
      n} from \\\"@/registry/new-york/components/ui/faceted\\\";\\nimport {\\n  Sortable,\\\
      n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\n  SortableOverlay,\\\
      n} from \\\"@/registry/new-york/components/ui/sortable\\\";\\nimport { useDebouncedCallback\
      \ } from \\\"@/registry/new-york/hooks/use-debounced-callback\\\";\\nimport\
      \ {\\n  getDefaultFilterOperator,\\n  getFilterOperators,\\n} from \\\"@/registry/new-york/lib/data-table\\\
      \";\\nimport { formatDate } from \\\"@/registry/new-york/lib/format\\\";\\nimport\
      \ { generateId } from \\\"@/registry/new-york/lib/id\\\";\\nimport { getFiltersStateParser\
      \ } from \\\"@/registry/new-york/lib/parsers\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/types/data-table\\\";\\\
      n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\"joinOperator\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterList<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  ...props\\n}: DataTableFilterListProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const labelId = React.useId();\\n  const descriptionId\
      \ = React.useId();\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ addButtonRef = React.useRef<HTMLButtonElement>(null);\\n\\n  const columns\
      \ = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\n   \
      \   .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n+      \"path\": \"src/components/data-table/data-table-filter-list.tsx\"\
      ,\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, ColumnMeta,\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  CalendarIcon,\\\
      n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\n  Trash2,\\\
      n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState }\
      \ from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport { DataTableRangeFilter\
      \ } from \\\"@/components/data-table/data-table-range-filter\\\";\\nimport {\
      \ Badge } from \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\
      \";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\\
      n  CommandItem,\\n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\\
      nimport {\\n  Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\\
      n  FacetedGroup,\\n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\\
      n} from \\\"@/components/ui/faceted\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport {\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\\
      n  SortableOverlay,\\n} from \\\"@/components/ui/sortable\\\";\\nimport { dataTableConfig\
      \ } from \\\"@/config/data-table\\\";\\nimport { useDebouncedCallback } from\
      \ \\\"@/hooks/use-debounced-callback\\\";\\nimport { getDefaultFilterOperator,\
      \ getFilterOperators } from \\\"@/lib/data-table\\\";\\nimport { formatDate\
      \ } from \\\"@/lib/format\\\";\\nimport { generateId } from \\\"@/lib/id\\\"\
      ;\\nimport { getFiltersStateParser } from \\\"@/lib/parsers\\\";\\nimport {\
      \ cn } from \\\"@/lib/utils\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/types/data-table\\\";\\\
      n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\"joinOperator\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterList<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  ...props\\n}: DataTableFilterListProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const labelId = React.useId();\\n  const descriptionId\
      \ = React.useId();\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ addButtonRef = React.useRef<HTMLButtonElement>(null);\\n\\n  const columns\
      \ = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\n   \
      \   .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n-\
      \      \"path\": \"src/registry/new-york/components/data-table/data-table-range-filter.tsx\"\
      ,\n+      \"path\": \"src/components/data-table/data-table-range-filter.tsx\"\
      ,\n       \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\\
      nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { cn } from \\\
      \"@/lib/utils\\\";\\nimport type { ExtendedColumnFilter } from \\\"@/types/data-table\\\
      \";\\n\\ninterface DataTableRangeFilterProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  filter: ExtendedColumnFilter<TData>;\\n  column: Column<TData>;\\\
      n  inputId: string;\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n}\\n\\nexport function DataTableRangeFilter<TData>({\\n  filter,\\n  column,\\\
      n  inputId,\\n  onFilterUpdate,\\n  className,\\n  ...props\\n}: DataTableRangeFilterProps<TData>)\
      \ {\\n  const meta = column.columnDef.meta;\\n\\n  const [min, max] = React.useMemo(()\
      \ => {\\n    const range = column.columnDef.meta?.range;\\n    if (range) return\
      \ range;\\n\\n    const values = column.getFacetedMinMaxValues();\\n    if (!values)\
      \ return [0, 100];\\n\\n    return [values[0], values[1]];\\n  }, [column]);\\\
      n\\n  const formatValue = React.useCallback(\\n    (value: string | number |\
      \ undefined) => {\\n      if (value === undefined || value === \\\"\\\") return\
      \ \\\"\\\";\\n      const numValue = Number(value);\\n      return Number.isNaN(numValue)\\\
      n        ? \\\"\\\"\\n        : numValue.toLocaleString(undefined, {\\n    \
      \        maximumFractionDigits: 0,\\n          });\\n    },\\n    [],\\n  );\\\
      n\\n  const value = React.useMemo(() => {\\n    if (Array.isArray(filter.value))\
      \ return filter.value.map(formatValue);\\n    return [formatValue(filter.value),\
      \ \\\"\\\"];\\n  }, [filter.value, formatValue]);\\n\\n  const onRangeValueChange\
      \ = React.useCallback(\\n    (value: string, isMin?: boolean) => {\\n      const\
      \ numValue = Number(value);\\n      const currentValues = Array.isArray(filter.value)\\\
      n        ? filter.value\\n        : [\\\"\\\", \\\"\\\"];\\n      const otherValue\
      \ = isMin\\n        ? (currentValues[1] ?? \\\"\\\")\\n        : (currentValues[0]\
      \ ?? \\\"\\\");\\n\\n      if (\\n        value === \\\"\\\" ||\\n        (!Number.isNaN(numValue)\
      \ &&\\n          (isMin\\n            ? numValue >= min && numValue <= (Number(otherValue)\
      \ || max)\\n            : numValue <= max && numValue >= (Number(otherValue)\
      \ || min)))\\n      ) {\\n        onFilterUpdate(filter.filterId, {\\n     \
      \     value: isMin ? [value, otherValue] : [otherValue, value],\\n        });\\\
      n      }\\n    },\\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\\\
      n  );\\n\\n  return (\\n    <div\\n      data-slot=\\\"range\\\"\\n      className={cn(\\\
      \"flex w-full items-center gap-2\\\", className)}\\n      {...props}\\n    >\\\
      n      <Input\\n        id={`${inputId}-min`}\\n        type=\\\"number\\\"\\\
      n        aria-label={`${meta?.label} minimum value`}\\n        aria-valuemin={min}\\\
      n        aria-valuemax={max}\\n        data-slot=\\\"range-min\\\"\\n      \
      \  inputMode=\\\"numeric\\\"\\n        placeholder={min.toString()}\\n     \
      \   min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[0]}\\n        onChange={(event) => onRangeValueChange(event.target.value,\
      \ true)}\\n      />\\n      <span className=\\\"sr-only shrink-0 text-muted-foreground\\\
      \">to</span>\\n      <Input\\n        id={`${inputId}-max`}\\n        type=\\\
      \"number\\\"\\n        aria-label={`${meta?.label} maximum value`}\\n      \
      \  aria-valuemin={min}\\n        aria-valuemax={max}\\n        data-slot=\\\"\
      range-max\\\"\\n        inputMode=\\\"numeric\\\"\\n        placeholder={max.toString()}\\\
      n        min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[1]}\\n        onChange={(event) => onRangeValueChange(event.target.value)}\\\
      n      />\\n    </div>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\
      \n     },\n     {\n-      \"path\": \"src/registry/new-york/components/data-table/data-table-advanced-toolbar.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Table } from\
      \ \\\"@tanstack/react-table\\\";\\nimport type * as React from \\\"react\\\"\
      ;\\n\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { DataTableViewOptions\
      \ } from \\\"@/registry/new-york/components/data-table/data-table-view-options\\\
      \";\\n\\ninterface DataTableAdvancedToolbarProps<TData>\\n  extends React.ComponentProps<\\\
      \"div\\\"> {\\n  table: Table<TData>;\\n}\\n\\nexport function DataTableAdvancedToolbar<TData>({\\\
      n  table,\\n  children,\\n  className,\\n  ...props\\n}: DataTableAdvancedToolbarProps<TData>)\
      \ {\\n  return (\\n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\
      \"horizontal\\\"\\n      className={cn(\\n        \\\"flex w-full items-start\
      \ justify-between gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\\
      n    >\\n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\
      \">{children}</div>\\n      <div className=\\\"flex items-center gap-2\\\">\\\
      n        <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\\
      n  );\\n}\\n\",\n+      \"path\": \"src/components/data-table/data-table-advanced-toolbar.tsx\"\
      ,\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type { Table } from\
      \ \\\"@tanstack/react-table\\\";\\nimport type * as React from \\\"react\\\"\
      ;\\n\\nimport { DataTableViewOptions } from \\\"@/components/data-table/data-table-view-options\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\ninterface DataTableAdvancedToolbarProps<TData>\\\
      n  extends React.ComponentProps<\\\"div\\\"> {\\n  table: Table<TData>;\\n}\\\
      n\\nexport function DataTableAdvancedToolbar<TData>({\\n  table,\\n  children,\\\
      n  className,\\n  ...props\\n}: DataTableAdvancedToolbarProps<TData>) {\\n \
      \ return (\\n    <div\\n      role=\\\"toolbar\\\"\\n      aria-orientation=\\\
      \"horizontal\\\"\\n      className={cn(\\n        \\\"flex w-full items-start\
      \ justify-between gap-2 p-1\\\",\\n        className,\\n      )}\\n      {...props}\\\
      n    >\\n      <div className=\\\"flex flex-1 flex-wrap items-center gap-2\\\
      \">{children}</div>\\n      <div className=\\\"flex items-center gap-2\\\">\\\
      n        <DataTableViewOptions table={table} />\\n      </div>\\n    </div>\\\
      n  );\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n\
      -      \"path\": \"src/registry/new-york/components/ui/sortable.tsx\",\n-  \
      \    \"content\": \"\\\"use client\\\";\\n\\nimport {\\n  type Announcements,\\\
      n  DndContext,\\n  type DndContextProps,\\n  type DragEndEvent,\\n  DragOverlay,\\\
      n  type DraggableSyntheticListeners,\\n  type DropAnimation,\\n  KeyboardSensor,\\\
      n  MouseSensor,\\n  type ScreenReaderInstructions,\\n  TouchSensor,\\n  type\
      \ UniqueIdentifier,\\n  closestCenter,\\n  closestCorners,\\n  defaultDropAnimationSideEffects,\\\
      n  useSensor,\\n  useSensors,\\n} from \\\"@dnd-kit/core\\\";\\nimport {\\n\
      \  restrictToHorizontalAxis,\\n  restrictToParentElement,\\n  restrictToVerticalAxis,\\\
      n} from \\\"@dnd-kit/modifiers\\\";\\nimport {\\n  SortableContext,\\n  type\
      \ SortableContextProps,\\n  arrayMove,\\n  horizontalListSortingStrategy,\\\
      n  sortableKeyboardCoordinates,\\n  useSortable,\\n  verticalListSortingStrategy,\\\
      n} from \\\"@dnd-kit/sortable\\\";\\nimport { CSS } from \\\"@dnd-kit/utilities\\\
      \";\\nimport { Slot, type SlotProps } from \\\"@radix-ui/react-slot\\\";\\nimport\
      \ * as React from \\\"react\\\";\\n\\nimport { cn } from \\\"@/lib/utils\\\"\
      ;\\nimport {\\n  composeEventHandlers,\\n  useComposedRefs,\\n} from \\\"@/registry/new-york/lib/composition\\\
      \";\\nimport * as ReactDOM from \\\"react-dom\\\";\\n\\nconst orientationConfig\
      \ = {\\n  vertical: {\\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\\\
      n    strategy: verticalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  horizontal: {\\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\\\
      n    strategy: horizontalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  mixed: {\\n    modifiers: [restrictToParentElement],\\n    strategy:\
      \ undefined,\\n    collisionDetection: closestCorners,\\n  },\\n};\\n\\nconst\
      \ ROOT_NAME = \\\"Sortable\\\";\\nconst CONTENT_NAME = \\\"SortableContent\\\
      \";\\nconst ITEM_NAME = \\\"SortableItem\\\";\\nconst ITEM_HANDLE_NAME = \\\"\
      SortableItemHandle\\\";\\nconst OVERLAY_NAME = \\\"SortableOverlay\\\";\\n\\\
      nconst SORTABLE_ERROR = {\\n  [ROOT_NAME]: `\\\\`${ROOT_NAME}\\\\` components\
      \ must be within \\\\`${ROOT_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${ROOT_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${CONTENT_NAME}\\\\``,\\n  [ITEM_HANDLE_NAME]: `\\\\\
      `${ITEM_HANDLE_NAME}\\\\` must be within \\\\`${ITEM_NAME}\\\\``,\\n  [OVERLAY_NAME]:\
      \ `\\\\`${OVERLAY_NAME}\\\\` must be within \\\\`${ROOT_NAME}\\\\``,\\n} as\
      \ const;\\n\\ninterface SortableRootContextValue<T> {\\n  id: string;\\n  items:\
      \ T[];\\n  modifiers: DndContextProps[\\\"modifiers\\\"];\\n  strategy: SortableContextProps[\\\
      \"strategy\\\"];\\n  activeId: UniqueIdentifier | null;\\n  setActiveId: (id:\
      \ UniqueIdentifier | null) => void;\\n  getItemValue: (item: T) => UniqueIdentifier;\\\
      n  flatCursor: boolean;\\n}\\n\\nconst SortableRootContext =\\n  React.createContext<SortableRootContextValue<unknown>\
      \ | null>(null);\\nSortableRootContext.displayName = ROOT_NAME;\\n\\nfunction\
      \ useSortableContext(name: keyof typeof SORTABLE_ERROR) {\\n  const context\
      \ = React.useContext(SortableRootContext);\\n  if (!context) {\\n    throw new\
      \ Error(SORTABLE_ERROR[name]);\\n  }\\n  return context;\\n}\\n\\ninterface\
      \ GetItemValue<T> {\\n  /**\\n   * Callback that returns a unique identifier\
      \ for each sortable item. Required for array of objects.\\n   * @example getItemValue={(item)\
      \ => item.id}\\n   */\\n  getItemValue: (item: T) => UniqueIdentifier;\\n}\\\
      n\\ntype SortableProps<T> = DndContextProps & {\\n  value: T[];\\n  onValueChange?:\
      \ (items: T[]) => void;\\n  onMove?: (\\n    event: DragEndEvent & { activeIndex:\
      \ number; overIndex: number },\\n  ) => void;\\n  strategy?: SortableContextProps[\\\
      \"strategy\\\"];\\n  orientation?: \\\"vertical\\\" | \\\"horizontal\\\" | \\\
      \"mixed\\\";\\n  flatCursor?: boolean;\\n} & (T extends object ? GetItemValue<T>\
      \ : Partial<GetItemValue<T>>);\\n\\nfunction Sortable<T>(props: SortableProps<T>)\
      \ {\\n  const {\\n    id = React.useId(),\\n    value,\\n    onValueChange,\\\
      n    modifiers,\\n    strategy,\\n    onMove,\\n    orientation = \\\"vertical\\\
      \",\\n    flatCursor = false,\\n    getItemValue: getItemValueProp,\\n    accessibility,\\\
      n    ...sortableProps\\n  } = props;\\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier\
      \ | null>(null);\\n  const sensors = useSensors(\\n    useSensor(MouseSensor),\\\
      n    useSensor(TouchSensor),\\n    useSensor(KeyboardSensor, {\\n      coordinateGetter:\
      \ sortableKeyboardCoordinates,\\n    }),\\n  );\\n  const config = React.useMemo(\\\
      n    () => orientationConfig[orientation],\\n    [orientation],\\n  );\\n  const\
      \ getItemValue = React.useCallback(\\n    (item: T): UniqueIdentifier => {\\\
      n      if (typeof item === \\\"object\\\" && !getItemValueProp) {\\n       \
      \ throw new Error(\\n          \\\"getItemValue is required when using array\
      \ of objects.\\\",\\n        );\\n      }\\n      return getItemValueProp\\\
      n        ? getItemValueProp(item)\\n        : (item as UniqueIdentifier);\\\
      n    },\\n    [getItemValueProp],\\n  );\\n\\n  const onDragEnd = React.useCallback(\\\
      n    (event: DragEndEvent) => {\\n      const { active, over } = event;\\n \
      \     if (over && active.id !== over?.id) {\\n        const activeIndex = value.findIndex(\\\
      n          (item) => getItemValue(item) === active.id,\\n        );\\n     \
      \   const overIndex = value.findIndex(\\n          (item) => getItemValue(item)\
      \ === over.id,\\n        );\\n\\n        if (onMove) {\\n          onMove({\
      \ ...event, activeIndex, overIndex });\\n        } else {\\n          onValueChange?.(arrayMove(value,\
      \ activeIndex, overIndex));\\n        }\\n      }\\n      setActiveId(null);\\\
      n    },\\n    [value, onValueChange, onMove, getItemValue],\\n  );\\n\\n  const\
      \ announcements: Announcements = {\\n    onDragStart({ active }) {\\n      const\
      \ activeValue = active.id.toString();\\n      return `Grabbed sortable item\
      \ \\\"${activeValue}\\\". Current position is ${active.data.current?.sortable.index\
      \ + 1} of ${value.length}. Use arrow keys to move, space to drop.`;\\n    },\\\
      n    onDragOver({ active, over }) {\\n      if (over) {\\n        const overIndex\
      \ = over.data.current?.sortable.index ?? 0;\\n        const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n        const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n        const activeValue = active.id.toString();\\n    \
      \    return `Sortable item \\\"${activeValue}\\\" moved ${moveDirection} to\
      \ position ${overIndex + 1} of ${value.length}.`;\\n      }\\n      return \\\
      \"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n    },\\n    onDragEnd({ active, over }) {\\n      const activeValue =\
      \ active.id.toString();\\n      if (over) {\\n        const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n        return `Sortable item \\\"${activeValue}\\\" dropped at position\
      \ ${overIndex + 1} of ${value.length}.`;\\n      }\\n      return `Sortable\
      \ item \\\"${activeValue}\\\" dropped. No changes were made.`;\\n    },\\n \
      \   onDragCancel({ active }) {\\n      const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n      const activeValue = active.id.toString();\\n      return `Sorting\
      \ cancelled. Sortable item \\\"${activeValue}\\\" returned to position ${activeIndex\
      \ + 1} of ${value.length}.`;\\n    },\\n    onDragMove({ active, over }) {\\\
      n      if (over) {\\n        const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n        const activeIndex = active.data.current?.sortable.index ??\
      \ 0;\\n        const moveDirection = overIndex > activeIndex ? \\\"down\\\"\
      \ : \\\"up\\\";\\n        const activeValue = active.id.toString();\\n     \
      \   return `Sortable item \\\"${activeValue}\\\" is moving ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n      }\\n      return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n    },\\n  };\\n\\n  const screenReaderInstructions: ScreenReaderInstructions\
      \ = React.useMemo(\\n    () => ({\\n      draggable: `\\n        To pick up\
      \ a sortable item, press space or enter.\\n        While dragging, use the ${orientation\
      \ === \\\"vertical\\\" ? \\\"up and down\\\" : orientation === \\\"horizontal\\\
      \" ? \\\"left and right\\\" : \\\"arrow\\\"} keys to move the item.\\n     \
      \   Press space or enter again to drop the item in its new position, or press\
      \ escape to cancel.\\n      `,\\n    }),\\n    [orientation],\\n  );\\n\\n \
      \ const contextValue = React.useMemo(\\n    () => ({\\n      id,\\n      items:\
      \ value,\\n      modifiers: modifiers ?? config.modifiers,\\n      strategy:\
      \ strategy ?? config.strategy,\\n      activeId,\\n      setActiveId,\\n   \
      \   getItemValue,\\n      flatCursor,\\n    }),\\n    [\\n      id,\\n     \
      \ value,\\n      modifiers,\\n      strategy,\\n      config.modifiers,\\n \
      \     config.strategy,\\n      activeId,\\n      getItemValue,\\n      flatCursor,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableRootContext.Provider\\n      value={contextValue\
      \ as SortableRootContextValue<unknown>}\\n    >\\n      <DndContext\\n     \
      \   id={id}\\n        modifiers={modifiers ?? config.modifiers}\\n        sensors={sensors}\\\
      n        collisionDetection={config.collisionDetection}\\n        onDragStart={composeEventHandlers(\\\
      n          sortableProps.onDragStart,\\n          ({ active }) => setActiveId(active.id),\\\
      n        )}\\n        onDragEnd={composeEventHandlers(sortableProps.onDragEnd,\
      \ onDragEnd)}\\n        onDragCancel={composeEventHandlers(sortableProps.onDragCancel,\
      \ () =>\\n          setActiveId(null),\\n        )}\\n        accessibility={{\\\
      n          announcements,\\n          screenReaderInstructions,\\n         \
      \ ...accessibility,\\n        }}\\n        {...sortableProps}\\n      />\\n\
      \    </SortableRootContext.Provider>\\n  );\\n}\\n\\nconst SortableContentContext\
      \ = React.createContext<boolean>(false);\\nSortableContentContext.displayName\
      \ = CONTENT_NAME;\\n\\ninterface SortableContentProps extends SlotProps {\\\
      n  strategy?: SortableContextProps[\\\"strategy\\\"];\\n  children: React.ReactNode;\\\
      n  asChild?: boolean;\\n}\\n\\nconst SortableContent = React.forwardRef<HTMLDivElement,\
      \ SortableContentProps>(\\n  (props, forwardedRef) => {\\n    const { strategy:\
      \ strategyProp, asChild, ...contentProps } = props;\\n    const context = useSortableContext(CONTENT_NAME);\\\
      n\\n    const items = React.useMemo(() => {\\n      return context.items.map((item)\
      \ => context.getItemValue(item));\\n    }, [context.items, context.getItemValue]);\\\
      n\\n    const ContentSlot = asChild ? Slot : \\\"div\\\";\\n\\n    return (\\\
      n      <SortableContentContext.Provider value={true}>\\n        <SortableContext\\\
      n          items={items}\\n          strategy={strategyProp ?? context.strategy}\\\
      n        >\\n          <ContentSlot {...contentProps} ref={forwardedRef} />\\\
      n        </SortableContext>\\n      </SortableContentContext.Provider>\\n  \
      \  );\\n  },\\n);\\nSortableContent.displayName = CONTENT_NAME;\\n\\ninterface\
      \ SortableItemContextValue {\\n  id: string;\\n  attributes: React.HTMLAttributes<HTMLElement>;\\\
      n  listeners: DraggableSyntheticListeners | undefined;\\n  setActivatorNodeRef:\
      \ (node: HTMLElement | null) => void;\\n  isDragging?: boolean;\\n  disabled?:\
      \ boolean;\\n}\\n\\nconst SortableItemContext = React.createContext<SortableItemContextValue>({\\\
      n  id: \\\"\\\",\\n  attributes: {},\\n  listeners: undefined,\\n  setActivatorNodeRef:\
      \ () => {},\\n  isDragging: false,\\n});\\nSortableItemContext.displayName =\
      \ ITEM_NAME;\\n\\ninterface SortableItemProps extends SlotProps {\\n  value:\
      \ UniqueIdentifier;\\n  asHandle?: boolean;\\n  asChild?: boolean;\\n  disabled?:\
      \ boolean;\\n}\\n\\nconst SortableItem = React.forwardRef<HTMLDivElement, SortableItemProps>(\\\
      n  (props, forwardedRef) => {\\n    const {\\n      value,\\n      style,\\\
      n      asHandle,\\n      asChild,\\n      disabled,\\n      className,\\n  \
      \    ...itemProps\\n    } = props;\\n    const inSortableContent = React.useContext(SortableContentContext);\\\
      n    const inSortableOverlay = React.useContext(SortableOverlayContext);\\n\\\
      n    if (!inSortableContent && !inSortableOverlay) {\\n      throw new Error(SORTABLE_ERROR[ITEM_NAME]);\\\
      n    }\\n\\n    if (value === \\\"\\\") {\\n      throw new Error(`${ITEM_NAME}\
      \ value cannot be an empty string.`);\\n    }\\n\\n    const context = useSortableContext(ITEM_NAME);\\\
      n    const id = React.useId();\\n    const {\\n      attributes,\\n      listeners,\\\
      n      setNodeRef,\\n      setActivatorNodeRef,\\n      transform,\\n      transition,\\\
      n      isDragging,\\n    } = useSortable({ id: value, disabled });\\n\\n   \
      \ const composedRef = useComposedRefs(forwardedRef, (node) => {\\n      if (disabled)\
      \ return;\\n      setNodeRef(node);\\n      if (asHandle) setActivatorNodeRef(node);\\\
      n    });\\n\\n    const composedStyle = React.useMemo<React.CSSProperties>(()\
      \ => {\\n      return {\\n        transform: CSS.Translate.toString(transform),\\\
      n        transition,\\n        ...style,\\n      };\\n    }, [transform, transition,\
      \ style]);\\n\\n    const itemContext = React.useMemo<SortableItemContextValue>(\\\
      n      () => ({\\n        id,\\n        attributes,\\n        listeners,\\n\
      \        setActivatorNodeRef,\\n        isDragging,\\n        disabled,\\n \
      \     }),\\n      [id, attributes, listeners, setActivatorNodeRef, isDragging,\
      \ disabled],\\n    );\\n\\n    const ItemSlot = asChild ? Slot : \\\"div\\\"\
      ;\\n\\n    return (\\n      <SortableItemContext.Provider value={itemContext}>\\\
      n        <ItemSlot\\n          id={id}\\n          data-dragging={isDragging\
      \ ? \\\"\\\" : undefined}\\n          {...itemProps}\\n          {...(asHandle\
      \ ? attributes : {})}\\n          {...(asHandle ? listeners : {})}\\n      \
      \    tabIndex={disabled ? undefined : 0}\\n          ref={composedRef}\\n  \
      \        style={composedStyle}\\n          className={cn(\\n            \\\"\
      focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\\\
      \",\\n            {\\n              \\\"touch-none select-none\\\": asHandle,\\\
      n              \\\"cursor-default\\\": context.flatCursor,\\n              \\\
      \"data-dragging:cursor-grabbing\\\": !context.flatCursor,\\n              \\\
      \"cursor-grab\\\": !isDragging && asHandle && !context.flatCursor,\\n      \
      \        \\\"opacity-50\\\": isDragging,\\n              \\\"pointer-events-none\
      \ opacity-50\\\": disabled,\\n            },\\n            className,\\n   \
      \       )}\\n        />\\n      </SortableItemContext.Provider>\\n    );\\n\
      \  },\\n);\\nSortableItem.displayName = ITEM_NAME;\\n\\ninterface SortableItemHandleProps\\\
      n  extends React.ComponentPropsWithoutRef<\\\"button\\\"> {\\n  asChild?: boolean;\\\
      n}\\n\\nconst SortableItemHandle = React.forwardRef<\\n  HTMLButtonElement,\\\
      n  SortableItemHandleProps\\n>((props, forwardedRef) => {\\n  const { asChild,\
      \ disabled, className, ...itemHandleProps } = props;\\n  const itemContext =\
      \ React.useContext(SortableItemContext);\\n  if (!itemContext) {\\n    throw\
      \ new Error(SORTABLE_ERROR[ITEM_HANDLE_NAME]);\\n  }\\n  const context = useSortableContext(ITEM_HANDLE_NAME);\\\
      n\\n  const isDisabled = disabled ?? itemContext.disabled;\\n\\n  const composedRef\
      \ = useComposedRefs(forwardedRef, (node) => {\\n    if (!isDisabled) return;\\\
      n    itemContext.setActivatorNodeRef(node);\\n  });\\n\\n  const HandleSlot\
      \ = asChild ? Slot : \\\"button\\\";\\n\\n  return (\\n    <HandleSlot\\n  \
      \    aria-controls={itemContext.id}\\n      aria-roledescription=\\\"sortable\
      \ item handle\\\"\\n      data-dragging={itemContext.isDragging ? \\\"\\\" :\
      \ undefined}\\n      {...itemHandleProps}\\n      {...itemContext.attributes}\\\
      n      {...itemContext.listeners}\\n      ref={composedRef}\\n      className={cn(\\\
      n        \\\"select-none disabled:pointer-events-none disabled:opacity-50\\\"\
      ,\\n        context.flatCursor\\n          ? \\\"cursor-default\\\"\\n     \
      \     : \\\"cursor-grab data-dragging:cursor-grabbing\\\",\\n        className,\\\
      n      )}\\n      disabled={isDisabled}\\n    />\\n  );\\n});\\nSortableItemHandle.displayName\
      \ = ITEM_HANDLE_NAME;\\n\\nconst SortableOverlayContext = React.createContext(false);\\\
      nSortableOverlayContext.displayName = OVERLAY_NAME;\\n\\nconst dropAnimation:\
      \ DropAnimation = {\\n  sideEffects: defaultDropAnimationSideEffects({\\n  \
      \  styles: {\\n      active: {\\n        opacity: \\\"0.4\\\",\\n      },\\\
      n    },\\n  }),\\n};\\n\\ninterface SortableOverlayProps\\n  extends Omit<React.ComponentPropsWithoutRef<typeof\
      \ DragOverlay>, \\\"children\\\"> {\\n  container?: HTMLElement | DocumentFragment\
      \ | null;\\n  children?:\\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\\\
      n    | React.ReactNode;\\n}\\n\\nfunction SortableOverlay(props: SortableOverlayProps)\
      \ {\\n  const { container: containerProp, children, ...overlayProps } = props;\\\
      n  const context = useSortableContext(OVERLAY_NAME);\\n\\n  const [mounted,\
      \ setMounted] = React.useState(false);\\n  React.useLayoutEffect(() => setMounted(true),\
      \ []);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  return ReactDOM.createPortal(\\\
      n    <DragOverlay\\n      modifiers={context.modifiers}\\n      dropAnimation={dropAnimation}\\\
      n      className={cn(!context.flatCursor && \\\"cursor-grabbing\\\")}\\n   \
      \   {...overlayProps}\\n    >\\n      <SortableOverlayContext.Provider value={true}>\\\
      n        {context.activeId\\n          ? typeof children === \\\"function\\\"\
      \\n            ? children({ value: context.activeId })\\n            : children\\\
      n          : null}\\n      </SortableOverlayContext.Provider>\\n    </DragOverlay>,\\\
      n    container,\\n  );\\n}\\n\\nconst Root = Sortable;\\nconst Content = SortableContent;\\\
      nconst Item = SortableItem;\\nconst ItemHandle = SortableItemHandle;\\nconst\
      \ Overlay = SortableOverlay;\\n\\nexport {\\n  Sortable,\\n  SortableContent,\\\
      n  SortableItem,\\n  SortableItemHandle,\\n  SortableOverlay,\\n  //\\n  Root,\\\
      n  Content,\\n  Item,\\n  ItemHandle,\\n  Overlay,\\n};\\n\",\n+      \"path\"\
      : \"src/components/ui/sortable.tsx\",\n+      \"content\": \"\\\"use client\\\
      \";\\n\\nimport {\\n  type Announcements,\\n  DndContext,\\n  type DndContextProps,\\\
      n  type DragEndEvent,\\n  DragOverlay,\\n  type DraggableSyntheticListeners,\\\
      n  type DropAnimation,\\n  KeyboardSensor,\\n  MouseSensor,\\n  type ScreenReaderInstructions,\\\
      n  TouchSensor,\\n  type UniqueIdentifier,\\n  closestCenter,\\n  closestCorners,\\\
      n  defaultDropAnimationSideEffects,\\n  useSensor,\\n  useSensors,\\n} from\
      \ \\\"@dnd-kit/core\\\";\\nimport {\\n  restrictToHorizontalAxis,\\n  restrictToParentElement,\\\
      n  restrictToVerticalAxis,\\n} from \\\"@dnd-kit/modifiers\\\";\\nimport {\\\
      n  SortableContext,\\n  type SortableContextProps,\\n  arrayMove,\\n  horizontalListSortingStrategy,\\\
      n  sortableKeyboardCoordinates,\\n  useSortable,\\n  verticalListSortingStrategy,\\\
      n} from \\\"@dnd-kit/sortable\\\";\\nimport { CSS } from \\\"@dnd-kit/utilities\\\
      \";\\nimport { Slot } from \\\"@radix-ui/react-slot\\\";\\nimport * as React\
      \ from \\\"react\\\";\\n\\nimport { composeEventHandlers, useComposedRefs }\
      \ from \\\"@/lib/composition\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\\
      nimport * as ReactDOM from \\\"react-dom\\\";\\n\\nconst orientationConfig =\
      \ {\\n  vertical: {\\n    modifiers: [restrictToVerticalAxis, restrictToParentElement],\\\
      n    strategy: verticalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  horizontal: {\\n    modifiers: [restrictToHorizontalAxis, restrictToParentElement],\\\
      n    strategy: horizontalListSortingStrategy,\\n    collisionDetection: closestCenter,\\\
      n  },\\n  mixed: {\\n    modifiers: [restrictToParentElement],\\n    strategy:\
      \ undefined,\\n    collisionDetection: closestCorners,\\n  },\\n};\\n\\nconst\
      \ ROOT_NAME = \\\"Sortable\\\";\\nconst CONTENT_NAME = \\\"SortableContent\\\
      \";\\nconst ITEM_NAME = \\\"SortableItem\\\";\\nconst ITEM_HANDLE_NAME = \\\"\
      SortableItemHandle\\\";\\nconst OVERLAY_NAME = \\\"SortableOverlay\\\";\\n\\\
      nconst SORTABLE_ERRORS = {\\n  [ROOT_NAME]: `\\\\`${ROOT_NAME}\\\\` components\
      \ must be within \\\\`${ROOT_NAME}\\\\``,\\n  [CONTENT_NAME]: `\\\\`${CONTENT_NAME}\\\
      \\` must be within \\\\`${ROOT_NAME}\\\\``,\\n  [ITEM_NAME]: `\\\\`${ITEM_NAME}\\\
      \\` must be within \\\\`${CONTENT_NAME}\\\\``,\\n  [ITEM_HANDLE_NAME]: `\\\\\
      `${ITEM_HANDLE_NAME}\\\\` must be within \\\\`${ITEM_NAME}\\\\``,\\n  [OVERLAY_NAME]:\
      \ `\\\\`${OVERLAY_NAME}\\\\` must be within \\\\`${ROOT_NAME}\\\\``,\\n} as\
      \ const;\\n\\ninterface SortableRootContextValue<T> {\\n  id: string;\\n  items:\
      \ UniqueIdentifier[];\\n  modifiers: DndContextProps[\\\"modifiers\\\"];\\n\
      \  strategy: SortableContextProps[\\\"strategy\\\"];\\n  activeId: UniqueIdentifier\
      \ | null;\\n  setActiveId: (id: UniqueIdentifier | null) => void;\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n  flatCursor: boolean;\\n}\\n\\nconst SortableRootContext\
      \ =\\n  React.createContext<SortableRootContextValue<unknown> | null>(null);\\\
      nSortableRootContext.displayName = ROOT_NAME;\\n\\nfunction useSortableContext(name:\
      \ keyof typeof SORTABLE_ERRORS) {\\n  const context = React.useContext(SortableRootContext);\\\
      n  if (!context) {\\n    throw new Error(SORTABLE_ERRORS[name]);\\n  }\\n  return\
      \ context;\\n}\\n\\ninterface GetItemValue<T> {\\n  /**\\n   * Callback that\
      \ returns a unique identifier for each sortable item. Required for array of\
      \ objects.\\n   * @example getItemValue={(item) => item.id}\\n   */\\n  getItemValue:\
      \ (item: T) => UniqueIdentifier;\\n}\\n\\ntype SortableProps<T> = DndContextProps\
      \ & {\\n  value: T[];\\n  onValueChange?: (items: T[]) => void;\\n  onMove?:\
      \ (\\n    event: DragEndEvent & { activeIndex: number; overIndex: number },\\\
      n  ) => void;\\n  strategy?: SortableContextProps[\\\"strategy\\\"];\\n  orientation?:\
      \ \\\"vertical\\\" | \\\"horizontal\\\" | \\\"mixed\\\";\\n  flatCursor?: boolean;\\\
      n} & (T extends object ? GetItemValue<T> : Partial<GetItemValue<T>>);\\n\\nfunction\
      \ Sortable<T>(props: SortableProps<T>) {\\n  const {\\n    value,\\n    onValueChange,\\\
      n    collisionDetection,\\n    modifiers,\\n    strategy,\\n    onMove,\\n \
      \   orientation = \\\"vertical\\\",\\n    flatCursor = false,\\n    getItemValue:\
      \ getItemValueProp,\\n    accessibility,\\n    ...sortableProps\\n  } = props;\\\
      n  const id = React.useId();\\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier\
      \ | null>(null);\\n\\n  const sensors = useSensors(\\n    useSensor(MouseSensor),\\\
      n    useSensor(TouchSensor),\\n    useSensor(KeyboardSensor, {\\n      coordinateGetter:\
      \ sortableKeyboardCoordinates,\\n    }),\\n  );\\n  const config = React.useMemo(\\\
      n    () => orientationConfig[orientation],\\n    [orientation],\\n  );\\n\\\
      n  const getItemValue = React.useCallback(\\n    (item: T): UniqueIdentifier\
      \ => {\\n      if (typeof item === \\\"object\\\" && !getItemValueProp) {\\\
      n        throw new Error(\\n          \\\"getItemValue is required when using\
      \ array of objects.\\\",\\n        );\\n      }\\n      return getItemValueProp\\\
      n        ? getItemValueProp(item)\\n        : (item as UniqueIdentifier);\\\
      n    },\\n    [getItemValueProp],\\n  );\\n\\n  const items = React.useMemo(()\
      \ => {\\n    return value.map((item) => getItemValue(item));\\n  }, [value,\
      \ getItemValue]);\\n\\n  const onDragEnd = React.useCallback(\\n    (event:\
      \ DragEndEvent) => {\\n      const { active, over } = event;\\n      if (over\
      \ && active.id !== over?.id) {\\n        const activeIndex = value.findIndex(\\\
      n          (item) => getItemValue(item) === active.id,\\n        );\\n     \
      \   const overIndex = value.findIndex(\\n          (item) => getItemValue(item)\
      \ === over.id,\\n        );\\n\\n        if (onMove) {\\n          onMove({\
      \ ...event, activeIndex, overIndex });\\n        } else {\\n          onValueChange?.(arrayMove(value,\
      \ activeIndex, overIndex));\\n        }\\n      }\\n      setActiveId(null);\\\
      n    },\\n    [value, onValueChange, onMove, getItemValue],\\n  );\\n\\n  const\
      \ announcements: Announcements = React.useMemo(\\n    () => ({\\n      onDragStart({\
      \ active }) {\\n        const activeValue = active.id.toString();\\n       \
      \ return `Grabbed sortable item \\\"${activeValue}\\\". Current position is\
      \ ${active.data.current?.sortable.index + 1} of ${value.length}. Use arrow keys\
      \ to move, space to drop.`;\\n      },\\n      onDragOver({ active, over })\
      \ {\\n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" moved ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n      onDragEnd({ active, over }) {\\n        const activeValue\
      \ = active.id.toString();\\n        if (over) {\\n          const overIndex\
      \ = over.data.current?.sortable.index ?? 0;\\n          return `Sortable item\
      \ \\\"${activeValue}\\\" dropped at position ${overIndex + 1} of ${value.length}.`;\\\
      n        }\\n        return `Sortable item \\\"${activeValue}\\\" dropped. No\
      \ changes were made.`;\\n      },\\n      onDragCancel({ active }) {\\n    \
      \    const activeIndex = active.data.current?.sortable.index ?? 0;\\n      \
      \  const activeValue = active.id.toString();\\n        return `Sorting cancelled.\
      \ Sortable item \\\"${activeValue}\\\" returned to position ${activeIndex +\
      \ 1} of ${value.length}.`;\\n      },\\n      onDragMove({ active, over }) {\\\
      n        if (over) {\\n          const overIndex = over.data.current?.sortable.index\
      \ ?? 0;\\n          const activeIndex = active.data.current?.sortable.index\
      \ ?? 0;\\n          const moveDirection = overIndex > activeIndex ? \\\"down\\\
      \" : \\\"up\\\";\\n          const activeValue = active.id.toString();\\n  \
      \        return `Sortable item \\\"${activeValue}\\\" is moving ${moveDirection}\
      \ to position ${overIndex + 1} of ${value.length}.`;\\n        }\\n        return\
      \ \\\"Sortable item is no longer over a droppable area. Press escape to cancel.\\\
      \";\\n      },\\n    }),\\n    [value],\\n  );\\n\\n  const screenReaderInstructions:\
      \ ScreenReaderInstructions = React.useMemo(\\n    () => ({\\n      draggable:\
      \ `\\n        To pick up a sortable item, press space or enter.\\n        While\
      \ dragging, use the ${orientation === \\\"vertical\\\" ? \\\"up and down\\\"\
      \ : orientation === \\\"horizontal\\\" ? \\\"left and right\\\" : \\\"arrow\\\
      \"} keys to move the item.\\n        Press space or enter again to drop the\
      \ item in its new position, or press escape to cancel.\\n      `,\\n    }),\\\
      n    [orientation],\\n  );\\n\\n  const contextValue = React.useMemo(\\n   \
      \ () => ({\\n      id,\\n      items,\\n      modifiers: modifiers ?? config.modifiers,\\\
      n      strategy: strategy ?? config.strategy,\\n      activeId,\\n      setActiveId,\\\
      n      getItemValue,\\n      flatCursor,\\n    }),\\n    [\\n      id,\\n  \
      \    items,\\n      modifiers,\\n      strategy,\\n      config.modifiers,\\\
      n      config.strategy,\\n      activeId,\\n      getItemValue,\\n      flatCursor,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableRootContext.Provider\\n      value={contextValue\
      \ as SortableRootContextValue<unknown>}\\n    >\\n      <DndContext\\n     \
      \   collisionDetection={collisionDetection ?? config.collisionDetection}\\n\
      \        modifiers={modifiers ?? config.modifiers}\\n        sensors={sensors}\\\
      n        {...sortableProps}\\n        id={id}\\n        onDragStart={composeEventHandlers(\\\
      n          sortableProps.onDragStart,\\n          ({ active }) => setActiveId(active.id),\\\
      n        )}\\n        onDragEnd={composeEventHandlers(sortableProps.onDragEnd,\
      \ onDragEnd)}\\n        onDragCancel={composeEventHandlers(sortableProps.onDragCancel,\
      \ () =>\\n          setActiveId(null),\\n        )}\\n        accessibility={{\\\
      n          announcements,\\n          screenReaderInstructions,\\n         \
      \ ...accessibility,\\n        }}\\n      />\\n    </SortableRootContext.Provider>\\\
      n  );\\n}\\n\\nconst SortableContentContext = React.createContext<boolean>(false);\\\
      nSortableContentContext.displayName = CONTENT_NAME;\\n\\ninterface SortableContentProps\
      \ extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\n  strategy?: SortableContextProps[\\\
      \"strategy\\\"];\\n  children: React.ReactNode;\\n  asChild?: boolean;\\n  withoutSlot?:\
      \ boolean;\\n}\\n\\nconst SortableContent = React.forwardRef<HTMLDivElement,\
      \ SortableContentProps>(\\n  (props, forwardedRef) => {\\n    const {\\n   \
      \   strategy: strategyProp,\\n      asChild,\\n      withoutSlot,\\n      children,\\\
      n      ...contentProps\\n    } = props;\\n    const context = useSortableContext(CONTENT_NAME);\\\
      n\\n    const ContentPrimitive = asChild ? Slot : \\\"div\\\";\\n\\n    return\
      \ (\\n      <SortableContentContext.Provider value={true}>\\n        <SortableContext\\\
      n          items={context.items}\\n          strategy={strategyProp ?? context.strategy}\\\
      n        >\\n          {withoutSlot ? (\\n            children\\n          )\
      \ : (\\n            <ContentPrimitive {...contentProps} ref={forwardedRef}>\\\
      n              {children}\\n            </ContentPrimitive>\\n          )}\\\
      n        </SortableContext>\\n      </SortableContentContext.Provider>\\n  \
      \  );\\n  },\\n);\\nSortableContent.displayName = CONTENT_NAME;\\n\\ninterface\
      \ SortableItemContextValue {\\n  id: string;\\n  attributes: React.HTMLAttributes<HTMLElement>;\\\
      n  listeners: DraggableSyntheticListeners | undefined;\\n  setActivatorNodeRef:\
      \ (node: HTMLElement | null) => void;\\n  isDragging?: boolean;\\n  disabled?:\
      \ boolean;\\n}\\n\\nconst SortableItemContext =\\n  React.createContext<SortableItemContextValue\
      \ | null>(null);\\nSortableItemContext.displayName = ITEM_NAME;\\n\\ninterface\
      \ SortableItemProps extends React.ComponentPropsWithoutRef<\\\"div\\\"> {\\\
      n  value: UniqueIdentifier;\\n  asHandle?: boolean;\\n  asChild?: boolean;\\\
      n  disabled?: boolean;\\n}\\n\\nconst SortableItem = React.forwardRef<HTMLDivElement,\
      \ SortableItemProps>(\\n  (props, forwardedRef) => {\\n    const {\\n      value,\\\
      n      style,\\n      asHandle,\\n      asChild,\\n      disabled,\\n      className,\\\
      n      ...itemProps\\n    } = props;\\n    const inSortableContent = React.useContext(SortableContentContext);\\\
      n    const inSortableOverlay = React.useContext(SortableOverlayContext);\\n\\\
      n    if (!inSortableContent && !inSortableOverlay) {\\n      throw new Error(SORTABLE_ERRORS[ITEM_NAME]);\\\
      n    }\\n\\n    if (value === \\\"\\\") {\\n      throw new Error(`\\\\`${ITEM_NAME}\\\
      \\` value cannot be an empty string`);\\n    }\\n\\n    const context = useSortableContext(ITEM_NAME);\\\
      n    const id = React.useId();\\n    const {\\n      attributes,\\n      listeners,\\\
      n      setNodeRef,\\n      setActivatorNodeRef,\\n      transform,\\n      transition,\\\
      n      isDragging,\\n    } = useSortable({ id: value, disabled });\\n\\n   \
      \ const composedRef = useComposedRefs(forwardedRef, (node) => {\\n      if (disabled)\
      \ return;\\n      setNodeRef(node);\\n      if (asHandle) setActivatorNodeRef(node);\\\
      n    });\\n\\n    const composedStyle = React.useMemo<React.CSSProperties>(()\
      \ => {\\n      return {\\n        transform: CSS.Translate.toString(transform),\\\
      n        transition,\\n        ...style,\\n      };\\n    }, [transform, transition,\
      \ style]);\\n\\n    const itemContext = React.useMemo<SortableItemContextValue>(\\\
      n      () => ({\\n        id,\\n        attributes,\\n        listeners,\\n\
      \        setActivatorNodeRef,\\n        isDragging,\\n        disabled,\\n \
      \     }),\\n      [id, attributes, listeners, setActivatorNodeRef, isDragging,\
      \ disabled],\\n    );\\n\\n    const ItemPrimitive = asChild ? Slot : \\\"div\\\
      \";\\n\\n    return (\\n      <SortableItemContext.Provider value={itemContext}>\\\
      n        <ItemPrimitive\\n          id={id}\\n          data-dragging={isDragging\
      \ ? \\\"\\\" : undefined}\\n          {...itemProps}\\n          {...(asHandle\
      \ ? attributes : {})}\\n          {...(asHandle ? listeners : {})}\\n      \
      \    tabIndex={disabled ? undefined : 0}\\n          ref={composedRef}\\n  \
      \        style={composedStyle}\\n          className={cn(\\n            \\\"\
      focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1\\\
      \",\\n            {\\n              \\\"touch-none select-none\\\": asHandle,\\\
      n              \\\"cursor-default\\\": context.flatCursor,\\n              \\\
      \"data-dragging:cursor-grabbing\\\": !context.flatCursor,\\n              \\\
      \"cursor-grab\\\": !isDragging && asHandle && !context.flatCursor,\\n      \
      \        \\\"opacity-50\\\": isDragging,\\n              \\\"pointer-events-none\
      \ opacity-50\\\": disabled,\\n            },\\n            className,\\n   \
      \       )}\\n        />\\n      </SortableItemContext.Provider>\\n    );\\n\
      \  },\\n);\\nSortableItem.displayName = ITEM_NAME;\\n\\ninterface SortableItemHandleProps\\\
      n  extends React.ComponentPropsWithoutRef<\\\"button\\\"> {\\n  asChild?: boolean;\\\
      n}\\n\\nconst SortableItemHandle = React.forwardRef<\\n  HTMLButtonElement,\\\
      n  SortableItemHandleProps\\n>((props, forwardedRef) => {\\n  const { asChild,\
      \ disabled, className, ...itemHandleProps } = props;\\n  const itemContext =\
      \ React.useContext(SortableItemContext);\\n  if (!itemContext) {\\n    throw\
      \ new Error(SORTABLE_ERRORS[ITEM_HANDLE_NAME]);\\n  }\\n  const context = useSortableContext(ITEM_HANDLE_NAME);\\\
      n\\n  const isDisabled = disabled ?? itemContext.disabled;\\n\\n  const composedRef\
      \ = useComposedRefs(forwardedRef, (node) => {\\n    if (!isDisabled) return;\\\
      n    itemContext.setActivatorNodeRef(node);\\n  });\\n\\n  const HandlePrimitive\
      \ = asChild ? Slot : \\\"button\\\";\\n\\n  return (\\n    <HandlePrimitive\\\
      n      type=\\\"button\\\"\\n      aria-controls={itemContext.id}\\n      data-dragging={itemContext.isDragging\
      \ ? \\\"\\\" : undefined}\\n      {...itemHandleProps}\\n      {...itemContext.attributes}\\\
      n      {...itemContext.listeners}\\n      ref={composedRef}\\n      className={cn(\\\
      n        \\\"select-none disabled:pointer-events-none disabled:opacity-50\\\"\
      ,\\n        context.flatCursor\\n          ? \\\"cursor-default\\\"\\n     \
      \     : \\\"cursor-grab data-dragging:cursor-grabbing\\\",\\n        className,\\\
      n      )}\\n      disabled={isDisabled}\\n    />\\n  );\\n});\\nSortableItemHandle.displayName\
      \ = ITEM_HANDLE_NAME;\\n\\nconst SortableOverlayContext = React.createContext(false);\\\
      nSortableOverlayContext.displayName = OVERLAY_NAME;\\n\\nconst dropAnimation:\
      \ DropAnimation = {\\n  sideEffects: defaultDropAnimationSideEffects({\\n  \
      \  styles: {\\n      active: {\\n        opacity: \\\"0.4\\\",\\n      },\\\
      n    },\\n  }),\\n};\\n\\ninterface SortableOverlayProps\\n  extends Omit<React.ComponentPropsWithoutRef<typeof\
      \ DragOverlay>, \\\"children\\\"> {\\n  container?: Element | DocumentFragment\
      \ | null;\\n  children?:\\n    | ((params: { value: UniqueIdentifier }) => React.ReactNode)\\\
      n    | React.ReactNode;\\n}\\n\\nfunction SortableOverlay(props: SortableOverlayProps)\
      \ {\\n  const { container: containerProp, children, ...overlayProps } = props;\\\
      n  const context = useSortableContext(OVERLAY_NAME);\\n\\n  const [mounted,\
      \ setMounted] = React.useState(false);\\n  React.useLayoutEffect(() => setMounted(true),\
      \ []);\\n\\n  const container =\\n    containerProp ?? (mounted ? globalThis.document?.body\
      \ : null);\\n\\n  if (!container) return null;\\n\\n  return ReactDOM.createPortal(\\\
      n    <DragOverlay\\n      dropAnimation={dropAnimation}\\n      modifiers={context.modifiers}\\\
      n      className={cn(!context.flatCursor && \\\"cursor-grabbing\\\")}\\n   \
      \   {...overlayProps}\\n    >\\n      <SortableOverlayContext.Provider value={true}>\\\
      n        {context.activeId\\n          ? typeof children === \\\"function\\\"\
      \\n            ? children({ value: context.activeId })\\n            : children\\\
      n          : null}\\n      </SortableOverlayContext.Provider>\\n    </DragOverlay>,\\\
      n    container,\\n  );\\n}\\n\\nconst Root = Sortable;\\nconst Content = SortableContent;\\\
      nconst Item = SortableItem;\\nconst ItemHandle = SortableItemHandle;\\nconst\
      \ Overlay = SortableOverlay;\\n\\nexport {\\n  Root,\\n  Content,\\n  Item,\\\
      n  ItemHandle,\\n  Overlay,\\n  //\\n  Sortable,\\n  SortableContent,\\n  SortableItem,\\\
      n  SortableItemHandle,\\n  SortableOverlay,\\n};\\n\",\n       \"type\": \"\
      registry:component\"\n     },\n     {\n-      \"path\": \"src/registry/new-york/components/ui/faceted.tsx\"\
      ,\n+      \"path\": \"src/components/ui/faceted.tsx\",\n       \"content\":\
      \ \"\\\"use client\\\";\\n\\nimport { Check, ChevronsUpDown } from \\\"lucide-react\\\
      \";\\nimport * as React from \\\"react\\\";\\n\\nimport { Badge } from \\\"\
      @/components/ui/badge\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\\
      n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n  CommandSeparator,\\n}\
      \ from \\\"@/components/ui/command\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport { cn }\
      \ from \\\"@/lib/utils\\\";\\n\\nconst FACETED_NAME = \\\"Faceted\\\";\\nconst\
      \ TRIGGER_NAME = \\\"FacetedTrigger\\\";\\nconst BADGE_LIST_NAME = \\\"FacetedBadgeList\\\
      \";\\nconst CONTENT_NAME = \\\"FacetedContent\\\";\\nconst INPUT_NAME = \\\"\
      FacetedInput\\\";\\nconst LIST_NAME = \\\"FacetedList\\\";\\nconst EMPTY_NAME\
      \ = \\\"FacetedEmpty\\\";\\nconst GROUP_NAME = \\\"FacetedGroup\\\";\\nconst\
      \ ITEM_NAME = \\\"\n... (truncated)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'feat: update registry path (#952)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/public/r/data-table-filter-list.json b/public/r/data-table-filter-list.json\n\
      index f79098a..bc48bb9 100644\n--- a/public/r/data-table-filter-list.json\n\
      +++ b/public/r/data-table-filter-list.json\n@@ -21,12 +21,12 @@\n   \"files\"\
      : [\n     {\n       \"path\": \"src/registry/new-york/components/data-table/data-table-filter-list.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, ColumnMeta,\
      \ Table } from \\\"@tanstack/react-table\\\";\\nimport {\\n  CalendarIcon,\\\
      n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\n  Trash2,\\\
      n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState }\
      \ from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport { Badge\
      \ } from \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"@/components/ui/button\\\
      \";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\";\\nimport {\\\
      n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\\
      n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\nimport { Input }\
      \ from \\\"@/components/ui/input\\\";\\nimport {\\n  Popover,\\n  PopoverContent,\\\
      n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\";\\nimport {\\n \
      \ Select,\\n  SelectContent,\\n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\\
      n} from \\\"@/components/ui/select\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\nimport { DataTableRangeFilter } from \\\"@/registry/new-york/components/data-table/data-table-range-filter\\\
      \";\\nimport {\\n  Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\\
      n  FacetedGroup,\\n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\\
      n} from \\\"@/registry/new-york/components/ui/faceted\\\";\\nimport {\\n  Sortable,\\\
      n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\n  SortableOverlay,\\\
      n} from \\\"@/registry/new-york/components/ui/sortable\\\";\\nimport { dataTableConfig\
      \ } from \\\"@/registry/new-york/config/data-table\\\";\\nimport { useDebouncedCallback\
      \ } from \\\"@/registry/new-york/hooks/use-debounced-callback\\\";\\nimport\
      \ {\\n  getDefaultFilterOperator,\\n  getFilterOperators,\\n} from \\\"@/registry/new-york/lib/data-table\\\
      \";\\nimport { formatDate } from \\\"@/registry/new-york/lib/format\\\";\\nimport\
      \ { generateId } from \\\"@/registry/new-york/lib/id\\\";\\nimport { getFiltersStateParser\
      \ } from \\\"@/registry/new-york/lib/parsers\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/registry/new-york/types/data-table\\\
      \";\\n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\
      \"joinOperator\\\";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst\
      \ OPEN_MENU_SHORTCUT = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\
      \", \\\"delete\\\"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends\
      \ React.ComponentProps<typeof PopoverContent> {\\n  table: Table<TData>;\\n\
      \  debounceMs?: number;\\n  throttleMs?: number;\\n  shallow?: boolean;\\n}\\\
      n\\nexport function DataTableFilterList<TData>({\\n  table,\\n  debounceMs =\
      \ DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow = true,\\n  ...props\\\
      n}: DataTableFilterListProps<TData>) {\\n  const id = React.useId();\\n  const\
      \ labelId = React.useId();\\n  const descriptionId = React.useId();\\n  const\
      \ [open, setOpen] = React.useState(false);\\n  const addButtonRef = React.useRef<HTMLButtonElement>(null);\\\
      n\\n  const columns = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\\
      n      .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n+      \"content\": \"\\\"use client\\\";\\n\\nimport type {\
      \ Column, ColumnMeta, Table } from \\\"@tanstack/react-table\\\";\\nimport {\\\
      n  CalendarIcon,\\n  Check,\\n  ChevronsUpDown,\\n  GripVertical,\\n  ListFilter,\\\
      n  Trash2,\\n} from \\\"lucide-react\\\";\\nimport { parseAsStringEnum, useQueryState\
      \ } from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\";\\n\\nimport {\
      \ Badge } from \\\"@/components/ui/badge\\\";\\nimport { Button } from \\\"\
      @/components/ui/button\\\";\\nimport { Calendar } from \\\"@/components/ui/calendar\\\
      \";\\nimport {\\n  Command,\\n  CommandEmpty,\\n  CommandGroup,\\n  CommandInput,\\\
      n  CommandItem,\\n  CommandList,\\n} from \\\"@/components/ui/command\\\";\\\
      nimport { Input } from \\\"@/components/ui/input\\\";\\nimport {\\n  Popover,\\\
      n  PopoverContent,\\n  PopoverTrigger,\\n} from \\\"@/components/ui/popover\\\
      \";\\nimport {\\n  Select,\\n  SelectContent,\\n  SelectItem,\\n  SelectTrigger,\\\
      n  SelectValue,\\n} from \\\"@/components/ui/select\\\";\\nimport { dataTableConfig\
      \ } from \\\"@/config/data-table\\\";\\nimport { cn } from \\\"@/lib/utils\\\
      \";\\nimport { DataTableRangeFilter } from \\\"@/registry/new-york/components/data-table/data-table-range-filter\\\
      \";\\nimport {\\n  Faceted,\\n  FacetedBadgeList,\\n  FacetedContent,\\n  FacetedEmpty,\\\
      n  FacetedGroup,\\n  FacetedInput,\\n  FacetedItem,\\n  FacetedList,\\n  FacetedTrigger,\\\
      n} from \\\"@/registry/new-york/components/ui/faceted\\\";\\nimport {\\n  Sortable,\\\
      n  SortableContent,\\n  SortableItem,\\n  SortableItemHandle,\\n  SortableOverlay,\\\
      n} from \\\"@/registry/new-york/components/ui/sortable\\\";\\nimport { useDebouncedCallback\
      \ } from \\\"@/registry/new-york/hooks/use-debounced-callback\\\";\\nimport\
      \ {\\n  getDefaultFilterOperator,\\n  getFilterOperators,\\n} from \\\"@/registry/new-york/lib/data-table\\\
      \";\\nimport { formatDate } from \\\"@/registry/new-york/lib/format\\\";\\nimport\
      \ { generateId } from \\\"@/registry/new-york/lib/id\\\";\\nimport { getFiltersStateParser\
      \ } from \\\"@/registry/new-york/lib/parsers\\\";\\nimport type {\\n  ExtendedColumnFilter,\\\
      n  FilterOperator,\\n  JoinOperator,\\n} from \\\"@/types/data-table\\\";\\\
      n\\nconst FILTERS_KEY = \\\"filters\\\";\\nconst JOIN_OPERATOR_KEY = \\\"joinOperator\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterListProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterList<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  ...props\\n}: DataTableFilterListProps<TData>) {\\n  const id\
      \ = React.useId();\\n  const labelId = React.useId();\\n  const descriptionId\
      \ = React.useId();\\n  const [open, setOpen] = React.useState(false);\\n  const\
      \ addButtonRef = React.useRef<HTMLButtonElement>(null);\\n\\n  const columns\
      \ = React.useMemo(() => {\\n    return table\\n      .getAllColumns()\\n   \
      \   .filter((column) => column.columnDef.enableColumnFilter);\\n  }, [table]);\\\
      n\\n  const [filters, setFilters] = useQueryState(\\n    FILTERS_KEY,\\n   \
      \ getFiltersStateParser<TData>(columns.map((field) => field.id))\\n      .withDefault([])\\\
      n      .withOptions({\\n        clearOnDefault: true,\\n        shallow,\\n\
      \        throttleMs,\\n      }),\\n  );\\n  const debouncedSetFilters = useDebouncedCallback(setFilters,\
      \ debounceMs);\\n\\n  console.log({ filters });\\n\\n  const [joinOperator,\
      \ setJoinOperator] = useQueryState(\\n    JOIN_OPERATOR_KEY,\\n    parseAsStringEnum([\\\
      \"and\\\", \\\"or\\\"]).withDefault(\\\"and\\\").withOptions({\\n      clearOnDefault:\
      \ true,\\n      shallow,\\n    }),\\n  );\\n\\n  const onFilterAdd = React.useCallback(()\
      \ => {\\n    const column = columns[0];\\n\\n    if (!column) return;\\n\\n\
      \    debouncedSetFilters([\\n      ...filters,\\n      {\\n        id: column.id\
      \ as Extract<keyof TData, string>,\\n        value: \\\"\\\",\\n        variant:\
      \ column.columnDef.meta?.variant ?? \\\"text\\\",\\n        operator: getDefaultFilterOperator(\\\
      n          column.columnDef.meta?.variant ?? \\\"text\\\",\\n        ),\\n \
      \       filterId: generateId({ length: 8 }),\\n      },\\n    ]);\\n  }, [columns,\
      \ filters, debouncedSetFilters]);\\n\\n  const onFilterUpdate = React.useCallback(\\\
      n    (\\n      filterId: string,\\n      updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n    ) => {\\n      debouncedSetFilters((prevFilters)\
      \ => {\\n        const updatedFilters = prevFilters.map((filter) => {\\n   \
      \       if (filter.filterId === filterId) {\\n            return { ...filter,\
      \ ...updates } as ExtendedColumnFilter<TData>;\\n          }\\n          return\
      \ filter;\\n        });\\n        return updatedFilters;\\n      });\\n    },\\\
      n    [debouncedSetFilters],\\n  );\\n\\n  const onFilterRemove = React.useCallback(\\\
      n    (filterId: string) => {\\n      const updatedFilters = filters.filter(\\\
      n        (filter) => filter.filterId !== filterId,\\n      );\\n      void setFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        addButtonRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, setFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    void setFilters(null);\\n    void setJoinOperator(\\\
      \"and\\\");\\n  }, [setFilters, setJoinOperator]);\\n\\n  React.useEffect(()\
      \ => {\\n    function onKeyDown(event: KeyboardEvent) {\\n      if (\\n    \
      \    event.target instanceof HTMLInputElement ||\\n        event.target instanceof\
      \ HTMLTextAreaElement\\n      ) {\\n        return;\\n      }\\n\\n      if\
      \ (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n        !event.ctrlKey\
      \ &&\\n        !event.metaKey &&\\n        !event.shiftKey\\n      ) {\\n  \
      \      event.preventDefault();\\n        setOpen(true);\\n      }\\n\\n    \
      \  if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT &&\\n     \
      \   event.shiftKey &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    }\\n\\n    window.addEventListener(\\\"keydown\\\", onKeyDown);\\\
      n    return () => window.removeEventListener(\\\"keydown\\\", onKeyDown);\\\
      n  }, [filters, onFilterRemove]);\\n\\n  const onTriggerKeyDown = React.useCallback(\\\
      n    (event: React.KeyboardEvent<HTMLButtonElement>) => {\\n      if (\\n  \
      \      REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()) &&\\n     \
      \   filters.length > 0\\n      ) {\\n        event.preventDefault();\\n    \
      \    onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\n \
      \     }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\n\
      \    <Sortable\\n      value={filters}\\n      onValueChange={setFilters}\\\
      n      getItemValue={(item) => item.filterId}\\n    >\\n      <Popover open={open}\
      \ onOpenChange={setOpen}>\\n        <PopoverTrigger asChild>\\n          <Button\
      \ variant=\\\"outline\\\" size=\\\"sm\\\" onKeyDown={onTriggerKeyDown}>\\n \
      \           <ListFilter />\\n            Filter\\n            {filters.length\
      \ > 0 && (\\n              <Badge\\n                variant=\\\"secondary\\\"\
      \\n                className=\\\"h-[18.24px] rounded-[3.2px] px-[5.12px] font-mono\
      \ font-normal text-[10.4px]\\\"\\n              >\\n                {filters.length}\\\
      n              </Badge>\\n            )}\\n          </Button>\\n        </PopoverTrigger>\\\
      n        <PopoverContent\\n          aria-describedby={descriptionId}\\n   \
      \       aria-labelledby={labelId}\\n          className=\\\"flex w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] flex-col gap-3.5 p-4\
      \ sm:min-w-[380px]\\\"\\n          {...props}\\n        >\\n          <div className=\\\
      \"flex flex-col gap-1\\\">\\n            <h4 id={labelId} className=\\\"font-medium\
      \ leading-none\\\">\\n              {filters.length > 0 ? \\\"Filters\\\" :\
      \ \\\"No filters applied\\\"}\\n            </h4>\\n            <p\\n      \
      \        id={descriptionId}\\n              className={cn(\\n              \
      \  \\\"text-muted-foreground text-sm\\\",\\n                filters.length >\
      \ 0 && \\\"sr-only\\\",\\n              )}\\n            >\\n              {filters.length\
      \ > 0\\n                ? \\\"Modify filters to refine your rows.\\\"\\n   \
      \             : \\\"Add filters to refine your rows.\\\"}\\n            </p>\\\
      n          </div>\\n          {filters.length > 0 ? (\\n            <SortableContent\
      \ asChild>\\n              <div\\n                role=\\\"list\\\"\\n     \
      \           className=\\\"flex max-h-[300px] flex-col gap-2 overflow-y-auto\
      \ p-1\\\"\\n              >\\n                {filters.map((filter, index) =>\
      \ (\\n                  <DataTableFilterItem<TData>\\n                    key={filter.filterId}\\\
      n                    filter={filter}\\n                    index={index}\\n\
      \                    filterItemId={`${id}-filter-${filter.filterId}`}\\n   \
      \                 joinOperator={joinOperator}\\n                    setJoinOperator={setJoinOperator}\\\
      n                    columns={columns}\\n                    onFilterUpdate={onFilterUpdate}\\\
      n                    onFilterRemove={onFilterRemove}\\n                  />\\\
      n                ))}\\n              </div>\\n            </SortableContent>\\\
      n          ) : null}\\n          <div className=\\\"flex w-full items-center\
      \ gap-2\\\">\\n            <Button\\n              size=\\\"sm\\\"\\n      \
      \        className=\\\"rounded\\\"\\n              ref={addButtonRef}\\n   \
      \           onClick={onFilterAdd}\\n            >\\n              Add filter\\\
      n            </Button>\\n            {filters.length > 0 ? (\\n            \
      \  <Button\\n                variant=\\\"outline\\\"\\n                size=\\\
      \"sm\\\"\\n                className=\\\"rounded\\\"\\n                onClick={onFiltersReset}\\\
      n              >\\n                Reset filters\\n              </Button>\\\
      n            ) : null}\\n          </div>\\n        </PopoverContent>\\n   \
      \   </Popover>\\n      <SortableOverlay>\\n        <div className=\\\"flex items-center\
      \ gap-2\\\">\\n          <div className=\\\"h-8 min-w-[72px] rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\\
      n          <div className=\\\"h-8 w-32 rounded-sm bg-primary/10\\\" />\\n  \
      \        <div className=\\\"h-8 min-w-36 flex-1 rounded-sm bg-primary/10\\\"\
      \ />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n          <div className=\\\"size-8 shrink-0 rounded-sm bg-primary/10\\\
      \" />\\n        </div>\\n      </SortableOverlay>\\n    </Sortable>\\n  );\\\
      n}\\n\\ninterface DataTableFilterItemProps<TData> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  index: number;\\n  filterItemId: string;\\n  joinOperator: JoinOperator;\\\
      n  setJoinOperator: (value: JoinOperator) => void;\\n  columns: Column<TData>[];\\\
      n  onFilterUpdate: (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  onFilterRemove: (filterId: string)\
      \ => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\n  filter,\\n  index,\\\
      n  filterItemId,\\n  joinOperator,\\n  setJoinOperator,\\n  columns,\\n  onFilterUpdate,\\\
      n  onFilterRemove,\\n}: DataTableFilterItemProps<TData>) {\\n  const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n  const [showOperatorSelector,\
      \ setShowOperatorSelector] = React.useState(false);\\n  const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n  const column = columns.find((column)\
      \ => column.id === filter.id);\\n  if (!column) return null;\\n\\n  const joinOperatorListboxId\
      \ = `${filterItemId}-join-operator-listbox`;\\n  const fieldListboxId = `${filterItemId}-field-listbox`;\\\
      n  const operatorListboxId = `${filterItemId}-operator-listbox`;\\n  const inputId\
      \ = `${filterItemId}-input`;\\n\\n  const columnMeta = column.columnDef.meta;\\\
      n  const filterOperators = getFilterOperators(filter.variant);\\n\\n  const\
      \ onItemKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\\
      n        event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (showFieldSelector || showOperatorSelector || showValueSelector)\
      \ {\\n        return;\\n      }\\n\\n      if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n        event.preventDefault();\\n        onFilterRemove(filter.filterId);\\\
      n      }\\n    },\\n    [\\n      filter.filterId,\\n      showFieldSelector,\\\
      n      showOperatorSelector,\\n      showValueSelector,\\n      onFilterRemove,\\\
      n    ],\\n  );\\n\\n  return (\\n    <SortableItem value={filter.filterId} asChild>\\\
      n      <div\\n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n \
      \       tabIndex={-1}\\n        className=\\\"flex items-center gap-2\\\"\\\
      n        onKeyDown={onItemKeyDown}\\n      >\\n        <div className=\\\"min-w-[72px]\
      \ text-center\\\">\\n          {index === 0 ? (\\n            <span className=\\\
      \"text-muted-foreground text-sm\\\">Where</span>\\n          ) : index === 1\
      \ ? (\\n            <Select\\n              value={joinOperator}\\n        \
      \      onValueChange={(value: JoinOperator) => setJoinOperator(value)}\\n  \
      \          >\\n              <SelectTrigger\\n                aria-label=\\\"\
      Select join operator\\\"\\n                aria-controls={joinOperatorListboxId}\\\
      n                className=\\\"h-8 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n              >\\n                <SelectValue placeholder={joinOperator} />\\\
      n              </SelectTrigger>\\n              <SelectContent\\n          \
      \      id={joinOperatorListboxId}\\n                position=\\\"popper\\\"\\\
      n                className=\\\"min-w-(--radix-select-trigger-width) lowercase\\\
      \"\\n              >\\n                {dataTableConfig.joinOperators.map((joinOperator)\
      \ => (\\n                  <SelectItem key={joinOperator} value={joinOperator}>\\\
      n                    {joinOperator}\\n                  </SelectItem>\\n   \
      \             ))}\\n              </SelectContent>\\n            </Select>\\\
      n          ) : (\\n            <span className=\\\"text-muted-foreground text-sm\\\
      \">\\n              {joinOperator}\\n            </span>\\n          )}\\n \
      \       </div>\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              role=\\\
      \"combobox\\\"\\n              aria-controls={fieldListboxId}\\n           \
      \   variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n             \
      \ className=\\\"w-32 justify-between rounded font-normal\\\"\\n            >\\\
      n              <span className=\\\"truncate\\\">\\n                {columns.find((column)\
      \ => column.id === filter.id)?.columnDef\\n                  .meta?.label ??\
      \ \\\"Select field\\\"}\\n              </span>\\n              <ChevronsUpDown\
      \ className=\\\"opacity-50\\\" />\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            id={fieldListboxId}\\n            align=\\\
      \"start\\\"\\n            className=\\\"w-40 origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            <Command>\\n              <CommandInput\
      \ placeholder=\\\"Search fields...\\\" />\\n              <CommandList>\\n \
      \               <CommandEmpty>No fields found.</CommandEmpty>\\n           \
      \     <CommandGroup>\\n                  {columns.map((column) => (\\n     \
      \               <CommandItem\\n                      key={column.id}\\n    \
      \                  value={column.id}\\n                      onSelect={(value)\
      \ => {\\n                        onFilterUpdate(filter.filterId, {\\n      \
      \                    id: value as Extract<keyof TData, string>,\\n         \
      \                 variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\\
      n                          operator: getDefaultFilterOperator(\\n          \
      \                  column.columnDef.meta?.variant ?? \\\"text\\\",\\n      \
      \                    ),\\n                          value: \\\"\\\",\\n    \
      \                    });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      <span\
      \ className=\\\"truncate\\\">\\n                        {column.columnDef.meta?.label}\\\
      n                      </span>\\n                      <Check\\n           \
      \             className={cn(\\n                          \\\"ml-auto\\\",\\\
      n                          column.id === filter.id ? \\\"opacity-100\\\" : \\\
      \"opacity-0\\\",\\n                        )}\\n                      />\\n\
      \                    </CommandItem>\\n                  ))}\\n             \
      \   </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 w-32 rounded lowercase [&[data-size]]:h-8\\\"\\\
      n          >\\n            <div className=\\\"truncate\\\">\\n             \
      \ <SelectValue placeholder={filter.operator} />\\n            </div>\\n    \
      \      </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    value={operator.value}\\n                className=\\\"lowercase\\\"\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ <div className=\\\"min-w-36 flex-1\\\">\\n          {onFilterInputRender({\\\
      n            filter,\\n            inputId,\\n            column,\\n       \
      \     columnMeta,\\n            onFilterUpdate,\\n            showValueSelector,\\\
      n            setShowValueSelector,\\n          })}\\n        </div>\\n     \
      \   <Button\\n          aria-controls={filterItemId}\\n          variant=\\\"\
      outline\\\"\\n          size=\\\"icon\\\"\\n          className=\\\"size-8 rounded\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <Trash2 />\\n        </Button>\\n        <SortableItemHandle asChild>\\\
      n          <Button variant=\\\"outline\\\" size=\\\"icon\\\" className=\\\"\
      size-8 rounded\\\">\\n            <GripVertical />\\n          </Button>\\n\
      \        </SortableItemHandle>\\n      </div>\\n    </SortableItem>\\n  );\\\
      n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\n  inputId,\\n  column,\\\
      n  columnMeta,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  inputId: string;\\n  column:\
      \ Column<TData>;\\n  columnMeta?: ColumnMeta<TData, unknown>;\\n  onFilterUpdate:\
      \ (\\n    filterId: string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>,\
      \ \\\"filterId\\\">>,\\n  ) => void;\\n  showValueSelector: boolean;\\n  setShowValueSelector:\
      \ (value: boolean) => void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\
      \" || filter.operator === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\\
      n        id={inputId}\\n        role=\\\"status\\\"\\n        aria-label={`${columnMeta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-8 w-full rounded border bg-transparent dark:bg-input/30\\\
      \"\\n      />\\n    );\\n  }\\n\\n  switch (filter.variant) {\\n    case \\\"\
      text\\\":\\n    case \\\"number\\\":\\n    case \\\"range\\\": {\\n      if\
      \ (\\n        (filter.variant === \\\"range\\\" && filter.operator === \\\"\
      isBetween\\\") ||\\n        filter.operator === \\\"isBetween\\\"\\n      )\
      \ {\\n        return (\\n          <DataTableRangeFilter\\n            filter={filter}\\\
      n            column={column}\\n            inputId={inputId}\\n            onFilterUpdate={onFilterUpdate}\\\
      n          />\\n        );\\n      }\\n\\n      const isNumber =\\n        filter.variant\
      \ === \\\"number\\\" || filter.variant === \\\"range\\\";\\n\\n      return\
      \ (\\n        <Input\\n          id={inputId}\\n          type={isNumber ? \\\
      \"number\\\" : filter.variant}\\n          aria-label={`${columnMeta?.label}\
      \ filter value`}\\n          aria-describedby={`${inputId}-description`}\\n\
      \          inputMode={isNumber ? \\\"numeric\\\" : undefined}\\n          placeholder={columnMeta?.placeholder\
      \ ?? \\\"Enter a value...\\\"}\\n          className=\\\"h-8 w-full rounded\\\
      \"\\n          defaultValue={\\n            typeof filter.value === \\\"string\\\
      \" ? filter.value : undefined\\n          }\\n          onChange={(event) =>\\\
      n            onFilterUpdate(filter.filterId, {\\n              value: event.target.value,\\\
      n            })\\n          }\\n        />\\n      );\\n    }\\n\\n    case\
      \ \\\"boolean\\\": {\\n      if (Array.isArray(filter.value)) return null;\\\
      n\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      return (\\\
      n        <Select\\n          open={showValueSelector}\\n          onOpenChange={setShowValueSelector}\\\
      n          value={filter.value}\\n          onValueChange={(value) =>\\n   \
      \         onFilterUpdate(filter.filterId, {\\n              value,\\n      \
      \      })\\n          }\\n        >\\n          <SelectTrigger\\n          \
      \  id={inputId}\\n            aria-controls={inputListboxId}\\n            aria-label={`${columnMeta?.label}\
      \ boolean filter`}\\n            className=\\\"h-8 w-full rounded [&[data-size]]:h-8\\\
      \"\\n          >\\n            <SelectValue placeholder={filter.value ? \\\"\
      True\\\" : \\\"False\\\"} />\\n          </SelectTrigger>\\n          <SelectContent\
      \ id={inputListboxId}>\\n            <SelectItem value=\\\"true\\\">True</SelectItem>\\\
      n            <SelectItem value=\\\"false\\\">False</SelectItem>\\n         \
      \ </SelectContent>\\n        </Select>\\n      );\\n    }\\n\\n    case \\\"\
      select\\\":\\n    case \\\"multiSelect\\\": {\\n      const inputListboxId =\
      \ `${inputId}-listbox`;\\n\\n      const multiple = filter.variant === \\\"\
      multiSelect\\\";\\n      const selectedValues = multiple\\n        ? Array.isArray(filter.value)\\\
      n          ? filter.value\\n          : []\\n        : typeof filter.value ===\
      \ \\\"string\\\"\\n          ? filter.value\\n          : undefined;\\n\\n \
      \     return (\\n        <Faceted\\n          open={showValueSelector}\\n  \
      \        onOpenChange={setShowValueSelector}\\n          value={selectedValues}\\\
      n          onValueChange={(value) => {\\n            onFilterUpdate(filter.filterId,\
      \ {\\n              value,\\n            });\\n          }}\\n          multiple={multiple}\\\
      n        >\\n          <FacetedTrigger asChild>\\n            <Button\\n   \
      \           id={inputId}\\n              aria-controls={inputListboxId}\\n \
      \             aria-label={`${columnMeta?.label} filter value${multiple ? \\\"\
      s\\\" : \\\"\\\"}`}\\n              variant=\\\"outline\\\"\\n             \
      \ size=\\\"sm\\\"\\n              className=\\\"w-full rounded font-normal\\\
      \"\\n            >\\n              <FacetedBadgeList\\n                options={columnMeta?.options}\\\
      n                placeholder={\\n                  columnMeta?.placeholder ??\\\
      n                  `Select option${multiple ? \\\"s\\\" : \\\"\\\"}...`\\n \
      \               }\\n              />\\n            </Button>\\n          </FacetedTrigger>\\\
      n          <FacetedContent\\n            id={inputListboxId}\\n            className=\\\
      \"w-[200px] origin-[var(--radix-popover-content-transform-origin)]\\\"\\n  \
      \        >\\n            <FacetedInput\\n              aria-label={`Search ${columnMeta?.label}\
      \ options`}\\n              placeholder={columnMeta?.placeholder ?? \\\"Search\
      \ options...\\\"}\\n            />\\n            <FacetedList>\\n          \
      \    <FacetedEmpty>No options found.</FacetedEmpty>\\n              <FacetedGroup>\\\
      n                {columnMeta?.options?.map((option) => (\\n                \
      \  <FacetedItem key={option.value} value={option.value}>\\n                \
      \    {option.icon && <option.icon />}\\n                    <span>{option.label}</span>\\\
      n                    {option.count && (\\n                      <span className=\\\
      \"ml-auto font-mono text-xs\\\">\\n                        {option.count}\\\
      n                      </span>\\n                    )}\\n                 \
      \ </FacetedItem>\\n                ))}\\n              </FacetedGroup>\\n  \
      \          </FacetedList>\\n          </FacetedContent>\\n        </Faceted>\\\
      n      );\\n    }\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\
      \ {\\n      const inputListboxId = `${inputId}-listbox`;\\n\\n      const dateValue\
      \ = Array.isArray(filter.value)\\n        ? filter.value.filter(Boolean)\\n\
      \        : [filter.value, filter.value].filter(Boolean);\\n\\n      const displayValue\
      \ =\\n        filter.operator === \\\"isBetween\\\" && dateValue.length ===\
      \ 2\\n          ? `${formatDate(new Date(Number(dateValue[0])))} - ${formatDate(\\\
      n              new Date(Number(dateValue[1])),\\n            )}`\\n        \
      \  : dateValue[0]\\n            ? formatDate(new Date(Number(dateValue[0])))\\\
      n            : \\\"Pick a date\\\";\\n\\n      return (\\n        <Popover open={showValueSelector}\
      \ onOpenChange={setShowValueSelector}>\\n          <PopoverTrigger asChild>\\\
      n            <Button\\n              id={inputId}\\n              aria-controls={inputListboxId}\\\
      n              aria-label={`${columnMeta?.label} date filter`}\\n          \
      \    variant=\\\"outline\\\"\\n              size=\\\"sm\\\"\\n            \
      \  className={cn(\\n                \\\"w-full justify-start rounded text-left\
      \ font-normal\\\",\\n                !filter.value && \\\"text-muted-foreground\\\
      \",\\n              )}\\n            >\\n              <CalendarIcon />\\n \
      \             <span className=\\\"truncate\\\">{displayValue}</span>\\n    \
      \        </Button>\\n          </PopoverTrigger>\\n          <PopoverContent\\\
      n            id={inputListboxId}\\n            align=\\\"start\\\"\\n      \
      \      className=\\\"w-auto origin-[var(--radix-popover-content-transform-origin)]\
      \ p-0\\\"\\n          >\\n            {filter.operator === \\\"isBetween\\\"\
      \ ? (\\n              <Calendar\\n                aria-label={`Select ${columnMeta?.label}\
      \ date range`}\\n                mode=\\\"range\\\"\\n                initialFocus\\\
      n                selected={\\n                  dateValue.length === 2\\n  \
      \                  ? {\\n                        from: new Date(Number(dateValue[0])),\\\
      n                        to: new Date(Number(dateValue[1])),\\n            \
      \          }\\n                    : {\\n                        from: new Date(),\\\
      n                        to: new Date(),\\n                      }\\n      \
      \          }\\n                onSelect={(date) => {\\n                  onFilterUpdate(filter.filterId,\
      \ {\\n                    value: date\\n                      ? [\\n       \
      \                   (date.from?.getTime() ?? \\\"\\\").toString(),\\n      \
      \                    (date.to?.getTime() ?? \\\"\\\").toString(),\\n       \
      \                 ]\\n                      : [],\\n                  });\\\
      n                }}\\n              />\\n            ) : (\\n              <Calendar\\\
      n                aria-label={`Select ${columnMeta?.label} date`}\\n        \
      \        mode=\\\"single\\\"\\n                initialFocus\\n             \
      \   selected={\\n                  dateValue[0] ? new Date(Number(dateValue[0]))\
      \ : undefined\\n                }\\n                onSelect={(date) => {\\\
      n                  onFilterUpdate(filter.filterId, {\\n                    value:\
      \ (date?.getTime() ?? \\\"\\\").toString(),\\n                  });\\n     \
      \           }}\\n              />\\n            )}\\n          </PopoverContent>\\\
      n        </Popover>\\n      );\\n    }\\n\\n    default:\\n      return null;\\\
      n  }\\n}\\n\",\n       \"type\": \"registry:component\"\n     },\n     {\n \
      \      \"path\": \"src/registry/new-york/components/data-table/data-table-range-filter.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column } from\
      \ \\\"@tanstack/react-table\\\";\\nimport * as React from \\\"react\\\";\\n\\\
      nimport { Input } from \\\"@/components/ui/input\\\";\\nimport { cn } from \\\
      \"@/lib/utils\\\";\\nimport type { ExtendedColumnFilter } from \\\"@/registry/new-york/types/data-table\\\
      \";\\n\\ninterface DataTableRangeFilterProps<TData> extends React.ComponentProps<\\\
      \"div\\\"> {\\n  filter: ExtendedColumnFilter<TData>;\\n  column: Column<TData>;\\\
      n  inputId: string;\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n}\\n\\nexport function DataTableRangeFilter<TData>({\\n  filter,\\n  column,\\\
      n  inputId,\\n  onFilterUpdate,\\n  className,\\n  ...props\\n}: DataTableRangeFilterProps<TData>)\
      \ {\\n  const meta = column.columnDef.meta;\\n\\n  const [min, max] = React.useMemo(()\
      \ => {\\n    const range = column.columnDef.meta?.range;\\n    if (range) return\
      \ range;\\n\\n    const values = column.getFacetedMinMaxValues();\\n    if (!values)\
      \ return [0, 100];\\n\\n    return [values[0], values[1]];\\n  }, [column]);\\\
      n\\n  const formatValue = React.useCallback(\\n    (value: string | number |\
      \ undefined) => {\\n      if (value === undefined || value === \\\"\\\") return\
      \ \\\"\\\";\\n      const numValue = Number(value);\\n      return Number.isNaN(numValue)\\\
      n        ? \\\"\\\"\\n        : numValue.toLocaleString(undefined, {\\n    \
      \        maximumFractionDigits: 0,\\n          });\\n    },\\n    [],\\n  );\\\
      n\\n  const value = React.useMemo(() => {\\n    if (Array.isArray(filter.value))\
      \ return filter.value.map(formatValue);\\n    return [formatValue(filter.value),\
      \ \\\"\\\"];\\n  }, [filter.value, formatValue]);\\n\\n  const onRangeValueChange\
      \ = React.useCallback(\\n    (value: string, isMin?: boolean) => {\\n      const\
      \ numValue = Number(value);\\n      const currentValues = Array.isArray(filter.value)\\\
      n        ? filter.value\\n        : [\\\"\\\", \\\"\\\"];\\n      const otherValue\
      \ = isMin\\n        ? (currentValues[1] ?? \\\"\\\")\\n        : (currentValues[0]\
      \ ?? \\\"\\\");\\n\\n      if (\\n        value === \\\"\\\" ||\\n        (!Number.isNaN(numValue)\
      \ &&\\n          (isMin\\n            ? numValue >= min && numValue <= (Number(otherValue)\
      \ || max)\\n            : numValue <= max && numValue >= (Number(otherValue)\
      \ || min)))\\n      ) {\\n        onFilterUpdate(filter.filterId, {\\n     \
      \     value: isMin ? [value, otherValue] : [otherValue, value],\\n        });\\\
      n      }\\n    },\\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\\\
      n  );\\n\\n  return (\\n    <div\\n      data-slot=\\\"range\\\"\\n      className={cn(\\\
      \"flex w-full items-center gap-2\\\", className)}\\n      {...props}\\n    >\\\
      n      <Input\\n        id={`${inputId}-min`}\\n        type=\\\"number\\\"\\\
      n        aria-label={`${meta?.label} minimum value`}\\n        aria-valuemin={min}\\\
      n        aria-valuemax={max}\\n        data-slot=\\\"range-min\\\"\\n      \
      \  inputMode=\\\"numeric\\\"\\n        placeholder={min.toString()}\\n     \
      \   min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[0]}\\n        onChange={(event) => onRangeValueChange(event.target.value,\
      \ true)}\\n      />\\n      <span className=\\\"sr-only shrink-0 text-muted-foreground\\\
      \">to</span>\\n      <Input\\n        id={`${inputId}-max`}\\n        type=\\\
      \"number\\\"\\n        aria-label={`${meta?.label} maximum value`}\\n      \
      \  aria-valuemin={min}\\n        aria-valuemax={max}\\n        data-slot=\\\"\
      range-max\\\"\\n        inputMode=\\\"numeric\\\"\\n        placeholder={max.toString()}\\\
      n        min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[1]}\\n        onChange={(event) => onRangeValueChange(event.target.value)}\\\
      n      />\\n    </div>\\n  );\\n}\\n\",\n+      \"content\": \"\\\"use client\\\
      \";\\n\\nimport type { Column } from \\\"@tanstack/react-table\\\";\\nimport\
      \ * as React from \\\"react\\\";\\n\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport type { ExtendedColumnFilter\
      \ } from \\\"@/types/data-table\\\";\\n\\ninterface DataTableRangeFilterProps<TData>\
      \ extends React.ComponentProps<\\\"div\\\"> {\\n  filter: ExtendedColumnFilter<TData>;\\\
      n  column: Column<TData>;\\n  inputId: string;\\n  onFilterUpdate: (\\n    filterId:\
      \ string,\\n    updates: Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\
      \">>,\\n  ) => void;\\n}\\n\\nexport function DataTableRangeFilter<TData>({\\\
      n  filter,\\n  column,\\n  inputId,\\n  onFilterUpdate,\\n  className,\\n  ...props\\\
      n}: DataTableRangeFilterProps<TData>) {\\n  const meta = column.columnDef.meta;\\\
      n\\n  const [min, max] = React.useMemo(() => {\\n    const range = column.columnDef.meta?.range;\\\
      n    if (range) return range;\\n\\n    const values = column.getFacetedMinMaxValues();\\\
      n    if (!values) return [0, 100];\\n\\n    return [values[0], values[1]];\\\
      n  }, [column]);\\n\\n  const formatValue = React.useCallback(\\n    (value:\
      \ string | number | undefined) => {\\n      if (value === undefined || value\
      \ === \\\"\\\") return \\\"\\\";\\n      const numValue = Number(value);\\n\
      \      return Number.isNaN(numValue)\\n        ? \\\"\\\"\\n        : numValue.toLocaleString(undefined,\
      \ {\\n            maximumFractionDigits: 0,\\n          });\\n    },\\n    [],\\\
      n  );\\n\\n  const value = React.useMemo(() => {\\n    if (Array.isArray(filter.value))\
      \ return filter.value.map(formatValue);\\n    return [formatValue(filter.value),\
      \ \\\"\\\"];\\n  }, [filter.value, formatValue]);\\n\\n  const onRangeValueChange\
      \ = React.useCallback(\\n    (value: string, isMin?: boolean) => {\\n      const\
      \ numValue = Number(value);\\n      const currentValues = Array.isArray(filter.value)\\\
      n        ? filter.value\\n        : [\\\"\\\", \\\"\\\"];\\n      const otherValue\
      \ = isMin\\n        ? (currentValues[1] ?? \\\"\\\")\\n        : (currentValues[0]\
      \ ?? \\\"\\\");\\n\\n      if (\\n        value === \\\"\\\" ||\\n        (!Number.isNaN(numValue)\
      \ &&\\n          (isMin\\n            ? numValue >= min && numValue <= (Number(otherValue)\
      \ || max)\\n            : numValue <= max && numValue >= (Number(otherValue)\
      \ || min)))\\n      ) {\\n        onFilterUpdate(filter.filterId, {\\n     \
      \     value: isMin ? [value, otherValue] : [otherValue, value],\\n        });\\\
      n      }\\n    },\\n    [filter.filterId, filter.value, min, max, onFilterUpdate],\\\
      n  );\\n\\n  return (\\n    <div\\n      data-slot=\\\"range\\\"\\n      className={cn(\\\
      \"flex w-full items-center gap-2\\\", className)}\\n      {...props}\\n    >\\\
      n      <Input\\n        id={`${inputId}-min`}\\n        type=\\\"number\\\"\\\
      n        aria-label={`${meta?.label} minimum value`}\\n        aria-valuemin={min}\\\
      n        aria-valuemax={max}\\n        data-slot=\\\"range-min\\\"\\n      \
      \  inputMode=\\\"numeric\\\"\\n        placeholder={min.toString()}\\n     \
      \   min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[0]}\\n        onChange={(event) => onRangeValueChange(event.target.value,\
      \ true)}\\n      />\\n      <span className=\\\"sr-only shrink-0 text-muted-foreground\\\
      \">to</span>\\n      <Input\\n        id={`${inputId}-max`}\\n        type=\\\
      \"number\\\"\\n        aria-label={`${meta?.label} maximum value`}\\n      \
      \  aria-valuemin={min}\\n        aria-valuemax={max}\\n        data-slot=\\\"\
      range-max\\\"\\n        inputMode=\\\"numeric\\\"\\n        placeholder={max.toString()}\\\
      n        min={min}\\n        max={max}\\n        className=\\\"h-8 w-full rounded\\\
      \"\\n        defaultValue={value[1]}\\n        onChange={(event) => onRangeValueChange(event.target.value)}\\\
      n      />\\n    </div>\\n  );\\n}\\n\",\n       \"type\": \"registry:component\"\
      \n     },\n     {\n@@ -61,7 +61,7 @@\n     },\n     {\n       \"path\": \"src/registry/new-york/lib/data-table.ts\"\
      ,\n-      \"content\": \"import type {\\n  ExtendedColumnFilter,\\n  FilterOperator,\\\
      n  FilterVariant,\\n} from \\\"@/registry/new-york/types/data-table\\\";\\nimport\
      \ type { Column } from \\\"@tanstack/react-table\\\";\\n\\nimport { dataTableConfig\
      \ } from \\\"@/registry/new-york/config/data-table\\\";\\n\\nexport function\
      \ getCommonPinningStyles<TData>({\\n  column,\\n  withBorder = false,\\n}: {\\\
      n  column: Column<TData>;\\n  withBorder?: boolean;\\n}): React.CSSProperties\
      \ {\\n  const isPinned = column.getIsPinned();\\n  const isLastLeftPinnedColumn\
      \ =\\n    isPinned === \\\"left\\\" && column.getIsLastColumn(\\\"left\\\");\\\
      n  const isFirstRightPinnedColumn =\\n    isPinned === \\\"right\\\" && column.getIsFirstColumn(\\\
      \"right\\\");\\n\\n  return {\\n    boxShadow: withBorder\\n      ? isLastLeftPinnedColumn\\\
      n        ? \\\"-4px 0 4px -4px hsl(var(--border)) inset\\\"\\n        : isFirstRightPinnedColumn\\\
      n          ? \\\"4px 0 4px -4px hsl(var(--border)) inset\\\"\\n          : undefined\\\
      n      : undefined,\\n    left: isPinned === \\\"left\\\" ? `${column.getStart(\\\
      \"left\\\")}px` : undefined,\\n    right: isPinned === \\\"right\\\" ? `${column.getAfter(\\\
      \"right\\\")}px` : undefined,\\n    opacity: isPinned ? 0.97 : 1,\\n    position:\
      \ isPinned ? \\\"sticky\\\" : \\\"relative\\\",\\n    background: isPinned ?\
      \ \\\"hsl(var(--background))\\\" : \\\"hsl(var(--background))\\\",\\n    width:\
      \ column.getSize(),\\n    zIndex: isPinned ? 1 : 0,\\n  };\\n}\\n\\nexport function\
      \ getFilterOperators(filterVariant: FilterVariant) {\\n  const operatorMap:\
      \ Record<\\n    FilterVariant,\\n    { label: string; value: FilterOperator\
      \ }[]\\n  > = {\\n    text: dataTableConfig.textOperators,\\n    number: dataTableConfig.numericOperators,\\\
      n    range: dataTableConfig.numericOperators,\\n    date: dataTableConfig.dateOperators,\\\
      n    dateRange: dataTableConfig.dateOperators,\\n    boolean: dataTableConfig.booleanOperators,\\\
      n    select: dataTableConfig.selectOperators,\\n    multiSelect: dataTableConfig.multiSelectOperators,\\\
      n  };\\n\\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\\\
      n}\\n\\nexport function getDefaultFilterOperator(filterVariant: FilterVariant)\
      \ {\\n  const operators = getFilterOperators(filterVariant);\\n\\n  return operators[0]?.value\
      \ ?? (filterVariant === \\\"text\\\" ? \\\"iLike\\\" : \\\"eq\\\");\\n}\\n\\\
      nexport function getValidFilters<TData>(\\n  filters: ExtendedColumnFilter<TData>[],\\\
      n): ExtendedColumnFilter<TData>[] {\\n  return filters.filter(\\n    (filter)\
      \ =>\\n      filter.operator === \\\"isEmpty\\\" ||\\n      filter.operator\
      \ === \\\"isNotEmpty\\\" ||\\n      (Array.isArray(filter.value)\\n        ?\
      \ filter.value.length > 0\\n        : filter.value !== \\\"\\\" &&\\n      \
      \    filter.value !== null &&\\n          filter.value !== undefined),\\n  );\\\
      n}\\n\",\n+      \"content\": \"import type {\\n  ExtendedColumnFilter,\\n \
      \ FilterOperator,\\n  FilterVariant,\\n} from \\\"@/types/data-table\\\";\\\
      nimport type { Column } from \\\"@tanstack/react-table\\\";\\n\\nimport { dataTableConfig\
      \ } from \\\"@/config/data-table\\\";\\n\\nexport function getCommonPinningStyles<TData>({\\\
      n  column,\\n  withBorder = false,\\n}: {\\n  column: Column<TData>;\\n  withBorder?:\
      \ boolean;\\n}): React.CSSProperties {\\n  const isPinned = column.getIsPinned();\\\
      n  const isLastLeftPinnedColumn =\\n    isPinned === \\\"left\\\" && column.getIsLastColumn(\\\
      \"left\\\");\\n  const isFirstRightPinnedColumn =\\n    isPinned === \\\"right\\\
      \" && column.getIsFirstColumn(\\\"right\\\");\\n\\n  return {\\n    boxShadow:\
      \ withBorder\\n      ? isLastLeftPinnedColumn\\n        ? \\\"-4px 0 4px -4px\
      \ hsl(var(--border)) inset\\\"\\n        : isFirstRightPinnedColumn\\n     \
      \   ? \\\"4px 0 4px -4px hsl(var(--border)) inset\\\"\\n        : undefined\\\
      n      : undefined,\\n    left: isPinned === \\\"left\\\" ? `${column.getStart(\\\
      \"left\\\")}px` : undefined,\\n    right: isPinned === \\\"right\\\" ? `${column.getAfter(\\\
      \"right\\\")}px` : undefined,\\n    opacity: isPinned ? 0.97 : 1,\\n    position:\
      \ isPinned ? \\\"sticky\\\" : \\\"relative\\\",\\n    background: isPinned ?\
      \ \\\"hsl(var(--background))\\\" : \\\"hsl(var(--background))\\\",\\n    width:\
      \ column.getSize(),\\n    zIndex: isPinned ? 1 : 0,\\n  };\\n}\\n\\nexport function\
      \ getFilterOperators(filterVariant: FilterVariant) {\\n  const operatorMap:\
      \ Record<\\n    FilterVariant,\\n    { label: string; value: FilterOperator\
      \ }[]\\n  > = {\\n    text: dataTableConfig.textOperators,\\n    number: dataTableConfig.numericOperators,\\\
      n    range: dataTableConfig.numericOperators,\\n    date: dataTableConfig.dateOperators,\\\
      n    dateRange: dataTableConfig.dateOperators,\\n    boolean: dataTableConfig.booleanOperators,\\\
      n    select: dataTableConfig.selectOperators,\\n    multiSelect: dataTableConfig.multiSelectOperators,\\\
      n  };\\n\\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\\\
      n}\\n\\nexport function getDefaultFilterOperator(filterVariant: FilterVariant)\
      \ {\\n  const operators = getFilterOperators(filterVariant);\\n\\n  return operators[0]?.value\
      \ ?? (filterVariant === \\\"text\\\" ? \\\"iLike\\\" : \\\"eq\\\");\\n}\\n\\\
      nexport function getValidFilters<TData>(\\n  filters: ExtendedColumnFilter<TData>[]\\\
      n): ExtendedColumnFilter<TData>[] {\\n  return filters.filter(\\n    (filter)\
      \ =>\\n      filter.operator === \\\"isEmpty\\\" ||\\n      filter.operator\
      \ === \\\"isNotEmpty\\\" ||\\n      (Array.isArray(filter.value)\\n        ?\
      \ filter.value.length > 0\\n        : filter.value !== \\\"\\\" &&\\n      \
      \    filter.value !== null &&\\n          filter.value !== undefined)\\n  );\\\
      n}\\n\",\n       \"type\": \"registry:lib\"\n     },\n     {\n@@ -76,20 +76,20\
      \ @@\n     },\n     {\n       \"path\": \"src/registry/new-york/lib/parsers.ts\"\
      ,\n-      \"content\": \"import { createParser } from \\\"nuqs/server\\\";\\\
      nimport { z } from \\\"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/registry/new-york/config/data-table\\\
      \";\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n}\
      \ from \\\"@/registry/new-york/types/data-table\\\";\\n\\nconst sortingItemSchema\
      \ = z.object({\\n  id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport\
      \ const getSortingStateParser = <TData>(\\n  columnIds?: string[] | Set<string>,\\\
      n) => {\\n  const validKeys = columnIds\\n    ? columnIds instanceof Set\\n\
      \      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\n\\n  return\
      \ createParser({\\n    parse: (value) => {\\n      try {\\n        const parsed\
      \ = JSON.parse(value);\\n        const result = z.array(sortingItemSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnSort<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (item, index) =>\\n          item.id\
      \ === b[index]?.id && item.desc === b[index]?.desc,\\n      ),\\n  });\\n};\\\
      n\\nexport const filterSchema = z.object({\\n  id: z.string(),\\n  value: z.union([z.string(),\
      \ z.array(z.string())]),\\n  variant: z.enum(dataTableConfig.filterVariants),\\\
      n  operator: z.enum(dataTableConfig.operators),\\n  filterId: z.string(),\\\
      n});\\n\\nexport const getFiltersStateParser = <TData>(\\n  columnIds?: string[]\
      \ | Set<string>,\\n) => {\\n  const validKeys = columnIds\\n    ? columnIds\
      \ instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\\
      n\\n  return createParser({\\n    parse: (value) => {\\n      try {\\n     \
      \   const parsed = JSON.parse(value);\\n        const result = z.array(filterSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnFilter<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (filter, index) =>\\n          filter.id\
      \ === b[index]?.id &&\\n          filter.value === b[index]?.value &&\\n   \
      \       filter.variant === b[index]?.variant &&\\n          filter.operator\
      \ === b[index]?.operator,\\n      ),\\n  });\\n};\\n\",\n+      \"content\"\
      : \"import { createParser } from \\\"nuqs/server\\\";\\nimport { z } from \\\
      \"zod\\\";\\n\\nimport { dataTableConfig } from \\\"@/config/data-table\\\"\
      ;\\n\\nimport type {\\n  ExtendedColumnFilter,\\n  ExtendedColumnSort,\\n} from\
      \ \\\"@/types/data-table\\\";\\n\\nconst sortingItemSchema = z.object({\\n \
      \ id: z.string(),\\n  desc: z.boolean(),\\n});\\n\\nexport const getSortingStateParser\
      \ = <TData>(\\n  columnIds?: string[] | Set<string>\\n) => {\\n  const validKeys\
      \ = columnIds\\n    ? columnIds instanceof Set\\n      ? columnIds\\n      :\
      \ new Set(columnIds)\\n    : null;\\n\\n  return createParser({\\n    parse:\
      \ (value) => {\\n      try {\\n        const parsed = JSON.parse(value);\\n\
      \        const result = z.array(sortingItemSchema).safeParse(parsed);\\n\\n\
      \        if (!result.success) return null;\\n\\n        if (validKeys && result.data.some((item)\
      \ => !validKeys.has(item.id))) {\\n          return null;\\n        }\\n\\n\
      \        return result.data as ExtendedColumnSort<TData>[];\\n      } catch\
      \ {\\n        return null;\\n      }\\n    },\\n    serialize: (value) => JSON.stringify(value),\\\
      n    eq: (a, b) =>\\n      a.length === b.length &&\\n      a.every(\\n    \
      \    (item, index) =>\\n          item.id === b[index]?.id && item.desc ===\
      \ b[index]?.desc\\n      ),\\n  });\\n};\\n\\nconst filterSchema = z.object({\\\
      n  id: z.string(),\\n  value: z.union([z.string(), z.array(z.string())]),\\\
      n  variant: z.enum(dataTableConfig.filterVariants),\\n  operator: z.enum(dataTableConfig.operators),\\\
      n  filterId: z.string(),\\n});\\n\\nexport type FilterSchema = z.infer<typeof\
      \ filterSchema>;\\n\\nexport const getFiltersStateParser = <TData>(\\n  columnIds?:\
      \ string[] | Set<string>\\n) => {\\n  const validKeys = columnIds\\n    ? columnIds\
      \ instanceof Set\\n      ? columnIds\\n      : new Set(columnIds)\\n    : null;\\\
      n\\n  return createParser({\\n    parse: (value) => {\\n      try {\\n     \
      \   const parsed = JSON.parse(value);\\n        const result = z.array(filterSchema).safeParse(parsed);\\\
      n\\n        if (!result.success) return null;\\n\\n        if (validKeys &&\
      \ result.data.some((item) => !validKeys.has(item.id))) {\\n          return\
      \ null;\\n        }\\n\\n        return result.data as ExtendedColumnFilter<TData>[];\\\
      n      } catch {\\n        return null;\\n      }\\n    },\\n    serialize:\
      \ (value) => JSON.stringify(value),\\n    eq: (a, b) =>\\n      a.length ===\
      \ b.length &&\\n      a.every(\\n        (filter, index) =>\\n          filter.id\
      \ === b[index]?.id &&\\n          filter.value === b[index]?.value &&\\n   \
      \       filter.variant === b[index]?.variant &&\\n          filter.operator\
      \ === b[index]?.operator\\n      ),\\n  });\\n};\\n\",\n       \"type\": \"\
      registry:lib\"\n     },\n     {\n-      \"path\": \"src/registry/new-york/config/data-table.ts\"\
      ,\n+      \"path\": \"src/config/data-table.ts\",\n       \"content\": \"export\
      \ type DataTableConfig = typeof dataTableConfig;\\n\\nexport const dataTableConfig\
      \ = {\\n  textOperators: [\\n    { label: \\\"Contains\\\", value: \\\"iLike\\\
      \" as const },\\n    { label: \\\"Does not contain\\\", value: \\\"notILike\\\
      \" as const },\\n    { label: \\\"Is\\\", value: \\\"eq\\\" as const },\\n \
      \   { label: \\\"Is not\\\", value: \\\"ne\\\" as const },\\n    { label: \\\
      \"Is empty\\\", value: \\\"isEmpty\\\" as const },\\n    { label: \\\"Is not\
      \ empty\\\", value: \\\"isNotEmpty\\\" as const },\\n  ],\\n  numericOperators:\
      \ [\\n    { label: \\\"Is\\\", value: \\\"eq\\\" as const },\\n    { label:\
      \ \\\"Is not\\\", value: \\\"ne\\\" as const },\\n    { label: \\\"Is less than\\\
      \", value: \\\"lt\\\" as const },\\n    { label: \\\"Is less than or equal to\\\
      \", value: \\\"lte\\\" as const },\\n    { label: \\\"Is greater than\\\", value:\
      \ \\\"gt\\\" as const },\\n    { label: \\\"Is greater than or equal to\\\"\
      , value: \\\"gte\\\" as const },\\n    { label: \\\"Is between\\\", value: \\\
      \"isBetween\\\" as const },\\n    { label: \\\"Is empty\\\", value: \\\"isEmpty\\\
      \" as const },\\n    { label: \\\"Is not empty\\\", value: \\\"isNotEmpty\\\"\
      \ as const },\\n  ],\\n  dateOperators: [\\n    { label: \\\"Is\\\", value:\
      \ \\\"eq\\\" as const },\\n    { label: \\\"Is not\\\", value: \\\"ne\\\" as\
      \ const },\\n    { label: \\\"Is before\\\", value: \\\"lt\\\" as const },\\\
      n    { label: \\\"Is after\\\", value: \\\"gt\\\" as const },\\n    { label:\
      \ \\\"Is on or before\\\", value: \\\"lte\\\" as const },\\n    { label: \\\"\
      Is on or after\\\", value: \\\"gte\\\" as const },\\n    { label: \\\"Is between\\\
      \", value: \\\"isBetween\\\" as const },\\n    { label: \\\"Is relative to today\\\
      \", value: \\\"isRelativeToToday\\\" as const },\\n    { label: \\\"Is empty\\\
      \", value: \\\"isEmpty\\\" as const },\\n    { label: \\\"Is not empty\\\",\
      \ value: \\\"isNotEmpty\\\" as const },\\n  ],\\n  selectOperators: [\\n   \
      \ { label: \\\"Is\\\", value: \\\"eq\\\" as const },\\n    { label: \\\"Is not\\\
      \", value: \\\"ne\\\" as const },\\n    { label: \\\"Is empty\\\", value: \\\
      \"isEmpty\\\" as const },\\n    { label: \\\"Is not empty\\\", value: \\\"isNotEmpty\\\
      \" as const },\\n  ],\\n  multiSelectOperators: [\\n    { label: \\\"Has any\
      \ of\\\", value: \\\"inArray\\\" as const },\\n    { label: \\\"Has none of\\\
      \", value: \\\"notInArray\\\" as const },\\n    { label: \\\"Is empty\\\", value:\
      \ \\\"isEmpty\\\" as const },\\n    { label: \\\"Is not empty\\\", value: \\\
      \"isNotEmpty\\\" as const },\\n  ],\\n  booleanOperators: [\\n    { label: \\\
      \"Is\\\", value: \\\"eq\\\" as const },\\n    { label: \\\"Is not\\\", value:\
      \ \\\"ne\\\" as const },\\n  ],\\n  sortOrders: [\\n    { label: \\\"Asc\\\"\
      , value: \\\"asc\\\" as const },\\n    { label: \\\"Desc\\\", value: \\\"desc\\\
      \" as const },\\n  ],\\n  filterVariants: [\\n    \\\"text\\\",\\n    \\\"number\\\
      \",\\n    \\\"range\\\",\\n    \\\"date\\\",\\n    \\\"dateRange\\\",\\n   \
      \ \\\"boolean\\\",\\n    \\\"select\\\",\\n    \\\"multiSelect\\\",\\n  ] as\
      \ const,\\n  operators: [\\n    \\\"iLike\\\",\\n    \\\"notILike\\\",\\n  \
      \  \\\"eq\\\",\\n    \\\"ne\\\",\\n    \\\"inArray\\\",\\n    \\\"notInArray\\\
      \",\\n    \\\"isEmpty\\\",\\n    \\\"isNotEmpty\\\",\\n    \\\"lt\\\",\\n  \
      \  \\\"lte\\\",\\n    \\\"gt\\\",\\n    \\\"gte\\\",\\n    \\\"isBetween\\\"\
      ,\\n    \\\"isRelativeToToday\\\",\\n  ] as const,\\n  joinOperators: [\\\"\
      and\\\", \\\"or\\\"] as const,\\n};\\n\",\n       \"type\": \"registry:file\"\
      ,\n-      \"target\": \"config/data-table.ts\"\n+      \"target\": \"src/config/data-table.ts\"\
      \n     },\n     {\n-      \"path\": \"src/registry/new-york/types/data-table.ts\"\
      ,\n-      \"content\": \"import type { DataTableConfig } from \\\"@/registry/new-york/config/data-table\\\
      \";\\nimport type { filterSchema } from \\\"@/registry/new-york/lib/parsers\\\
      \";\\nimport type { ColumnSort, Row, RowData } from \\\"@tanstack/react-table\\\
      \";\\nimport type { z } from \\\"zod\\\";\\n\\ndeclare module \\\"@tanstack/react-table\\\
      \" {\\n  // biome-ignore lint/correctness/noUnusedVariables: <explanation>\\\
      n  interface ColumnMeta<TData extends RowData, TValue> {\\n    label?: string;\\\
      n    placeholder?: string;\\n    variant?: FilterVariant;\\n    options?: Option[];\\\
      n    range?: [number, number];\\n    unit?: string;\\n    icon?: React.ComponentType<{\
      \ className?: string }>;\\n  }\\n}\\n\\nexport interface Option {\\n  label:\
      \ string;\\n  value: string;\\n  count?: number;\\n  icon?: React.ComponentType<{\
      \ className?: string }>;\\n}\\n\\nexport type FilterOperator = DataTableConfig[\\\
      \"operators\\\"][number];\\nexport type FilterVariant = DataTableConfig[\\\"\
      filterVariants\\\"][number];\\nexport type JoinOperator = DataTableConfig[\\\
      \"joinOperators\\\"][number];\\n\\nexport interface ExtendedColumnSort<TData>\
      \ extends Omit<ColumnSort, \\\"id\\\"> {\\n  id: Extract<keyof TData, string>;\\\
      n}\\n\\nexport interface ExtendedColumnFilter<TData>\\n  extends z.infer<typeof\
      \ filterSchema> {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface\
      \ DataTableRowAction<TData> {\\n  row: Row<TData>;\\n  variant: \\\"update\\\
      \" | \\\"delete\\\";\\n}\\n\",\n+      \"path\": \"src/types/data-table.ts\"\
      ,\n+      \"content\": \"import type { DataTableConfig } from \\\"@/config/data-table\\\
      \";\\nimport type { FilterSchema } from \\\"@/registry/new-york/lib/parsers\\\
      \";\\nimport type { ColumnSort, Row, RowData } from \\\"@tanstack/react-table\\\
      \";\\n\\ndeclare module \\\"@tanstack/react-table\\\" {\\n  // biome-ignore\
      \ lint/correctness/noUnusedVariables: <explanation>\\n  interface ColumnMeta<TData\
      \ extends RowData, TValue> {\\n    label?: string;\\n    placeholder?: string;\\\
      n    variant?: FilterVariant;\\n    options?: Option[];\\n    range?: [number,\
      \ number];\\n    unit?: string;\\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\\
      n  }\\n}\\n\\nexport interface Option {\\n  label: string;\\n  value: string;\\\
      n  count?: number;\\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\\n}\\\
      n\\nexport type FilterOperator = DataTableConfig[\\\"operators\\\"][number];\\\
      nexport type FilterVariant = DataTableConfig[\\\"filterVariants\\\"][number];\\\
      nexport type JoinOperator = DataTableConfig[\\\"joinOperators\\\"][number];\\\
      n\\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \\\"\
      id\\\"> {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport interface ExtendedColumnFilter<TData>\
      \ extends FilterSchema {\\n  id: Extract<keyof TData, string>;\\n}\\n\\nexport\
      \ interface DataTableRowAction<TData> {\\n  row: Row<TData>;\\n  variant: \\\
      \"update\\\" | \\\"delete\\\";\\n}\\n\",\n       \"type\": \"registry:file\"\
      ,\n-      \"target\": \"types/data-table.ts\"\n+      \"target\": \"src/types/data-table.ts\"\
      \n     }\n   ]\n }\n\\ No newline at end of file\ndiff --git a/public/r/data-table-filter-menu.json\
      \ b/public/r/data-table-filter-menu.json\nindex c2d7fb0..5cbd8e7 100644\n---\
      \ a/public/r/data-table-filter-menu.json\n+++ b/public/r/data-table-filter-menu.json\n\
      @@ -22,12 +22,12 @@\n   \"files\": [\n     {\n       \"path\": \"src/registry/new-york/components/data-table/data-table-filter-menu.tsx\"\
      ,\n-      \"content\": \"\\\"use client\\\";\\n\\nimport type { Column, Table\
      \ } from \\\"@tanstack/react-table\\\";\\nimport {\\n  BadgeCheck,\\n  CalendarIcon,\\\
      n  Check,\\n  ListFilter,\\n  Text,\\n  X,\\n} from \\\"lucide-react\\\";\\\
      nimport { useQueryState } from \\\"nuqs\\\";\\nimport * as React from \\\"react\\\
      \";\\n\\nimport { Button } from \\\"@/components/ui/button\\\";\\nimport { Calendar\
      \ } from \\\"@/components/ui/calendar\\\";\\nimport {\\n  Command,\\n  CommandEmpty,\\\
      n  CommandGroup,\\n  CommandInput,\\n  CommandItem,\\n  CommandList,\\n} from\
      \ \\\"@/components/ui/command\\\";\\nimport { Input } from \\\"@/components/ui/input\\\
      \";\\nimport {\\n  Popover,\\n  PopoverContent,\\n  PopoverTrigger,\\n} from\
      \ \\\"@/components/ui/popover\\\";\\nimport {\\n  Select,\\n  SelectContent,\\\
      n  SelectItem,\\n  SelectTrigger,\\n  SelectValue,\\n} from \\\"@/components/ui/select\\\
      \";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { DataTableRangeFilter\
      \ } from \\\"@/registry/new-york/components/data-table/data-table-range-filter\\\
      \";\\nimport { useDebouncedCallback } from \\\"@/registry/new-york/hooks/use-debounced-callback\\\
      \";\\nimport {\\n  getDefaultFilterOperator,\\n  getFilterOperators,\\n} from\
      \ \\\"@/registry/new-york/lib/data-table\\\";\\nimport { formatDate } from \\\
      \"@/registry/new-york/lib/format\\\";\\nimport { generateId } from \\\"@/registry/new-york/lib/id\\\
      \";\\nimport { getFiltersStateParser } from \\\"@/registry/new-york/lib/parsers\\\
      \";\\nimport type {\\n  ExtendedColumnFilter,\\n  FilterOperator,\\n} from \\\
      \"@/registry/new-york/types/data-table\\\";\\n\\nconst FILTERS_KEY = \\\"filters\\\
      \";\\nconst DEBOUNCE_MS = 300;\\nconst THROTTLE_MS = 50;\\nconst OPEN_MENU_SHORTCUT\
      \ = \\\"f\\\";\\nconst REMOVE_FILTER_SHORTCUTS = [\\\"backspace\\\", \\\"delete\\\
      \"];\\n\\ninterface DataTableFilterMenuProps<TData>\\n  extends React.ComponentProps<typeof\
      \ PopoverContent> {\\n  table: Table<TData>;\\n  debounceMs?: number;\\n  throttleMs?:\
      \ number;\\n  shallow?: boolean;\\n}\\n\\nexport function DataTableFilterMenu<TData>({\\\
      n  table,\\n  debounceMs = DEBOUNCE_MS,\\n  throttleMs = THROTTLE_MS,\\n  shallow\
      \ = true,\\n  align = \\\"start\\\",\\n  ...props\\n}: DataTableFilterMenuProps<TData>)\
      \ {\\n  const id = React.useId();\\n\\n  const columns = React.useMemo(() =>\
      \ {\\n    return table\\n      .getAllColumns()\\n      .filter((column) =>\
      \ column.columnDef.enableColumnFilter);\\n  }, [table]);\\n\\n  const [open,\
      \ setOpen] = React.useState(false);\\n  const [selectedColumn, setSelectedColumn]\
      \ =\\n    React.useState<Column<TData> | null>(null);\\n  const [inputValue,\
      \ setInputValue] = React.useState(\\\"\\\");\\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\\\
      n  const inputRef = React.useRef<HTMLInputElement>(null);\\n\\n  const onOpenChange\
      \ = React.useCallback((open: boolean) => {\\n    setOpen(open);\\n\\n    if\
      \ (!open) {\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\\
      n        setInputValue(\\\"\\\");\\n      }, 100);\\n    }\\n  }, []);\\n\\\
      n  const onInputKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLInputElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        !inputValue &&\\n        selectedColumn\\n      ) {\\n      \
      \  event.preventDefault();\\n        setSelectedColumn(null);\\n      }\\n \
      \   },\\n    [inputValue, selectedColumn],\\n  );\\n\\n  const [filters, setFilters]\
      \ = useQueryState(\\n    FILTERS_KEY,\\n    getFiltersStateParser<TData>(columns.map((field)\
      \ => field.id))\\n      .withDefault([])\\n      .withOptions({\\n        clearOnDefault:\
      \ true,\\n        shallow,\\n        throttleMs,\\n      }),\\n  );\\n  const\
      \ debouncedSetFilters = useDebouncedCallback(setFilters, debounceMs);\\n\\n\
      \  const onFilterAdd = React.useCallback(\\n    (column: Column<TData>, value:\
      \ string) => {\\n      if (!value.trim() && column.columnDef.meta?.variant !==\
      \ \\\"boolean\\\") {\\n        return;\\n      }\\n\\n      const filterValue\
      \ =\\n        column.columnDef.meta?.variant === \\\"multiSelect\\\" ? [value]\
      \ : value;\\n\\n      const newFilter: ExtendedColumnFilter<TData> = {\\n  \
      \      id: column.id as Extract<keyof TData, string>,\\n        value: filterValue,\\\
      n        variant: column.columnDef.meta?.variant ?? \\\"text\\\",\\n       \
      \ operator: getDefaultFilterOperator(\\n          column.columnDef.meta?.variant\
      \ ?? \\\"text\\\",\\n        ),\\n        filterId: generateId({ length: 8 }),\\\
      n      };\\n\\n      debouncedSetFilters([...filters, newFilter]);\\n      setOpen(false);\\\
      n\\n      setTimeout(() => {\\n        setSelectedColumn(null);\\n        setInputValue(\\\
      \"\\\");\\n      }, 100);\\n    },\\n    [filters, debouncedSetFilters],\\n\
      \  );\\n\\n  const onFilterRemove = React.useCallback(\\n    (filterId: string)\
      \ => {\\n      const updatedFilters = filters.filter(\\n        (filter) =>\
      \ filter.filterId !== filterId,\\n      );\\n      debouncedSetFilters(updatedFilters);\\\
      n      requestAnimationFrame(() => {\\n        triggerRef.current?.focus();\\\
      n      });\\n    },\\n    [filters, debouncedSetFilters],\\n  );\\n\\n  const\
      \ onFilterUpdate = React.useCallback(\\n    (\\n      filterId: string,\\n \
      \     updates: Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\\
      n    ) => {\\n      debouncedSetFilters((prevFilters) => {\\n        const updatedFilters\
      \ = prevFilters.map((filter) => {\\n          if (filter.filterId === filterId)\
      \ {\\n            return { ...filter, ...updates } as ExtendedColumnFilter<TData>;\\\
      n          }\\n          return filter;\\n        });\\n        return updatedFilters;\\\
      n      });\\n    },\\n    [debouncedSetFilters],\\n  );\\n\\n  const onFiltersReset\
      \ = React.useCallback(() => {\\n    debouncedSetFilters([]);\\n  }, [debouncedSetFilters]);\\\
      n\\n  React.useEffect(() => {\\n    function onKeyDown(event: KeyboardEvent)\
      \ {\\n      if (\\n        event.target instanceof HTMLInputElement ||\\n  \
      \      event.target instanceof HTMLTextAreaElement\\n      ) {\\n        return;\\\
      n      }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        !event.ctrlKey &&\\n        !event.metaKey &&\\n        !event.shiftKey\\\
      n      ) {\\n        event.preventDefault();\\n        setOpen(true);\\n   \
      \   }\\n\\n      if (\\n        event.key.toLowerCase() === OPEN_MENU_SHORTCUT\
      \ &&\\n        event.shiftKey &&\\n        !open &&\\n        filters.length\
      \ > 0\\n      ) {\\n        event.preventDefault();\\n        onFilterRemove(filters[filters.length\
      \ - 1]?.filterId ?? \\\"\\\");\\n      }\\n    }\\n\\n    window.addEventListener(\\\
      \"keydown\\\", onKeyDown);\\n    return () => window.removeEventListener(\\\"\
      keydown\\\", onKeyDown);\\n  }, [open, filters, onFilterRemove]);\\n\\n  const\
      \ onTriggerKeyDown = React.useCallback(\\n    (event: React.KeyboardEvent<HTMLButtonElement>)\
      \ => {\\n      if (\\n        REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase())\
      \ &&\\n        filters.length > 0\\n      ) {\\n        event.preventDefault();\\\
      n        onFilterRemove(filters[filters.length - 1]?.filterId ?? \\\"\\\");\\\
      n      }\\n    },\\n    [filters, onFilterRemove],\\n  );\\n\\n  return (\\\
      n    <div className=\\\"flex flex-wrap items-center gap-2\\\">\\n      {filters.map((filter)\
      \ => (\\n        <DataTableFilterItem\\n          key={filter.filterId}\\n \
      \         filter={filter}\\n          filterItemId={`${id}-filter-${filter.filterId}`}\\\
      n          columns={columns}\\n          onFilterUpdate={onFilterUpdate}\\n\
      \          onFilterRemove={onFilterRemove}\\n        />\\n      ))}\\n     \
      \ {filters.length > 0 && (\\n        <Button\\n          aria-label=\\\"Reset\
      \ all filters\\\"\\n          variant=\\\"outline\\\"\\n          size=\\\"\
      icon\\\"\\n          className=\\\"size-8\\\"\\n          onClick={onFiltersReset}\\\
      n        >\\n          <X />\\n        </Button>\\n      )}\\n      <Popover\
      \ open={open} onOpenChange={onOpenChange}>\\n        <PopoverTrigger asChild>\\\
      n          <Button\\n            aria-label=\\\"Open filter command menu\\\"\
      \\n            variant=\\\"outline\\\"\\n            size={filters.length >\
      \ 0 ? \\\"icon\\\" : \\\"sm\\\"}\\n            className={cn(filters.length\
      \ > 0 && \\\"size-8\\\", \\\"h-8\\\")}\\n            ref={triggerRef}\\n   \
      \         onKeyDown={onTriggerKeyDown}\\n          >\\n            <ListFilter\
      \ />\\n            {filters.length > 0 ? null : \\\"Filter\\\"}\\n         \
      \ </Button>\\n        </PopoverTrigger>\\n        <PopoverContent\\n       \
      \   align={align}\\n          className=\\\"w-full max-w-[var(--radix-popover-content-available-width)]\
      \ origin-[var(--radix-popover-content-transform-origin)] p-0\\\"\\n        \
      \  {...props}\\n        >\\n          <Command loop className=\\\"[&_[cmdk-input-wrapper]_svg]:hidden\\\
      \">\\n            <CommandInput\\n              ref={inputRef}\\n          \
      \    placeholder={\\n                selectedColumn\\n                  ? (selectedColumn.columnDef.meta?.label\
      \ ?? selectedColumn.id)\\n                  : \\\"Search fields...\\\"\\n  \
      \            }\\n              value={inputValue}\\n              onValueChange={setInputValue}\\\
      n              onKeyDown={onInputKeyDown}\\n            />\\n            <CommandList>\\\
      n              {selectedColumn ? (\\n                <>\\n                 \
      \ {selectedColumn.columnDef.meta?.options && (\\n                    <CommandEmpty>No\
      \ options found.</CommandEmpty>\\n                  )}\\n                  <FilterValueSelector\\\
      n                    column={selectedColumn}\\n                    value={inputValue}\\\
      n                    onSelect={(value) => onFilterAdd(selectedColumn, value)}\\\
      n                  />\\n                </>\\n              ) : (\\n       \
      \         <>\\n                  <CommandEmpty>No fields found.</CommandEmpty>\\\
      n                  <CommandGroup>\\n                    {columns.map((column)\
      \ => (\\n                      <CommandItem\\n                        key={column.id}\\\
      n                        value={column.id}\\n                        onSelect={()\
      \ => {\\n                          setSelectedColumn(column);\\n           \
      \               setInputValue(\\\"\\\");\\n                          requestAnimationFrame(()\
      \ => {\\n                            inputRef.current?.focus();\\n         \
      \                 });\\n                        }}\\n                      >\\\
      n                        {column.columnDef.meta?.icon && (\\n              \
      \            <column.columnDef.meta.icon />\\n                        )}\\n\
      \                        <span className=\\\"truncate\\\">\\n              \
      \            {column.columnDef.meta?.label ?? column.id}\\n                \
      \        </span>\\n                      </CommandItem>\\n                 \
      \   ))}\\n                  </CommandGroup>\\n                </>\\n       \
      \       )}\\n            </CommandList>\\n          </Command>\\n        </PopoverContent>\\\
      n      </Popover>\\n    </div>\\n  );\\n}\\n\\ninterface DataTableFilterItemProps<TData>\
      \ {\\n  filter: ExtendedColumnFilter<TData>;\\n  filterItemId: string;\\n  columns:\
      \ Column<TData>[];\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n  onFilterRemove: (filterId: string) => void;\\n}\\n\\nfunction DataTableFilterItem<TData>({\\\
      n  filter,\\n  filterItemId,\\n  columns,\\n  onFilterUpdate,\\n  onFilterRemove,\\\
      n}: DataTableFilterItemProps<TData>) {\\n  {\\n    const [showFieldSelector,\
      \ setShowFieldSelector] = React.useState(false);\\n    const [showOperatorSelector,\
      \ setShowOperatorSelector] =\\n      React.useState(false);\\n    const [showValueSelector,\
      \ setShowValueSelector] = React.useState(false);\\n\\n    const column = columns.find((column)\
      \ => column.id === filter.id);\\n    if (!column) return null;\\n\\n    const\
      \ operatorListboxId = `${filterItemId}-operator-listbox`;\\n    const inputId\
      \ = `${filterItemId}-input`;\\n\\n    const columnMeta = column.columnDef.meta;\\\
      n    const filterOperators = getFilterOperators(filter.variant);\\n\\n    const\
      \ onItemKeyDown = React.useCallback(\\n      (event: React.KeyboardEvent<HTMLDivElement>)\
      \ => {\\n        if (\\n          event.target instanceof HTMLInputElement ||\\\
      n          event.target instanceof HTMLTextAreaElement\\n        ) {\\n    \
      \      return;\\n        }\\n\\n        if (showFieldSelector || showOperatorSelector\
      \ || showValueSelector) {\\n          return;\\n        }\\n\\n        if (REMOVE_FILTER_SHORTCUTS.includes(event.key.toLowerCase()))\
      \ {\\n          event.preventDefault();\\n          onFilterRemove(filter.filterId);\\\
      n        }\\n      },\\n      [\\n        filter.filterId,\\n        showFieldSelector,\\\
      n        showOperatorSelector,\\n        showValueSelector,\\n        onFilterRemove,\\\
      n      ],\\n    );\\n\\n    return (\\n      <div\\n        key={filter.filterId}\\\
      n        role=\\\"listitem\\\"\\n        id={filterItemId}\\n        className=\\\
      \"flex h-8 items-center rounded-md bg-background\\\"\\n        onKeyDown={onItemKeyDown}\\\
      n      >\\n        <Popover open={showFieldSelector} onOpenChange={setShowFieldSelector}>\\\
      n          <PopoverTrigger asChild>\\n            <Button\\n              variant=\\\
      \"ghost\\\"\\n              size=\\\"sm\\\"\\n              className=\\\"rounded-none\
      \ rounded-l-md border border-r-0 font-normal dark:bg-input/30\\\"\\n       \
      \     >\\n              {columnMeta?.icon && (\\n                <columnMeta.icon\
      \ className=\\\"text-muted-foreground\\\" />\\n              )}\\n         \
      \     {columnMeta?.label ?? column.id}\\n            </Button>\\n          </PopoverTrigger>\\\
      n          <PopoverContent\\n            align=\\\"start\\\"\\n            className=\\\
      \"w-48 origin-[var(--radix-popover-content-transform-origin)] p-0\\\"\\n   \
      \       >\\n            <Command loop>\\n              <CommandInput placeholder=\\\
      \"Search fields...\\\" />\\n              <CommandList>\\n                <CommandEmpty>No\
      \ fields found.</CommandEmpty>\\n                <CommandGroup>\\n         \
      \         {columns.map((column) => (\\n                    <CommandItem\\n \
      \                     key={column.id}\\n                      value={column.id}\\\
      n                      onSelect={() => {\\n                        onFilterUpdate(filter.filterId,\
      \ {\\n                          id: column.id as Extract<keyof TData, string>,\\\
      n                          variant: column.columnDef.meta?.variant ?? \\\"text\\\
      \",\\n                          operator: getDefaultFilterOperator(\\n     \
      \                       column.columnDef.meta?.variant ?? \\\"text\\\",\\n \
      \                         ),\\n                          value: \\\"\\\",\\\
      n                        });\\n\\n                        setShowFieldSelector(false);\\\
      n                      }}\\n                    >\\n                      {column.columnDef.meta?.icon\
      \ && (\\n                        <column.columnDef.meta.icon />\\n         \
      \             )}\\n                      <span className=\\\"truncate\\\">\\\
      n                        {column.columnDef.meta?.label ?? column.id}\\n    \
      \                  </span>\\n                      <Check\\n               \
      \         className={cn(\\n                          \\\"ml-auto\\\",\\n   \
      \                       column.id === filter.id ? \\\"opacity-100\\\" : \\\"\
      opacity-0\\\",\\n                        )}\\n                      />\\n  \
      \                  </CommandItem>\\n                  ))}\\n               \
      \ </CommandGroup>\\n              </CommandList>\\n            </Command>\\\
      n          </PopoverContent>\\n        </Popover>\\n        <Select\\n     \
      \     open={showOperatorSelector}\\n          onOpenChange={setShowOperatorSelector}\\\
      n          value={filter.operator}\\n          onValueChange={(value: FilterOperator)\
      \ =>\\n            onFilterUpdate(filter.filterId, {\\n              operator:\
      \ value,\\n              value:\\n                value === \\\"isEmpty\\\"\
      \ || value === \\\"isNotEmpty\\\"\\n                  ? \\\"\\\"\\n        \
      \          : filter.value,\\n            })\\n          }\\n        >\\n   \
      \       <SelectTrigger\\n            aria-controls={operatorListboxId}\\n  \
      \          className=\\\"h-8 rounded-none border-r-0 px-2.5 lowercase [&[data-size]]:h-8\
      \ [&_svg]:hidden\\\"\\n          >\\n            <SelectValue placeholder={filter.operator}\
      \ />\\n          </SelectTrigger>\\n          <SelectContent\\n            id={operatorListboxId}\\\
      n            className=\\\"origin-[var(--radix-select-content-transform-origin)]\\\
      \"\\n          >\\n            {filterOperators.map((operator) => (\\n     \
      \         <SelectItem\\n                key={operator.value}\\n            \
      \    className=\\\"lowercase\\\"\\n                value={operator.value}\\\
      n              >\\n                {operator.label}\\n              </SelectItem>\\\
      n            ))}\\n          </SelectContent>\\n        </Select>\\n       \
      \ {onFilterInputRender({\\n          filter,\\n          column,\\n        \
      \  inputId,\\n          onFilterUpdate,\\n          showValueSelector,\\n  \
      \        setShowValueSelector,\\n        })}\\n        <Button\\n          aria-controls={filterItemId}\\\
      n          variant=\\\"ghost\\\"\\n          size=\\\"sm\\\"\\n          className=\\\
      \"h-full rounded-none rounded-r-md border border-l-0 px-1.5 font-normal dark:bg-input/30\\\
      \"\\n          onClick={() => onFilterRemove(filter.filterId)}\\n        >\\\
      n          <X className=\\\"size-3.5\\\" />\\n        </Button>\\n      </div>\\\
      n    );\\n  }\\n}\\n\\ninterface FilterValueSelectorProps<TData> {\\n  column:\
      \ Column<TData>;\\n  value: string;\\n  onSelect: (value: string) => void;\\\
      n}\\n\\nfunction FilterValueSelector<TData>({\\n  column,\\n  value,\\n  onSelect,\\\
      n}: FilterValueSelectorProps<TData>) {\\n  const variant = column.columnDef.meta?.variant\
      \ ?? \\\"text\\\";\\n\\n  switch (variant) {\\n    case \\\"boolean\\\":\\n\
      \      return (\\n        <CommandGroup>\\n          <CommandItem value=\\\"\
      true\\\" onSelect={() => onSelect(\\\"true\\\")}>\\n            True\\n    \
      \      </CommandItem>\\n          <CommandItem value=\\\"false\\\" onSelect={()\
      \ => onSelect(\\\"false\\\")}>\\n            False\\n          </CommandItem>\\\
      n        </CommandGroup>\\n      );\\n\\n    case \\\"select\\\":\\n    case\
      \ \\\"multiSelect\\\":\\n      return (\\n        <CommandGroup>\\n        \
      \  {column.columnDef.meta?.options?.map((option) => (\\n            <CommandItem\\\
      n              key={option.value}\\n              value={option.value}\\n  \
      \            onSelect={() => onSelect(option.value)}\\n            >\\n    \
      \          {option.icon && <option.icon />}\\n              <span className=\\\
      \"truncate\\\">{option.label}</span>\\n              {option.count && (\\n \
      \               <span className=\\\"ml-auto font-mono text-xs\\\">\\n      \
      \            {option.count}\\n                </span>\\n              )}\\n\
      \            </CommandItem>\\n          ))}\\n        </CommandGroup>\\n   \
      \   );\\n\\n    case \\\"date\\\":\\n    case \\\"dateRange\\\":\\n      return\
      \ (\\n        <Calendar\\n          initialFocus\\n          mode=\\\"single\\\
      \"\\n          selected={value ? new Date(value) : undefined}\\n          onSelect={(date)\
      \ => onSelect(date?.getTime().toString() ?? \\\"\\\")}\\n        />\\n     \
      \ );\\n\\n    default: {\\n      const isEmpty = !value.trim();\\n\\n      return\
      \ (\\n        <CommandGroup>\\n          <CommandItem\\n            value={value}\\\
      n            onSelect={() => onSelect(value)}\\n            disabled={isEmpty}\\\
      n          >\\n            {isEmpty ? (\\n              <>\\n              \
      \  <Text />\\n                <span>Type to add filter...</span>\\n        \
      \      </>\\n            ) : (\\n              <>\\n                <BadgeCheck\
      \ />\\n                <span className=\\\"truncate\\\">Filter by &quot;{value}&quot;</span>\\\
      n              </>\\n            )}\\n          </CommandItem>\\n        </CommandGroup>\\\
      n      );\\n    }\\n  }\\n}\\n\\nfunction onFilterInputRender<TData>({\\n  filter,\\\
      n  column,\\n  inputId,\\n  onFilterUpdate,\\n  showValueSelector,\\n  setShowValueSelector,\\\
      n}: {\\n  filter: ExtendedColumnFilter<TData>;\\n  column: Column<TData>;\\\
      n  inputId: string;\\n  onFilterUpdate: (\\n    filterId: string,\\n    updates:\
      \ Partial<Omit<ExtendedColumnFilter<TData>, \\\"filterId\\\">>,\\n  ) => void;\\\
      n  showValueSelector: boolean;\\n  setShowValueSelector: (value: boolean) =>\
      \ void;\\n}) {\\n  if (filter.operator === \\\"isEmpty\\\" || filter.operator\
      \ === \\\"isNotEmpty\\\") {\\n    return (\\n      <div\\n        id={inputId}\\\
      n        role=\\\"status\\\"\\n        aria-label={`${column.columnDef.meta?.label}\
      \ filter is ${\\n          filter.operator === \\\"isEmpty\\\" ? \\\"empty\\\
      \" : \\\"not empty\\\"\\n        }`}\\n        aria-live=\\\"polite\\\"\\n \
      \       className=\\\"h-full w-16 rounded-none border bg-transparent px-1.5\
      \ py-0.5 text-muted-foreground dark:bg-input/30\\\"\\n      />\\n    );\\n \
      \ }\\n\\n  switch (filter.variant) {\\n    case \\\"text\\\":\\n    case \\\"\
      number\\\":\\n    case \\\"range\\\": {\\n      if (\\n        (filter.variant\
      \ === \\\"range\\\" && filter.operator === \\\"isBetween\\\") ||\\n        filter.operator\
      \ === \\\"isBetween\\\"\\n      ) {\\n        return (\\n          <DataTableRangeFilter\\\
      n            filter={filter}\\n            column={column}\\n            inputId={inputId}\\\
      n            onFilterUpdate={onFilterUpdate}\\n            className=\\\"size-full\
      \ max-w-28 gap-0 [&_[data-slot='range-min']]:border-r-0 [&_input]:rounded-none\
      \ [&_input]:px-1.5\\\"\\n          />\\n        );\\n      }\\n\\n      const\
      \ isNumber =\\n        filter.variant === \\\"number\\\" || filter.variant ===\
      \ \\\"range\\\";\\n\\n      return (\\n        <Input\\n          id={inputId}\\\
      n          type={isNumber ? \\\"number\\\" : \\\"text\\\"}\\n          inputMode={isNumber\
      \ ? \\\"numeric\\\" : undefined}\\n          placeholder={column.columnDef.meta?.placeholder\
      \ ?? \\\"Enter value...\\\"}\\n          classN\n... (truncated)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(compiler-sfc): handle keyof operator with index object (#11581)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/compiler-sfc/__tests__/compileScript/resolveType.spec.ts\
      \ b/packages/compiler-sfc/__tests__/compileScript/resolveType.spec.ts\nindex\
      \ b8b71878e..ff3388256 100644\n--- a/packages/compiler-sfc/__tests__/compileScript/resolveType.spec.ts\n\
      +++ b/packages/compiler-sfc/__tests__/compileScript/resolveType.spec.ts\n@@\
      \ -596,6 +596,65 @@ describe('resolveType', () => {\n     })\n   })\n \n+  test('keyof:\
      \ nested object with number', () => {\n+    const { props } = resolve(\n+  \
      \    `\n+      interface Type {\n+        deep: {\n+          1: any\n+    \
      \    }\n+      }\n+\n+      defineProps<{\n+        route: keyof Type['deep']\n\
      +      }>()`,\n+    )\n+\n+    expect(props).toStrictEqual({\n+      route:\
      \ ['Number'],\n+    })\n+  })\n+\n+  test('keyof: nested object with string',\
      \ () => {\n+    const { props } = resolve(\n+      `\n+      interface Type\
      \ {\n+        deep: {\n+          foo: any\n+        }\n+      }\n+\n+     \
      \ defineProps<{\n+        route: keyof Type['deep']\n+      }>()`,\n+    )\n\
      +\n+    expect(props).toStrictEqual({\n+      route: ['String'],\n+    })\n\
      +  })\n+\n+  test('keyof: nested object with intermediate', () => {\n+    const\
      \ { props } = resolve(\n+      `\n+      interface Type {\n+        deep: {\n\
      +          foo: any\n+        }\n+      }\n+\n+      type Foo = Type['deep']\n\
      +\n+      defineProps<{\n+        route: keyof Foo\n+      }>()`,\n+    )\n\
      +\n+    expect(props).toStrictEqual({\n+      route: ['String'],\n+    })\n\
      +  })\n+\n   test('ExtractPropTypes (element-plus)', () => {\n     const { props,\
      \ raw } = resolve(\n       `\ndiff --git a/packages/compiler-sfc/src/script/resolveType.ts\
      \ b/packages/compiler-sfc/src/script/resolveType.ts\nindex 398d3ba9f..c7880578e\
      \ 100644\n--- a/packages/compiler-sfc/src/script/resolveType.ts\n+++ b/packages/compiler-sfc/src/script/resolveType.ts\n\
      @@ -1703,7 +1703,7 @@ export function inferRuntimeType(\n \n       case 'TSIndexedAccessType':\
      \ {\n         const types = resolveIndexType(ctx, node, scope)\n-        return\
      \ flattenTypes(ctx, types, scope)\n+        return flattenTypes(ctx, types,\
      \ scope, isKeyOf)\n       }\n \n       case 'ClassDeclaration':"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(compiler-core): use ast-based check for function expressions when
    possible'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/compiler-core/__tests__/transforms/vOn.spec.ts\
      \ b/packages/compiler-core/__tests__/transforms/vOn.spec.ts\nindex 27d502753..e29b2ed31\
      \ 100644\n--- a/packages/compiler-core/__tests__/transforms/vOn.spec.ts\n+++\
      \ b/packages/compiler-core/__tests__/transforms/vOn.spec.ts\n@@ -285,6 +285,21\
      \ @@ describe('compiler: transform v-on', () => {\n         },\n       ],\n\
      \     })\n+\n+    const { node: node2 } = parseWithVOn(\n+      `<div @click=\"\
      (e: (number | string)[]) => foo(e)\"/>`,\n+    )\n+    expect((node2.codegenNode\
      \ as VNodeCall).props).toMatchObject({\n+      properties: [\n+        {\n+\
      \          key: { content: `onClick` },\n+          value: {\n+            type:\
      \ NodeTypes.SIMPLE_EXPRESSION,\n+            content: `(e: (number | string)[])\
      \ => foo(e)`,\n+          },\n+        },\n+      ],\n+    })\n   })\n \n  \
      \ test('should NOT wrap as function if expression is already function expression\
      \ (async)', () => {\ndiff --git a/packages/compiler-core/__tests__/utils.spec.ts\
      \ b/packages/compiler-core/__tests__/utils.spec.ts\nindex 506aa8698..2d377a271\
      \ 100644\n--- a/packages/compiler-core/__tests__/utils.spec.ts\n+++ b/packages/compiler-core/__tests__/utils.spec.ts\n\
      @@ -1,5 +1,5 @@\n-import type { TransformContext } from '../src'\n-import type\
      \ { Position } from '../src/ast'\n+import type { ExpressionNode, TransformContext\
      \ } from '../src'\n+import { type Position, createSimpleExpression } from '../src/ast'\n\
      \ import {\n   advancePositionWithClone,\n   isMemberExpressionBrowser,\n@@\
      \ -41,7 +41,8 @@ describe('advancePositionWithClone', () => {\n })\n \n describe('isMemberExpression',\
      \ () => {\n-  function commonAssertions(fn: (str: string) => boolean) {\n+ \
      \ function commonAssertions(raw: (exp: ExpressionNode) => boolean) {\n+    const\
      \ fn = (str: string) => raw(createSimpleExpression(str))\n     // should work\n\
      \     expect(fn('obj.foo')).toBe(true)\n     expect(fn('obj[foo]')).toBe(true)\n\
      @@ -78,13 +79,16 @@ describe('isMemberExpression', () => {\n \n   test('browser',\
      \ () => {\n     commonAssertions(isMemberExpressionBrowser)\n-    expect(isMemberExpressionBrowser('123[a]')).toBe(false)\n\
      +    expect(isMemberExpressionBrowser(createSimpleExpression('123[a]'))).toBe(\n\
      +      false,\n+    )\n   })\n \n   test('node', () => {\n     const ctx = {\
      \ expressionPlugins: ['typescript'] } as any as TransformContext\n-    const\
      \ fn = (str: string) => isMemberExpressionNode(str, ctx)\n-    commonAssertions(fn)\n\
      +    const fn = (str: string) =>\n+      isMemberExpressionNode(createSimpleExpression(str),\
      \ ctx)\n+    commonAssertions(exp => isMemberExpressionNode(exp, ctx))\n \n\
      \     // TS-specific checks\n     expect(fn('foo as string')).toBe(true)\ndiff\
      \ --git a/packages/compiler-core/src/transforms/vModel.ts b/packages/compiler-core/src/transforms/vModel.ts\n\
      index 863b3a7d7..8237c327a 100644\n--- a/packages/compiler-core/src/transforms/vModel.ts\n\
      +++ b/packages/compiler-core/src/transforms/vModel.ts\n@@ -55,10 +55,7 @@ export\
      \ const transformModel: DirectiveTransform = (dir, node, context) => {\n   \
      \    bindingType === BindingTypes.SETUP_REF ||\n       bindingType === BindingTypes.SETUP_MAYBE_REF)\n\
      \ \n-  if (\n-    !expString.trim() ||\n-    (!isMemberExpression(expString,\
      \ context) && !maybeRef)\n-  ) {\n+  if (!expString.trim() || (!isMemberExpression(exp,\
      \ context) && !maybeRef)) {\n     context.onError(\n       createCompilerError(ErrorCodes.X_V_MODEL_MALFORMED_EXPRESSION,\
      \ exp.loc),\n     )\ndiff --git a/packages/compiler-core/src/transforms/vOn.ts\
      \ b/packages/compiler-core/src/transforms/vOn.ts\nindex a1631e10d..ed809a2d7\
      \ 100644\n--- a/packages/compiler-core/src/transforms/vOn.ts\n+++ b/packages/compiler-core/src/transforms/vOn.ts\n\
      @@ -13,12 +13,9 @@ import { camelize, toHandlerKey } from '@vue/shared'\n import\
      \ { ErrorCodes, createCompilerError } from '../errors'\n import { processExpression\
      \ } from './transformExpression'\n import { validateBrowserExpression } from\
      \ '../validateExpression'\n-import { hasScopeRef, isMemberExpression } from\
      \ '../utils'\n+import { hasScopeRef, isFnExpression, isMemberExpression } from\
      \ '../utils'\n import { TO_HANDLER_KEY } from '../runtimeHelpers'\n \n-const\
      \ fnExpRE =\n-  /^\\s*(async\\s*)?(\\([^)]*?\\)|[\\w$_]+)\\s*(:[^=]+)?=>|^\\\
      s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/\n-\n export interface VOnDirectiveNode\
      \ extends DirectiveNode {\n   // v-on without arg is handled directly in ./transformElements.ts\
      \ due to it affecting\n   // codegen for the entire props object. This transform\
      \ here is only for v-on\n@@ -84,8 +81,8 @@ export const transformOn: DirectiveTransform\
      \ = (\n   }\n   let shouldCache: boolean = context.cacheHandlers && !exp &&\
      \ !context.inVOnce\n   if (exp) {\n-    const isMemberExp = isMemberExpression(exp.content,\
      \ context)\n-    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content))\n\
      +    const isMemberExp = isMemberExpression(exp, context)\n+    const isInlineStatement\
      \ = !(isMemberExp || isFnExpression(exp, context))\n     const hasMultipleStatements\
      \ = exp.content.includes(`;`)\n \n     // process the expression since it's\
      \ been skipped\ndiff --git a/packages/compiler-core/src/utils.ts b/packages/compiler-core/src/utils.ts\n\
      index 561c63578..5cf47f3fa 100644\n--- a/packages/compiler-core/src/utils.ts\n\
      +++ b/packages/compiler-core/src/utils.ts\n@@ -39,7 +39,7 @@ import {\n import\
      \ { NOOP, isObject, isString } from '@vue/shared'\n import type { PropsExpression\
      \ } from './transforms/transformElement'\n import { parseExpression } from '@babel/parser'\n\
      -import type { Expression } from '@babel/types'\n+import type { Expression,\
      \ Node } from '@babel/types'\n import { unwrapTSNode } from './babelUtils'\n\
      \ \n export const isStaticExp = (p: JSChildNode): p is SimpleExpressionNode\
      \ =>\n@@ -77,15 +77,20 @@ const validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/\n\
      \ const validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/\n const whitespaceRE\
      \ = /\\s+[.[]\\s*|\\s*[.[]\\s+/g\n \n+const getExpSource = (exp: ExpressionNode):\
      \ string =>\n+  exp.type === NodeTypes.SIMPLE_EXPRESSION ? exp.content : exp.loc.source\n\
      +\n /**\n  * Simple lexer to check if an expression is a member expression.\
      \ This is\n  * lax and only checks validity at the root level (i.e. does not\
      \ validate exps\n  * inside square brackets), but it's ok since these are only\
      \ used on template\n  * expressions and false positives are invalid expressions\
      \ in the first place.\n  */\n-export const isMemberExpressionBrowser = (path:\
      \ string): boolean => {\n+export const isMemberExpressionBrowser = (exp: ExpressionNode):\
      \ boolean => {\n   // remove whitespaces around . or [ first\n-  path = path.trim().replace(whitespaceRE,\
      \ s => s.trim())\n+  const path = getExpSource(exp)\n+    .trim()\n+    .replace(whitespaceRE,\
      \ s => s.trim())\n \n   let state = MemberExpLexState.inMemberExp\n   let stateStack:\
      \ MemberExpLexState[] = []\n@@ -152,13 +157,20 @@ export const isMemberExpressionBrowser\
      \ = (path: string): boolean => {\n   return !currentOpenBracketCount && !currentOpenParensCount\n\
      \ }\n \n-export const isMemberExpressionNode = __BROWSER__\n-  ? (NOOP as any\
      \ as (path: string, context: TransformContext) => boolean)\n-  : (path: string,\
      \ context: TransformContext): boolean => {\n+export const isMemberExpressionNode:\
      \ (\n+  exp: ExpressionNode,\n+  context: TransformContext,\n+) => boolean =\
      \ __BROWSER__\n+  ? (NOOP as any)\n+  : (exp, context) => {\n       try {\n\
      -        let ret: Expression = parseExpression(path, {\n-          plugins:\
      \ context.expressionPlugins,\n-        })\n+        let ret: Node =\n+     \
      \     exp.ast ||\n+          parseExpression(getExpSource(exp), {\n+       \
      \     plugins: context.expressionPlugins\n+              ? [...context.expressionPlugins,\
      \ 'typescript']\n+              : ['typescript'],\n+          })\n         ret\
      \ = unwrapTSNode(ret) as Expression\n         return (\n           ret.type\
      \ === 'MemberExpression' ||\n@@ -170,9 +182,52 @@ export const isMemberExpressionNode\
      \ = __BROWSER__\n       }\n     }\n \n-export const isMemberExpression = __BROWSER__\n\
      -  ? isMemberExpressionBrowser\n-  : isMemberExpressionNode\n+export const isMemberExpression:\
      \ (\n+  exp: ExpressionNode,\n+  context: TransformContext,\n+) => boolean =\
      \ __BROWSER__ ? isMemberExpressionBrowser : isMemberExpressionNode\n+\n+const\
      \ fnExpRE =\n+  /^\\s*(async\\s*)?(\\([^)]*?\\)|[\\w$_]+)\\s*(:[^=]+)?=>|^\\\
      s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/\n+\n+export const isFnExpressionBrowser:\
      \ (exp: ExpressionNode) => boolean = exp =>\n+  fnExpRE.test(getExpSource(exp))\n\
      +\n+export const isFnExpressionNode: (\n+  exp: ExpressionNode,\n+  context:\
      \ TransformContext,\n+) => boolean = __BROWSER__\n+  ? (NOOP as any)\n+  : (exp,\
      \ context) => {\n+      try {\n+        let ret: Node =\n+          exp.ast\
      \ ||\n+          parseExpression(getExpSource(exp), {\n+            plugins:\
      \ context.expressionPlugins\n+              ? [...context.expressionPlugins,\
      \ 'typescript']\n+              : ['typescript'],\n+          })\n+        //\
      \ parser may parse the exp as statements when it contains semicolons\n+    \
      \    if (ret.type === 'Program') {\n+          ret = ret.body[0]\n+        \
      \  if (ret.type === 'ExpressionStatement') {\n+            ret = ret.expression\n\
      +          }\n+        }\n+        ret = unwrapTSNode(ret) as Expression\n+\
      \        return (\n+          ret.type === 'FunctionExpression' ||\n+      \
      \    ret.type === 'ArrowFunctionExpression'\n+        )\n+      } catch (e)\
      \ {\n+        return false\n+      }\n+    }\n+\n+export const isFnExpression:\
      \ (\n+  exp: ExpressionNode,\n+  context: TransformContext,\n+) => boolean =\
      \ __BROWSER__ ? isFnExpressionBrowser : isFnExpressionNode\n \n export function\
      \ advancePositionWithClone(\n   pos: Position,"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'chore: update changelog regarding inject behavior change'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/CHANGELOG.md b/CHANGELOG.md\nindex cf1e9411a..43cbdcea7\
      \ 100644\n--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -12,6 +12,7 @@\n * Revert\
      \ \"fix(types/ref): correct type inference for nested refs ([#11536](https://github.com/vuejs/core/issues/11536))\"\
      \ ([3a56315](https://github.com/vuejs/core/commit/3a56315f94bc0e11cfbb288b65482ea8fc3a39b4))\n\
      \ * **runtime-core:** fix warning for missing event handler ([#11489](https://github.com/vuejs/core/issues/11489))\
      \ ([e359ff0](https://github.com/vuejs/core/commit/e359ff0046286aee03fe31656c023677be457e07)),\
      \ closes [#4803](https://github.com/vuejs/core/issues/4803) [#8268](https://github.com/vuejs/core/issues/8268)\n\
      \ * **runtime-core:** prioritize using the provides from currentApp in nested\
      \ createApp ([#11502](https://github.com/vuejs/core/issues/11502)) ([7e75de0](https://github.com/vuejs/core/commit/7e75de002f08076a02c9361a58fa1d0af1772964)),\
      \ closes [#11488](https://github.com/vuejs/core/issues/11488)\n+   * Note: this\
      \ change will break `inject` calls inside Pinia stores that expects to be able\
      \ to inject provided values from the component using the store. This is expected\
      \ because the usage is relying on previously incorrect behavior.\n * **runtime-dom:**\
      \ apply css vars before mount ([#11538](https://github.com/vuejs/core/issues/11538))\
      \ ([fdc2a31](https://github.com/vuejs/core/commit/fdc2a31dbd4196d6432be16767a1bfdab1240d49)),\
      \ closes [#11533](https://github.com/vuejs/core/issues/11533)\n * **ssr:** ensure\
      \ content is valid when rendering normal slot ([#11491](https://github.com/vuejs/core/issues/11491))\
      \ ([6c90324](https://github.com/vuejs/core/commit/6c903248703e2413c6197b9ad4d535f31c8eac39)),\
      \ closes [#11326](https://github.com/vuejs/core/issues/11326)\n * **types/ref:**\
      \ correct type inference for nested refs ([#11536](https://github.com/vuejs/core/issues/11536))\
      \ ([536f623](https://github.com/vuejs/core/commit/536f62332c455ba82ef2979ba634b831f91928ba)),\
      \ closes [#11532](https://github.com/vuejs/core/issues/11532) [#11537](https://github.com/vuejs/core/issues/11537)"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(build): revert entities to 4.5 to avoid runtime resolution errors'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/.github/renovate.json5 b/.github/renovate.json5\nindex\
      \ 9c0458702..e9724bb5a 100644\n--- a/.github/renovate.json5\n+++ b/.github/renovate.json5\n\
      @@ -54,5 +54,9 @@\n     // pinned\n     // https://github.com/vuejs/core/commit/a012e39b373f1b6918e5c89856e8f902e1bfa14d\n\
      \     '@rollup/plugin-replace',\n+\n+    // pinned, 5.0+ has exports issues\n\
      +    // https://github.com/vuejs/core/issues/11603\n+    'entities',\n   ],\n\
      \ }\ndiff --git a/packages/compiler-core/package.json b/packages/compiler-core/package.json\n\
      index 611d2df00..53223367a 100644\n--- a/packages/compiler-core/package.json\n\
      +++ b/packages/compiler-core/package.json\n@@ -48,7 +48,7 @@\n   \"dependencies\"\
      : {\n     \"@babel/parser\": \"catalog:\",\n     \"@vue/shared\": \"workspace:*\"\
      ,\n-    \"entities\": \"^5.0.0\",\n+    \"entities\": \"^4.5.0\",\n     \"estree-walker\"\
      : \"catalog:\",\n     \"source-map-js\": \"catalog:\"\n   },\ndiff --git a/packages/compiler-core/src/parser.ts\
      \ b/packages/compiler-core/src/parser.ts\nindex 55487e12b..cac943dd6 100644\n\
      --- a/packages/compiler-core/src/parser.ts\n+++ b/packages/compiler-core/src/parser.ts\n\
      @@ -44,7 +44,7 @@ import {\n   isSimpleIdentifier,\n   isStaticArgOf,\n } from\
      \ './utils'\n-import { decodeHTML } from 'entities/dist/decode.js'\n+import\
      \ { decodeHTML } from 'entities/lib/decode.js'\n import {\n   type ParserOptions\
      \ as BabelOptions,\n   parse,\ndiff --git a/packages/compiler-core/src/tokenizer.ts\
      \ b/packages/compiler-core/src/tokenizer.ts\nindex 72f548fa2..561a84b5f 100644\n\
      --- a/packages/compiler-core/src/tokenizer.ts\n+++ b/packages/compiler-core/src/tokenizer.ts\n\
      @@ -36,7 +36,7 @@ import {\n   EntityDecoder,\n   fromCodePoint,\n   htmlDecodeTree,\n\
      -} from 'entities/dist/decode.js'\n+} from 'entities/lib/decode.js'\n \n export\
      \ enum ParseMode {\n   BASE,\ndiff --git a/pnpm-lock.yaml b/pnpm-lock.yaml\n\
      index d12dc453c..5bd490104 100644\n--- a/pnpm-lock.yaml\n+++ b/pnpm-lock.yaml\n\
      @@ -183,8 +183,8 @@ importers:\n         specifier: workspace:*\n         version:\
      \ link:../shared\n       entities:\n-        specifier: ^5.0.0\n-        version:\
      \ 5.0.0\n+        specifier: ^4.5.0\n+        version: 4.5.0\n       estree-walker:\n\
      \         specifier: 'catalog:'\n         version: 2.0.2\n@@ -1903,10 +1903,6\
      \ @@ packages:\n     resolution: {integrity: sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==}\n\
      \     engines: {node: '>=0.12'}\n \n-  entities@5.0.0:\n-    resolution: {integrity:\
      \ sha512-BeJFvFRJddxobhvEdm5GqHzRV/X+ACeuw0/BuuxsCh1EUZcAIz8+kYmBp/LrQuloy6K1f3a0M7+IhmZ7QnkISA==}\n\
      -    engines: {node: '>=0.12'}\n-\n   env-paths@2.2.1:\n     resolution: {integrity:\
      \ sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==}\n\
      \     engines: {node: '>=6'}\n@@ -5021,8 +5017,6 @@ snapshots:\n \n   entities@4.5.0:\
      \ {}\n \n-  entities@5.0.0: {}\n-\n   env-paths@2.2.1: {}\n \n   environment@1.1.0:\
      \ {}\ndiff --git a/rollup.config.js b/rollup.config.js\nindex a7afed7ec..ff0da3488\
      \ 100644\n--- a/rollup.config.js\n+++ b/rollup.config.js\n@@ -253,7 +253,7 @@\
      \ function createConfig(format, output, plugins = []) {\n       'source-map-js',\n\
      \       '@babel/parser',\n       'estree-walker',\n-      'entities/dist/decode.js',\n\
      +      'entities/lib/decode.js',\n     ]\n \n     if (isGlobalBuild || isBrowserESMBuild\
      \ || isCompatPackage) {"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(types): add fallback stub for DOM types when DOM lib is absent
    (#11598)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/runtime-dom/src/index.ts b/packages/runtime-dom/src/index.ts\n\
      index 44ada3d93..6b110d00a 100644\n--- a/packages/runtime-dom/src/index.ts\n\
      +++ b/packages/runtime-dom/src/index.ts\n@@ -26,9 +26,17 @@ import {\n   isString,\n\
      \ } from '@vue/shared'\n \n+/**\n+ * This is a stub implementation to prevent\
      \ the need to use dom types.\n+ *\n+ * To enable proper types, add `\"dom\"\
      ` to `\"lib\"` in your `tsconfig.json`.\n+ */\n+type DomStub = {}\n+type DomType<T>\
      \ = typeof globalThis extends { window: unknown } ? T : DomStub\n+\n declare\
      \ module '@vue/reactivity' {\n   export interface RefUnwrapBailTypes {\n-  \
      \  runtimeDOMBailTypes: Node | Window\n+    runtimeDOMBailTypes: DomType<Node\
      \ | Window>\n   }\n }\n "
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'test(compiler-sfc): add assertion for template functional (#11557)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/compiler-sfc/__tests__/parse.spec.ts b/packages/compiler-sfc/__tests__/parse.spec.ts\n\
      index 048dab693..87cd05ed0 100644\n--- a/packages/compiler-sfc/__tests__/parse.spec.ts\n\
      +++ b/packages/compiler-sfc/__tests__/parse.spec.ts\n@@ -425,5 +425,15 @@ h1\
      \ { color: red }\n         `At least one <template> or <script> is required\
      \ in a single file component`,\n       )\n     })\n+\n+    test('should throw\
      \ error if template functional is given', () => {\n+      assertWarning(\n+\
      \        parse(`<template functional></template>`).errors,\n+        `<template\
      \ functional> is no longer supported in Vue 3, since ` +\n+          `functional\
      \ components no longer have significant performance ` +\n+          `difference\
      \ from stateful ones. Just use a normal <template> ` +\n+          `instead.`,\n\
      +      )\n+    })\n   })\n })"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'chore(playground): support copying vue version (#11558)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/sfc-playground/src/VersionSelect.vue b/packages/sfc-playground/src/VersionSelect.vue\n\
      index bd24ac21a..3a30e497f 100644\n--- a/packages/sfc-playground/src/VersionSelect.vue\n\
      +++ b/packages/sfc-playground/src/VersionSelect.vue\n@@ -1,5 +1,6 @@\n <script\
      \ setup lang=\"ts\">\n import { onMounted, ref } from 'vue'\n+import Copy from\
      \ './icons/Copy.vue'\n \n const expanded = ref(false)\n const versions = ref<string[]>()\n\
      @@ -53,6 +54,12 @@ function setVersion(v: string) {\n   expanded.value = false\n\
      \ }\n \n+function copyVersion(v: string) {\n+  window.navigator.clipboard.writeText(v).then(()\
      \ => {\n+    alert('Vue version has been copied to clipboard.')\n+  })\n+}\n\
      +\n onMounted(() => {\n   window.addEventListener('click', () => {\n     expanded.value\
      \ = false\n@@ -76,11 +83,19 @@ onMounted(() => {\n       <li v-if=\"!versions\"\
      ><a>loading versions...</a></li>\n       <li\n         v-for=\"(ver, index)\
      \ of versions\"\n+        class=\"versions-item\"\n         :class=\"{\n   \
      \        active: ver === version || (version === 'latest' && index === 0),\n\
      \         }\"\n       >\n         <a @click=\"setVersion(ver)\">v{{ ver }}</a>\n\
      +        <button\n+          title=\"Copy Version\"\n+          class=\"version-copy\"\
      \n+          @click=\"copyVersion(`v${ver}`)\"\n+        >\n+          <Copy\
      \ />\n+        </button>\n       </li>\n       <div @click=\"expanded = false\"\
      >\n         <slot />\n@@ -120,4 +135,17 @@ onMounted(() => {\n .versions .active\
      \ a {\n   color: var(--green);\n }\n+\n+.versions .versions-item {\n+  display:\
      \ flex;\n+  justify-content: space-between;\n+}\n+\n+.versions .versions-item\
      \ .version-copy {\n+  display: none;\n+}\n+\n+.versions .versions-item:hover\
      \ .version-copy {\n+  display: block;\n+}\n </style>\ndiff --git a/packages/sfc-playground/src/icons/Copy.vue\
      \ b/packages/sfc-playground/src/icons/Copy.vue\nnew file mode 100644\nindex\
      \ 000000000..f3851da63\n--- /dev/null\n+++ b/packages/sfc-playground/src/icons/Copy.vue\n\
      @@ -0,0 +1,14 @@\n+<template>\n+  <svg\n+    xmlns=\"http://www.w3.org/2000/svg\"\
      \n+    width=\"1.3em\"\n+    height=\"1.3em\"\n+    viewBox=\"0 0 24 24\"\n\
      +  >\n+    <path fill=\"currentColor\" d=\"M8 7h11v14H8z\" opacity=\".3\" />\n\
      +    <path\n+      fill=\"currentColor\"\n+      d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3\
      \ 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0\
      \ 16H8V7h11z\"\n+    />\n+  </svg>\n+</template>"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(compiler-core): use `isProp.arg.loc` instead of `isProp.loc` (#11547)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/compiler-core/src/transforms/transformElement.ts\
      \ b/packages/compiler-core/src/transforms/transformElement.ts\nindex ebaf08375..e40280bd1\
      \ 100644\n--- a/packages/compiler-core/src/transforms/transformElement.ts\n\
      +++ b/packages/compiler-core/src/transforms/transformElement.ts\n@@ -250,7 +250,7\
      \ @@ export function resolveComponentType(\n         exp = isProp.exp\n    \
      \     if (!exp) {\n           // #10469 handle :is shorthand\n-          exp\
      \ = createSimpleExpression(`is`, false, isProp.loc)\n+          exp = createSimpleExpression(`is`,\
      \ false, isProp.arg!.loc)\n           if (!__BROWSER__) {\n             exp\
      \ = isProp.exp = processExpression(exp, context)\n           }"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix(defineModel): detect changes respect custom getter and setter
    (#11543)'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/runtime-core/__tests__/helpers/useModel.spec.ts\
      \ b/packages/runtime-core/__tests__/helpers/useModel.spec.ts\nindex 4c30de2f2..3c724b0ba\
      \ 100644\n--- a/packages/runtime-core/__tests__/helpers/useModel.spec.ts\n+++\
      \ b/packages/runtime-core/__tests__/helpers/useModel.spec.ts\n@@ -657,4 +657,96\
      \ @@ describe('useModel', () => {\n     expect(setValue).toBeCalledTimes(2)\n\
      \     expect(msg.value).toBe(defaultVal)\n   })\n+\n+  // #11526\n+  test('custom\
      \ getter', () => {\n+    let changeChildMsg!: (val: boolean) => void\n+    const\
      \ getter = (value: boolean) => !value\n+\n+    const Comp = defineComponent({\n\
      +      props: ['msg'],\n+      emits: ['update:msg'],\n+      setup(props) {\n\
      +        const childMsg = useModel(props, 'msg', {\n+          get: getter,\n\
      +          set: value => !value,\n+        })\n+        changeChildMsg = (val:\
      \ boolean) => (childMsg.value = val)\n+        return () => {\n+          return\
      \ childMsg.value\n+        }\n+      },\n+    })\n+\n+    const defaultVal =\
      \ false\n+    const msg = ref(defaultVal)\n+    const Parent = defineComponent({\n\
      +      setup() {\n+        return () =>\n+          h(Comp, {\n+           \
      \ msg: msg.value,\n+            'onUpdate:msg': val => {\n+              msg.value\
      \ = val\n+            },\n+          })\n+      },\n+    })\n+\n+    const root\
      \ = nodeOps.createElement('div')\n+    render(h(Parent), root)\n+\n+    changeChildMsg(!getter(msg.value))\n\
      +    expect(msg.value).toBe(true)\n+\n+    changeChildMsg(!getter(msg.value))\n\
      +    expect(msg.value).toBe(false)\n+  })\n+\n+  // #11541\n+  test('custom\
      \ setter', () => {\n+    let changeChildMsg!: (val: boolean) => void\n+\n+ \
      \   const Comp = defineComponent({\n+      props: ['msg'],\n+      emits: ['update:msg'],\n\
      +      setup(props) {\n+        const childMsg = useModel(props, 'msg', {\n\
      +          set: value => {\n+            if (value === msg.value) {\n+     \
      \         return null\n+            } else {\n+              return value\n\
      +            }\n+          },\n+        })\n+        changeChildMsg = (val:\
      \ boolean) => (childMsg.value = val)\n+        return () => {\n+          return\
      \ childMsg.value\n+        }\n+      },\n+    })\n+\n+    const defaultVal =\
      \ false\n+    const msg = ref(defaultVal)\n+    const Parent = defineComponent({\n\
      +      setup() {\n+        return () =>\n+          h(Comp, {\n+           \
      \ msg: msg.value,\n+            'onUpdate:msg': val => {\n+              msg.value\
      \ = val\n+            },\n+          })\n+      },\n+    })\n+\n+    const root\
      \ = nodeOps.createElement('div')\n+    render(h(Parent), root)\n+\n+    changeChildMsg(true)\n\
      +    expect(msg.value).toBe(true)\n+\n+    changeChildMsg(true)\n+    expect(msg.value).toBe(null)\n\
      +  })\n })\ndiff --git a/packages/runtime-core/src/helpers/useModel.ts b/packages/runtime-core/src/helpers/useModel.ts\n\
      index 5bcd31693..8180fb32c 100644\n--- a/packages/runtime-core/src/helpers/useModel.ts\n\
      +++ b/packages/runtime-core/src/helpers/useModel.ts\n@@ -51,8 +51,9 @@ export\
      \ function useModel(\n       },\n \n       set(value) {\n+        const emittedValue\
      \ = options.set ? options.set(value) : value\n         if (\n-          !hasChanged(value,\
      \ localValue) &&\n+          !hasChanged(emittedValue, localValue) &&\n    \
      \       !(prevSetValue !== EMPTY_OBJ && hasChanged(value, prevSetValue))\n \
      \        ) {\n           return\n@@ -74,7 +75,7 @@ export function useModel(\n\
      \           localValue = value\n           trigger()\n         }\n-        const\
      \ emittedValue = options.set ? options.set(value) : value\n+\n         i.emit(`update:${name}`,\
      \ emittedValue)\n         // #10279: if the local value is converted via a setter\
      \ but the value\n         // emitted to parent was the same, the parent will\
      \ not trigger any"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
- description: 'fix: Revert "fix(types/ref): allow getter and setter types to be unrelated
    (#11442)"'
  vars:
    system_prompt: file://../data/prompts/system/diff_analyzer.txt
    user_prompt: "diff --git a/packages/dts-test/ref.test-d.ts b/packages/dts-test/ref.test-d.ts\n\
      index 46d39214b..1456c5232 100644\n--- a/packages/dts-test/ref.test-d.ts\n+++\
      \ b/packages/dts-test/ref.test-d.ts\n@@ -172,16 +172,6 @@ describe('ref with\
      \ generic', <T extends { name: string }>() => {\n   expectType<string>(ss.value.name)\n\
      \ })\n \n-describe('allow getter and setter types to be unrelated', <T>() =>\
      \ {\n-  const a = { b: ref(0) }\n-  const c = ref(a)\n-  c.value = a\n-\n- \
      \ const d = {} as T\n-  const e = ref(d)\n-  e.value = d\n-})\n-\n // shallowRef\n\
      \ type Status = 'initial' | 'ready' | 'invalidating'\n const shallowStatus =\
      \ shallowRef<Status>('initial')\ndiff --git a/packages/dts-test/watch.test-d.ts\
      \ b/packages/dts-test/watch.test-d.ts\nindex 6c8576f0c..45c898ef6 100644\n---\
      \ a/packages/dts-test/watch.test-d.ts\n+++ b/packages/dts-test/watch.test-d.ts\n\
      @@ -1,6 +1,5 @@\n import {\n   type ComputedRef,\n-  type MaybeRef,\n   type\
      \ Ref,\n   computed,\n   defineComponent,\n@@ -204,10 +203,3 @@ defineComponent({\n\
      \     expectType<{ foo: string }>(value)\n   })\n }\n-\n-{\n-  const css: MaybeRef<string>\
      \ = ''\n-  watch(ref(css), value => {\n-    expectType<string>(value)\n-  })\n\
      -}\ndiff --git a/packages/reactivity/src/ref.ts b/packages/reactivity/src/ref.ts\n\
      index 6e22d1bcd..3e9b05062 100644\n--- a/packages/reactivity/src/ref.ts\n+++\
      \ b/packages/reactivity/src/ref.ts\n@@ -30,9 +30,8 @@ import { warn } from './warning'\n\
      \ declare const RefSymbol: unique symbol\n export declare const RawSymbol: unique\
      \ symbol\n \n-export interface Ref<T = any, S = T> {\n-  get value(): T\n- \
      \ set value(_: S)\n+export interface Ref<T = any> {\n+  value: T\n   /**\n \
      \   * Type differentiator only.\n    * We need this to be in public d.ts but\
      \ don't want it to show up in IDE\n@@ -109,7 +108,7 @@ export function isRef(r:\
      \ any): r is Ref {\n  * @param value - The object to wrap in the ref.\n  * @see\
      \ {@link https://vuejs.org/api/reactivity-core.html#ref}\n  */\n-export function\
      \ ref<T>(value: T): Ref<UnwrapRef<T>, UnwrapRef<T> | T>\n+export function ref<T>(value:\
      \ T): Ref<UnwrapRef<T>>\n export function ref<T = any>(): Ref<T | undefined>\n\
      \ export function ref(value?: unknown) {\n   return createRef(value, false)\n\
      diff --git a/packages/runtime-core/src/apiWatch.ts b/packages/runtime-core/src/apiWatch.ts\n\
      index 8b570bc28..cdf8b8c88 100644\n--- a/packages/runtime-core/src/apiWatch.ts\n\
      +++ b/packages/runtime-core/src/apiWatch.ts\n@@ -46,7 +46,7 @@ import { useSSRContext\
      \ } from './helpers/useSsrContext'\n \n export type WatchEffect = (onCleanup:\
      \ OnCleanup) => void\n \n-export type WatchSource<T = any> = Ref<T, any> | ComputedRef<T>\
      \ | (() => T)\n+export type WatchSource<T = any> = Ref<T> | ComputedRef<T> |\
      \ (() => T)\n \n export type WatchCallback<V = any, OV = any> = (\n   value:\
      \ V,"
    system_assertion_prompt: file://assertion_prompts/diff_analyzer_assertion.md
  assert:
  - type: llm-rubric
    value: '{{system_assertion_prompt}}'
