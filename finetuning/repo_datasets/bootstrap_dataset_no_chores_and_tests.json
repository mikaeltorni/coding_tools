[
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dom/event-handler.js b/js/src/dom/event-handler.js\nindex 8bed9b39b..87f936b41 100644\n--- a/js/src/dom/event-handler.js\n+++ b/js/src/dom/event-handler.js\n@@ -234,7 +234,7 @@ const EventHandler = {\n \n     if (typeof callable !== 'undefined') {\n       // Simplest case: handler is passed, remove that listener ONLY.\n-      if (!storeElementEvent) {\n+      if (!Object.keys(storeElementEvent).length) {\n         return\n       }\n ",
    "output": "fix: fix possible bug on event handler. (#36561)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_algolia.scss b/site/assets/scss/_algolia.scss\ndeleted file mode 100644\nindex ab22ad9a7..000000000\n--- a/site/assets/scss/_algolia.scss\n+++ /dev/null\n@@ -1,96 +0,0 @@\n-// Docsearch theming\n-\n-// stylelint-disable selector-class-pattern\n-\n-.algolia-autocomplete {\n-  width: 100%;\n-}\n-\n-.ds-dropdown-menu {\n-  width: 100%;\n-  padding: $dropdown-padding-y 0;\n-  margin: $dropdown-spacer 0 0;\n-  @include font-size(.875rem);\n-  background-color: $dropdown-bg;\n-  background-clip: padding-box;\n-  border: $dropdown-border-width solid $dropdown-border-color;\n-  @include border-radius($dropdown-border-radius);\n-  box-shadow: $dropdown-box-shadow;\n-\n-  @include media-breakpoint-up(md) {\n-    width: 500px;\n-    margin-top: .5rem;\n-    margin-left: -110px;\n-  }\n-}\n-\n-.algolia-docsearch-suggestion--category-header {\n-  padding: .125rem 1rem;\n-  font-weight: 600;\n-  color: $bd-violet;\n-\n-  :not(.algolia-docsearch-suggestion__main) > & {\n-    display: none;\n-  }\n-\n-  .ds-suggestion:not(:first-child) & {\n-    padding-top: .75rem;\n-    margin-top: .75rem;\n-    border-top: 1px solid rgba(0, 0, 0, .1);\n-  }\n-}\n-\n-.algolia-docsearch-suggestion--content {\n-  padding: .25rem 1rem;\n-\n-  .ds-cursor & {\n-    background-color: rgba($bd-purple-light, .2);\n-  }\n-}\n-\n-.algolia-docsearch-suggestion {\n-  display: block;\n-  text-decoration: none;\n-}\n-\n-.algolia-docsearch-suggestion--subcategory-column {\n-  display: none;\n-}\n-\n-.algolia-docsearch-suggestion--subcategory-inline {\n-  display: inline;\n-  color: $gray-700;\n-\n-  &::after {\n-    padding: 0 .25rem;\n-    content: \"/\";\n-  }\n-}\n-\n-.algolia-docsearch-suggestion--title {\n-  display: inline;\n-  font-weight: 500;\n-  color: $gray-800;\n-}\n-\n-.algolia-docsearch-suggestion--text {\n-  color: $gray-800;\n-  @include font-size(.75rem);\n-}\n-\n-.algolia-docsearch-suggestion--highlight {\n-  color: $purple;\n-  background-color: rgba($purple, .1);\n-}\n-\n-.algolia-docsearch-footer {\n-  padding: .5rem 1rem 0;\n-  margin-top: .625rem;\n-  @include font-size(.75rem);\n-  color: $gray-600;\n-  border-top: 1px solid rgba(0, 0, 0, .1);\n-}\n-\n-.algolia-docsearch-footer--logo {\n-  color: inherit;\n-}\ndiff --git a/site/assets/scss/docs.scss b/site/assets/scss/docs.scss\nindex f1390e2fa..521493461 100644\n--- a/site/assets/scss/docs.scss\n+++ b/site/assets/scss/docs.scss\n@@ -57,4 +57,3 @@ $enable-cssgrid: true; // stylelint-disable-line scss/dollar-variable-default\n // Load docs dependencies\n @import \"syntax\";\n @import \"anchor\";\n-@import \"algolia\";",
    "output": "docs: remove unused _algolia.scss"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/content/reboot.md b/site/content/docs/5.2/content/reboot.md\nindex 4a1521cd0..911155af2 100644\n--- a/site/content/docs/5.2/content/reboot.md\n+++ b/site/content/docs/5.2/content/reboot.md\n@@ -106,8 +106,8 @@ The `<hr>` element has been simplified. Similar to browser defaults, `<hr>`s are\n   <hr>\n </div>\n \n-<hr class=\"text-danger border-2 opacity-50\">\n-<hr class=\"border-primary border-3 opacity-75\">\n+<hr class=\"border border-danger border-2 opacity-50\">\n+<hr class=\"border border-primary border-3 opacity-75\">\n {{< /example >}}\n \n ## Lists",
    "output": "docs: fix Reboot Horizontal rules using border utilities"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/static/docs/5.2/assets/img/examples/navbars-offcanvas.png b/site/static/docs/5.2/assets/img/examples/navbars-offcanvas.png\nindex 81b000dbf..be2d1487c 100644\nBinary files a/site/static/docs/5.2/assets/img/examples/navbars-offcanvas.png and b/site/static/docs/5.2/assets/img/examples/navbars-offcanvas.png differ\ndiff --git a/site/static/docs/5.2/assets/img/examples/navbars-offcanvas@2x.png b/site/static/docs/5.2/assets/img/examples/navbars-offcanvas@2x.png\nindex af5313436..d2b947176 100644\nBinary files a/site/static/docs/5.2/assets/img/examples/navbars-offcanvas@2x.png and b/site/static/docs/5.2/assets/img/examples/navbars-offcanvas@2x.png differ\ndiff --git a/site/static/docs/5.2/assets/img/favicons/favicon-16x16.png b/site/static/docs/5.2/assets/img/favicons/favicon-16x16.png\nindex 46ab7f8c8..f4754c1a3 100644\nBinary files a/site/static/docs/5.2/assets/img/favicons/favicon-16x16.png and b/site/static/docs/5.2/assets/img/favicons/favicon-16x16.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/bootstrap-parcel.png b/site/static/docs/5.2/assets/img/guides/bootstrap-parcel.png\nindex 244fd5edb..4cfa46cf3 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/bootstrap-parcel.png and b/site/static/docs/5.2/assets/img/guides/bootstrap-parcel.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/bootstrap-parcel@2x.png b/site/static/docs/5.2/assets/img/guides/bootstrap-parcel@2x.png\nindex 7f432ec56..4f7165879 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/bootstrap-parcel@2x.png and b/site/static/docs/5.2/assets/img/guides/bootstrap-parcel@2x.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/bootstrap-webpack.png b/site/static/docs/5.2/assets/img/guides/bootstrap-webpack.png\nindex 325c83fb9..189b7f494 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/bootstrap-webpack.png and b/site/static/docs/5.2/assets/img/guides/bootstrap-webpack.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/bootstrap-webpack@2x.png b/site/static/docs/5.2/assets/img/guides/bootstrap-webpack@2x.png\nindex ccfb0dec3..7006386f0 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/bootstrap-webpack@2x.png and b/site/static/docs/5.2/assets/img/guides/bootstrap-webpack@2x.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/parcel-dev-server-bootstrap.png b/site/static/docs/5.2/assets/img/guides/parcel-dev-server-bootstrap.png\nindex 30a4bb43a..a7aa65be0 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/parcel-dev-server-bootstrap.png and b/site/static/docs/5.2/assets/img/guides/parcel-dev-server-bootstrap.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/parcel-dev-server.png b/site/static/docs/5.2/assets/img/guides/parcel-dev-server.png\nindex 345d388cb..1833fb8a0 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/parcel-dev-server.png and b/site/static/docs/5.2/assets/img/guides/parcel-dev-server.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/webpack-dev-server-bootstrap.png b/site/static/docs/5.2/assets/img/guides/webpack-dev-server-bootstrap.png\nindex 96e56c0a9..fc37d92d3 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/webpack-dev-server-bootstrap.png and b/site/static/docs/5.2/assets/img/guides/webpack-dev-server-bootstrap.png differ\ndiff --git a/site/static/docs/5.2/assets/img/guides/webpack-dev-server.png b/site/static/docs/5.2/assets/img/guides/webpack-dev-server.png\nindex e9dd9d4be..ecba18967 100644\nBinary files a/site/static/docs/5.2/assets/img/guides/webpack-dev-server.png and b/site/static/docs/5.2/assets/img/guides/webpack-dev-server.png differ",
    "output": "docs: improve image compression (#36346)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-versions.html b/site/layouts/partials/docs-versions.html\nindex bef4f20ec..54cf3a2e2 100644\n--- a/site/layouts/partials/docs-versions.html\n+++ b/site/layouts/partials/docs-versions.html\n@@ -17,7 +17,7 @@\n   <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"bd-versions\">\n     <li><h6 class=\"dropdown-header\">v5 releases</h6></li>\n     <li>\n-      <a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/{{ $versions_link }}\">\n+      <a class=\"dropdown-item current\" aria-current=\"true\" href=\"{{ if .IsHome }}/{{ else }}/docs/{{ .Site.Params.docs_version }}/{{ $versions_link }}{{ end }}\">\n         Latest ({{ .Site.Params.docs_version }}.x)\n       </a>\n     </li>",
    "output": "docs: link to the root page for the homepage (#36344)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-versions.html b/site/layouts/partials/docs-versions.html\nindex fb340bb59..bef4f20ec 100644\n--- a/site/layouts/partials/docs-versions.html\n+++ b/site/layouts/partials/docs-versions.html\n@@ -5,9 +5,9 @@\n \n {{- $versions_link := \"\" -}}\n {{- if and (eq .Layout \"docs\") (eq $page_version .Site.Params.docs_version) -}}\n-  {{- .Scratch.Set \"versions_link\" (printf \"%s/%s/\" $group_slug $page_slug) -}}\n+  {{- $versions_link = printf \"%s/%s/\" $group_slug $page_slug -}}\n {{- else if (eq .Layout \"single\") }}\n-  {{- .Scratch.Set \"versions_link\" (printf \"%s/\" $page_slug) -}}\n+  {{- $versions_link = printf \"%s/\" $page_slug -}}\n {{- end }}\n \n <li class=\"nav-item dropdown\">\n@@ -17,7 +17,7 @@\n   <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"bd-versions\">\n     <li><h6 class=\"dropdown-header\">v5 releases</h6></li>\n     <li>\n-      <a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/{{ .Scratch.Get \"versions_link\" }}\">\n+      <a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/{{ $versions_link }}\">\n         Latest ({{ .Site.Params.docs_version }}.x)\n       </a>\n     </li>\n@@ -25,14 +25,14 @@\n       {{- if (eq .Page.Params.added \"5.2\") }}\n         <div class=\"dropdown-item disabled\">v5.1.3</div>\n       {{- else }}\n-        <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/5.1/{{ .Scratch.Get \"versions_link\" }}\">v5.1.3</a>\n+        <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/5.1/{{ $versions_link }}\">v5.1.3</a>\n       {{- end }}\n     </li>\n     <li>\n       {{- if or (eq .Page.Params.added \"5.1\") (eq .Page.Params.added \"5.2\") }}\n         <div class=\"dropdown-item disabled\">v5.0.2</div>\n       {{- else }}\n-        <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/5.0/{{ .Scratch.Get \"versions_link\" }}\">v5.0.2</a>\n+        <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/5.0/{{ $versions_link }}\">v5.0.2</a>\n       {{- end }}\n     </li>\n     <li><hr class=\"dropdown-divider\"></li>",
    "output": "docs: drop Scratch usage (#36337)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/dropdowns.md b/site/content/docs/5.1/components/dropdowns.md\nindex 4308d5c62..7971e0dfd 100644\n--- a/site/content/docs/5.1/components/dropdowns.md\n+++ b/site/content/docs/5.1/components/dropdowns.md\n@@ -481,7 +481,7 @@ Trigger dropdown menus above elements by adding `.dropup` to the parent element.\n Make the dropup menu centered above the toggle with `.dropup-center` on the parent element.\n \n {{< example >}}\n-<div class=\"dropup-center\">\n+<div class=\"dropup-center dropup\">\n   <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropupCenterBtn\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n     Centered dropup\n   </button>",
    "output": "docs: add missing `.dropup` in dropup centered example (#35948)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/translations.yml b/site/data/translations.yml\nindex c34dc7b1a..2c4da4263 100644\n--- a/site/data/translations.yml\n+++ b/site/data/translations.yml\n@@ -20,7 +20,7 @@\n \n - name: Japanese\n   code: ja\n-  description: Bootstrap 4 \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n+  description: Bootstrap 5 \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n   url: https://getbootstrap.jp/\n \n - name: Russian",
    "output": "docs: Update Japanese translation"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/examples/carousel/carousel.css b/site/content/docs/5.1/examples/carousel/carousel.css\nindex 8b4328c79..0bdf9768d 100644\n--- a/site/content/docs/5.1/examples/carousel/carousel.css\n+++ b/site/content/docs/5.1/examples/carousel/carousel.css\n@@ -52,11 +52,12 @@ body {\n }\n \n /* Thin out the marketing headings */\n+/* rtl:begin:remove */\n .featurette-heading {\n-  /* rtl:remove */\n   letter-spacing: -.05rem;\n }\n \n+/* rtl:end:remove */\n \n /* RESPONSIVE CSS\n -------------------------------------------------- */\ndiff --git a/site/content/docs/5.1/examples/carousel/carousel.rtl.css b/site/content/docs/5.1/examples/carousel/carousel.rtl.css\nindex 203757e80..d20a8111a 100644\n--- a/site/content/docs/5.1/examples/carousel/carousel.rtl.css\n+++ b/site/content/docs/5.1/examples/carousel/carousel.rtl.css\n@@ -49,6 +49,7 @@ body {\n   margin: 5rem 0; /* Space out the Bootstrap <hr> more */\n }\n \n+/* Thin out the marketing headings */\n \n /* RESPONSIVE CSS\n -------------------------------------------------- */",
    "output": "docs(example): fix RTL carousel example"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_forms.scss b/scss/mixins/_forms.scss\nindex dc5bdb0b9..81cd2e3ac 100644\n--- a/scss/mixins/_forms.scss\n+++ b/scss/mixins/_forms.scss\n@@ -104,6 +104,14 @@\n     }\n   }\n \n+  .form-control-color {\n+    @include form-validation-state-selector($state) {\n+      @if $enable-validation-icons {\n+        width: add($form-color-width, $input-height-inner);\n+      }\n+    }\n+  }\n+\n   .form-check-input {\n     @include form-validation-state-selector($state) {\n       border-color: $color;",
    "output": "fix(forms): color input with validation icon"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/icons.yml b/site/data/icons.yml\nindex 4abbfd680..c00a34ec5 100644\n--- a/site/data/icons.yml\n+++ b/site/data/icons.yml\n@@ -23,3 +23,5 @@ more:\n     website: https://icons8.com/\n   - name: icofont\n     website: https://icofont.com/\n+  - name: Tabler Icons\n+    website: https://tabler-icons.io/",
    "output": "docs: add Tabler Icons to list of icon packs (#35497)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/issue-close-require.yml b/.github/workflows/issue-close-require.yml\nnew file mode 100644\nindex 000000000..b251cd75e\n--- /dev/null\n+++ b/.github/workflows/issue-close-require.yml\n@@ -0,0 +1,19 @@\n+name: Close Issue Awaiting Reply\n+\n+on:\n+  schedule:\n+    - cron: \"0 0 * * *\"\n+\n+jobs:\n+  issue-close-require:\n+    runs-on: ubuntu-latest\n+    if: github.repository == 'twbs/bootstrap'\n+    steps:\n+      - name: awaiting reply\n+        uses: actions-cool/issues-helper@v3\n+        with:\n+          actions: \"close-issues\"\n+          labels: \"awaiting-reply\"\n+          inactive-day: 14\n+          body: |\n+            As the issue was labeled with `awaiting-reply`, but there has been no response in 14 days, this issue will be closed. If you have any questions, you can comment/reply.\ndiff --git a/.github/workflows/issue-labeled.yml b/.github/workflows/issue-labeled.yml\nnew file mode 100644\nindex 000000000..74c194679\n--- /dev/null\n+++ b/.github/workflows/issue-labeled.yml\n@@ -0,0 +1,19 @@\n+name: Issue Labeled\n+\n+on:\n+  issues:\n+    types: [labeled]\n+\n+jobs:\n+  issue-labeled:\n+    if: github.repository == 'twbs/bootstrap'\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: awaiting reply\n+        if: github.event.label.name == 'awaiting-reply'\n+        uses: actions-cool/issues-helper@v3\n+        with:\n+          actions: \"create-comment\"\n+          token: ${{ secrets.GITHUB_TOKEN }}\n+          body: |\n+            Hello @${{ github.event.issue.user.login }}. Bug reports must include a **live demo** of the issue. Per our [contributing guidelines](https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md), please create a reduced test case on [CodePen](https://codepen.io/) or [JS Bin](https://jsbin.com/) and report back with your link, Bootstrap version, and specific browser and Operating System details.",
    "output": "ci: add issues-helper (#35846)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/buttons.md b/site/content/docs/5.1/components/buttons.md\nindex 1f279ffd7..4e90c398e 100644\n--- a/site/content/docs/5.1/components/buttons.md\n+++ b/site/content/docs/5.1/components/buttons.md\n@@ -153,9 +153,9 @@ Visually, these toggle buttons are identical to the [checkbox toggle buttons]({{\n Add `data-bs-toggle=\"button\"` to toggle a button's `active` state. If you're pre-toggling a button, you must manually add the `.active` class **and** `aria-pressed=\"true\"` to ensure that it is conveyed appropriately to assistive technologies.\n \n {{< example >}}\n-<button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"button\" autocomplete=\"off\">Toggle button</button>\n-<button type=\"button\" class=\"btn btn-primary active\" data-bs-toggle=\"button\" autocomplete=\"off\" aria-pressed=\"true\">Active toggle button</button>\n-<button type=\"button\" class=\"btn btn-primary\" disabled data-bs-toggle=\"button\" autocomplete=\"off\">Disabled toggle button</button>\n+<button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"button\">Toggle button</button>\n+<button type=\"button\" class=\"btn btn-primary active\" data-bs-toggle=\"button\" aria-pressed=\"true\">Active toggle button</button>\n+<button type=\"button\" class=\"btn btn-primary\" disabled data-bs-toggle=\"button\">Disabled toggle button</button>\n {{< /example >}}\n \n {{< example >}}",
    "output": "docs: remove moot autocomplete attributes (#35741)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/util/index.js b/js/src/util/index.js\nindex 8bd614d40..4e52fd3eb 100644\n--- a/js/src/util/index.js\n+++ b/js/src/util/index.js\n@@ -128,7 +128,26 @@ const isVisible = element => {\n     return false\n   }\n \n-  return getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n+  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n+  // Handle `details` element as its content may falsie appear visible when it is closed\n+  const closedDetails = element.closest('details:not([open])')\n+\n+  if (!closedDetails) {\n+    return elementIsVisible\n+  }\n+\n+  if (closedDetails !== element) {\n+    const summary = element.closest('summary')\n+    if (summary && summary.parentNode !== closedDetails) {\n+      return false\n+    }\n+\n+    if (summary === null) {\n+      return false\n+    }\n+  }\n+\n+  return elementIsVisible\n }\n \n const isDisabled = element => {\ndiff --git a/js/tests/unit/util/index.spec.js b/js/tests/unit/util/index.spec.js\nindex 52e64faa9..9d8c5ed98 100644\n--- a/js/tests/unit/util/index.spec.js\n+++ b/js/tests/unit/util/index.spec.js\n@@ -320,6 +320,42 @@ describe('Util', () => {\n \n       expect(Util.isVisible(div)).toBeFalse()\n     })\n+\n+    it('should return true if its a closed details element', () => {\n+      fixtureEl.innerHTML = '<details id=\"element\"></details>'\n+\n+      const div = fixtureEl.querySelector('#element')\n+\n+      expect(Util.isVisible(div)).toBeTrue()\n+    })\n+\n+    it('should return true if the element is visible inside an open details element', () => {\n+      fixtureEl.innerHTML = [\n+        '<details open>',\n+        '  <div id=\"element\"></div>',\n+        '</details>'\n+      ].join('')\n+\n+      const div = fixtureEl.querySelector('#element')\n+\n+      expect(Util.isVisible(div)).toBeTrue()\n+    })\n+\n+    it('should return true if the element is a visible summary in a closed details element', () => {\n+      fixtureEl.innerHTML = [\n+        '<details>',\n+        '  <summary id=\"element-1\">',\n+        '    <span id=\"element-2\"></span>',\n+        '  </summary>',\n+        '</details>'\n+      ].join('')\n+\n+      const element1 = fixtureEl.querySelector('#element-1')\n+      const element2 = fixtureEl.querySelector('#element-2')\n+\n+      expect(Util.isVisible(element1)).toBeTrue()\n+      expect(Util.isVisible(element2)).toBeTrue()\n+    })\n   })\n \n   describe('isDisabled', () => {",
    "output": "fix: `isVisible` function behavior in case of a `<details>` element, on chrome 97 (#35682)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/helpers/position.md b/site/content/docs/5.1/helpers/position.md\nindex 8b333bdfc..b4e1f71f9 100644\n--- a/site/content/docs/5.1/helpers/position.md\n+++ b/site/content/docs/5.1/helpers/position.md\n@@ -39,6 +39,7 @@ Responsive variations also exist for `.sticky-top` utility.\n <div class=\"sticky-md-top\">Stick to the top on viewports sized MD (medium) or wider</div>\n <div class=\"sticky-lg-top\">Stick to the top on viewports sized LG (large) or wider</div>\n <div class=\"sticky-xl-top\">Stick to the top on viewports sized XL (extra-large) or wider</div>\n+<div class=\"sticky-xxl-top\">Stick to the top on viewports sized XXL (extra-extra-large) or wider</div>\n ```\n \n ## Sticky bottom\n@@ -58,4 +59,5 @@ Responsive variations also exist for `.sticky-bottom` utility.\n <div class=\"sticky-md-bottom\">Stick to the bottom on viewports sized MD (medium) or wider</div>\n <div class=\"sticky-lg-bottom\">Stick to the bottom on viewports sized LG (large) or wider</div>\n <div class=\"sticky-xl-bottom\">Stick to the bottom on viewports sized XL (extra-large) or wider</div>\n+<div class=\"sticky-xxl-bottom\">Stick to the bottom on viewports sized XXL (extra-extra-large) or wider</div>\n ```",
    "output": "docs: add reference to sticky-xxl utils (#35579)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/alerts.md b/site/content/docs/5.1/components/alerts.md\nindex 97a9d4e3f..27feda577 100644\n--- a/site/content/docs/5.1/components/alerts.md\n+++ b/site/content/docs/5.1/components/alerts.md\n@@ -162,7 +162,7 @@ When an alert is dismissed, the element is completely removed from the page stru\n \n <small class=\"d-inline-flex px-2 py-1 font-monospace text-muted border rounded-3\">Added in v5.2.0</small>\n \n-As part of Bootstrap's evolving CSS variables approach, buttons now use local CSS variables on `.alert` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n+As part of Bootstrap's evolving CSS variables approach, alerts now use local CSS variables on `.alert` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n \n {{< scss-docs name=\"alert-css-vars\" file=\"scss/_alert.scss\" >}}\n ",
    "output": "fix(docs): typo in Alerts CSS Variables description (#35575)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_alert.scss b/scss/_alert.scss\nindex ed47806e2..c8275e8d2 100644\n--- a/scss/_alert.scss\n+++ b/scss/_alert.scss\n@@ -7,7 +7,7 @@\n   --#{$variable-prefix}alert-bg: transparent;\n   --#{$variable-prefix}alert-padding: #{$alert-padding-y $alert-padding-x};\n   --#{$variable-prefix}alert-margin-bottom: #{$alert-margin-bottom};\n-  --#{$variable-prefix}alert-color: #{$alert-padding-y $alert-padding-x};\n+  --#{$variable-prefix}alert-color: inherit;\n   --#{$variable-prefix}alert-border-color: transparent;\n   --#{$variable-prefix}alert-border: #{$alert-border-width} solid var(--#{$variable-prefix}alert-border-color);\n   --#{$variable-prefix}alert-border-radius: #{$alert-border-radius};\n@@ -16,6 +16,7 @@\n   position: relative;\n   padding: var(--#{$variable-prefix}alert-padding);\n   margin-bottom: var(--#{$variable-prefix}alert-margin-bottom);\n+  color: var(--#{$variable-prefix}alert-color);\n   background-color: var(--#{$variable-prefix}alert-bg);\n   border: var(--#{$variable-prefix}alert-border);\n   border-radius: var(--#{$variable-prefix}alert-border-radius, 0); // stylelint-disable-line property-disallowed-list",
    "output": "fix(alerts): ensure color is set and used (#35571)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/getting-started/contents.md b/site/content/docs/5.1/getting-started/contents.md\nindex 4e86d5592..07f6bdb98 100644\n--- a/site/content/docs/5.1/getting-started/contents.md\n+++ b/site/content/docs/5.1/getting-started/contents.md\n@@ -171,7 +171,7 @@ bootstrap/\n \u251c\u2500\u2500 site/\n \u2502   \u2514\u2500\u2500content/\n \u2502      \u2514\u2500\u2500 docs/\n-\u2502          \u2514\u2500\u2500 5.1/\n+\u2502          \u2514\u2500\u2500 {{< param docs_version >}}/\n \u2502              \u2514\u2500\u2500 examples/\n \u251c\u2500\u2500 js/\n \u2514\u2500\u2500 scss/",
    "output": "docs: Use param to set Bootstrap version in Contents page (#35556)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/utilities/flex.md b/site/content/docs/5.1/utilities/flex.md\nindex bbb1824b4..b9d359ab1 100644\n--- a/site/content/docs/5.1/utilities/flex.md\n+++ b/site/content/docs/5.1/utilities/flex.md\n@@ -622,6 +622,7 @@ Responsive variations also exist for `align-content`.\n - `.align-content{{ .abbr }}-start`\n - `.align-content{{ .abbr }}-end`\n - `.align-content{{ .abbr }}-center`\n+- `.align-content{{ .abbr }}-between`\n - `.align-content{{ .abbr }}-around`\n - `.align-content{{ .abbr }}-stretch`\n {{- end -}}",
    "output": "docs: Add responsive variations for align-content-between (#35532)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 6a84597e9..0a3426e80 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -2,6 +2,7 @@ name: BrowserStack\n \n on:\n   push:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex e895f126f..14deaa97f 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml\nindex de6626a15..2aa437417 100644\n--- a/.github/workflows/codeql.yml\n+++ b/.github/workflows/codeql.yml\n@@ -14,6 +14,7 @@ on:\n       - \"!dependabot/**\"\n   schedule:\n     - cron: \"0 2 * * 5\"\n+  workflow_dispatch:\n \n jobs:\n   analyze:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 71e6042b4..0059dc44d 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 8bdcf9671..cdb2917d9 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 1f03d8cc5..7af17ceb6 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex aef1341ed..418232a66 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 36c4e1c18..8a958a7a9 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/release-notes.yml b/.github/workflows/release-notes.yml\nindex ab2f37694..bbd0a2448 100644\n--- a/.github/workflows/release-notes.yml\n+++ b/.github/workflows/release-notes.yml\n@@ -4,6 +4,7 @@ on:\n   push:\n     branches:\n       - main\n+  workflow_dispatch:\n \n jobs:\n   update_release_draft:",
    "output": "ci: add `workflow_dispatch` (#35454)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/offcanvas.md b/site/content/docs/5.1/components/offcanvas.md\nindex a5bf9426f..b1dd9c601 100644\n--- a/site/content/docs/5.1/components/offcanvas.md\n+++ b/site/content/docs/5.1/components/offcanvas.md\n@@ -95,7 +95,7 @@ Try the top, right, and bottom examples out below.\n \n <div class=\"offcanvas offcanvas-top\" tabindex=\"-1\" id=\"offcanvasTop\" aria-labelledby=\"offcanvasTopLabel\">\n   <div class=\"offcanvas-header\">\n-    <h5 id=\"offcanvasTopLabel\">Offcanvas top</h5>\n+    <h5 class=\"offcanvas-title\" id=\"offcanvasTopLabel\">Offcanvas top</h5>\n     <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\n   </div>\n   <div class=\"offcanvas-body\">\n@@ -109,7 +109,7 @@ Try the top, right, and bottom examples out below.\n \n <div class=\"offcanvas offcanvas-end\" tabindex=\"-1\" id=\"offcanvasRight\" aria-labelledby=\"offcanvasRightLabel\">\n   <div class=\"offcanvas-header\">\n-    <h5 id=\"offcanvasRightLabel\">Offcanvas right</h5>\n+    <h5 class=\"offcanvas-title\" id=\"offcanvasRightLabel\">Offcanvas right</h5>\n     <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\n   </div>\n   <div class=\"offcanvas-body\">",
    "output": "fix(offcanvas): Adding titles class where missing (#35264)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex 41e51f300..d6f4fd445 100644\n--- a/README.md\n+++ b/README.md\n@@ -53,7 +53,7 @@ Several quick start options are available:\n - Install with [Composer](https://getcomposer.org/): `composer require twbs/bootstrap:5.1.2`\n - Install with [NuGet](https://www.nuget.org/): CSS: `Install-Package bootstrap` Sass: `Install-Package bootstrap.sass`\n \n-Read the [Getting started page](https://getbootstrap.com/docs/5.1/getting-started/introduction/) for information on the framework contents, templates and examples, and more.\n+Read the [Getting started page](https://getbootstrap.com/docs/5.1/getting-started/introduction/) for information on the framework contents, templates, examples, and more.\n \n \n ## Status",
    "output": "docs: remove 'and' in middle of list (#35113)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/modal.md b/site/content/docs/5.1/components/modal.md\nindex 8960eb5bb..8255a7364 100644\n--- a/site/content/docs/5.1/components/modal.md\n+++ b/site/content/docs/5.1/components/modal.md\n@@ -512,7 +512,7 @@ Toggle between multiple modals with some clever placement of the `data-bs-target\n         Show a second modal and hide this one with the button below.\n       </div>\n       <div class=\"modal-footer\">\n-        <button class=\"btn btn-primary\" data-bs-target=\"#exampleModalToggle2\" data-bs-toggle=\"modal\" data-bs-dismiss=\"modal\">Open second modal</button>\n+        <button class=\"btn btn-primary\" data-bs-target=\"#exampleModalToggle2\" data-bs-toggle=\"modal\">Open second modal</button>\n       </div>\n     </div>\n   </div>",
    "output": "docs: remove `data-bs-dismiss=\"modal\"` leftover (#35042)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/config.yml b/config.yml\nindex f14950f39..622f43df3 100644\n--- a/config.yml\n+++ b/config.yml\n@@ -75,5 +75,5 @@ params:\n     js_hash:          \"sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/\"\n     js_bundle:        \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js\"\n     js_bundle_hash:   \"sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ\"\n-    popper:           \"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\"\n+    popper:           \"https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.1/dist/umd/popper.min.js\"\n     popper_hash:      \"sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN\"",
    "output": "docs: fix Popper version number in config (#35067)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/forms/checks-radios.md b/site/content/docs/5.1/forms/checks-radios.md\nindex 0f5507f54..efd040de0 100644\n--- a/site/content/docs/5.1/forms/checks-radios.md\n+++ b/site/content/docs/5.1/forms/checks-radios.md\n@@ -102,23 +102,23 @@ Add the `disabled` attribute and the associated `<label>`s are automatically sty\n \n ## Switches\n \n-A switch has the markup of a custom checkbox but uses the `.form-switch` class to render a toggle switch. Switches also support the `disabled` attribute.\n+A switch has the markup of a custom checkbox but uses the `.form-switch` class to render a toggle switch. Consider using `role=\"switch\"` to more accurately convey the nature of the control to assistive technologies that support this role. In older assistive technologies, it will simply be announced as a regular checkbox as a fallback. Switches also support the `disabled` attribute.\n \n {{< example >}}\n <div class=\"form-check form-switch\">\n-  <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\">\n+  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\">\n   <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Default switch checkbox input</label>\n </div>\n <div class=\"form-check form-switch\">\n-  <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\" checked>\n+  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" checked>\n   <label class=\"form-check-label\" for=\"flexSwitchCheckChecked\">Checked switch checkbox input</label>\n </div>\n <div class=\"form-check form-switch\">\n-  <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDisabled\" disabled>\n+  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDisabled\" disabled>\n   <label class=\"form-check-label\" for=\"flexSwitchCheckDisabled\">Disabled switch checkbox input</label>\n </div>\n <div class=\"form-check form-switch\">\n-  <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckCheckedDisabled\" checked disabled>\n+  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckCheckedDisabled\" checked disabled>\n   <label class=\"form-check-label\" for=\"flexSwitchCheckCheckedDisabled\">Disabled checked switch checkbox input</label>\n </div>\n {{< /example >}}",
    "output": "docs: Add role=\"switch\" to switches (#34824)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/config.yml b/config.yml\nindex 137ca4d32..f14950f39 100644\n--- a/config.yml\n+++ b/config.yml\n@@ -50,7 +50,7 @@ params:\n   current_version:      \"5.1.1\"\n   current_ruby_version: \"5.1.1\"\n   docs_version:         \"5.1\"\n-  rfs_version:          \"9.0.3\"\n+  rfs_version:          \"v9.0.6\"\n   github_org:           \"https://github.com/twbs\"\n   repo:                 \"https://github.com/twbs/bootstrap\"\n   twitter:              \"getbootstrap\"\ndiff --git a/site/content/docs/5.1/getting-started/rfs.md b/site/content/docs/5.1/getting-started/rfs.md\nindex f440924d1..5aa6840a4 100644\n--- a/site/content/docs/5.1/getting-started/rfs.md\n+++ b/site/content/docs/5.1/getting-started/rfs.md\n@@ -8,13 +8,13 @@ toc: true\n \n ## What is RFS?\n \n-Bootstrap's side project [RFS](https://github.com/twbs/rfs/tree/v{{< param \"rfs_version\" >}}) is a unit resizing engine which was initially developed to resize font sizes (hence its abbreviation for Responsive Font Sizes). Nowadays RFS is capable of rescaling most CSS properties with unit values like `margin`, `padding`, `border-radius`, or even `box-shadow`.\n+Bootstrap's side project [RFS](https://github.com/twbs/rfs/tree/{{< param \"rfs_version\" >}}) is a unit resizing engine which was initially developed to resize font sizes (hence its abbreviation for Responsive Font Sizes). Nowadays RFS is capable of rescaling most CSS properties with unit values like `margin`, `padding`, `border-radius`, or even `box-shadow`.\n \n The mechanism automatically calculates the appropriate values based on the dimensions of the browser viewport. It will be compiled into `calc()` functions with a mix of `rem` and viewport units to enable the responsive scaling behavior.\n \n ## Using RFS\n \n-The mixins are included in Bootstrap and are available once you include Bootstrap's `scss`. RFS can also be [installed standalone](https://github.com/twbs/rfs/tree/v{{< param \"rfs_version\" >}}#installation) if needed.\n+The mixins are included in Bootstrap and are available once you include Bootstrap's `scss`. RFS can also be [installed standalone](https://github.com/twbs/rfs/tree/{{< param \"rfs_version\" >}}#installation) if needed.\n \n ### Using the mixins\n \n@@ -83,4 +83,4 @@ In this example, we use one of Bootstrap's built-in [responsive breakpoint mixin\n \n ## Extended documentation\n \n-RFS is a separate project under the Bootstrap organization. More about RFS and its configuration can be found on its [GitHub repository](https://github.com/twbs/rfs/tree/v{{< param \"rfs_version\" >}}).\n+RFS is a separate project under the Bootstrap organization. More about RFS and its configuration can be found on its [GitHub repository](https://github.com/twbs/rfs/tree/{{< param \"rfs_version\" >}}).",
    "output": "docs: Update RFS version & move \"v\" prefix to config.yml (#34918)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-versions.html b/site/layouts/partials/docs-versions.html\nindex 4415e550d..a38a81823 100644\n--- a/site/layouts/partials/docs-versions.html\n+++ b/site/layouts/partials/docs-versions.html\n@@ -3,7 +3,7 @@\n     <span class=\"d-none d-lg-inline\">Bootstrap</span> v{{ .Site.Params.docs_version }}\n   </button>\n   <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"bd-versions\">\n-    <li><a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/\">Latest (5.0.x)</a></li>\n+    <li><a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/\">Latest ({{ .Site.Params.docs_version }}.x)</a></li>\n     <li><hr class=\"dropdown-divider\"></li>\n     <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/4.6/\">v4.6.x</a></li>\n     <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/3.4/\">v3.4.1</a></li>",
    "output": "docs: make use of the `.Site.Params.docs_version` variable (#34913)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/helpers/stacks.md b/site/content/docs/5.1/helpers/stacks.md\nindex c1316c3ad..20ca86aa0 100644\n--- a/site/content/docs/5.1/helpers/stacks.md\n+++ b/site/content/docs/5.1/helpers/stacks.md\n@@ -8,6 +8,10 @@ toc: true\n \n Stacks offer a shortcut for applying a number of flexbox properties to quickly and easily create layouts in Bootstrap. All credit for the concept and implementation goes to the open source [Pylon project](https://almonk.github.io/pylon/).\n \n+{{< callout warning >}}\n+Heads up! Support for gap utilities with flexbox was recently added to Safari, so consider verifying your intended browser support. Grid layout should have no issues. [Read more](https://caniuse.com/flexbox-gap).\n+{{< /callout >}}\n+\n ## Vertical\n \n Use `.vstack` to create vertical layouts. Stacked items are full-width by default. Use `.gap-*` utilities to add space between items.",
    "output": "docs: Add Callout to Stacks Helper page about limited flexbox gap support (#34910)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/customize/options.md b/site/content/docs/5.1/customize/options.md\nindex 0d846270b..c819e6e84 100644\n--- a/site/content/docs/5.1/customize/options.md\n+++ b/site/content/docs/5.1/customize/options.md\n@@ -26,4 +26,5 @@ You can find and customize these variables for key global options in Bootstrap's\n | `$enable-negative-margins`     | `true` or `false` (default)        | Enables the generation of [negative margin utilities]({{< docsref \"/utilities/spacing#negative-margin\" >}}). |\n | `$enable-deprecation-messages` | `true` (default) or `false`        | Set to `false` to hide warnings when using any of the deprecated mixins and functions that are planned to be removed in `v6`. |\n | `$enable-important-utilities`  | `true` (default) or `false`        | Enables the `!important` suffix in utility classes. |\n+| `$enable-smooth-scroll`        | `true` (default) or `false`        | Applies `scroll-behavior: smooth` globally, except for users asking for reduced motion through [`prefers-reduced-motion` media query]({{< docsref \"/getting-started/accessibility#reduced-motion\" >}}) |\n {{< /bs-table >}}",
    "output": "docs: add `$enable-smooth-scroll` to Sass options page (#34877)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/placeholders.md b/site/content/docs/5.1/components/placeholders.md\nindex 2b3387ac7..cfbaf1672 100644\n--- a/site/content/docs/5.1/components/placeholders.md\n+++ b/site/content/docs/5.1/components/placeholders.md\n@@ -101,7 +101,7 @@ You can change the `width` through grid column classes, width utilities, or inli\n \n ### Color\n \n-By default, the `placeholder` uses `currentColor`. This can be overriden with a custom color or utility class.\n+By default, the `placeholder` uses `currentColor`. This can be overridden with a custom color or utility class.\n \n {{< example >}}\n <span class=\"placeholder col-12\"></span>\ndiff --git a/site/content/docs/5.1/extend/approach.md b/site/content/docs/5.1/extend/approach.md\nindex 4b9dd4994..033ab219f 100644\n--- a/site/content/docs/5.1/extend/approach.md\n+++ b/site/content/docs/5.1/extend/approach.md\n@@ -79,7 +79,7 @@ While not always possible, we strive to avoid being overly dogmatic in our HTML\n \n ## Code conventions\n \n-[Code Guide](https://codeguide.co/) (from Bootstrap co-creator, @mdo) documents how we write our HTML and CSS across Bootstrap. It specifices guidelines for general formatting, common sense defaults, property and attribute orders, and more.\n+[Code Guide](https://codeguide.co/) (from Bootstrap co-creator, @mdo) documents how we write our HTML and CSS across Bootstrap. It specifies guidelines for general formatting, common sense defaults, property and attribute orders, and more.\n \n We use [Stylelint](https://stylelint.io/) to enforce these standards and more in our Sass/CSS. [Our custom Stylelint config](https://github.com/twbs/stylelint-config-twbs-bootstrap) is open source and available for others to use and extend.\n ",
    "output": "docs: fix typos in approach and placeholders (#34781)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.1/components/placeholders.md b/site/content/docs/5.1/components/placeholders.md\nindex f2be6696a..41313a70f 100644\n--- a/site/content/docs/5.1/components/placeholders.md\n+++ b/site/content/docs/5.1/components/placeholders.md\n@@ -125,7 +125,7 @@ The size of `.placeholder`s are based on the typographic style of the parent ele\n \n ### Animation\n \n-Animate placehodlers with `.placeholder-glow` or `.placeholder-wave` to better convey the perception of something being _actively_ loaded.\n+Animate placeholders with `.placeholder-glow` or `.placeholder-wave` to better convey the perception of something being _actively_ loaded.\n \n {{< example >}}\n <p class=\"placeholder-glow\">",
    "output": "docs: Fix placeholders typo (#34686)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/static/docs/5.0/assets/img/examples/cover@2x.png b/site/static/docs/5.0/assets/img/examples/cover@2x.png\nindex 9d20fb2ed..eacd82e98 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/cover@2x.png and b/site/static/docs/5.0/assets/img/examples/cover@2x.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/dropdowns.png b/site/static/docs/5.0/assets/img/examples/dropdowns.png\nindex 46444814a..64fc8f2f0 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/dropdowns.png and b/site/static/docs/5.0/assets/img/examples/dropdowns.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/dropdowns@2x.png b/site/static/docs/5.0/assets/img/examples/dropdowns@2x.png\nindex 7ac8e1ecc..35fecb49a 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/dropdowns@2x.png and b/site/static/docs/5.0/assets/img/examples/dropdowns@2x.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/footers.png b/site/static/docs/5.0/assets/img/examples/footers.png\nindex 4f083748a..ac20b7f5d 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/footers.png and b/site/static/docs/5.0/assets/img/examples/footers.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/footers@2x.png b/site/static/docs/5.0/assets/img/examples/footers@2x.png\nindex dc06aef79..a9a07a2cf 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/footers@2x.png and b/site/static/docs/5.0/assets/img/examples/footers@2x.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/list-groups.png b/site/static/docs/5.0/assets/img/examples/list-groups.png\nindex 67be951c5..9f49a54ad 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/list-groups.png and b/site/static/docs/5.0/assets/img/examples/list-groups.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/list-groups@2x.png b/site/static/docs/5.0/assets/img/examples/list-groups@2x.png\nindex 000eb3328..575d19818 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/list-groups@2x.png and b/site/static/docs/5.0/assets/img/examples/list-groups@2x.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/modals.png b/site/static/docs/5.0/assets/img/examples/modals.png\nindex ac3bdd0b8..0c8876a67 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/modals.png and b/site/static/docs/5.0/assets/img/examples/modals.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/modals@2x.png b/site/static/docs/5.0/assets/img/examples/modals@2x.png\nindex 49163c80a..c18990ace 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/modals@2x.png and b/site/static/docs/5.0/assets/img/examples/modals@2x.png differ\ndiff --git a/site/static/docs/5.0/assets/img/examples/pricing@2x.png b/site/static/docs/5.0/assets/img/examples/pricing@2x.png\nindex 9ddac54ea..959d808a9 100644\nBinary files a/site/static/docs/5.0/assets/img/examples/pricing@2x.png and b/site/static/docs/5.0/assets/img/examples/pricing@2x.png differ",
    "output": "docs: minor image compression improvements (#34557)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/icons.yml b/site/data/icons.yml\nindex f97350ce4..02727fc2f 100644\n--- a/site/data/icons.yml\n+++ b/site/data/icons.yml\n@@ -9,6 +9,8 @@ preferred:\n more:\n   - name: Bytesize\n     website: https://github.com/danklammer/bytesize-icons\n+  - name: CoreUI Icons\n+    website: https://icons.coreui.io/\n   - name: Google Material icons\n     website: https://material.io/resources/icons/\n   - name: Ionicons\n@@ -21,5 +23,5 @@ more:\n     website: https://icons8.com/\n   - name: icofont\n     website: https://icofont.com/\n-  - name: CoreUI Icons\n-    website: https://icons.coreui.io/\n+  - name: Octicons\n+    website: https://primer.style/octicons/",
    "output": "docs: Add Github Octicons to the list (#34526)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 4486b5712..3a77eec4c 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -847,6 +847,8 @@ $input-height-sm:                       add($input-line-height * 1em, add($input\n $input-height-lg:                       add($input-line-height * 1em, add($input-padding-y-lg * 2, $input-height-border, false)) !default;\n \n $input-transition:                      border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;\n+\n+$form-color-width:                      3rem !default;\n // scss-docs-end form-input-variables\n \n // scss-docs-start form-check-variables\ndiff --git a/scss/forms/_form-control.scss b/scss/forms/_form-control.scss\nindex 9728b91f3..96423c530 100644\n--- a/scss/forms/_form-control.scss\n+++ b/scss/forms/_form-control.scss\n@@ -199,7 +199,7 @@ textarea {\n // stylelint-enable selector-no-qualifying-type\n \n .form-control-color {\n-  max-width: 3rem;\n+  width: $form-color-width;\n   height: auto; // Override fixed browser height\n   padding: $input-padding-y;\n ",
    "output": "fix(forms): prevent color control from shrinking (#34445)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_content.scss b/site/assets/scss/_content.scss\nindex cc22ffe11..f2b5cfc54 100644\n--- a/site/assets/scss/_content.scss\n+++ b/site/assets/scss/_content.scss\n@@ -22,12 +22,12 @@\n   > ol li {\n     margin-bottom: .25rem;\n \n-    // stylelint-disable selector-max-type\n-    > ul {\n+    // stylelint-disable selector-max-type, selector-max-compound-selectors\n+    > p ~ ul {\n       margin-top: -.5rem;\n       margin-bottom: 1rem;\n     }\n-    // stylelint-enable selector-max-type\n+    // stylelint-enable selector-max-type, selector-max-compound-selectors\n   }\n \n   // Override Bootstrap defaults",
    "output": "docs(style): fix display of nested `<ul><li>` (#34223)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/modal.md b/site/content/docs/5.0/components/modal.md\nindex d19957f3e..e6a838aac 100644\n--- a/site/content/docs/5.0/components/modal.md\n+++ b/site/content/docs/5.0/components/modal.md\n@@ -827,7 +827,7 @@ Another override is the option to pop up a modal that covers the user viewport,\n \n ## Usage\n \n-The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also adds `.modal-open` to the `<body>` to override default scrolling behavior and generates a `.modal-backdrop` to provide a click area for dismissing shown modals when clicking outside the modal.\n+The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also overrides default scrolling behavior and generates a `.modal-backdrop` to provide a click area for dismissing shown modals when clicking outside the modal.\n \n ### Via data attributes\n ",
    "output": "fix(docs): update docs to match the newest modal-open removal (#34239)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/customize/overview.md b/site/content/docs/5.0/customize/overview.md\nindex 07431575a..9c8878e3a 100644\n--- a/site/content/docs/5.0/customize/overview.md\n+++ b/site/content/docs/5.0/customize/overview.md\n@@ -48,4 +48,4 @@ Several Bootstrap components include embedded SVGs in our CSS to style component\n - [Carousel controls]({{< docsref \"/components/carousel#with-controls\" >}})\n - [Navbar toggle buttons]({{< docsref \"/components/navbar#responsive-behaviors\" >}})\n \n-Based on [community conversation](https://github.com/twbs/bootstrap/issues/25394), some options for addressing this in your own codebase include replacing the URLs with locally hosted assets, removing the images and using inline images (not possible in all components), and modifying your CSP. Our recommendation is to carefully review your own security policies and decide on a best path forward, if necessary.\n+Based on [community conversation](https://github.com/twbs/bootstrap/issues/25394), some options for addressing this in your own codebase include replacing the URLs with locally hosted assets, removing the images and using inline images (not possible in all components), and modifying your CSP. Our recommendation is to carefully review your own security policies and decide on the best path forward, if necessary.",
    "output": "docs: update overview.md to fix typo"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/dropdowns.md b/site/content/docs/5.0/components/dropdowns.md\nindex e15cc0fe6..1668ae7bd 100644\n--- a/site/content/docs/5.0/components/dropdowns.md\n+++ b/site/content/docs/5.0/components/dropdowns.md\n@@ -583,7 +583,7 @@ Trigger dropdown menus at the left of the elements by adding `.dropstart` to the\n \n ## Menu items\n \n-Historically dropdown menu contents *had* to be links, but that's no longer the case with v4. Now you can optionally use `<button>` elements in your dropdowns instead of just `<a>`s.\n+You can use `<a>` or `<button>` elements as dropdown items.\n \n {{< example >}}\n <div class=\"dropdown\">",
    "output": "docs: update dropdowns.md to reflect the correct version (#34180)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex 14da12b65..663666b99 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -117,7 +117,7 @@ toc: true\n \n - <span class=\"badge bg-danger\">Breaking</span> `.thead-light` and `.thead-dark` are dropped in favor of the `.table-*` variant classes which can be used for all table elements (`thead`, `tbody`, `tfoot`, `tr`, `th` and `td`).\n \n-- <span class=\"badge bg-danger\">Breaking</span> The `table-row-variant()` mixin is renamed to `table-variant()` and accepts only 2 parameters: `$color` (colon name) and `$value` (color code). The border color and accent colors are automatically calculated based on the table factor variables.\n+- <span class=\"badge bg-danger\">Breaking</span> The `table-row-variant()` mixin is renamed to `table-variant()` and accepts only 2 parameters: `$color` (color name) and `$value` (color code). The border color and accent colors are automatically calculated based on the table factor variables.\n \n - Split table cell padding variables into `-y` and `-x`.\n ",
    "output": "docs: update migration.md to fix a typo"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/customize/sass.md b/site/content/docs/5.0/customize/sass.md\nindex adc990db7..4039bd67c 100644\n--- a/site/content/docs/5.0/customize/sass.md\n+++ b/site/content/docs/5.0/customize/sass.md\n@@ -80,7 +80,7 @@ Every Sass variable in Bootstrap includes the `!default` flag allowing you to ov\n \n You will find the complete list of Bootstrap's variables in `scss/_variables.scss`. Some variables are set to `null`, these variables don't output the property unless they are overridden in your configuration.\n \n-Variable overrides must come after our functions, variables, and mixins are imported, but before the rest of the imports.\n+Variable overrides must come after our functions are imported, but before the rest of the imports.\n \n Here's an example that changes the `background-color` and `color` for the `<body>` when importing and compiling Bootstrap via npm:\n \n@@ -96,8 +96,6 @@ $body-color: #111;\n @import \"../node_modules/bootstrap/scss/variables\";\n @import \"../node_modules/bootstrap/scss/mixins\";\n \n-// Bootstrap and its default variables\n-\n // Optional Bootstrap components here\n @import \"../node_modules/bootstrap/scss/root\";\n @import \"../node_modules/bootstrap/scss/reboot\";",
    "output": "docs(customize): missed explanations for overrides (#34179)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 11819f440..93ccb25a5 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -859,6 +859,7 @@ $form-file-button-hover-bg:       shade-color($form-file-button-bg, 5%) !default\n \n // scss-docs-start form-floating-variables\n $form-floating-height:            add(3.5rem, $input-height-border) !default;\n+$form-floating-line-height:       1.25 !default;\n $form-floating-padding-x:         $input-padding-x !default;\n $form-floating-padding-y:         1rem !default;\n $form-floating-input-padding-t:   1.625rem !default;\ndiff --git a/scss/forms/_floating-labels.scss b/scss/forms/_floating-labels.scss\nindex 09d9294dc..2f4295480 100644\n--- a/scss/forms/_floating-labels.scss\n+++ b/scss/forms/_floating-labels.scss\n@@ -4,6 +4,7 @@\n   > .form-control,\n   > .form-select {\n     height: $form-floating-height;\n+    line-height: $form-floating-line-height;\n   }\n \n   > label {",
    "output": "fix(forms): unitless `line-height` for floating labels (#34161)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_tables.scss b/scss/_tables.scss\nindex 19f679d28..92556ba05 100644\n--- a/scss/_tables.scss\n+++ b/scss/_tables.scss\n@@ -4,7 +4,7 @@\n \n .table {\n   --#{$variable-prefix}table-bg: #{$table-bg};\n-  --#{$variable-prefix}table-accent-bg: #{$table-bg};\n+  --#{$variable-prefix}table-accent-bg: #{$table-accent-bg};\n   --#{$variable-prefix}table-striped-color: #{$table-striped-color};\n   --#{$variable-prefix}table-striped-bg: #{$table-striped-bg};\n   --#{$variable-prefix}table-active-color: #{$table-active-color};\ndiff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 15343e435..9a1f3daad 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -535,6 +535,7 @@ $table-cell-vertical-align:   top !default;\n \n $table-color:                 $body-color !default;\n $table-bg:                    transparent !default;\n+$table-accent-bg:             transparent !default;\n \n $table-th-font-weight:        null !default;\n ",
    "output": "fix(tables): decouple table-bg and table-accent-bg (#34048)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_dropdown.scss b/scss/_dropdown.scss\nindex 06e70f701..adc114327 100644\n--- a/scss/_dropdown.scss\n+++ b/scss/_dropdown.scss\n@@ -50,8 +50,8 @@\n       --bs-position: start;\n \n       &[data-bs-popper] {\n-        right: auto #{\"/* rtl:ignore */\"};\n-        left: 0 #{\"/* rtl:ignore */\"};\n+        right: auto;\n+        left: 0;\n       }\n     }\n \n@@ -59,8 +59,8 @@\n       --bs-position: end;\n \n       &[data-bs-popper] {\n-        right: 0 #{\"/* rtl:ignore */\"};\n-        left: auto #{\"/* rtl:ignore */\"};\n+        right: 0;\n+        left: auto;\n       }\n     }\n   }",
    "output": "fix(dropdowns): RTL for `.dropdown-menu-*` (#34124)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/content/reboot.md b/site/content/docs/5.0/content/reboot.md\nindex 6529e5ef2..7ed1d796b 100644\n--- a/site/content/docs/5.0/content/reboot.md\n+++ b/site/content/docs/5.0/content/reboot.md\n@@ -37,8 +37,6 @@ $font-family-sans-serif:\n   system-ui,\n   // Safari for macOS and iOS (San Francisco)\n   -apple-system,\n-  // Chrome < 56 for macOS (San Francisco)\n-  BlinkMacSystemFont,\n   // Windows\n   \"Segoe UI\",\n   // Android",
    "output": "docs(font-stack): drop BlinkMacSystemFont (#34009)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.js b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.js\nindex 541cf9350..0a50258b9 100644\n--- a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.js\n+++ b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.js\n@@ -25,8 +25,8 @@\n       toast.show()\n     })\n \n-  // Disable empty links\n-  document.querySelectorAll('[href=\"#\"]')\n+  // Disable empty links and submit buttons\n+  document.querySelectorAll('[href=\"#\"], [type=\"submit\"]')\n     .forEach(function (link) {\n       link.addEventListener('click', function (event) {\n         event.preventDefault()\n@@ -41,6 +41,11 @@\n     }\n \n     var link = document.querySelector('.bd-aside a[href=\"' + hash + '\"]')\n+\n+    if (!link) {\n+      return\n+    }\n+\n     var active = document.querySelector('.bd-aside .active')\n     var parent = link.parentNode.parentNode.previousElementSibling\n ",
    "output": "docs(cheatsheet): fix JS errors in `setActiveItem()` (#34011)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/tooltips.md b/site/content/docs/5.0/components/tooltips.md\nindex 80a679fd6..6af594ee3 100644\n--- a/site/content/docs/5.0/components/tooltips.md\n+++ b/site/content/docs/5.0/components/tooltips.md\n@@ -88,7 +88,7 @@ And with custom HTML added:\n With an SVG:\n \n <div class=\"bd-example tooltip-demo\">\n-  <a href=\"#\" data-bs-toggle=\"tooltip\" title=\"Default tooltip\">\n+  <a href=\"#\" class=\"d-inline-block\" data-bs-toggle=\"tooltip\" title=\"Default tooltip\">\n     <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 100 100\">\n       <rect width=\"100%\" height=\"100%\" fill=\"#563d7c\"/>\n       <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"#007bff\"/>",
    "output": "docs: make tooltip anchor properly wrap the svg (#33901)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 9a2d92f94..4303165dc 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -17,7 +17,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        node: [10, 12, 14, 16]\n+        node: [12, 14, 16]\n \n     steps:\n       - name: Clone repository",
    "output": "ci: remove Node.js 10 (#33923)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/getting-started/rtl.md b/site/content/docs/5.0/getting-started/rtl.md\nindex 3e1f7a207..549104c6f 100644\n--- a/site/content/docs/5.0/getting-started/rtl.md\n+++ b/site/content/docs/5.0/getting-started/rtl.md\n@@ -143,7 +143,7 @@ Need both LTR and RTL on the same page? Thanks to [RTLCSS String Maps](https://r\n ```scss\n /* rtl:begin:options: {\n   \"autoRename\": true,\n-  \"stringMap\":[\n+  \"stringMap\":[ {\n     \"name\": \"ltr-rtl\",\n     \"priority\": 100,\n     \"search\": [\"ltr\"],\n@@ -152,7 +152,7 @@ Need both LTR and RTL on the same page? Thanks to [RTLCSS String Maps](https://r\n       \"scope\": \"*\",\n       \"ignoreCase\": false\n     }\n-  ]\n+  } ]\n } */\n .ltr {\n   @import \"../node_modules/bootstrap/scss/bootstrap\";",
    "output": "docs: fix rtlcss stringmap configuration (#33915)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/form-control.md b/site/content/docs/5.0/forms/form-control.md\nindex 41fd759d7..057b785b1 100644\n--- a/site/content/docs/5.0/forms/form-control.md\n+++ b/site/content/docs/5.0/forms/form-control.md\n@@ -144,3 +144,7 @@ Learn more about [support for datalist elements](https://caniuse.com/datalist).\n {{< scss-docs name=\"form-label-variables\" file=\"scss/_variables.scss\" >}}\n \n {{< scss-docs name=\"form-text-variables\" file=\"scss/_variables.scss\" >}}\n+\n+`$form-file-*` are for file input.\n+\n+{{< scss-docs name=\"form-file-variables\" file=\"scss/_variables.scss\" >}}",
    "output": "refactor(docs): Added form file input variables (#33833)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/getting-started/accessibility.md b/site/content/docs/5.0/getting-started/accessibility.md\nindex 68cde0713..e9f1cb316 100644\n--- a/site/content/docs/5.0/getting-started/accessibility.md\n+++ b/site/content/docs/5.0/getting-started/accessibility.md\n@@ -59,3 +59,4 @@ On browsers that support `prefers-reduced-motion`, and where the user has *not*\n - [\"HTML Codesniffer\" bookmarklet for identifying accessibility issues](https://github.com/squizlabs/HTML_CodeSniffer)\n - [Microsoft Accessibility Insights](https://accessibilityinsights.io/)\n - [Deque Axe testing tools](https://www.deque.com/axe/)\n+- [Introduction to Web Accessibility](https://www.w3.org/WAI/fundamentals/accessibility-intro/)",
    "output": "docs: adding intro about web accessibility (#33786)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/list-group.md b/site/content/docs/5.0/components/list-group.md\nindex a230a3bfe..4b450939e 100644\n--- a/site/content/docs/5.0/components/list-group.md\n+++ b/site/content/docs/5.0/components/list-group.md\n@@ -98,7 +98,7 @@ Add `.list-group-flush` to remove some borders and rounded corners to render lis\n \n Add the `.list-group-numbered` modifier class (and optionally use an `<ol>` element) to opt into numbered list group items. Numbers are generated via CSS (as opposed to a `<ol>`s default browser styling) for better placement inside list group items and to allow for better customization.\n \n-Numbers are generated by `counter-reset` on the `<ol>`, and then styled and placed with a `::before` psuedo-element on the `<li>` with `counter-increment` and `content`.\n+Numbers are generated by `counter-reset` on the `<ol>`, and then styled and placed with a `::before` pseudo-element on the `<li>` with `counter-increment` and `content`.\n \n {{< example >}}\n <ol class=\"list-group list-group-numbered\">",
    "output": "docs: fix typo in list-group.md (#33756)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/headers/index.html b/site/content/docs/5.0/examples/headers/index.html\nindex 61a48a543..2a4585e9d 100644\n--- a/site/content/docs/5.0/examples/headers/index.html\n+++ b/site/content/docs/5.0/examples/headers/index.html\n@@ -219,7 +219,7 @@ body_class: \"\"\n </nav>\n <header class=\"py-3 mb-4 border-bottom\">\n   <div class=\"container d-flex flex-wrap justify-content-center\">\n-    <a href=\"/\" class=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto text-dark text-decoration-none\">\n+    <a href=\"/\" class=\"d-flex align-items-center mb-3 mb-lg-0 me-lg-auto text-dark text-decoration-none\">\n       <svg class=\"bi me-2\" width=\"40\" height=\"32\"><use xlink:href=\"#bootstrap\"/></svg>\n       <span class=\"fs-4\">Double header</span>\n     </a>",
    "output": "fix: change margin breakpoints for bootstrap logo on double header (#33759)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/tooltips.md b/site/content/docs/5.0/components/tooltips.md\nindex b56766dd5..61c6753a4 100644\n--- a/site/content/docs/5.0/components/tooltips.md\n+++ b/site/content/docs/5.0/components/tooltips.md\n@@ -116,12 +116,12 @@ var tooltip = new bootstrap.Tooltip(exampleEl, options)\n {{< callout warning >}}\n ##### Overflow `auto` and `scroll`\n \n-Tooltip position attempts to automatically change when a parent container has `overflow: auto` or `overflow: scroll` like our `.table-responsive`, but still keeps the original placement's positioning. To resolve, set the `boundary` option to anything other than default value, `'scrollParent'`, such as `'window'`:\n+Tooltip position attempts to automatically change when a **parent container** has `overflow: auto` or `overflow: scroll` like our `.table-responsive`, but still keeps the original placement's positioning. To resolve this, set the [`boundary` option](https://popper.js.org/docs/v2/modifiers/flip/#boundary) (for the flip modifier using the `popperConfig` option) to any HTMLElement to override the default value, `'clippingParents'`, such as `document.body`:\n \n ```js\n var exampleEl = document.getElementById('example')\n var tooltip = new bootstrap.Tooltip(exampleEl, {\n-  boundary: 'window'\n+  boundary: document.body // or document.querySelector('#boundary')\n })\n ```\n {{< /callout >}}",
    "output": "docs: fix the default value of Popper's `boundary` option (#33685)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dropdown.js b/js/src/dropdown.js\nindex c314cbcdd..2fc2cde21 100644\n--- a/js/src/dropdown.js\n+++ b/js/src/dropdown.js\n@@ -415,7 +415,7 @@ class Dropdown extends BaseComponent {\n         return\n       }\n \n-      if (/input|select|textarea|form/i.test(event.target.tagName)) {\n+      if (/input|select|option|textarea|form/i.test(event.target.tagName)) {\n         return\n       }\n     }",
    "output": "fix: clicking an item in navbar dropdown collapses the dropdown in firefox (#33643)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/list-group.md b/site/content/docs/5.0/components/list-group.md\nindex 6cad46a4d..a230a3bfe 100644\n--- a/site/content/docs/5.0/components/list-group.md\n+++ b/site/content/docs/5.0/components/list-group.md\n@@ -351,10 +351,10 @@ Use the tab JavaScript plugin\u2014include it individually or through the compiled\n <div class=\"row\">\n   <div class=\"col-4\">\n     <div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n-      <a class=\"list-group-item list-group-item-action active\" id=\"list-home-list\" data-bs-toggle=\"list\" href=\"#list-home\" role=\"tab\" aria-controls=\"home\">Home</a>\n-      <a class=\"list-group-item list-group-item-action\" id=\"list-profile-list\" data-bs-toggle=\"list\" href=\"#list-profile\" role=\"tab\" aria-controls=\"profile\">Profile</a>\n-      <a class=\"list-group-item list-group-item-action\" id=\"list-messages-list\" data-bs-toggle=\"list\" href=\"#list-messages\" role=\"tab\" aria-controls=\"messages\">Messages</a>\n-      <a class=\"list-group-item list-group-item-action\" id=\"list-settings-list\" data-bs-toggle=\"list\" href=\"#list-settings\" role=\"tab\" aria-controls=\"settings\">Settings</a>\n+      <a class=\"list-group-item list-group-item-action active\" id=\"list-home-list\" data-bs-toggle=\"list\" href=\"#list-home\" role=\"tab\" aria-controls=\"list-home\">Home</a>\n+      <a class=\"list-group-item list-group-item-action\" id=\"list-profile-list\" data-bs-toggle=\"list\" href=\"#list-profile\" role=\"tab\" aria-controls=\"list-profile\">Profile</a>\n+      <a class=\"list-group-item list-group-item-action\" id=\"list-messages-list\" data-bs-toggle=\"list\" href=\"#list-messages\" role=\"tab\" aria-controls=\"list-messages\">Messages</a>\n+      <a class=\"list-group-item list-group-item-action\" id=\"list-settings-list\" data-bs-toggle=\"list\" href=\"#list-settings\" role=\"tab\" aria-controls=\"list-settings\">Settings</a>\n     </div>\n   </div>\n   <div class=\"col-8\">",
    "output": "docs: Tried to fix the issue #33650 (#33664)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_list-group.scss b/scss/_list-group.scss\nindex 2193168c5..7daa9f10d 100644\n--- a/scss/_list-group.scss\n+++ b/scss/_list-group.scss\n@@ -166,7 +166,7 @@\n   $list-group-background: shift-color($value, $list-group-item-bg-scale);\n   $list-group-color: shift-color($value, $list-group-item-color-scale);\n   @if (contrast-ratio($list-group-background, $list-group-color) < $min-contrast-ratio) {\n-    $list-group-color: mix($value, color-contrast($list-group-background), abs($alert-color-scale));\n+    $list-group-color: mix($value, color-contrast($list-group-background), abs($list-group-item-color-scale));\n   }\n \n   @include list-group-item-variant($state, $list-group-background, $list-group-color);",
    "output": "fix: use list-group variable instead of alert (#33658)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/content/tables.md b/site/content/docs/5.0/content/tables.md\nindex 3681e186a..7ec00201b 100644\n--- a/site/content/docs/5.0/content/tables.md\n+++ b/site/content/docs/5.0/content/tables.md\n@@ -290,31 +290,29 @@ Table cells of `<thead>` are always vertical aligned to the bottom. Table cells\n </div>\n \n ```html\n-<table class=\"table table-sm table-dark\">\n-  <div class=\"table-responsive\">\n-    <table class=\"table align-middle\">\n-      <thead>\n-        <tr>\n-          ...\n-        </tr>\n-      </thead>\n-      <tbody>\n-        <tr>\n-          ...\n-        </tr>\n-        <tr class=\"align-bottom\">\n-          ...\n-        </tr>\n-        <tr>\n-          <td>...</td>\n-          <td>...</td>\n-          <td class=\"align-top\">This cell is aligned to the top.</td>\n-          <td>...</td>\n-        </tr>\n-      </tbody>\n-    </table>\n-  </div>\n-</table>\n+<div class=\"table-responsive\">\n+  <table class=\"table align-middle\">\n+    <thead>\n+      <tr>\n+        ...\n+      </tr>\n+    </thead>\n+    <tbody>\n+      <tr>\n+        ...\n+      </tr>\n+      <tr class=\"align-bottom\">\n+        ...\n+      </tr>\n+      <tr>\n+        <td>...</td>\n+        <td>...</td>\n+        <td class=\"align-top\">This cell is aligned to the top.</td>\n+        <td>...</td>\n+      </tr>\n+    </tbody>\n+  </table>\n+</div>\n ```\n \n ## Nesting",
    "output": "docs: Fix wrong dark attribute in Table - Vertical Alignment (#33597)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_color-scheme.scss b/scss/mixins/_color-scheme.scss\nindex 303fed72d..90497aa0a 100644\n--- a/scss/mixins/_color-scheme.scss\n+++ b/scss/mixins/_color-scheme.scss\n@@ -1,17 +1,7 @@\n // scss-docs-start mixin-color-scheme\n @mixin color-scheme($name) {\n-  @if $name == dark {\n-    @media (prefers-color-scheme: dark) {\n-      @content;\n-    }\n-  } @else if $name == light {\n-    @media (prefers-color-scheme: light) {\n-      @content;\n-    }\n-  } @else {\n-    @media (prefers-color-scheme: #{$name}) {\n-      @content;\n-    }\n+  @media (prefers-color-scheme: #{$name}) {\n+    @content;\n   }\n }\n // scss-docs-end mixin-color-scheme",
    "output": "refactor(color-scheme): reduce complexity"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dropdown.js b/js/src/dropdown.js\nindex b126d3196..ae440e472 100644\n--- a/js/src/dropdown.js\n+++ b/js/src/dropdown.js\n@@ -356,6 +356,31 @@ class Dropdown extends BaseComponent {\n     }\n   }\n \n+  _selectMenuItem(event) {\n+    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible)\n+\n+    if (!items.length) {\n+      return\n+    }\n+\n+    let index = items.indexOf(event.target)\n+\n+    // Up\n+    if (event.key === ARROW_UP_KEY && index > 0) {\n+      index--\n+    }\n+\n+    // Down\n+    if (event.key === ARROW_DOWN_KEY && index < items.length - 1) {\n+      index++\n+    }\n+\n+    // index is -1 if the first keydown is an ArrowUp\n+    index = index === -1 ? 0 : index\n+\n+    items[index].focus()\n+  }\n+\n   // Static\n \n   static dropdownInterface(element, config) {\n@@ -449,31 +474,6 @@ class Dropdown extends BaseComponent {\n     }\n   }\n \n-  static selectMenuItem(parent, event) {\n-    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, parent).filter(isVisible)\n-\n-    if (!items.length) {\n-      return\n-    }\n-\n-    let index = items.indexOf(event.target)\n-\n-    // Up\n-    if (event.key === ARROW_UP_KEY && index > 0) {\n-      index--\n-    }\n-\n-    // Down\n-    if (event.key === ARROW_DOWN_KEY && index < items.length - 1) {\n-      index++\n-    }\n-\n-    // index is -1 if the first keydown is an ArrowUp\n-    index = index === -1 ? 0 : index\n-\n-    items[index].focus()\n-  }\n-\n   static getParentFromElement(element) {\n     return getElementFromSelector(element) || element.parentNode\n   }\n@@ -525,7 +525,7 @@ class Dropdown extends BaseComponent {\n       return\n     }\n \n-    Dropdown.selectMenuItem(Dropdown.getParentFromElement(this), event)\n+    Dropdown.getInstance(getToggleButton())._selectMenuItem(event)\n   }\n }\n ",
    "output": "refactor: make static `selectMenuItem` method private (#33589)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_nav.scss b/scss/_nav.scss\nindex 2534f7f77..ffb27d869 100644\n--- a/scss/_nav.scss\n+++ b/scss/_nav.scss\n@@ -117,6 +117,13 @@\n   }\n }\n \n+.nav-fill,\n+.nav-justified {\n+  .nav-item .nav-link {\n+    width: 100%; // Make sure button will grow\n+  }\n+}\n+\n \n // Tabbable tabs\n //",
    "output": "fix(navs): ensure button will grow in fill/justified nav"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 3fcba715b..723f5a86b 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -1299,7 +1299,7 @@ $progress-bar-transition:           width .6s ease !default;\n // List group\n \n // scss-docs-start list-group-variables\n-$list-group-color:                  null !default;\n+$list-group-color:                  $gray-900 !default;\n $list-group-bg:                     $white !default;\n $list-group-border-color:           rgba($black, .125) !default;\n $list-group-border-width:           $border-width !default;",
    "output": "fix(list-group): properly set a color on list-group-items"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_forms.scss b/scss/mixins/_forms.scss\nindex e3f8061e9..a1e0849df 100644\n--- a/scss/mixins/_forms.scss\n+++ b/scss/mixins/_forms.scss\n@@ -123,5 +123,12 @@\n       margin-left: .5em;\n     }\n   }\n+\n+  .input-group .form-control,\n+  .input-group .form-select {\n+    @include form-validation-state-selector($state) {\n+      z-index: 3;\n+    }\n+  }\n }\n // scss-docs-end form-validation-mixins",
    "output": "fix(forms): validated controls in input-group"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex 903b282cf..19a76a8e0 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -18,8 +18,6 @@ toc: true\n   var dropdown = new bootstrap.Dropdown('[data-bs-toggle=\"dropdown\"]')\n   ```\n \n-## v5.0.0-beta2\n-\n ### Utilities\n \n - Dropped the `0` entry in `$border-widths` map to remove the duplicated `.border-0` class.",
    "output": "docs(migration): duplicated 5.0.0-beta2 heading (#33178)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_card.scss b/scss/_card.scss\nindex 4b2eebf13..e3314219f 100644\n--- a/scss/_card.scss\n+++ b/scss/_card.scss\n@@ -69,7 +69,7 @@\n   }\n \n   + .card-link {\n-    margin-left: $card-spacer-x #{\"/* rtl:ignore */\"};\n+    margin-left: $card-spacer-x;\n   }\n }\n ",
    "output": "fix(card): siblings card links in RTL (#33154)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/translations.yml b/site/data/translations.yml\nindex 84d6f25ce..a17163cfa 100644\n--- a/site/data/translations.yml\n+++ b/site/data/translations.yml\n@@ -27,3 +27,8 @@\n   code: ko\n   description: Bootstrap 5 \ud55c\uad6d\uc5b4 \ubb38\uc11c\n   url: https://getbootstrap.kr/\n+\n+- name: \u4e2d\u6587(\u7e41\u9ad4)\n+  code: zh-tw\n+  description: Bootstrap 5 \u7e41\u9ad4\u4e2d\u6587\u624b\u518a\n+  url: https://bootstrap5.hexschool.com/",
    "output": "docs: add bootstrap5 zh-tw in translations (#33006)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/offcanvas/index.html b/site/content/docs/5.0/examples/offcanvas/index.html\nindex c25c6a116..9aed0aed7 100644\n--- a/site/content/docs/5.0/examples/offcanvas/index.html\n+++ b/site/content/docs/5.0/examples/offcanvas/index.html\n@@ -46,7 +46,7 @@ body_class: \"bg-light\"\n   </div>\n </nav>\n \n-<div class=\"nav-scroller bg--body shadow-sm\">\n+<div class=\"nav-scroller bg-body shadow-sm\">\n   <nav class=\"nav nav-underline\" aria-label=\"Secondary navigation\">\n     <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Dashboard</a>\n     <a class=\"nav-link\" href=\"#\">",
    "output": "docs(examples): typo in offcanvas example in .bg-body (#33092)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/release-notes.yml b/.github/workflows/release-notes.yml\nindex 1c4f4be9b..ab2f37694 100644\n--- a/.github/workflows/release-notes.yml\n+++ b/.github/workflows/release-notes.yml\n@@ -8,6 +8,7 @@ on:\n jobs:\n   update_release_draft:\n     runs-on: ubuntu-latest\n+    if: github.repository == 'twbs/bootstrap'\n     steps:\n       - uses: release-drafter/release-drafter@v5\n         env:",
    "output": "ci: skip release drafter if we are not on our repo (#33067)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_navbar.scss b/scss/_navbar.scss\nindex 837f487e2..21126b4ed 100644\n--- a/scss/_navbar.scss\n+++ b/scss/_navbar.scss\n@@ -109,6 +109,7 @@\n // the default flexbox row orientation. Requires the use of `flex-wrap: wrap`\n // on the `.navbar` parent.\n .navbar-collapse {\n+  flex-basis: 100%;\n   flex-grow: 1;\n   // For always expanded or extra full navbars, ensure content aligns itself\n   // properly vertically. Can be easily overridden with flex utilities.\n@@ -185,6 +186,7 @@\n \n         .navbar-collapse {\n           display: flex !important; // stylelint-disable-line declaration-no-important\n+          flex-basis: auto;\n         }\n \n         .navbar-toggler {",
    "output": "fix(navbar): ensure .navbar-collapse behaves as intended (#33022)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_accordion.scss b/scss/_accordion.scss\nindex a68aaa70e..298a553e0 100644\n--- a/scss/_accordion.scss\n+++ b/scss/_accordion.scss\n@@ -10,6 +10,7 @@\n   padding: $accordion-button-padding-y $accordion-button-padding-x;\n   @include font-size($font-size-base);\n   color: $accordion-button-color;\n+  text-align: left; // Reset button style\n   background-color: $accordion-button-bg;\n   border: $accordion-border-width solid $accordion-border-color;\n   @include border-radius(0);",
    "output": "fix(accordion): ensure .accordion-button stays left-aligned (#32951)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_navbar.scss b/scss/_navbar.scss\nindex e3eda27aa..837f487e2 100644\n--- a/scss/_navbar.scss\n+++ b/scss/_navbar.scss\n@@ -149,7 +149,7 @@\n }\n \n .navbar-nav-scroll {\n-  max-height: var(--bs-scroll-height, 75vh);\n+  max-height: var(--#{$variable-prefix}scroll-height, 75vh);\n   overflow-y: auto;\n }\n ",
    "output": "fix(navbar): hardcoded custom property (#32930)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex c56a2dfdd..dd6ab7894 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -47,7 +47,7 @@ jobs:\n         run: npm run js-test\n \n       - name: Run Coveralls\n-        uses: coverallsapp/github-action@master\n+        uses: coverallsapp/github-action@v1.1.2\n         if: matrix.node == 14\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"",
    "output": "ci: switch to the coverallsapp/github-action tag (#32919)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/navbar.md b/site/content/docs/5.0/components/navbar.md\nindex 72a61581b..3591b343c 100644\n--- a/site/content/docs/5.0/components/navbar.md\n+++ b/site/content/docs/5.0/components/navbar.md\n@@ -480,7 +480,7 @@ Also note that **`.sticky-top` uses `position: sticky`, which [isn't fully suppo\n \n ## Scrolling\n \n-Add `.navbar-nav-scroll` to a `.navbar-collapse` (or other navbar sub-component) to enable vertical scrolling within the toggleable contents of a collapsed navbar. By default, scrolling kicks in at `75vh` (or 75% of the viewport height), but you can override that with the local CSS custom property `--bs-navbar-height` or custom styles. At larger viewports when the navbar is expanded, content will appear as it does in a default navbar.\n+Add `.navbar-nav-scroll` to a `.navbar-nav` (or other navbar sub-component) to enable vertical scrolling within the toggleable contents of a collapsed navbar. By default, scrolling kicks in at `75vh` (or 75% of the viewport height), but you can override that with the local CSS custom property `--bs-navbar-height` or custom styles. At larger viewports when the navbar is expanded, content will appear as it does in a default navbar.\n \n Please note that this behavior comes with a potential drawback of `overflow`\u2014when setting `overflow-y: auto` (required to scroll the content here), `overflow-x` is the equivalent of `auto`, which will crop some horizontal content.\n ",
    "output": "docs: Fix `navbar-nav-scroll` description (#32846)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/docs-versions.yml b/site/data/docs-versions.yml\nindex 5ddde79a0..9e82d3e1e 100644\n--- a/site/data/docs-versions.yml\n+++ b/site/data/docs-versions.yml\n@@ -36,7 +36,7 @@\n \n - group: v4.x\n   baseurl: \"https://getbootstrap.com/docs\"\n-  description: \"Our previous major release with its minor releases. Last update was v4.5.3.\"\n+  description: \"Our previous major release with its minor releases. Last update was v4.6.0.\"\n   versions:\n     - v: \"4.0\"\n     - v: \"4.1\"\n@@ -44,6 +44,7 @@\n     - v: \"4.3\"\n     - v: \"4.4\"\n     - v: \"4.5\"\n+    - v: \"4.6\"\n \n - group: v5.x\n   baseurl: \"https://getbootstrap.com/docs\"\ndiff --git a/site/layouts/partials/docs-versions.html b/site/layouts/partials/docs-versions.html\nindex 16df838b2..4415e550d 100644\n--- a/site/layouts/partials/docs-versions.html\n+++ b/site/layouts/partials/docs-versions.html\n@@ -5,7 +5,7 @@\n   <ul class=\"dropdown-menu dropdown-menu-end\" aria-labelledby=\"bd-versions\">\n     <li><a class=\"dropdown-item current\" aria-current=\"true\" href=\"/docs/{{ .Site.Params.docs_version }}/\">Latest (5.0.x)</a></li>\n     <li><hr class=\"dropdown-divider\"></li>\n-    <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/4.5/\">v4.5.x</a></li>\n+    <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/4.6/\">v4.6.x</a></li>\n     <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/3.4/\">v3.4.1</a></li>\n     <li><a class=\"dropdown-item\" href=\"https://getbootstrap.com/2.3.2/\">v2.3.2</a></li>\n     <li><hr class=\"dropdown-divider\"></li>",
    "output": "docs: add v4.6.0 (#32842)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/toasts.md b/site/content/docs/5.0/components/toasts.md\nindex bd7bcae9c..45cef6f45 100644\n--- a/site/content/docs/5.0/components/toasts.md\n+++ b/site/content/docs/5.0/components/toasts.md\n@@ -96,11 +96,13 @@ You can stack toasts by wrapping them in a toast container, which will verticall\n Customize your toasts by removing sub-components, tweaking with [utilities]({{< docsref \"/utilities/api\" >}}), or adding your own markup. Here we've created a simpler toast by removing the default `.toast-header`, adding a custom hide icon from [Bootstrap Icons]({{< param icons >}}), and using some [flexbox utilities]({{< docsref \"/utilities/flex\" >}}) to adjust the layout.\n \n {{< example class=\"bg-light\" >}}\n-<div class=\"toast d-flex align-items-center\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n-  <div class=\"toast-body\">\n+<div class=\"toast align-items-center\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n+  <div class=\"d-flex\">\n+    <div class=\"toast-body\">\n     Hello, world! This is a toast message.\n+   </div>\n+    <button type=\"button\" class=\"btn-close me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n   </div>\n-  <button type=\"button\" class=\"btn-close ms-auto me-2\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n </div>\n {{< /example >}}\n \n@@ -123,11 +125,13 @@ Alternatively, you can also add additional controls and components to toasts.\n Building on the above example, you can create different toast color schemes with our [color utilities]({{< docsref \"/utilities/colors\" >}}). Here we've added `.bg-primary` and `.text-white` to the `.toast`, and then added `.btn-close-white` to our close button. For a crisp edge, we remove the default border with `.border-0`.\n \n {{< example class=\"bg-light\" >}}\n-<div class=\"toast d-flex align-items-center text-white bg-primary border-0\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n-  <div class=\"toast-body\">\n-    Hello, world! This is a toast message.\n+<div class=\"toast align-items-center text-white bg-primary border-0\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n+  <div class=\"d-flex\">\n+    <div class=\"toast-body\">\n+      Hello, world! This is a toast message.\n+    </div>\n+    <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n   </div>\n-  <button type=\"button\" class=\"btn-close btn-close-white ms-auto me-2\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n </div>\n {{< /example >}}\n ",
    "output": "docs: work around Toast CSS conflict with utils (#32620)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex ea0a25704..a12bffcf7 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,7 +5,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   browserstack:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 989991f0d..b2bd5eed5 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   bundlewatch:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 4463d52f4..a28059d79 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   css:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex cda6f7748..150e4d16c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   docs:\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex e7a55083d..369aaced3 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   lint:\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 285d4bcc8..ee64b2152 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   css:",
    "output": "ci: change Node.js to `14` (#32796)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex ba974f4cd..eec268ceb 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -16,7 +16,7 @@\n     {{- $is_active_group := eq $.Page.Params.group $group_slug -}}\n \n     {{- if $group.pages }}\n-      <li class=\"mb-1{{ if $is_active_group }} active{{ end }}\">\n+      <li class=\"mb-1\">\n         <button class=\"btn d-inline-flex align-items-center rounded{{ if not $is_active_group }} collapsed{{ end }}\" data-bs-toggle=\"collapse\" data-bs-target=\"#{{ $group_slug }}-collapse\" aria-expanded=\"{{ $is_active_group }}\"{{ if $is_active_group }} aria-current=\"true\"{{ end }}>\n           {{ $group.title }}\n         </button>\n@@ -34,8 +34,8 @@\n       </li>\n     {{- else }}\n       <li class=\"my-3 mx-4 border-top\"></li>\n-      <li{{ if $is_active_group }} class=\"active\"{{ end }}>\n-        <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/\" class=\"d-inline-flex align-items-center rounded\">\n+      <li>\n+        <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/\" class=\"d-inline-flex align-items-center rounded{{ if $is_active_group }} active{{ end }}\"{{ if $is_active_group }} aria-current=\"page\"{{ end }}>\n           {{ $group.title }}\n         </a>\n       </li>",
    "output": "docs(sidebar): active link"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/helpers/_ratio.scss b/scss/helpers/_ratio.scss\nindex 3c0ff330a..2390ee339 100644\n--- a/scss/helpers/_ratio.scss\n+++ b/scss/helpers/_ratio.scss\n@@ -6,7 +6,7 @@\n \n   &::before {\n     display: block;\n-    padding-top: var(--aspect-ratio);\n+    padding-top: var(--#{$variable-prefix}aspect-ratio);\n     content: \"\";\n   }\n \n@@ -21,6 +21,6 @@\n \n @each $key, $ratio in $aspect-ratios {\n   .ratio-#{$key} {\n-    --aspect-ratio: #{$ratio};\n+    --#{$variable-prefix}aspect-ratio: #{$ratio};\n   }\n }\ndiff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex ce7ea7539..b997689ed 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -187,7 +187,7 @@\n     width: 16rem;\n \n     @include media-breakpoint-up(md) {\n-      --aspect-ratio: 50%; // 2x1\n+      --bs-aspect-ratio: 50%; // 2x1\n     }\n   }\n }\ndiff --git a/site/content/docs/5.0/helpers/ratio.md b/site/content/docs/5.0/helpers/ratio.md\nindex 62e173ff1..771bc07cb 100644\n--- a/site/content/docs/5.0/helpers/ratio.md\n+++ b/site/content/docs/5.0/helpers/ratio.md\n@@ -49,10 +49,10 @@ Aspect ratios can be customized with modifier classes. By default the following\n \n Each `.ratio-*` class includes a CSS custom property (or CSS variable) in the selector. You can override this CSS variable to create custom aspect ratios on the fly with some quick math on your part.\n \n-For example, to create a 2x1 aspect ratio, set `--aspect-ratio: 50%` on the `.ratio`.\n+For example, to create a 2x1 aspect ratio, set `--bs-aspect-ratio: 50%` on the `.ratio`.\n \n {{< example class=\"bd-example-ratios\" >}}\n-<div class=\"ratio\" style=\"--aspect-ratio: 50%;\">\n+<div class=\"ratio\" style=\"--bs-aspect-ratio: 50%;\">\n   <div>2x1</div>\n </div>\n {{< /example >}}\n@@ -62,7 +62,7 @@ This CSS variable makes it easy to modify the aspect ratio across breakpoints. T\n ```scss\n .ratio-4x3 {\n   @include media-breakpoint-up(md) {\n-    --aspect-ratio: 50%; // 2x1\n+    --bs-aspect-ratio: 50%; // 2x1\n   }\n }\n ```\ndiff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex 551499e35..895b8c275 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -13,6 +13,7 @@ toc: true\n \n #### Utilities\n \n+- Renamed `--aspect-ratio` to `--bs-aspect-ratio` to be consistent with other custom properties.\n - Extended the `.visually-hidden-focusable` helper to also work on containers, using `:focus-within`.\n - `bootstrap-utilities.css` now also includes our helpers. Helpers don't need to be imported in custom builds anymore.\n - Extended form validation states customization capabilities. Added three new optional parameters to the `form-validation-state` mixin: `tooltip-color`, `tooltip-bg-color`, `focus-box-shadow`. These parameters can be set in the `$form-validation-states` map. [See #31757](https://github.com/twbs/bootstrap/pull/31757).",
    "output": "fix(ratio): missing variable prefix (#32501)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 00831721d..917ccc188 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -19,7 +19,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 966dfbf72..03b3a2b52 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex a75f018c5..7fb947005 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 58b55fc7c..d2529cbfe 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 1ec0d6909..09c110fc8 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -25,7 +25,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: ${{ matrix.node }}\n \ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex e850a1f1b..30c434984 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 2db55f0ff..9e9cffa40 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n ",
    "output": "ci: update to actions/setup-node@v2 (#32635)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 9a933831f..d893ba9dc 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -49,7 +49,7 @@\n     padding: .25rem .5rem;\n     font-weight: 600;\n     color: rgba($black, .65);\n-    background-color: none;\n+    background-color: transparent;\n     border: 0;\n \n     &:hover,",
    "output": "docs(sidebar): invalid CSS value (#32575)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_subnav.scss b/site/assets/scss/_subnav.scss\nindex 8377ff423..8979aa3cd 100644\n--- a/site/assets/scss/_subnav.scss\n+++ b/site/assets/scss/_subnav.scss\n@@ -1,7 +1,7 @@\n .bd-subnavbar {\n   // The position and z-index are needed for the dropdown to stay on top of the content\n   position: relative;\n-  z-index: $zindex-sticky;\n+  z-index: $bd-navbar-zindex;\n   background-color: rgba($white, .95);\n   box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .05), inset 0 -1px 0 rgba(0, 0, 0, .15);\n \ndiff --git a/site/assets/scss/_variables.scss b/site/assets/scss/_variables.scss\nindex 110600260..6e1ae2efd 100644\n--- a/site/assets/scss/_variables.scss\n+++ b/site/assets/scss/_variables.scss\n@@ -11,3 +11,6 @@ $bd-warning:       #f0ad4e;\n $bd-danger:        #d9534f;\n $dropdown-active-icon: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='#292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/></svg>\");\n $sidebar-collapse-icon: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><path fill='none' stroke='rgba(0,0,0,.5)' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 14l6-6-6-6'/></svg>\");\n+\n+// Higher than core's $zindex-tooltip, which is 1070\n+$bd-navbar-zindex: 1080;",
    "output": "docs: Fix popover example showing above navbar (#32445)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_alert.scss b/scss/_alert.scss\nindex 3d9b69bcd..34f1e84ed 100644\n--- a/scss/_alert.scss\n+++ b/scss/_alert.scss\n@@ -44,14 +44,14 @@\n // Generate contextual modifier classes for colorizing the alert.\n \n @each $state, $value in $theme-colors {\n-  $background: shift-color($value, $alert-bg-scale);\n-  $border: shift-color($value, $alert-border-scale);\n-  $color: shift-color($value, $alert-color-scale);\n-  @if (contrast-ratio($background, $color) < $min-contrast-ratio) {\n-    $color: mix($value, color-contrast($background), abs($alert-color-scale));\n+  $alert-background: shift-color($value, $alert-bg-scale);\n+  $alert-border: shift-color($value, $alert-border-scale);\n+  $alert-color: shift-color($value, $alert-color-scale);\n+  @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {\n+    $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale));\n   }\n   .alert-#{$state} {\n-    @include alert-variant($background, $border, $color);\n+    @include alert-variant($alert-background, $alert-border, $alert-color);\n   }\n }\n // scss-docs-end alert-modifiers\ndiff --git a/scss/_list-group.scss b/scss/_list-group.scss\nindex a95adc181..7e23b8e0c 100644\n--- a/scss/_list-group.scss\n+++ b/scss/_list-group.scss\n@@ -152,12 +152,12 @@\n // Organizationally, this must come after the `:hover` states.\n \n @each $state, $value in $theme-colors {\n-  $background: shift-color($value, $list-group-item-bg-scale);\n-  $color: shift-color($value, $list-group-item-color-scale);\n-  @if (contrast-ratio($background, $color) < $min-contrast-ratio) {\n-    $color: mix($value, color-contrast($background), abs($alert-color-scale));\n+  $list-group-background: shift-color($value, $list-group-item-bg-scale);\n+  $list-group-color: shift-color($value, $list-group-item-color-scale);\n+  @if (contrast-ratio($list-group-background, $list-group-color) < $min-contrast-ratio) {\n+    $list-group-color: mix($value, color-contrast($list-group-background), abs($alert-color-scale));\n   }\n \n-  @include list-group-item-variant($state, $background, $color);\n+  @include list-group-item-variant($state, $list-group-background, $list-group-color);\n }\n // scss-docs-end list-group-modifiers",
    "output": "fix: variables collide with globals (#32492)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_clipboard-js.scss b/site/assets/scss/_clipboard-js.scss\nindex 12be4037c..83b9a8b9e 100644\n--- a/site/assets/scss/_clipboard-js.scss\n+++ b/site/assets/scss/_clipboard-js.scss\n@@ -29,7 +29,8 @@\n   border: 1px solid;\n   @include border-radius();\n \n-  &:hover {\n+  &:hover,\n+  &:focus {\n     color: $white;\n     background-color: $primary;\n   }",
    "output": "docs: style clipboard button on `:focus`, not just `:hover` (#32461)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/toasts.md b/site/content/docs/5.0/components/toasts.md\nindex 740a926f9..b6f7e3893 100644\n--- a/site/content/docs/5.0/components/toasts.md\n+++ b/site/content/docs/5.0/components/toasts.md\n@@ -137,7 +137,7 @@ Place toasts with custom CSS as you need them. The top right is often used for n\n \n {{< example >}}\n <form>\n-  <div class=\"form-group mb-3\">\n+  <div class=\"mb-3\">\n     <label for=\"selectToastPlacement\">Toast placement</label>\n     <select class=\"form-select mt-2\" id=\"selectToastPlacement\">\n       <option value=\"\" selected>Select a position...</option>",
    "output": "docs: Remove unneeded `.form-group` class (#32483)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/content/reboot.md b/site/content/docs/5.0/content/reboot.md\nindex 4613a7a11..6529e5ef2 100644\n--- a/site/content/docs/5.0/content/reboot.md\n+++ b/site/content/docs/5.0/content/reboot.md\n@@ -33,6 +33,8 @@ Bootstrap utilizes a \"native font stack\" or \"system font stack\" for optimum text\n \n ```scss\n $font-family-sans-serif:\n+  // Cross-platform generic font family (default user interface font)\n+  system-ui,\n   // Safari for macOS and iOS (San Francisco)\n   -apple-system,\n   // Chrome < 56 for macOS (San Francisco)\ndiff --git a/site/content/docs/5.0/getting-started/rtl.md b/site/content/docs/5.0/getting-started/rtl.md\nindex aeaf8c8c3..cd209298b 100644\n--- a/site/content/docs/5.0/getting-started/rtl.md\n+++ b/site/content/docs/5.0/getting-started/rtl.md\n@@ -116,6 +116,8 @@ For example, to switch from `Helvetica Neue Webfont` for LTR to `Helvetica Neue\n ```scss\n $font-family-sans-serif:\n   Helvetica Neue #{\"/* rtl:insert:Arabic */\"},\n+  // Cross-platform generic font family (default user interface font)\n+  system-ui,\n   // Safari for macOS and iOS (San Francisco)\n   -apple-system,\n   // Chrome < 56 for macOS (San Francisco)",
    "output": "docs: Add system-ui to native font stack documentation (#32455)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/carousel.js b/js/src/carousel.js\nindex a266ec10f..06a391419 100644\n--- a/js/src/carousel.js\n+++ b/js/src/carousel.js\n@@ -11,6 +11,7 @@ import {\n   getElementFromSelector,\n   getTransitionDurationFromElement,\n   isVisible,\n+  isRTL,\n   reflow,\n   triggerTransitionEnd,\n   typeCheckConfig\n@@ -250,12 +251,20 @@ class Carousel extends BaseComponent {\n \n     // swipe left\n     if (direction > 0) {\n-      this.prev()\n+      if (isRTL) {\n+        this.next()\n+      } else {\n+        this.prev()\n+      }\n     }\n \n     // swipe right\n     if (direction < 0) {\n-      this.next()\n+      if (isRTL) {\n+        this.prev()\n+      } else {\n+        this.next()\n+      }\n     }\n   }\n \n@@ -339,10 +348,18 @@ class Carousel extends BaseComponent {\n \n     if (event.key === ARROW_LEFT_KEY) {\n       event.preventDefault()\n-      this.prev()\n+      if (isRTL) {\n+        this.next()\n+      } else {\n+        this.prev()\n+      }\n     } else if (event.key === ARROW_RIGHT_KEY) {\n       event.preventDefault()\n-      this.next()\n+      if (isRTL) {\n+        this.prev()\n+      } else {\n+        this.next()\n+      }\n     }\n   }\n ",
    "output": "fix(carousel): switch prev/next directions in RTL"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.css b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.css\nindex 16ffb65be..77aa0f23c 100644\n--- a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.css\n+++ b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.css\n@@ -63,6 +63,10 @@ body {\n   line-height: 0;\n   content: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%280,0,0,.5%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 14l6-6-6-6'/%3e%3c/svg%3e\");\n   transition: transform .35s ease;\n+\n+  /* rtl:raw:\n+  transform: rotate(180deg) translateX(-2px);\n+  */\n   transform-origin: .5em 50%;\n }\n \ndiff --git a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.rtl.css b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.rtl.css\nindex 6d66a1d5d..c1a4a1ccc 100644\n--- a/site/content/docs/5.0/examples/cheatsheet/cheatsheet.rtl.css\n+++ b/site/content/docs/5.0/examples/cheatsheet/cheatsheet.rtl.css\n@@ -63,6 +63,7 @@ body {\n   line-height: 0;\n   content: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%280,0,0,.5%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 14l6-6-6-6'/%3e%3c/svg%3e\");\n   transition: transform .35s ease;\n+  transform: rotate(180deg) translateX(-2px);\n   transform-origin: .5em 50%;\n }\n ",
    "output": "docs(cheatsheet): fix RTL sidenav arrows"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 0b4cfbdaa..00831721d 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -12,6 +12,7 @@ jobs:\n   browserstack:\n     runs-on: ubuntu-latest\n     if: github.repository == 'twbs/bootstrap' && (!contains(github.event.commits[0].message, '[ci skip]') && !contains(github.event.commits[0].message, '[skip ci]'))\n+    timeout-minutes: 30\n \n     steps:\n       - name: Clone repository",
    "output": "ci: add a 30-min timeout for BrowserStack (#32238)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/translations.yml b/site/data/translations.yml\nindex 275356985..84d6f25ce 100644\n--- a/site/data/translations.yml\n+++ b/site/data/translations.yml\n@@ -22,3 +22,8 @@\n   code: ru\n   description: Bootstrap 5 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c\n   url: https://getbootstrap.su/\n+\n+- name: Korean\n+  code: ko\n+  description: Bootstrap 5 \ud55c\uad6d\uc5b4 \ubb38\uc11c\n+  url: https://getbootstrap.kr/",
    "output": "docs: Add Korean translation (#32284)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_dropdown.scss b/scss/_dropdown.scss\nindex c86aac625..f9ad9778b 100644\n--- a/scss/_dropdown.scss\n+++ b/scss/_dropdown.scss\n@@ -35,7 +35,7 @@\n \n   // Reset positioning when positioned with Popper\n   &[style] {\n-    right: auto;\n+    right: auto !important; // stylelint-disable-line declaration-no-important\n   }\n }\n ",
    "output": "fix(dropdown): ensure [style] will override inline styles"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 9163f803c..0b4cfbdaa 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,6 +5,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 865732259..966dfbf72 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 065f7a937..a75f018c5 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex ac38d97ea..58b55fc7c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex d14588965..1ec0d6909 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n \n jobs:\n   run:\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex b5035c1ef..e850a1f1b 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 6904f7eca..2db55f0ff 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:",
    "output": "ci: specify `FORCE_COLOR:2` (#32222)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_container.scss b/scss/mixins/_container.scss\nindex f92fcec68..ee6044d0d 100644\n--- a/scss/mixins/_container.scss\n+++ b/scss/mixins/_container.scss\n@@ -2,8 +2,8 @@\n \n @mixin make-container($gutter: $container-padding-x) {\n   width: 100%;\n-  padding-right: var(--bs-gutter-x, #{$gutter});\n-  padding-left: var(--bs-gutter-x, #{$gutter});\n+  padding-right: var(--#{$variable-prefix}gutter-x, #{$gutter});\n+  padding-left: var(--#{$variable-prefix}gutter-x, #{$gutter});\n   margin-right: auto;\n   margin-left: auto;\n }",
    "output": "fix(container): use $variable-prefix (#32201)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/popovers.md b/site/content/docs/5.0/components/popovers.md\nindex eaf93404b..d802d340e 100644\n--- a/site/content/docs/5.0/components/popovers.md\n+++ b/site/content/docs/5.0/components/popovers.md\n@@ -214,7 +214,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` opt\n       <td><code>selector</code></td>\n       <td>string | false</td>\n       <td><code>false</code></td>\n-      <td>If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to enable dynamic HTML content to have popovers added. See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/Johann-S/pen/djJYPb\">an informative example</a>.</td>\n+      <td>If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to enable dynamic HTML content to have popovers added. See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/team/bootstrap/pen/zYBXGwX?editors=1010\">an informative example</a>.</td>\n     </tr>\n     <tr>\n       <td><code>template</code></td>\ndiff --git a/site/content/docs/5.0/components/tooltips.md b/site/content/docs/5.0/components/tooltips.md\nindex e3ac87ffe..ed1a41e88 100644\n--- a/site/content/docs/5.0/components/tooltips.md\n+++ b/site/content/docs/5.0/components/tooltips.md\n@@ -216,7 +216,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` opt\n       <td><code>selector</code></td>\n       <td>string | false</td>\n       <td><code>false</code></td>\n-      <td>If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (<code>jQuery.on</code> support). See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/Johann-S/pen/djJYPb\">an informative example</a>.</td>\n+      <td>If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (<code>jQuery.on</code> support). See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/team/bootstrap/pen/zYBXGwX?editors=1010\">an informative example</a>.</td>\n     </tr>\n     <tr>\n       <td><code>template</code></td>",
    "output": "docs: update selector CodePen example (#32163)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/masthead-followup.html b/site/layouts/partials/home/masthead-followup.html\nindex 2f767aa34..91245eece 100644\n--- a/site/layouts/partials/home/masthead-followup.html\n+++ b/site/layouts/partials/home/masthead-followup.html\n@@ -12,7 +12,7 @@\n       <a class=\"btn btn-lg btn-outline-primary mb-3\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/download/\">Read installation docs</a>\n     </div>\n     <div class=\"col-md-7 pl-md-5\">\n-      {{ highlight \"npm install bootstrap\" \"sh\" \"\" }}\n+      {{ highlight \"npm install bootstrap@next\" \"sh\" \"\" }}\n       {{ highlight (printf (\"gem install bootstrap -v %s\") .Site.Params.current_ruby_version) \"sh\" \"\" }}\n     </div>\n   </section>",
    "output": "docs: fix homepage npm install version (#32194)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 0575a465e..9a933831f 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -32,6 +32,7 @@\n   a {\n     padding: .1875rem .5rem;\n     margin-top: .125rem;\n+    margin-left: 1.25rem;\n     color: rgba($black, .65);\n     text-decoration: if($link-decoration == none, null, none);\n \n@@ -41,28 +42,40 @@\n       text-decoration: if($link-hover-decoration == underline, none, null);\n       background-color: rgba($bd-purple-bright, .1);\n     }\n+  }\n+\n+  .btn {\n+    // Custom styles (as we don't have a completely neutral button style)\n+    padding: .25rem .5rem;\n+    font-weight: 600;\n+    color: rgba($black, .65);\n+    background-color: none;\n+    border: 0;\n+\n+    &:hover,\n+    &:focus {\n+      color: rgba($black, .85);\n+      background-color: rgba($bd-purple-bright, .1);\n+    }\n \n-    // Indent if there's no submenu\n-    &:only-child {\n-      margin-left: 1.25rem;\n+    &:focus {\n+      box-shadow: 0 0 0 1px rgba($bd-purple-bright, .7);\n     }\n \n     // Add chevron if there's a submenu\n-    &:not(:only-child) {\n-      &::before {\n-        width: 1.25em;\n-        line-height: 0; // Align in the middle\n-        content: escape-svg($sidebar-collapse-icon);\n-        @include transition(transform .35s ease);\n-        transform-origin: .5em 50%;\n-      }\n+    &::before {\n+      width: 1.25em;\n+      line-height: 0; // Align in the middle\n+      content: escape-svg($sidebar-collapse-icon);\n+      @include transition(transform .35s ease);\n+      transform-origin: .5em 50%;\n+    }\n \n-      &:not(.collapsed) {\n-        color: rgba($black, .85);\n+    &[aria-expanded=\"true\"] {\n+      color: rgba($black, .85);\n \n-        &::before {\n-          transform: rotate(90deg);\n-        }\n+      &::before {\n+        transform: rotate(90deg);\n       }\n     }\n   }\ndiff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex 06900cb23..94acb4786 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -16,9 +16,9 @@\n     {{- $is_active_group := eq $.Page.Params.group $group_slug }}\n \n     <li class=\"mb-1{{ if $is_active_group }} active{{ end }}\">\n-      <a class=\"d-inline-flex align-items-center rounded{{ if not $is_active_group }} collapsed{{ end }}\" data-bs-toggle=\"collapse\" href=\"#{{ $group_slug }}-collapse\" role=\"button\" aria-expanded=\"{{ $is_active_group }}\"{{ if $is_active_group }} aria-current=\"true\"{{ end }}>\n+      <button class=\"btn d-inline-flex align-items-center rounded{{ if not $is_active_group }} collapsed{{ end }}\" data-bs-toggle=\"collapse\" data-bs-target=\"#{{ $group_slug }}-collapse\" aria-expanded=\"{{ $is_active_group }}\"{{ if $is_active_group }} aria-current=\"true\"{{ end }}>\n         {{ $group.title }}\n-      </a>\n+      </button>\n \n       {{- if $group.pages }}\n       <div class=\"collapse{{ if $is_active_group }} show{{ end }}\" id=\"{{ $group_slug }}-collapse\">",
    "output": "docs: change sidebar collapse controls to actual button elements (#31098)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/validation.md b/site/content/docs/5.0/forms/validation.md\nindex 215638e4f..dfdd72c9f 100644\n--- a/site/content/docs/5.0/forms/validation.md\n+++ b/site/content/docs/5.0/forms/validation.md\n@@ -52,7 +52,7 @@ Custom feedback styles apply custom colors, borders, focus styles, and backgroun\n   </div>\n   <div class=\"col-md-4\">\n     <label for=\"validationCustomUsername\" class=\"form-label\">Username</label>\n-    <div class=\"input-group\">\n+    <div class=\"input-group has-validation\">\n       <span class=\"input-group-text\" id=\"inputGroupPrepend\">@</span>\n       <input type=\"text\" class=\"form-control\" id=\"validationCustomUsername\" aria-describedby=\"inputGroupPrepend\" required>\n       <div class=\"invalid-feedback\">",
    "output": "docs: Add missing `.has-validation` class for input group example (#32162)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/dropdowns.md b/site/content/docs/5.0/components/dropdowns.md\nindex 921315e22..fab0296c5 100644\n--- a/site/content/docs/5.0/components/dropdowns.md\n+++ b/site/content/docs/5.0/components/dropdowns.md\n@@ -815,7 +815,7 @@ Use `data-bs-offset` or `data-bs-reference` to change the location of the dropdo\n \n ## Usage\n \n-Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the `.show` class on the parent list item. The `data-bs-toggle=\"dropdown\"` attribute is relied on for closing dropdown menus at an application level, so it's a good idea to always use it.\n+Via data attributes or JavaScript, the dropdown plugin toggles hidden content (dropdown menus) by toggling the `.show` class on the parent `.dropdown-menu`. The `data-bs-toggle=\"dropdown\"` attribute is relied on for closing dropdown menus at an application level, so it's a good idea to always use it.\n \n {{< callout info >}}\n On touch-enabled devices, opening a dropdown adds empty `mouseover` handlers to the immediate children of the `<body>` element. This admittedly ugly hack is necessary to work around a [quirk in iOS' event delegation](https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html), which would otherwise prevent a tap anywhere outside of the dropdown from triggering the code that closes the dropdown. Once the dropdown is closed, these additional empty `mouseover` handlers are removed.",
    "output": "docs(dropdowns): clarify where is `.show` applied (#32189)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/stylesheet.html b/site/layouts/partials/stylesheet.html\nindex ee9c7c54c..bdd531b86 100644\n--- a/site/layouts/partials/stylesheet.html\n+++ b/site/layouts/partials/stylesheet.html\n@@ -7,7 +7,7 @@\n \n {{- if (ne .Page.Layout \"examples\") }}\n {{- $targetDocsCssPath := printf \"/docs/%s/assets/css/docs.css\" .Site.Params.docs_version -}}\n-{{- $sassOptions := dict \"targetPath\" $targetDocsCssPath \"precision\" 6 -}}\n+{{- $sassOptions := dict \"targetPath\" $targetDocsCssPath \"outputStyle\" \"expanded\" \"precision\" 6 -}}\n {{- $postcssOptions := dict \"use\" \"autoprefixer\" \"noMap\" true -}}\n \n {{ if eq hugo.Environment \"production\" -}}",
    "output": "docs: use `expanded` Sass output style for development (#32176)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/utilities/api.md b/site/content/docs/5.0/utilities/api.md\nindex 7dd0d6ede..aee021b4f 100644\n--- a/site/content/docs/5.0/utilities/api.md\n+++ b/site/content/docs/5.0/utilities/api.md\n@@ -212,3 +212,45 @@ $utilities: (\n   \"float\": null,\n );\n ```\n+\n+## Adding to existing utilities\n+\n+Add new utilities with `map-merge`.Start by importing the utilities stylesheet, then use `map-merge` to add new properties and values.s\n+\n+```scss\n+@import \"bootstrap/scss/utilities\";\n+\n+$utilities: map-merge(\n+  $utilities,\n+  (\n+    \"font-size\": (\n+      responsive: true,\n+      property: font-weight,\n+      values: $display-font-sizes,\n+    )\n+  )\n+);\n+```\n+\n+## Modifying existing utilities\n+\n+Modify existing utilities with `map-get` and `map-merge`. Once again, be sure to import the utilities stylesheet before your custom utilities.\n+\n+```scss\n+@import \"bootstrap/scss/utilities\";\n+\n+$utilities: map-merge(\n+  $utilities,\n+  (\n+    \"width\": map-merge(\n+      map-get($utilities, \"width\"),\n+      (\n+        values: map-merge(\n+          map-get(map-get($utilities, \"width\"), \"values\"),\n+          (10: 10%),\n+        ),\n+      ),\n+    ),\n+  )\n+);\n+```",
    "output": "docs: add info on modifying and adding utilities"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex e6aa9422a..9163f803c 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,7 +5,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   browserstack:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex c37612bbc..865732259 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   bundlewatch:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex e16f90fa2..065f7a937 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   css:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 323eba1e4..ac38d97ea 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   docs:\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 93a7ce13b..d14588965 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -17,7 +17,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        node: [10, 12]\n+        node: [10, 12, 14]\n \n     steps:\n       - name: Clone repository\n@@ -48,7 +48,7 @@ jobs:\n \n       - name: Run Coveralls\n         uses: coverallsapp/github-action@master\n-        if: matrix.node == 12\n+        if: matrix.node == 14\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 7aaafc724..b5035c1ef 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   lint:\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 0aba2671a..6904f7eca 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   css:",
    "output": "ci: switch to Node.js 14. (#32003)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex f709b98da..c6c29dba1 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -7,7 +7,7 @@ env:\n jobs:\n   browserstack:\n     runs-on: ubuntu-latest\n-    if: github.repository == 'twbs/bootstrap'\n+    if: github.repository == 'twbs/bootstrap' && (!contains(github.event.commits[0].message, '[ci skip]') && !contains(github.event.commits[0].message, '[skip ci]'))\n \n     steps:\n       - name: Clone repository",
    "output": "ci: allow skipping BrowserStack (#31878)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/translations.yml b/site/data/translations.yml\nindex 030fa771b..275356985 100644\n--- a/site/data/translations.yml\n+++ b/site/data/translations.yml\n@@ -17,3 +17,8 @@\n   code: ja\n   description: Bootstrap 4 \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n   url: https://getbootstrap.jp/\n+\n+- name: Russian\n+  code: ru\n+  description: Bootstrap 5 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c\n+  url: https://getbootstrap.su/",
    "output": "docs: Add Russian translation (#31828)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex 5d0838583..6e5734854 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -15,6 +15,7 @@ toc: true\n - All `lighten()` and `darken()` functions in our codebase are replaced by `tint-color()` and `shade-color()`. These functions will mix the color with either white or black instead of changing its lightness by a fixed amount.\n - The `scale-color()` will either tint or shade a color depending on whether its weight parameter is positive or negative.\n - See [this PR](https://github.com/twbs/bootstrap/pull/30622) for more details.\n+- Spinners now honor `prefers-reduced-motion: reduce` by slowing down animations. [See #31882](https://github.com/twbs/bootstrap/pull/31882).\n \n ### Reboot\n ",
    "output": "docs(migration): mention spinners slow down (#31929)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/overview.md b/site/content/docs/5.0/forms/overview.md\nindex a181c34dd..501be9287 100644\n--- a/site/content/docs/5.0/forms/overview.md\n+++ b/site/content/docs/5.0/forms/overview.md\n@@ -103,7 +103,8 @@ However, if your form also includes custom button-like elements such as `<a clas\n \n {{< example >}}\n <form>\n-  <fieldset disabled aria-label=\"Disabled fieldset example\">\n+  <fieldset disabled>\n+    <legend>Disabled fieldset example</legend>\n     <div class=\"mb-3\">\n       <label for=\"disabledTextInput\" class=\"form-label\">Disabled input</label>\n       <input type=\"text\" id=\"disabledTextInput\" class=\"form-control\" placeholder=\"Disabled input\">",
    "output": "docs(forms): use a legend for fieldset instead of aria-label"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/layout.md b/site/content/docs/5.0/forms/layout.md\nindex 79048570b..f0fc0b582 100644\n--- a/site/content/docs/5.0/forms/layout.md\n+++ b/site/content/docs/5.0/forms/layout.md\n@@ -132,28 +132,26 @@ At times, you maybe need to use margin or padding utilities to create that perfe\n       <input type=\"password\" class=\"form-control\" id=\"inputPassword3\">\n     </div>\n   </div>\n-  <fieldset>\n-    <div class=\"row mb-3\">\n-      <legend class=\"col-form-label col-sm-2 pt-0\">Radios</legend>\n-      <div class=\"col-sm-10\">\n-        <div class=\"form-check\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios1\" value=\"option1\" checked>\n-          <label class=\"form-check-label\" for=\"gridRadios1\">\n-            First radio\n-          </label>\n-        </div>\n-        <div class=\"form-check\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios2\" value=\"option2\">\n-          <label class=\"form-check-label\" for=\"gridRadios2\">\n-            Second radio\n-          </label>\n-        </div>\n-        <div class=\"form-check disabled\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios3\" value=\"option3\" disabled>\n-          <label class=\"form-check-label\" for=\"gridRadios3\">\n-            Third disabled radio\n-          </label>\n-        </div>\n+  <fieldset class=\"row mb-3\">\n+    <legend class=\"col-form-label col-sm-2 pt-0\">Radios</legend>\n+    <div class=\"col-sm-10\">\n+      <div class=\"form-check\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios1\" value=\"option1\" checked>\n+        <label class=\"form-check-label\" for=\"gridRadios1\">\n+          First radio\n+        </label>\n+      </div>\n+      <div class=\"form-check\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios2\" value=\"option2\">\n+        <label class=\"form-check-label\" for=\"gridRadios2\">\n+          Second radio\n+        </label>\n+      </div>\n+      <div class=\"form-check disabled\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios3\" value=\"option3\" disabled>\n+        <label class=\"form-check-label\" for=\"gridRadios3\">\n+          Third disabled radio\n+        </label>\n       </div>\n     </div>\n   </fieldset>",
    "output": "docs(forms): fix incorrect legend nesting in fieldset"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/layout.md b/site/content/docs/5.0/forms/layout.md\nindex 84944b986..79048570b 100644\n--- a/site/content/docs/5.0/forms/layout.md\n+++ b/site/content/docs/5.0/forms/layout.md\n@@ -158,8 +158,7 @@ At times, you maybe need to use margin or padding utilities to create that perfe\n     </div>\n   </fieldset>\n   <div class=\"row mb-3\">\n-    <div class=\"col-form-label col-sm-2 pt-0\">Checkbox</div>\n-    <div class=\"col-sm-10\">\n+    <div class=\"col-sm-10 offset-sm-2\">\n       <div class=\"form-check\">\n         <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck1\">\n         <label class=\"form-check-label\" for=\"gridCheck1\">",
    "output": "docs(forms): drop useless text faking a label in horizontal forms example"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 3657aa522..707302adf 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -67,7 +67,7 @@ $info:          $cyan !default;\n $warning:       $yellow !default;\n $danger:        $red !default;\n $light:         $gray-100 !default;\n-$dark:          $gray-800 !default;\n+$dark:          $gray-900 !default;\n \n // scss-docs-start theme-colors-map\n $theme-colors: (",
    "output": "feat(colors): bump dark to gray-900 (#30550)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/modal.md b/site/content/docs/5.0/components/modal.md\nindex bb00382a2..d1815e170 100644\n--- a/site/content/docs/5.0/components/modal.md\n+++ b/site/content/docs/5.0/components/modal.md\n@@ -683,6 +683,10 @@ Another override is the option to pop up a modal that covers the user viewport,\n       <td><code>.modal-fullscreen-xl-down</code></td>\n       <td>Below <code>1200px</code></td>\n     </tr>\n+    <tr>\n+      <td><code>.modal-fullscreen-xxl-down</code></td>\n+      <td>Below <code>1400px</code></td>\n+    </tr>\n   </tbody>\n </table>\n \n@@ -692,6 +696,7 @@ Another override is the option to pop up a modal that covers the user viewport,\n   <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalFullscreenMd\">Full screen below md</button>\n   <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalFullscreenLg\">Full screen below lg</button>\n   <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalFullscreenXl\">Full screen below xl</button>\n+  <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalFullscreenXxl\">Full screen below xxl</button>\n </div>\n \n {{< highlight html >}}\n@@ -803,6 +808,23 @@ Another override is the option to pop up a modal that covers the user viewport,\n   </div>\n </div>\n \n+<div class=\"modal fade\" id=\"exampleModalFullscreenXxl\" tabindex=\"-1\" aria-labelledby=\"exampleModalFullscreenXxlLabel\" aria-hidden=\"true\">\n+  <div class=\"modal-dialog modal-fullscreen-xxl-down\">\n+    <div class=\"modal-content\">\n+      <div class=\"modal-header\">\n+        <h5 class=\"modal-title h4\" id=\"exampleModalFullscreenXxlLabel\">Full screen below xxl</h5>\n+        <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-label=\"Close\"></button>\n+      </div>\n+      <div class=\"modal-body\">\n+        ...\n+      </div>\n+      <div class=\"modal-footer\">\n+        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+\n ## Usage\n \n The modal plugin toggles your hidden content on demand, via data attributes or JavaScript. It also adds `.modal-open` to the `<body>` to override default scrolling behavior and generates a `.modal-backdrop` to provide a click area for dismissing shown modals when clicking outside the modal.",
    "output": "docs(modal): Add xxl fullscreen example (#31583)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-navbar.html b/site/layouts/partials/docs-navbar.html\nindex d75337141..46e43b81e 100644\n--- a/site/layouts/partials/docs-navbar.html\n+++ b/site/layouts/partials/docs-navbar.html\n@@ -1,7 +1,7 @@\n <header class=\"navbar navbar-expand-md navbar-dark bd-navbar\">\n   <nav class=\"container-xxl flex-wrap flex-md-nowrap\" aria-label=\"Main navigation\">\n     <a class=\"navbar-brand p-0 mr-2\" href=\"/\" aria-label=\"Bootstrap\">\n-      {{ partial \"icons/bootstrap-white-fill.svg\" (dict \"class\" \"d-block my-1\" \"width\" \"40px\" \"height\" \"32px\") }}\n+      {{ partial \"icons/bootstrap-white-fill.svg\" (dict \"class\" \"d-block my-1\" \"width\" \"40\" \"height\" \"32\") }}\n     </a>\n \n     <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#bdNavbar\" aria-controls=\"bdNavbar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\ndiff --git a/site/layouts/partials/docs-subnav.html b/site/layouts/partials/docs-subnav.html\nindex 0cf60eb1a..e036d8365 100644\n--- a/site/layouts/partials/docs-subnav.html\n+++ b/site/layouts/partials/docs-subnav.html\n@@ -7,8 +7,8 @@\n     {{ partial \"docs-versions\" . }}\n \n     <button class=\"btn bd-sidebar-toggle d-md-none py-0 px-1 ml-3 order-3 collapsed\" type=\"button\" data-toggle=\"collapse\" data-target=\"#bd-docs-nav\" aria-controls=\"bd-docs-nav\" aria-expanded=\"false\" aria-label=\"Toggle docs navigation\">\n-      {{ partial \"icons/expand.svg\" (dict \"class\" \"bi bi-expand\" \"width\" \"24px\" \"height\" \"24px\") }}\n-      {{ partial \"icons/collapse.svg\" (dict \"class\" \"bi bi-collapse\" \"width\" \"24px\" \"height\" \"24px\") }}\n+      {{ partial \"icons/expand.svg\" (dict \"class\" \"bi bi-expand\" \"width\" \"24\" \"height\" \"24\") }}\n+      {{ partial \"icons/collapse.svg\" (dict \"class\" \"bi bi-collapse\" \"width\" \"24\" \"height\" \"24\") }}\n     </button>\n   </div>\n </nav>",
    "output": "docs: remove pixels from SVGs (#31791)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/callout-danger-async-methods.md b/site/layouts/partials/callout-danger-async-methods.md\nindex 4ac5b27b3..c8afdc2df 100644\n--- a/site/layouts/partials/callout-danger-async-methods.md\n+++ b/site/layouts/partials/callout-danger-async-methods.md\n@@ -2,4 +2,4 @@\n \n All API methods are **asynchronous** and start a **transition**. They return to the caller as soon as the transition is started but **before it ends**. In addition, a method call on a **transitioning component will be ignored**.\n \n-[See our JavaScript documentation for more information](/docs/{{ .Site.Params.docs_version }}/getting-started/javascript/).\n+[See our JavaScript documentation for more information](/docs/{{ .Site.Params.docs_version }}/getting-started/javascript/#asynchronous-functions-and-transitions).",
    "output": "docs: link to the Asynchronous functions section (#31738)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/utilities/vertical-align.md b/site/content/docs/5.0/utilities/vertical-align.md\nindex 730133600..f7cf2207b 100644\n--- a/site/content/docs/5.0/utilities/vertical-align.md\n+++ b/site/content/docs/5.0/utilities/vertical-align.md\n@@ -9,7 +9,7 @@ Change the alignment of elements with the [`vertical-alignment`](https://develop\n \n Choose from `.align-baseline`, `.align-top`, `.align-middle`, `.align-bottom`, `.align-text-bottom`, and `.align-text-top` as needed.\n \n-To vertically center non-inline content (like `<div>`s and more), use our [flex box utilities]({{< docsref \"/utilities/flex#auto-margins\" >}}).\n+To vertically center non-inline content (like `<div>`s and more), use our [flex box utilities]({{< docsref \"/utilities/flex#align-items\" >}}).\n \n With inline elements:\n ",
    "output": "docs: Fix vertical align link"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/shortcodes/placeholder.html b/site/layouts/shortcodes/placeholder.html\nindex 03fbd05df..2373bc927 100644\n--- a/site/layouts/shortcodes/placeholder.html\n+++ b/site/layouts/shortcodes/placeholder.html\n@@ -23,7 +23,7 @@\n {{- $show_title := not (eq $title \"false\") -}}\n {{- $show_text := not (eq $text \"false\") -}}\n \n-<svg class=\"bd-placeholder-img{{ with $class }} {{ . }}{{ end }}\" width=\"{{ $width }}\" height=\"{{ $height }}\" xmlns=\"http://www.w3.org/2000/svg\"{{ if (or $show_title $show_text) }} aria-label=\"{{ if $show_title }}{{ $title }}{{ if $show_text }}: {{ end }}{{ end }}{{ if ($show_text) }}{{ $text }}{{ end }}\"{{ end }} preserveAspectRatio=\"xMidYMid slice\" role=\"img\" focusable=\"false\">\n+<svg class=\"bd-placeholder-img{{ with $class }} {{ . }}{{ end }}\" width=\"{{ $width }}\" height=\"{{ $height }}\" xmlns=\"http://www.w3.org/2000/svg\"{{ if (or $show_title $show_text) }} role=\"img\" aria-label=\"{{ if $show_title }}{{ $title }}{{ if $show_text }}: {{ end }}{{ end }}{{ if ($show_text) }}{{ $text }}{{ end }}\"{{ else }} aria-hidden=\"true\"{{ end }} preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\">\n   {{- if $show_title -}}<title>{{ $title }}</title>{{- end -}}\n   <rect width=\"100%\" height=\"100%\" fill=\"{{ $background }}\"/>\n   {{- if $show_text -}}<text x=\"50%\" y=\"50%\" fill=\"{{ $color }}\" dy=\".3em\">{{ $text }}</text>{{- end -}}",
    "output": "docs(placeholder): drop role=img and use aria-hidden for decorative SVG placeholders (#31575)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_clipboard-js.scss b/site/assets/scss/_clipboard-js.scss\nindex c89353397..12be4037c 100644\n--- a/site/assets/scss/_clipboard-js.scss\n+++ b/site/assets/scss/_clipboard-js.scss\n@@ -18,15 +18,15 @@\n \n .btn-clipboard {\n   position: absolute;\n-  top: .5rem;\n-  right: .5rem;\n+  top: .65rem;\n+  right: .65rem;\n   z-index: 10;\n   display: block;\n   padding: .25rem .5rem;\n-  @include font-size(.75em);\n-  color: $gray-800;\n-  background-color: transparent;\n-  border: 0;\n+  @include font-size(.65em);\n+  color: $primary;\n+  background-color: $white;\n+  border: 1px solid;\n   @include border-radius();\n \n   &:hover {\ndiff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex df735a41b..4b7aa4355 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -233,8 +233,8 @@\n \n   pre {\n     padding: 0;\n-    margin-top: 0;\n-    margin-bottom: 0;\n+    margin-top: .65rem;\n+    margin-bottom: .65rem;\n     background-color: transparent;\n     border: 0;\n   }",
    "output": "docs: Add top/bottom margin to highlighted code samples (#31036)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/customize/color.md b/site/content/docs/5.0/customize/color.md\nindex 6e61e6df1..350aab699 100644\n--- a/site/content/docs/5.0/customize/color.md\n+++ b/site/content/docs/5.0/customize/color.md\n@@ -85,7 +85,7 @@ Bootstrap's source Sass files include three maps to help you quickly and easily\n \n - `$colors` lists all our available base (`500`) colors\n - `$theme-colors` lists all semantically named theme colors (shown below)\n-- `$grays` lists all tins and shades of gray\n+- `$grays` lists all tints and shades of gray\n \n Within `scss/_variables.scss`, you'll find Bootstrap's color variables and Sass map. Here's an example of the `$colors` Sass map:\n ",
    "output": "docs: Fix typo on Customize -> Color page (#31556)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_breakpoints.scss b/scss/mixins/_breakpoints.scss\nindex 66a0050c1..cdc8034eb 100644\n--- a/scss/mixins/_breakpoints.scss\n+++ b/scss/mixins/_breakpoints.scss\n@@ -107,8 +107,9 @@\n // No minimum for the smallest breakpoint, and no maximum for the largest one.\n // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n-  $min: breakpoint-min($name, $breakpoints);\n-  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n+  $min:  breakpoint-min($name, $breakpoints);\n+  $next: breakpoint-next($name, $breakpoints);\n+  $max:  breakpoint-max($next);\n \n   @if $min != null and $max != null {\n     @media (min-width: $min) and (max-width: $max) {\n@@ -119,7 +120,7 @@\n       @content;\n     }\n   } @else if $min == null {\n-    @include media-breakpoint-down($name, $breakpoints) {\n+    @include media-breakpoint-down($next, $breakpoints) {\n       @content;\n     }\n   }",
    "output": "fix(breakpoints): use next breakpoint when targetting xs only"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/content/typography.md b/site/content/docs/5.0/content/typography.md\nindex 0ae59b4cd..d6ed1c3eb 100644\n--- a/site/content/docs/5.0/content/typography.md\n+++ b/site/content/docs/5.0/content/typography.md\n@@ -145,7 +145,7 @@ Styling for common inline HTML5 elements.\n <p><del>This line of text is meant to be treated as deleted text.</del></p>\n <p><s>This line of text is meant to be treated as no longer accurate.</s></p>\n <p><ins>This line of text is meant to be treated as an addition to the document.</ins></p>\n-<p><u>This line of text will render as underlined</u></p>\n+<p><u>This line of text will render as underlined.</u></p>\n <p><small>This line of text is meant to be treated as fine print.</small></p>\n <p><strong>This line rendered as bold text.</strong></p>\n <p><em>This line rendered as italicized text.</em></p>",
    "output": "docs(typography): missing punctuation (#31505)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex afb320fae..4a4cddbcb 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -153,7 +153,7 @@ Changes to Reboot, typography, tables, and more.\n - Split table cell padding variables into `-y` and `-x`.\n - Dropped `.pre-scrollable` class. [See #29135](https://github.com/twbs/bootstrap/pull/29135)\n - `.text-*` utilities do not add hover and focus states to links anymore. `.link-*` helper classes can be used instead. [See #29267](https://github.com/twbs/bootstrap/pull/29267)\n-- Drop `.text-justify` class. [See #229793](https://github.com/twbs/bootstrap/pull/29793)\n+- Drop `.text-justify` class. [See #29793](https://github.com/twbs/bootstrap/pull/29793)\n \n ### Typography\n ",
    "output": "docs: Fix issue number typo in migration"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_skippy.scss b/site/assets/scss/_skippy.scss\nindex c573e4548..894db70db 100644\n--- a/site/assets/scss/_skippy.scss\n+++ b/site/assets/scss/_skippy.scss\n@@ -1,13 +1,20 @@\n+// stylelint-disable declaration-no-important\n+\n .skippy {\n-  position: fixed;\n-  top: .5rem;\n-  left: .5rem;\n-  z-index: $zindex-fixed;\n-  padding: .5rem;\n-  color: $white;\n   background-color: $bd-purple;\n \n-  &:hover {\n+  a {\n     color: $white;\n   }\n+\n+  &:focus-within a {\n+    position: static !important;\n+    width: auto !important;\n+    height: auto !important;\n+    padding: $spacer / 2 !important;\n+    margin: $spacer / 4 !important;\n+    overflow: visible !important;\n+    clip: auto !important;\n+    white-space: normal !important;\n+  }\n }\ndiff --git a/site/layouts/partials/skippy.html b/site/layouts/partials/skippy.html\nindex 8dce2bc49..e6bf901a9 100644\n--- a/site/layouts/partials/skippy.html\n+++ b/site/layouts/partials/skippy.html\n@@ -1,5 +1,9 @@\n-<a class=\"skippy visually-hidden-focusable\" href=\"#content\">Skip to main content</a>\n+<div class=\"skippy overflow-hidden\">\n+  <div class=\"container-xl\">\n+    <a class=\"visually-hidden-focusable d-inline-flex p-2 m-1\" href=\"#content\">Skip to main content</a>\n \n-{{ if (eq .Page.Layout \"docs\") }}\n-  <a class=\"skippy visually-hidden-focusable d-none d-md-block\" href=\"#bd-docs-nav\">Skip to docs navigation</a>\n-{{- end }}\n+    {{ if (eq .Page.Layout \"docs\") }}\n+      <a class=\"visually-hidden-focusable d-none d-md-inline-flex p-2 m-1\" href=\"#bd-docs-nav\">Skip to docs navigation</a>\n+    {{- end }}\n+  </div>\n+</div>",
    "output": "docs(skippy): prevent skip links from overlapping header"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/utilities/interactions.md b/site/content/docs/5.0/utilities/interactions.md\nindex 4c0c71f1b..8909e8558 100644\n--- a/site/content/docs/5.0/utilities/interactions.md\n+++ b/site/content/docs/5.0/utilities/interactions.md\n@@ -18,10 +18,14 @@ Change the way in which the content is selected when the user interacts with it.\n \n ## Pointer events\n \n-Bootstrap provides `pe-none` and `pe-auto` classes to prevent or add element interactions.\n+Bootstrap provides `.pe-none` and `.pe-auto` classes to prevent or add element interactions.\n \n {{< example >}}\n-<p><a href=\"#\" class=\"pe-none\">This link</a> can not be clicked.</p>\n+<p><a href=\"#\" class=\"pe-none\" tabindex=\"-1\" aria-disabled=\"true\">This link</a> can not be clicked.</p>\n <p><a href=\"#\" class=\"pe-auto\">This link</a> can be clicked (this is default behaviour).</p>\n-<p class=\"pe-none\"><a href=\"#\">This link</a> can not be clicked because the <code>pointer-events</code> property is inherited from its parent. However, <a href=\"#\" class=\"pe-auto\">this link</a> has a <code>pe-auto</code> class and can be clicked.</p>\n+<p class=\"pe-none\"><a href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">This link</a> can not be clicked because the <code>pointer-events</code> property is inherited from its parent. However, <a href=\"#\" class=\"pe-auto\">this link</a> has a <code>pe-auto</code> class and can be clicked.</p>\n {{< /example >}}\n+\n+{{< callout warning >}}\n+The `.pe-none` class (and the `pointer-events` CSS property it sets) only prevents interactions with a pointer (mouse, stylus, touch). Links and controls with `.pe-none` are, by default, still focusable and actionable for keyboard users. To ensure that they are completely neutralized even for keyboard users, you may need to add further attributes such as `tabindex=\"-1\"` (to prevent them from receiving keyboard focus) and `aria-disabled=\"true\"` (to convey the fact they are effectively disabled to assistive technologies), and possibly use JavaScript to completely prevent them from being actionable. For form controls, consider using the `disabled` HTML attribute instead.\n+{{< /callout >}}\n\\ No newline at end of file",
    "output": "docs: clarify that pointer events classes don't affect keyboard interaction (#31134)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/forms/checks.md b/site/content/docs/5.0/forms/checks-radios.md\nsimilarity index 99%\nrename from site/content/docs/5.0/forms/checks.md\nrename to site/content/docs/5.0/forms/checks-radios.md\nindex a8b366625..6d8bdf386 100644\n--- a/site/content/docs/5.0/forms/checks.md\n+++ b/site/content/docs/5.0/forms/checks-radios.md\n@@ -1,8 +1,9 @@\n ---\n layout: docs\n-title: Checks\n+title: Checks and radios\n description: Create consistent cross-browser and cross-device checkboxes and radios with our completely rewritten checks component.\n group: forms\n+aliases: \"/docs/5.0/forms/checks/\"\n toc: true\n ---\n \ndiff --git a/site/content/docs/5.0/forms/overview.md b/site/content/docs/5.0/forms/overview.md\nindex 22ff29daf..1eb4cce59 100644\n--- a/site/content/docs/5.0/forms/overview.md\n+++ b/site/content/docs/5.0/forms/overview.md\n@@ -10,7 +10,7 @@ sections:\n     description: Style textual inputs and textareas with support for multiple states.\n   - title: Select\n     description: Improve browser default select elements with a custom initial appearance.\n-  - title: Checks\n+  - title: Checks & radios\n     description: Use our custom radio buttons and checkboxes in forms for selecting input options.\n   - title: File\n     description: Replace browser default file inputs with our custom version with optional JavaScript.\ndiff --git a/site/content/docs/5.0/migration.md b/site/content/docs/5.0/migration.md\nindex a366abb93..b334a80f4 100644\n--- a/site/content/docs/5.0/migration.md\n+++ b/site/content/docs/5.0/migration.md\n@@ -150,7 +150,7 @@ Badges were overhauled to better differentiate themselves from buttons and to be\n \n ### Buttons\n \n-- The checkbox/radio toggle is removed from the button plugin in favour of a CSS only solution, which is documented in the [form checks]({{< docsref \"/forms/checks#toggle-buttons\" >}}) docs. The `.btn-check` class can be added to inputs, any label with `.btn` and modifier class can be used to theme the labels. [See #30650](https://github.com/twbs/bootstrap/pull/30650).\n+- The checkbox/radio toggle is removed from the button plugin in favour of a CSS only solution, which is documented in the [form checks and radios]({{< docsref \"/forms/checks-radios#toggle-buttons\" >}}) docs. The `.btn-check` class can be added to inputs, any label with `.btn` and modifier class can be used to theme the labels. [See #30650](https://github.com/twbs/bootstrap/pull/30650).\n \n ### Cards\n \ndiff --git a/site/data/sidebar.yml b/site/data/sidebar.yml\nindex 4864085c0..195cf3af3 100644\n--- a/site/data/sidebar.yml\n+++ b/site/data/sidebar.yml\n@@ -44,7 +44,7 @@\n     - title: Overview\n     - title: Form control\n     - title: Select\n-    - title: Checks\n+    - title: Checks & radios\n     - title: File\n     - title: Range\n     - title: Input group",
    "output": "docs: rename form checks page to \"Checks / radios\" (#31090)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/utilities/colors.md b/site/content/docs/5.0/utilities/colors.md\nindex 76788034b..6ca7a7d12 100644\n--- a/site/content/docs/5.0/utilities/colors.md\n+++ b/site/content/docs/5.0/utilities/colors.md\n@@ -6,6 +6,16 @@ group: utilities\n toc: true\n ---\n \n+{{< callout info >}}\n+##### Dealing with specificity\n+\n+Sometimes contextual classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element's content in a `<div>` with the class.\n+{{< /callout >}}\n+\n+{{< callout info >}}\n+{{< partial \"callout-warning-color-assistive-technologies.md\" >}}\n+{{< /callout >}}\n+\n ## Color\n \n Colorize text with color utilities. If you want to colorize links, you can use the [`.link-*` helper classes]({{< docsref \"/helpers/colored-links\" >}}) which have `:hover` and `:focus` states.\n@@ -50,13 +60,3 @@ Do you need a gradient in your custom CSS? Just add `background-image: var(--bs-\n {{- end -}}\n {{< /colors.inline >}}\n {{< /markdown >}}\n-\n-{{< callout info >}}\n-#### Dealing with specificity\n-\n-Sometimes contextual classes cannot be applied due to the specificity of another selector. In some cases, a sufficient workaround is to wrap your element's content in a `<div>` with the class.\n-{{< /callout >}}\n-\n-{{< callout info >}}\n-{{< partial \"callout-warning-color-assistive-technologies.md\" >}}\n-{{< /callout >}}",
    "output": "docs: move color utility callouts to start of page (#31135)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/layout/gutters.md b/site/content/docs/5.0/layout/gutters.md\nindex 18cbefeee..87d2731a4 100644\n--- a/site/content/docs/5.0/layout/gutters.md\n+++ b/site/content/docs/5.0/layout/gutters.md\n@@ -10,7 +10,7 @@ toc: true\n \n - **Gutters are the gaps between column content, created by horizontal `padding`.** We set `padding-right` and `padding-left` on each column, and use negative `margin` to offset that at the start and end of each row to align content.\n \n-- **Gutters start are `1.5rem` (`20px`) wide.** This allows us to match our grid to the [padding and margin spacers]({{< docsref \"/utilities/spacing\" >}}) scale.\n+- **Gutters start at `1.5rem` (`24px`) wide.** This allows us to match our grid to the [padding and margin spacers]({{< docsref \"/utilities/spacing\" >}}) scale.\n \n - **Gutters can be responsively adjusted.** Use breakpoint-specific gutter classes to modify horizontal gutters, vertical gutters, and all gutters.\n ",
    "output": "docs: fix typo (#31106)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/core-team.yml b/site/data/core-team.yml\nindex 5fbae8506..f59b4285c 100644\n--- a/site/data/core-team.yml\n+++ b/site/data/core-team.yml\n@@ -27,3 +27,6 @@\n \n - name: Shohei Yoshida\n   user: ysds\n+\n+- name: Ga\u00ebl Poupard\n+  user: ffoodd",
    "output": "docs: add Ga\u00ebl Poupard to the core team page (#31081)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/components/button-group.md b/site/content/docs/5.0/components/button-group.md\nindex 15fef0e08..af0ce9aa1 100644\n--- a/site/content/docs/5.0/components/button-group.md\n+++ b/site/content/docs/5.0/components/button-group.md\n@@ -26,11 +26,11 @@ In order for assistive technologies (such as screen readers) to convey that a se\n In addition, groups and toolbars should be given an explicit label, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. In the examples provided here, we use `aria-label`, but alternatives such as `aria-labelledby` can also be used.\n {{< /callout >}}\n \n-These classes can also be added to links. Use the `.active` class to highlight a link.\n+These classes can also be added to groups of links, as an alternative to the [`.nav` navigation components]({{< docsref \"/components/navs\" >}}).\n \n {{< example >}}\n <div class=\"btn-group\">\n-  <a href=\"#\" class=\"btn btn-secondary active\">Active link</a>\n+  <a href=\"#\" class=\"btn btn-secondary active\" aria-current=\"page\">Active link</a>\n   <a href=\"#\" class=\"btn btn-secondary\">Link</a>\n   <a href=\"#\" class=\"btn btn-secondary\">Link</a>\n </div>",
    "output": "docs: clarify rationale for button group on links (#31071)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_reboot.scss b/scss/_reboot.scss\nindex b3763d05a..b6e8a79a5 100644\n--- a/scss/_reboot.scss\n+++ b/scss/_reboot.scss\n@@ -369,12 +369,14 @@ caption {\n   text-align: left;\n }\n \n-// 1. Matches default `<td>` alignment by inheriting `text-align`.\n-// 2. Fix alignment for Safari\n+// 1. Removes font-weight bold by inheriting\n+// 2. Matches default `<td>` alignment by inheriting `text-align`.\n+// 3. Fix alignment for Safari\n \n th {\n-  text-align: inherit; // 1\n-  text-align: -webkit-match-parent; // 2\n+  font-weight: $table-th-font-weight; // 1\n+  text-align: inherit; // 2\n+  text-align: -webkit-match-parent; // 3\n }\n \n thead,\ndiff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 2e0d0cef6..9e8fd622e 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -487,6 +487,8 @@ $table-cell-vertical-align:   top !default;\n $table-color:                 $body-color !default;\n $table-bg:                    transparent !default;\n \n+$table-th-font-weight:        null !default;\n+\n $table-striped-color:         $table-color !default;\n $table-striped-bg-factor:     .05 !default;\n $table-striped-bg:            rgba($black, $table-striped-bg-factor) !default;",
    "output": "feat: adds th null var (#30781)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/content/reboot.md b/site/content/docs/5.0/content/reboot.md\nindex 9f459e7bb..5ba7cf087 100644\n--- a/site/content/docs/5.0/content/reboot.md\n+++ b/site/content/docs/5.0/content/reboot.md\n@@ -372,12 +372,11 @@ These changes, and more, are demonstrated below.\n \n ### Pointers on buttons\n \n-Reboot includes an enhancement for `role=\"button\"` to change the default cursor to `pointer`. Add this attribute to elements to help indicate elements are interactive. This role isn't necessary for `<button>` elements, which gets its own `cursor` change.\n+Reboot includes an enhancement for `role=\"button\"` to change the default cursor to `pointer`. Add this attribute to elements to help indicate elements are interactive. This role isn't necessary for `<button>` elements, which get their own `cursor` change.\n \n-{% capture example %}\n-<span role=\"button\">Non-button element button</span>\n-{% endcapture %}\n-{% include example.html content=example %}\n+{{< example >}}\n+<span role=\"button\" tabindex=\"0\">Non-button element button</span>\n+{{< /example >}}\n \n ## Misc elements\n ",
    "output": "docs: fix old/broken example capture and typo (#31070)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/pricing/index.html b/site/content/docs/5.0/examples/pricing/index.html\nindex 033574d60..639d2c872 100644\n--- a/site/content/docs/5.0/examples/pricing/index.html\n+++ b/site/content/docs/5.0/examples/pricing/index.html\n@@ -23,8 +23,9 @@ include_js: false\n </div>\n \n <div class=\"container\">\n-  <div class=\"card-deck mb-3 text-center\">\n-    <div class=\"card mb-4 shadow-sm\">\n+  <div class=\"row row-cols-1 row-cols-md-3 mb-3 text-center\">\n+    <div class=\"col\">\n+      <div class=\"card mb-4 shadow-sm\">\n       <div class=\"card-header\">\n         <h4 class=\"my-0 font-weight-normal\">Free</h4>\n       </div>\n@@ -39,7 +40,9 @@ include_js: false\n         <button type=\"button\" class=\"btn btn-lg btn-block btn-outline-primary\">Sign up for free</button>\n       </div>\n     </div>\n-    <div class=\"card mb-4 shadow-sm\">\n+    </div>\n+    <div class=\"col\">\n+      <div class=\"card mb-4 shadow-sm\">\n       <div class=\"card-header\">\n         <h4 class=\"my-0 font-weight-normal\">Pro</h4>\n       </div>\n@@ -54,7 +57,9 @@ include_js: false\n         <button type=\"button\" class=\"btn btn-lg btn-block btn-primary\">Get started</button>\n       </div>\n     </div>\n-    <div class=\"card mb-4 shadow-sm\">\n+    </div>\n+    <div class=\"col\">\n+      <div class=\"card mb-4 shadow-sm\">\n       <div class=\"card-header\">\n         <h4 class=\"my-0 font-weight-normal\">Enterprise</h4>\n       </div>\n@@ -69,6 +74,7 @@ include_js: false\n         <button type=\"button\" class=\"btn btn-lg btn-block btn-primary\">Contact us</button>\n       </div>\n     </div>\n+    </div>\n   </div>\n \n   <footer class=\"pt-4 my-md-5 pt-md-5 border-top\">\ndiff --git a/site/content/docs/5.0/examples/pricing/pricing.css b/site/content/docs/5.0/examples/pricing/pricing.css\nindex cbf0ec013..70afca134 100644\n--- a/site/content/docs/5.0/examples/pricing/pricing.css\n+++ b/site/content/docs/5.0/examples/pricing/pricing.css\n@@ -1,12 +1,3 @@\n-html {\n-  font-size: 14px;\n-}\n-@media (min-width: 768px) {\n-  html {\n-    font-size: 16px;\n-  }\n-}\n-\n .container {\n   max-width: 960px;\n }\n@@ -14,7 +5,3 @@ html {\n .pricing-header {\n   max-width: 700px;\n }\n-\n-.card-deck .card {\n-  min-width: 220px;\n-}",
    "output": "docs(examples): fix pricing example"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/_index.md b/site/content/docs/5.0/examples/_index.md\nindex 0e644b55a..62a7a2a8f 100644\n--- a/site/content/docs/5.0/examples/_index.md\n+++ b/site/content/docs/5.0/examples/_index.md\n@@ -21,7 +21,7 @@ aliases: \"/examples/\"\n                                           alt=\"\"\n                                           width=\"480\" height=\"300\"\n                                           loading=\"lazy\">\n-          <h5 class=\"mb-1\">{{ $example.name }}</h5>\n+          <h3 class=\"h5 mb-1\">{{ $example.name }}</h3>\n         </a>\n         <p class=\"text-muted\">{{ $example.description }}</p>\n       </div>",
    "output": "docs(examples): improve headings hierarchy"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.0/examples/_index.md b/site/content/docs/5.0/examples/_index.md\nindex 7449d5c19..0e644b55a 100644\n--- a/site/content/docs/5.0/examples/_index.md\n+++ b/site/content/docs/5.0/examples/_index.md\n@@ -18,7 +18,7 @@ aliases: \"/examples/\"\n           <img class=\"img-thumbnail mb-3\" srcset=\"/docs/{{ $.Site.Params.docs_version }}/assets/img/examples/{{ $example.name | urlize }}.png,\n                                                   /docs/{{ $.Site.Params.docs_version }}/assets/img/examples/{{ $example.name | urlize }}@2x.png 2x\"\n                                           src=\"/docs/{{ $.Site.Params.docs_version }}/assets/img/examples/{{ $example.name | urlize }}.png\"\n-                                          alt=\"{{ $example.name }} screenshot\"\n+                                          alt=\"\"\n                                           width=\"480\" height=\"300\"\n                                           loading=\"lazy\">\n           <h5 class=\"mb-1\">{{ $example.name }}</h5>",
    "output": "docs(examples): empty alt for screenshots to prevent redundancy"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_grid.scss b/scss/mixins/_grid.scss\nindex c372a0437..0ef9d1f82 100644\n--- a/scss/mixins/_grid.scss\n+++ b/scss/mixins/_grid.scss\n@@ -67,7 +67,6 @@\n       // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n       .col#{$infix} {\n         flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n-        min-width: 0; // See https://github.com/twbs/bootstrap/issues/25410\n       }\n \n       .row-cols#{$infix}-auto > * {",
    "output": "fix(grid): zero min-width on .col has too much side-effects (#30979)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_layout.scss b/site/assets/scss/_layout.scss\nindex 116df720e..4d43276a0 100644\n--- a/site/assets/scss/_layout.scss\n+++ b/site/assets/scss/_layout.scss\n@@ -7,6 +7,7 @@\n       \"sidebar toc\"\n       \"sidebar content\";\n     grid-template-columns: 1fr 3fr;\n+    grid-template-rows: auto auto 1fr;\n   }\n \n   @include media-breakpoint-up(lg) {\n@@ -14,6 +15,7 @@\n       \"sidebar intro toc\"\n       \"sidebar content toc\";\n     grid-template-columns: 1fr 4fr 1fr;\n+    grid-template-rows: auto 1fr;\n   }\n }\n ",
    "output": "docs(layout): improve layout when content is short (#30908)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_functions.scss b/scss/_functions.scss\nindex 36108896a..73a032c26 100644\n--- a/scss/_functions.scss\n+++ b/scss/_functions.scss\n@@ -96,7 +96,7 @@\n // stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern\n $_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;\n \n-@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light) {\n+@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {\n   $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;\n   $contrast-ratios: ();\n ",
    "output": "feat(color-contrast): set min-contrast-ratio as an argument"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_colors.scss b/site/assets/scss/_colors.scss\nindex 911c44c73..17c678365 100644\n--- a/site/assets/scss/_colors.scss\n+++ b/site/assets/scss/_colors.scss\n@@ -6,6 +6,37 @@\n   .swatch-#{$color} {\n     color: color-contrast($value);\n     background-color: #{$value};\n+\n+    &::after {\n+      $contrast-ratio: \"#{contrast-ratio($value, color-contrast($value))}\";\n+      $against-white: \"#{contrast-ratio($value, $white)}\";\n+      $against-black: \"#{contrast-ratio($value, $black)}\";\n+      position: absolute;\n+      top: 1rem;\n+      right: 1rem;\n+      padding-left: 1rem;\n+      font-size: .75rem;\n+      line-height: 1.35;\n+      white-space: pre;\n+      content:\n+        str-slice($contrast-ratio, 1, 4) \"\\A\"\n+        str-slice($against-white, 1, 4) \"\\A\"\n+        str-slice($against-black, 1, 4);\n+      background-color: $value;\n+      background-image:\n+        linear-gradient(\n+          to bottom,\n+          transparent .25rem,\n+          color-contrast($value) .25rem .75rem,\n+          transparent .75rem 1.25rem,\n+          $white 1.25rem 1.75rem,\n+          transparent 1.75rem 2.25rem,\n+          $black 2.25rem 2.75rem,\n+          transparent 2.75rem\n+        );\n+      background-repeat: no-repeat;\n+      background-size: .5rem 100%;\n+    }\n   }\n }\n ",
    "output": "docs(theming): display contrast ratios in color swatches"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex c0355bbe4..8b9979e32 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -479,8 +479,8 @@ $table-color:                 $body-color !default;\n $table-bg:                    transparent !default;\n \n $table-striped-color:         $table-color !default;\n-$table-striped-bg-factor:      .05 !default;\n-$table-striped-bg:             rgba($black, $table-striped-bg-factor) !default;\n+$table-striped-bg-factor:     .05 !default;\n+$table-striped-bg:            rgba($black, $table-striped-bg-factor) !default;\n \n $table-active-color:          $table-color !default;\n $table-active-bg-factor:      .1 !default;",
    "output": "style: removes space (#30782)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex fb2474811..02ce6d19d 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -22,8 +22,6 @@ jobs:\n         with:\n           node-version: ${{ matrix.node }}\n \n-      - run: node --version\n-      - run: npm --version\n       - run: java -version\n \n       - name: Set up npm cache",
    "output": "ci: remove no longer needed steps (#30674)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_functions.scss b/scss/_functions.scss\nindex 49a460466..d93e33916 100644\n--- a/scss/_functions.scss\n+++ b/scss/_functions.scss\n@@ -23,10 +23,12 @@\n // Starts at zero\n // Used to ensure the min-width of the lowest breakpoint starts at 0.\n @mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n-  $values: map-values($map);\n-  $first-value: nth($values, 1);\n-  @if $first-value != 0 {\n-    @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n+  @if length($map) > 0 {\n+    $values: map-values($map);\n+    $first-value: nth($values, 1);\n+    @if $first-value != 0 {\n+      @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n+    }\n   }\n }\n ",
    "output": "feat: checks for `$grid-breakpoints` map list (#30609)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_grid.scss b/scss/mixins/_grid.scss\nindex bfc60d88a..94bf98a02 100644\n--- a/scss/mixins/_grid.scss\n+++ b/scss/mixins/_grid.scss\n@@ -73,9 +73,11 @@\n         @include make-col-auto();\n       }\n \n-      @for $i from 1 through $grid-row-columns {\n-        .row-cols#{$infix}-#{$i} {\n-          @include row-cols($i);\n+      @if $grid-row-columns > 0 {\n+        @for $i from 1 through $grid-row-columns {\n+          .row-cols#{$infix}-#{$i} {\n+            @include row-cols($i);\n+          }\n         }\n       }\n ",
    "output": "feat: checks for `$grid-row-columns` (#30606)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/content/tables.md b/site/content/docs/4.3/content/tables.md\nindex c13a24517..f42d37d68 100644\n--- a/site/content/docs/4.3/content/tables.md\n+++ b/site/content/docs/4.3/content/tables.md\n@@ -407,7 +407,7 @@ Table cells of `<thead>` are always vertical aligned to the bottom. Table cells\n       <tr>\n         <th scope=\"col\" class=\"w-25\">Heading 1</th>\n         <th scope=\"col\" class=\"w-25\">Heading 2</th>\n-        <th scope=\"col\" class=\"w-25\">Heading 2</th>\n+        <th scope=\"col\" class=\"w-25\">Heading 3</th>\n         <th scope=\"col\" class=\"w-25\">Heading 4</th>\n       </tr>\n     </thead>",
    "output": "docs(tables): 1, 2, 2, 4\u2026 (#30489)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/application.js b/site/assets/js/application.js\nindex e99fbb8a7..9d0c684b7 100644\n--- a/site/assets/js/application.js\n+++ b/site/assets/js/application.js\n@@ -15,24 +15,20 @@\n (function () {\n   'use strict'\n \n-  function makeArray(list) {\n-    return [].slice.call(list)\n-  }\n-\n   // Tooltip and popover demos\n-  makeArray(document.querySelectorAll('.tooltip-demo'))\n+  document.querySelectorAll('.tooltip-demo')\n     .forEach(function (tooltip) {\n       new bootstrap.Tooltip(tooltip, {\n         selector: '[data-toggle=\"tooltip\"]'\n       })\n     })\n \n-  makeArray(document.querySelectorAll('[data-toggle=\"popover\"]'))\n+  document.querySelectorAll('[data-toggle=\"popover\"]')\n     .forEach(function (popover) {\n       new bootstrap.Popover(popover)\n     })\n \n-  makeArray(document.querySelectorAll('.toast'))\n+  document.querySelectorAll('.toast')\n     .forEach(function (toastNode) {\n       var toast = new bootstrap.Toast(toastNode, {\n         autohide: false\n@@ -42,24 +38,24 @@\n     })\n \n   // Demos within modals\n-  makeArray(document.querySelectorAll('.tooltip-test'))\n+  document.querySelectorAll('.tooltip-test')\n     .forEach(function (tooltip) {\n       new bootstrap.Tooltip(tooltip)\n     })\n \n-  makeArray(document.querySelectorAll('.popover-test'))\n+  document.querySelectorAll('.popover-test')\n     .forEach(function (popover) {\n       new bootstrap.Popover(popover)\n     })\n \n   // Indeterminate checkbox example\n-  makeArray(document.querySelectorAll('.bd-example-indeterminate [type=\"checkbox\"]'))\n+  document.querySelectorAll('.bd-example-indeterminate [type=\"checkbox\"]')\n     .forEach(function (checkbox) {\n       checkbox.indeterminate = true\n     })\n \n   // Disable empty links in docs examples\n-  makeArray(document.querySelectorAll('.bd-content [href=\"#\"]'))\n+  document.querySelectorAll('.bd-content [href=\"#\"]')\n     .forEach(function (link) {\n       link.addEventListener('click', function (e) {\n         e.preventDefault()\n@@ -95,12 +91,12 @@\n \n   // Insert copy to clipboard button before .highlight\n   var btnHtml = '<div class=\"bd-clipboard\"><button type=\"button\" class=\"btn-clipboard\" title=\"Copy to clipboard\">Copy</button></div>'\n-  makeArray(document.querySelectorAll('figure.highlight, div.highlight'))\n+  document.querySelectorAll('figure.highlight, div.highlight')\n     .forEach(function (element) {\n       element.insertAdjacentHTML('beforebegin', btnHtml)\n     })\n \n-  makeArray(document.querySelectorAll('.btn-clipboard'))\n+  document.querySelectorAll('.btn-clipboard')\n     .forEach(function (btn) {\n       var tooltipBtn = new bootstrap.Tooltip(btn)\n ",
    "output": "docs: remove `makeArray` (#30470)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 120526fa4..521263e13 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -55,7 +55,7 @@\n   flex-flow: column nowrap;\n   padding-left: 1.25rem;\n \n-  > li > a {\n+  a {\n     display: inline-block;\n     padding: .25rem .5rem;\n     @include font-size(.875rem);\n@@ -70,7 +70,7 @@\n     }\n   }\n \n-  [aria-current=\"page\"] {\n+  .active {\n     font-weight: 600;\n     color: rgba($black, .85);\n   }\ndiff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex d3c7161e4..03594291f 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -25,8 +25,8 @@\n       <ul class=\"nav bd-sidenav mb-2 collapse{{ if $active_group }} show{{ end }}\" id=\"{{ $group_slug }}-collapse\">\n         {{- range $doc := $group.pages -}}\n           {{- $doc_slug := $doc.title | urlize }}\n-          <li{{ if and $active_group (eq $page_slug $doc_slug) }} class=\"active bd-sidenav-active\"{{ end }}>\n-            <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/{{ $doc_slug }}/\"{{ if and $active_group (eq $page_slug $doc_slug) }} aria-current=\"page\"{{ end }}>\n+          <li{{ if and $active_group (eq $page_slug $doc_slug) }} class=\"bd-sidenav-active\"{{ end }}>\n+            <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/{{ $doc_slug }}/\"{{ if and $active_group (eq $page_slug $doc_slug) }} class=\"active\" aria-current=\"page\"{{ end }}>\n               {{- $doc.title -}}\n             </a>\n           </li>",
    "output": "docs(sidenav): use class selector for active item"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 4eb316cbb..120526fa4 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -38,6 +38,7 @@\n     margin-right: .25rem;\n     line-height: 0; // Align in the middle\n     content: escape-svg($sidebar-collapse-icon);\n+    @include transition(transform .35s ease);\n   }\n \n   [aria-expanded=\"true\"] {",
    "output": "docs(sidenav): transition arrow too"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/application.js b/site/assets/js/application.js\nindex c825d7373..e99fbb8a7 100644\n--- a/site/assets/js/application.js\n+++ b/site/assets/js/application.js\n@@ -19,19 +19,6 @@\n     return [].slice.call(list)\n   }\n \n-  makeArray(document.querySelectorAll('.js-sidenav-group'))\n-    .forEach(function (sidenavGroup) {\n-      var groupHasLinks = Boolean(sidenavGroup.querySelector('li'))\n-      var groupLink = sidenavGroup.querySelector('a')\n-\n-      if (groupHasLinks) {\n-        groupLink.addEventListener('click', function (e) {\n-          e.preventDefault()\n-          e.target.parentNode.classList.toggle('active')\n-        }, true)\n-      }\n-    })\n-\n   // Tooltip and popover demos\n   makeArray(document.querySelectorAll('.tooltip-demo'))\n     .forEach(function (tooltip) {\ndiff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 0ce1bca01..4eb316cbb 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -40,13 +40,11 @@\n     content: escape-svg($sidebar-collapse-icon);\n   }\n \n-  &.active {\n-    .bd-sidenav-group-link::before {\n-      transform: rotate(90deg);\n-    }\n+  [aria-expanded=\"true\"] {\n+    color: rgba($black, .85);\n \n-    > .bd-sidenav-group-link {\n-      color: rgba($black, .85);\n+    &::before {\n+      transform: rotate(90deg);\n     }\n   }\n }\n@@ -71,9 +69,7 @@\n     }\n   }\n \n-  > .active > a,\n-  > .active:hover > a,\n-  > .active:focus > a {\n+  [aria-current=\"page\"] {\n     font-weight: 600;\n     color: rgba($black, .85);\n   }\ndiff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex 123a92456..d3c7161e4 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -15,7 +15,7 @@\n     {{- $group_slug := $group.title | urlize -}}\n     {{- $active_group := eq $.Page.Params.group $group_slug }}\n \n-    <li class=\"bd-sidenav-group my-1{{ if $active_group }} active{{ end }} js-sidenav-group{{ if $group.pages }} has-children{{ end }}\">\n+    <li class=\"bd-sidenav-group my-1{{ if $active_group }} active{{ end }}{{ if $group.pages }} has-children{{ end }}\">\n       <a class=\"d-inline-flex align-items-center bd-sidenav-group-link\" data-toggle=\"collapse\" href=\"#{{ $group_slug }}-collapse\"\n          role=\"button\" aria-expanded=\"{{ $active_group }}\"{{ if $active_group }} aria-current=\"true\"{{ end }}>\n         {{ $group.title }}",
    "output": "docs(sidenav): get rid of custom JS for active state"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_sidebar.scss b/site/assets/scss/_sidebar.scss\nindex 4348615d6..0ce1bca01 100644\n--- a/site/assets/scss/_sidebar.scss\n+++ b/site/assets/scss/_sidebar.scss\n@@ -16,10 +16,6 @@\n   }\n }\n \n-:not(.active) > .bd-sidenav {\n-  display: none;\n-}\n-\n .bd-sidenav-group-link {\n   padding: .25rem .625rem .25rem .5rem;\n   font-weight: 600;\n@@ -57,6 +53,7 @@\n \n // All levels of nav\n .bd-sidebar .nav {\n+  flex-flow: column nowrap;\n   padding-left: 1.25rem;\n \n   > li > a {\ndiff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex 523e6afd1..123a92456 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -22,7 +22,7 @@\n       </a>\n \n       {{- if $group.pages }}\n-      <ul class=\"nav bd-sidenav flex-column mb-2 collapse{{ if $active_group }} show{{ end }}\" id=\"{{ $group_slug }}-collapse\">\n+      <ul class=\"nav bd-sidenav mb-2 collapse{{ if $active_group }} show{{ end }}\" id=\"{{ $group_slug }}-collapse\">\n         {{- range $doc := $group.pages -}}\n           {{- $doc_slug := $doc.title | urlize }}\n           <li{{ if and $active_group (eq $page_slug $doc_slug) }} class=\"active bd-sidenav-active\"{{ end }}>",
    "output": "docs(sidenav): fix struggling CSS when collapsing sidenav"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex 772cbd7f7..523e6afd1 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -16,12 +16,13 @@\n     {{- $active_group := eq $.Page.Params.group $group_slug }}\n \n     <li class=\"bd-sidenav-group my-1{{ if $active_group }} active{{ end }} js-sidenav-group{{ if $group.pages }} has-children{{ end }}\">\n-      <a class=\"d-inline-flex align-items-center bd-sidenav-group-link\" href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/{{ if $group.pages }}{{ $link_slug }}/{{ end }}\"{{ if $active_group }} aria-current=\"true\"{{ end }}>\n+      <a class=\"d-inline-flex align-items-center bd-sidenav-group-link\" data-toggle=\"collapse\" href=\"#{{ $group_slug }}-collapse\"\n+         role=\"button\" aria-expanded=\"{{ $active_group }}\"{{ if $active_group }} aria-current=\"true\"{{ end }}>\n         {{ $group.title }}\n       </a>\n \n       {{- if $group.pages }}\n-      <ul class=\"nav bd-sidenav flex-column mb-2\">\n+      <ul class=\"nav bd-sidenav flex-column mb-2 collapse{{ if $active_group }} show{{ end }}\" id=\"{{ $group_slug }}-collapse\">\n         {{- range $doc := $group.pages -}}\n           {{- $doc_slug := $doc.title | urlize }}\n           <li{{ if and $active_group (eq $page_slug $doc_slug) }} class=\"active bd-sidenav-active\"{{ end }}>",
    "output": "docs(sidenav): use collapse components"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/application.js b/site/assets/js/application.js\nindex d5a68c7e1..c825d7373 100644\n--- a/site/assets/js/application.js\n+++ b/site/assets/js/application.js\n@@ -19,16 +19,6 @@\n     return [].slice.call(list)\n   }\n \n-  (function () {\n-    var checkbox = document.getElementById('flexCheckIndeterminate')\n-\n-    if (!checkbox) {\n-      return\n-    }\n-\n-    checkbox.indeterminate = true\n-  })()\n-\n   makeArray(document.querySelectorAll('.js-sidenav-group'))\n     .forEach(function (sidenavGroup) {\n       var groupHasLinks = Boolean(sidenavGroup.querySelector('li'))\ndiff --git a/site/content/docs/4.3/forms/checks.md b/site/content/docs/4.3/forms/checks.md\nindex 6b90fb9bf..e189d1bb9 100644\n--- a/site/content/docs/4.3/forms/checks.md\n+++ b/site/content/docs/4.3/forms/checks.md\n@@ -35,7 +35,7 @@ Our checks use custom Bootstrap icons to indicate checked or indeterminate state\n \n Checkboxes can utilize the `:indeterminate` pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it).\n \n-{{< example >}}\n+{{< example class=\"bd-example-indeterminate\">}}\n <div class=\"form-check\">\n   <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckIndeterminate\">\n   <label class=\"form-check-label\" for=\"flexCheckIndeterminate\">",
    "output": "docs: remove duplicate code for indeterminate (#30471)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/util/index.js b/js/src/util/index.js\nindex 8a5ae2156..fca2a9197 100644\n--- a/js/src/util/index.js\n+++ b/js/src/util/index.js\n@@ -10,7 +10,13 @@ const MILLISECONDS_MULTIPLIER = 1000\n const TRANSITION_END = 'transitionend'\n \n // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n-const toType = obj => ({}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase())\n+const toType = obj => {\n+  if (obj === null || obj === undefined) {\n+    return `${obj}`\n+  }\n+\n+  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n+}\n \n /**\n  * --------------------------------------------------------------------------\ndiff --git a/js/tests/unit/util/index.spec.js b/js/tests/unit/util/index.spec.js\nindex 42c273f06..57ca1a9c7 100644\n--- a/js/tests/unit/util/index.spec.js\n+++ b/js/tests/unit/util/index.spec.js\n@@ -198,8 +198,9 @@ describe('Util', () => {\n   })\n \n   describe('typeCheckConfig', () => {\n+    const namePlugin = 'collapse'\n+\n     it('should check type of the config object', () => {\n-      const namePlugin = 'collapse'\n       const defaultType = {\n         toggle: 'boolean',\n         parent: '(string|element)'\n@@ -213,6 +214,34 @@ describe('Util', () => {\n         Util.typeCheckConfig(namePlugin, config, defaultType)\n       }).toThrow(new Error('COLLAPSE: Option \"parent\" provided type \"number\" but expected type \"(string|element)\".'))\n     })\n+\n+    it('should return null stringified when null is passed', () => {\n+      const defaultType = {\n+        toggle: 'boolean',\n+        parent: '(null|element)'\n+      }\n+      const config = {\n+        toggle: true,\n+        parent: null\n+      }\n+\n+      Util.typeCheckConfig(namePlugin, config, defaultType)\n+      expect().nothing()\n+    })\n+\n+    it('should return undefined stringified when undefined is passed', () => {\n+      const defaultType = {\n+        toggle: 'boolean',\n+        parent: '(undefined|element)'\n+      }\n+      const config = {\n+        toggle: true,\n+        parent: undefined\n+      }\n+\n+      Util.typeCheckConfig(namePlugin, config, defaultType)\n+      expect().nothing()\n+    })\n   })\n \n   describe('makeArray', () => {",
    "output": "fix: ensure `totype` always returns stringified null/undefined when null/undefined is passed (#30383)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 509a364ee..71fabc58d 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -496,9 +496,10 @@ $input-btn-font-family:       null !default;\n $input-btn-font-size:         $font-size-base !default;\n $input-btn-line-height:       $line-height-base !default;\n \n-$input-btn-focus-width:       .2rem !default;\n-$input-btn-focus-color:       rgba($component-active-bg, .25) !default;\n-$input-btn-focus-box-shadow:  0 0 0 $input-btn-focus-width $input-btn-focus-color !default;\n+$input-btn-focus-width:         .2rem !default;\n+$input-btn-focus-color-opacity: .25 !default;\n+$input-btn-focus-color:         rgba($component-active-bg, $input-btn-focus-color-opacity) !default;\n+$input-btn-focus-box-shadow:    0 0 0 $input-btn-focus-width $input-btn-focus-color !default;\n \n $input-btn-padding-y-sm:      .25rem !default;\n $input-btn-padding-x-sm:      .5rem !default;\ndiff --git a/scss/mixins/_forms.scss b/scss/mixins/_forms.scss\nindex ab612334f..187355994 100644\n--- a/scss/mixins/_forms.scss\n+++ b/scss/mixins/_forms.scss\n@@ -58,7 +58,7 @@\n \n       &:focus {\n         border-color: $color;\n-        box-shadow: 0 0 0 $input-focus-width rgba($color, .25);\n+        box-shadow: 0 0 0 $input-focus-width rgba($color, $input-btn-focus-color-opacity);\n       }\n     }\n   }",
    "output": "fix(css): adds a new opacity var"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_utilities.scss b/scss/_utilities.scss\nindex 1a85165dc..a872c6bb9 100644\n--- a/scss/_utilities.scss\n+++ b/scss/_utilities.scss\n@@ -29,8 +29,8 @@ $utilities: map-merge(\n       property: box-shadow,\n       class: shadow,\n       values: (\n-        sm: $box-shadow-sm,\n         null: $box-shadow,\n+        sm: $box-shadow-sm,\n         lg: $box-shadow-lg,\n         none: none,\n       )",
    "output": "style: applies ascending order"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/getting-started/rfs.md b/site/content/docs/4.3/getting-started/rfs.md\nindex 0cdd08257..2f1852401 100644\n--- a/site/content/docs/4.3/getting-started/rfs.md\n+++ b/site/content/docs/4.3/getting-started/rfs.md\n@@ -66,8 +66,8 @@ In this example, we use one of Bootstrap's built-in [responsive breakpoint mixin\n ```scss\n .selector {\n   @include media-breakpoint-down(lg) {\n-     padding: rfs-fluid-value(2rem);\n-     font-size: rfs-fluid-value(1.125rem);\n+    padding: rfs-fluid-value(2rem);\n+    font-size: rfs-fluid-value(1.125rem);\n   }\n }\n ```",
    "output": "style: fixes indent (#30396)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 26bbb1393..509a364ee 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -428,6 +428,7 @@ $blockquote-small-color:      $gray-600 !default;\n $blockquote-small-font-size:  $small-font-size !default;\n $blockquote-font-size:        $font-size-base * 1.25 !default;\n \n+$hr-margin-y:                 $spacer !default;\n $hr-color:                    inherit !default;\n $hr-height:                   $border-width !default;\n $hr-opacity:                  .25 !default;\n@@ -446,8 +447,6 @@ $list-inline-padding:         .5rem !default;\n \n $mark-bg:                     #fcf8e3 !default;\n \n-$hr-margin-y:                 $spacer !default;\n-\n \n // Tables\n //",
    "output": "feat(css): groups hr element"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_masthead.scss b/site/assets/scss/_masthead.scss\nindex 82d010d19..f70b4b837 100644\n--- a/site/assets/scss/_masthead.scss\n+++ b/site/assets/scss/_masthead.scss\n@@ -32,18 +32,18 @@\n   color: $white;\n   @include border-radius(25%);\n   box-shadow: 0 .25rem .5rem rgba(0, 0, 0, .15), inset 0 -1px 0 rgba(0, 0, 0, .15);\n+}\n \n-  &-purple {\n-    background-image: linear-gradient(180deg, $pink, $purple);\n-  }\n+.home-icon-purple {\n+  background-image: linear-gradient(180deg, $pink, $purple);\n+}\n \n-  &-blue {\n-    background-image: linear-gradient(180deg, $teal, $blue);\n-  }\n+.home-icon-blue {\n+  background-image: linear-gradient(180deg, $teal, $blue);\n+}\n \n-  &-yellow {\n-    background-image: linear-gradient(180deg, $yellow, $orange);\n-  }\n+.home-icon-yellow {\n+  background-image: linear-gradient(180deg, $yellow, $orange);\n }\n \n @include media-breakpoint-up(md) {",
    "output": "style(css): removes `&-*` scss pattern"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/getting-started/theming.md b/site/content/docs/4.3/getting-started/theming.md\nindex e8813045a..ad028b792 100644\n--- a/site/content/docs/4.3/getting-started/theming.md\n+++ b/site/content/docs/4.3/getting-started/theming.md\n@@ -189,7 +189,7 @@ In practice, you'd call the function and pass in two parameters: the name of the\n }\n {{< /highlight >}}\n \n-### Color contrast\n+#### Color contrast\n \n An additional function we include in Bootstrap is the color contrast function, `color-yiq`. It utilizes the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) to automatically return a light (`#fff`) or dark (`#111`) contrast color based on the specified base color. This function is especially useful for mixins or loops where you're generating multiple classes.\n \n@@ -219,11 +219,11 @@ You can also specify a base color with our color map functions:\n }\n {{< /highlight >}}\n \n-## Escape SVG\n+#### Escape SVG\n \n We use the `escape-svg` function to escape the `<`, `>` and `#` characters for SVG background images. These characters need to be escaped to properly render the background images in IE.\n \n-## Add and Subtract functions\n+#### Add and Subtract functions\n \n We use the `add` and `subtract` functions to wrap the CSS `calc` function. The primary purpose of these functions is to avoid errors when a \"unitless\" `0` value is passed into a `calc` expression. Expressions like `calc(10px - 0)` will return an error in all browsers, despite being mathematically correct.\n ",
    "output": "docs(theming): improve headings hierarchy under Sass \u2192 Functions (#30207)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/content/images.md b/site/content/docs/4.3/content/images.md\nindex 3ed86786c..53f45de88 100644\n--- a/site/content/docs/4.3/content/images.md\n+++ b/site/content/docs/4.3/content/images.md\n@@ -8,7 +8,7 @@ toc: true\n \n ## Responsive images\n \n-Images in Bootstrap are made responsive with `.img-fluid`. `max-width: 100%;` and `height: auto;` are applied to the image so that it scales with the parent element.\n+Images in Bootstrap are made responsive with `.img-fluid`. This applies `max-width: 100%;` and `height: auto;` to the image so that it scales with the parent element.\n \n {{< example >}}\n {{< placeholder width=\"100%\" height=\"250\" class=\"bd-placeholder-img-lg img-fluid\" text=\"Responsive image\" >}}",
    "output": "docs: Rephrase 'img-fluid' explanation for clarity (and avoid passive voice). (#30190)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/about/license.md b/site/content/docs/4.3/about/license.md\nindex c7f130203..a18fe0f60 100644\n--- a/site/content/docs/4.3/about/license.md\n+++ b/site/content/docs/4.3/about/license.md\n@@ -7,18 +7,18 @@ group: about\n \n Bootstrap is released under the MIT license and is copyright {{< year >}} Twitter. Boiled down to smaller chunks, it can be described with the following conditions.\n \n-#### It requires you to:\n+## It requires you to:\n \n * Keep the license and copyright notice included in Bootstrap's CSS and JavaScript files when you use them in your works\n \n-#### It permits you to:\n+## It permits you to:\n \n - Freely download and use Bootstrap, in whole or in part, for personal, private, company internal, or commercial purposes\n - Use Bootstrap in packages or distributions that you create\n - Modify the source code\n - Grant a sublicense to modify and distribute Bootstrap to third parties not included in the license\n \n-#### It forbids you to:\n+## It forbids you to:\n \n - Hold the authors and license owners liable for damages as Bootstrap is provided without warranty\n - Hold the creators or copyright holders of Bootstrap liable\n@@ -26,7 +26,7 @@ Bootstrap is released under the MIT license and is copyright {{< year >}} Twitte\n - Use any marks owned by Twitter in any way that might state or imply that Twitter endorses your distribution\n - Use any marks owned by Twitter in any way that might state or imply that you created the Twitter software in question\n \n-#### It does not require you to:\n+## It does not require you to:\n \n - Include the source of Bootstrap itself, or of any modifications you may have made to it, in any redistribution you may assemble that includes it\n - Submit changes that you make to Bootstrap back to the Bootstrap project (though such feedback is encouraged)",
    "output": "docs(licence): fix headings hierarchy (#30080)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/docs.scss b/site/assets/scss/docs.scss\nindex 7ff78b215..53622b9c2 100644\n--- a/site/assets/scss/docs.scss\n+++ b/site/assets/scss/docs.scss\n@@ -51,17 +51,3 @@\n @import \"syntax\";\n @import \"anchor\";\n @import \"algolia\";\n-\n-// Temp\n-.booticons-list {\n-  .booticon {\n-    display: inline;\n-    width: 4rem;\n-    padding: 1rem;\n-    margin-right: 1rem;\n-    margin-bottom: 1rem;\n-    background-color: $white;\n-    border: 1px solid rgba(0, 0, 0, .1);\n-    @include border-radius(.25rem);\n-  }\n-}",
    "output": "docs(styles): drop .booticon styles (#30071)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 8fa00e521..104d9fa22 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -15,9 +15,7 @@ jobs:\n \n     steps:\n       - name: Clone repository\n-        uses: actions/checkout@v1\n-        with:\n-          fetch-depth: 3\n+        uses: actions/checkout@v2\n \n       - name: Set Node.js version\n         uses: actions/setup-node@v1",
    "output": "ci: update to `actions/checkout@v2` (#29847)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/getting-started/theming.md b/site/content/docs/4.3/getting-started/theming.md\nindex 7c764afed..aa3c729a3 100644\n--- a/site/content/docs/4.3/getting-started/theming.md\n+++ b/site/content/docs/4.3/getting-started/theming.md\n@@ -270,7 +270,7 @@ You can find and customize these variables for key global options in Bootstrap's\n | `$enable-grid-classes`                       | `true` (default) or `false`        | Enables the generation of CSS classes for the grid system (e.g., `.container`, `.row`, `.col-md-1`, etc.). |\n | `$enable-caret`                              | `true` (default) or `false`        | Enables pseudo element caret on `.dropdown-toggle`. |\n | `$enable-pointer-cursor-for-buttons`         | `true` (default) or `false`        | Add \"hand\" cursor to non-disabled button elements. |\n-| `$enable-rfs`                                | `true` or `false` (default)        | Globally enables [RFS]({{< docsref \"/getting-started/rfs\" >}}). |\n+| `$enable-rfs`                                | `true` (default)  or `false`       | Globally enables [RFS]({{< docsref \"/getting-started/rfs\" >}}). |\n | `$enable-validation-icons`                   | `true` (default) or `false`        | Enables `background-image` icons within textual inputs and some custom forms for validation states. |\n | `$enable-deprecation-messages`               | `true` or `false` (default)        | Set to `true` to show warnings when using any of the deprecated mixins and functions that are planned to be removed in `v5`. |\n ",
    "output": "docs: `$enable-rfs` is true by default (#29766)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 27739bf86..5fbe7ff7c 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -1,5 +1,7 @@\n name: Tests\n on: [push, pull_request]\n+env:\n+  CI: true\n \n jobs:\n   run:\n@@ -28,8 +30,6 @@ jobs:\n \n       - name: Install npm dependencies\n         run: npm ci\n-        env:\n-          CI: true\n \n       - name: Run tests\n         run: npm test",
    "output": "ci: move `CI` env variable to the root of the workflow. (#29499)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/content/tables.md b/site/content/docs/4.3/content/tables.md\nindex c79cb81d2..e508d517d 100644\n--- a/site/content/docs/4.3/content/tables.md\n+++ b/site/content/docs/4.3/content/tables.md\n@@ -770,10 +770,10 @@ Use `.table-responsive{-sm|-md|-lg|-xl}` as needed to create responsive tables u\n **These tables may appear broken until their responsive styles apply at specific viewport widths.**\n \n {{< tables.inline >}}\n-{{ range $bp := $.Site.Data.breakpoints }}\n-{{ if not (eq $bp \"xs\") }}\n+{{ range $.Site.Data.breakpoints }}\n+{{ if not (eq . \"xs\") }}\n <div class=\"bd-example\">\n-  <div class=\"table-responsive{{ $bp.abbr }}\">\n+  <div class=\"table-responsive{{ .abbr }}\">\n     <table class=\"table\">\n       <thead>\n         <tr>\n@@ -832,9 +832,9 @@ Use `.table-responsive{-sm|-md|-lg|-xl}` as needed to create responsive tables u\n \n {{< highlight html >}}\n {{< tables.inline >}}\n-{{- range $bp := $.Site.Data.breakpoints -}}\n-{{- if not (eq $bp \"xs\") }}\n-<div class=\"table-responsive{{ $bp.abbr }}\">\n+{{- range $.Site.Data.breakpoints -}}\n+{{- if not (eq . \"xs\") }}\n+<div class=\"table-responsive{{ .abbr }}\">\n   <table class=\"table\">\n     ...\n   </table>\ndiff --git a/site/content/docs/4.3/utilities/flex.md b/site/content/docs/4.3/utilities/flex.md\nindex 948dfe061..9ce4f27c5 100644\n--- a/site/content/docs/4.3/utilities/flex.md\n+++ b/site/content/docs/4.3/utilities/flex.md\n@@ -438,8 +438,8 @@ Responsive variations also exist for `order`.\n {{< markdown >}}\n {{< flex.inline >}}\n {{- range $bp := $.Site.Data.breakpoints -}}\n-{{- range $i, $num := seq 0 5 }}\n-- `.order{{ $bp.abbr }}-{{ $i }}`\n+{{- range (seq 0 5) }}\n+- `.order{{ $bp.abbr }}-{{ . }}`\n {{- end -}}\n {{- end -}}\n {{< /flex.inline >}}\n@@ -450,8 +450,8 @@ Additionally there are also responsive `.order-first` and `.order-last` classes\n {{< markdown >}}\n {{< flex.inline >}}\n {{- range $bp := $.Site.Data.breakpoints -}}\n-{{- range $i := slice \"first\" \"last\" }}\n-- `.order{{ $bp.abbr }}-{{ $i }}`\n+{{- range (slice \"first\" \"last\") }}\n+- `.order{{ $bp.abbr }}-{{ . }}`\n {{- end -}}\n {{- end -}}\n {{< /flex.inline >}}\ndiff --git a/site/layouts/shortcodes/example.html b/site/layouts/shortcodes/example.html\nindex bea1d9416..a13cccca4 100644\n--- a/site/layouts/shortcodes/example.html\n+++ b/site/layouts/shortcodes/example.html\n@@ -28,7 +28,7 @@\n     {{- $modified_content = replace $modified_content \"</svg>\\n\" \"</svg>\u2702\ufe0f\" -}}\n     {{- $modified_content = split $modified_content \"\u2702\ufe0f\" -}}\n \n-    {{- range $i, $content_chunk := $modified_content -}}\n+    {{- range $content_chunk := $modified_content -}}\n       {{- $image_class := \"\" -}}\n \n       {{- if (strings.Contains $content_chunk `<svg class=\"bd-placeholder-img `) -}}",
    "output": "docs: simplify a few Hugo `range`s. (#29333)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.3/getting-started/theming.md b/site/content/docs/4.3/getting-started/theming.md\nindex 0c8fe306a..9c34c9ee3 100644\n--- a/site/content/docs/4.3/getting-started/theming.md\n+++ b/site/content/docs/4.3/getting-started/theming.md\n@@ -276,7 +276,7 @@ We use a subset of all colors to create a smaller color palette for generating c\n   {{< theme-colors.inline >}}\n   {{- range (index $.Site.Data \"theme-colors\") }}\n     <div class=\"col-md-4\">\n-      <div class=\"p-3 mb-3 swatch-{{ .name }}\">{{ .name | title }}</div>\n+      <div class=\"p-3 mb-3 bg-{{ .name }} {{ if or (eq .name \"light\") (eq .name \"warning\") }}text-dark{{ else }}text-white{{ end }}\">{{ .name | title }}</div>\n     </div>\n   {{ end -}}\n   {{< /theme-colors.inline >}}\ndiff --git a/site/static/docs/4.3/assets/scss/_colors.scss b/site/static/docs/4.3/assets/scss/_colors.scss\nindex 8d2825c57..10ad8efdb 100644\n--- a/site/static/docs/4.3/assets/scss/_colors.scss\n+++ b/site/static/docs/4.3/assets/scss/_colors.scss\n@@ -9,13 +9,6 @@\n   }\n }\n \n-@each $color, $value in $theme-colors {\n-  .swatch-#{$color} {\n-    color: color-yiq($value);\n-    background-color: #{$value};\n-  }\n-}\n-\n @each $color, $value in $grays {\n   .swatch-#{$color} {\n     color: color-yiq($value);",
    "output": "docs: remove swatches for theme colors. (#29327)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-navbar.html b/site/layouts/partials/docs-navbar.html\nindex 9dd2eaba0..40ff225d8 100644\n--- a/site/layouts/partials/docs-navbar.html\n+++ b/site/layouts/partials/docs-navbar.html\n@@ -29,22 +29,22 @@\n \n     <ul class=\"navbar-nav ml-sm-auto\">\n       <li class=\"nav-item\">\n-        <a class=\"nav-link p-2\" href=\"{{ .Site.Params.repo }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"GitHub\">\n+        <a class=\"nav-link px-1 mx-1 py-3 my-n2\" href=\"{{ .Site.Params.repo }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"GitHub\">\n           {{ partial \"icons/github.svg\" (dict \"class\" \"navbar-nav-svg\" \"width\" \"36\" \"height\" \"36\") }}\n         </a>\n       </li>\n       <li class=\"nav-item\">\n-        <a class=\"nav-link p-2\" href=\"https://twitter.com/{{ .Site.Params.twitter }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter\">\n+        <a class=\"nav-link px-1 mx-1 py-3 my-n2\" href=\"https://twitter.com/{{ .Site.Params.twitter }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Twitter\">\n           {{ partial \"icons/twitter.svg\" (dict \"class\" \"navbar-nav-svg\" \"width\" \"36\" \"height\" \"36\") }}\n         </a>\n       </li>\n       <li class=\"nav-item\">\n-        <a class=\"nav-link p-2\" href=\"{{ .Site.Params.slack }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Slack\">\n+        <a class=\"nav-link px-1 mx-1 py-3 my-n2\" href=\"{{ .Site.Params.slack }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Slack\">\n           {{ partial \"icons/slack.svg\" (dict \"class\" \"navbar-nav-svg\" \"width\" \"36\" \"height\" \"36\") }}\n         </a>\n       </li>\n       <li class=\"nav-item\">\n-        <a class=\"nav-link p-2\" href=\"{{ .Site.Params.opencollective }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Open Collective\">\n+        <a class=\"nav-link px-1 mx-1 py-3 my-n2\" href=\"{{ .Site.Params.opencollective }}\" target=\"_blank\" rel=\"noopener\" aria-label=\"Open Collective\">\n           {{ partial \"icons/opencollective.svg\" (dict \"class\" \"navbar-nav-svg\" \"width\" \"36\" \"height\" \"36\") }}\n         </a>\n       </li>\ndiff --git a/site/static/docs/4.3/assets/scss/_ads.scss b/site/static/docs/4.3/assets/scss/_ads.scss\nindex 0c08025c2..da682b952 100644\n--- a/site/static/docs/4.3/assets/scss/_ads.scss\n+++ b/site/static/docs/4.3/assets/scss/_ads.scss\n@@ -34,5 +34,6 @@\n \n .carbon-poweredby {\n   display: block;\n+  margin-top: .75rem;\n   color: #777 !important;\n }",
    "output": "docs: fix tap targets (#29272)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex a26467a77..d81ed6472 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -32,7 +32,7 @@ jobs:\n \n       - name: Run bundlesize\n         run: npm run bundlesize\n-        if: matrix.node == 10 && github.repository == 'twbs/bootstrap'\n+        if: matrix.node == 10 && github.repository == 'twbs/bootstrap' && github.event_name == 'push'\n         env:\n           BUNDLESIZE_GITHUB_TOKEN: \"${{ secrets.BUNDLESIZE_GITHUB_TOKEN }}\"\n ",
    "output": "ci: run bundlesize only for pushes."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/header.html b/site/layouts/partials/header.html\nindex 317225964..4f5a1cb7d 100644\n--- a/site/layouts/partials/header.html\n+++ b/site/layouts/partials/header.html\n@@ -1,6 +1,6 @@\n <meta charset=\"utf-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n-<meta name=\"description\" content=\"{{ index .Page.Params \"description\" | default .Site.Params.description | markdownify }}\">\n+<meta name=\"description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n <meta name=\"author\" content=\"{{ .Site.Params.authors }}\">\n <meta name=\"generator\" content=\"Hugo {{ hugo.Version }}\">\n \ndiff --git a/site/layouts/partials/social.html b/site/layouts/partials/social.html\nindex 151a62994..d327163a1 100644\n--- a/site/layouts/partials/social.html\n+++ b/site/layouts/partials/social.html\n@@ -3,13 +3,13 @@\n <meta name=\"twitter:site\" content=\"@{{ .Site.Params.twitter }}\">\n <meta name=\"twitter:creator\" content=\"@{{ .Site.Params.twitter }}\">\n <meta name=\"twitter:title\" content=\"{{ .Title | markdownify }}\">\n-<meta name=\"twitter:description\" content=\"{{ index .Page.Params \"description\" | default .Site.Params.description | markdownify }}\">\n+<meta name=\"twitter:description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n <meta name=\"twitter:image\" content=\"{{ if .IsHome }}{{ .Site.BaseURL }}{{ .Site.Params.social_logo_path }}{{ else }}{{ .Site.BaseURL }}{{ .Site.Params.social_image_path }}{{ end }}\">\n \n {{ \"<!-- Facebook -->\" | safeHTML }}\n <meta property=\"og:url\" content=\"{{ .Permalink }}\">\n <meta property=\"og:title\" content=\"{{ .Title | markdownify }}\">\n-<meta property=\"og:description\" content=\"{{ index .Page.Params \"description\" | default .Site.Params.description | markdownify }}\">\n+<meta property=\"og:description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n <meta property=\"og:type\" content=\"website\">\n <meta property=\"og:image\" content=\"{{ replace .Site.BaseURL \"https://\" \"http://\" }}{{ .Site.Params.social_image_path }}\">\n <meta property=\"og:image:secure_url\" content=\"{{ .Site.BaseURL }}{{ .Site.Params.social_image_path }}\">",
    "output": "docs: minor simplification. (#29227)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/static/docs/4.3/assets/scss/_nav.scss b/site/static/docs/4.3/assets/scss/_nav.scss\nindex 3ceec7aeb..265bdd72e 100644\n--- a/site/static/docs/4.3/assets/scss/_nav.scss\n+++ b/site/static/docs/4.3/assets/scss/_nav.scss\n@@ -113,7 +113,7 @@\n     font-weight: 600;\n     color: $gray-900;\n     background-color: transparent;\n-    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");\n+    background-image: escape-svg($dropdown-active-icon);\n     background-repeat: no-repeat;\n     background-position: .4rem .6rem;\n     background-size: .75rem .75rem;\ndiff --git a/site/static/docs/4.3/assets/scss/_variables.scss b/site/static/docs/4.3/assets/scss/_variables.scss\nindex e8bf3728d..32b138a45 100644\n--- a/site/static/docs/4.3/assets/scss/_variables.scss\n+++ b/site/static/docs/4.3/assets/scss/_variables.scss\n@@ -7,6 +7,7 @@ $bd-download:      #ffe484 !default;\n $bd-info:          #5bc0de !default;\n $bd-warning:       #f0ad4e !default;\n $bd-danger:        #d9534f !default;\n+$dropdown-active-icon: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='#292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/></svg>\");\n \n // Enable responsive font sizes for font sizes defined in the docs\n // The weird if test is made as a workaround to prevent a false fusv error.",
    "output": "docs: use the `escape_svg` function."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/carousel.js b/js/src/carousel.js\nindex 352b23849..8de7fd5ee 100644\n--- a/js/src/carousel.js\n+++ b/js/src/carousel.js\n@@ -597,7 +597,7 @@ EventHandler\n EventHandler.on(window, Event.LOAD_DATA_API, () => {\n   const carousels = Util.makeArray(SelectorEngine.find(Selector.DATA_RIDE))\n   for (let i = 0, len = carousels.length; i < len; i++) {\n-    Carousel._carouselInterface.call(carousels[i], Data.getData(carousels[i], DATA_KEY))\n+    Carousel._carouselInterface(carousels[i], Data.getData(carousels[i], DATA_KEY))\n   }\n })\n \ndiff --git a/js/src/dom/data.js b/js/src/dom/data.js\nindex 838e13a1d..2c1115125 100644\n--- a/js/src/dom/data.js\n+++ b/js/src/dom/data.js\n@@ -28,7 +28,7 @@ const Data = (() => {\n         storeData[element.key.id] = data\n       },\n       get(element, key) {\n-        if (typeof element === 'undefined' || typeof element.key === 'undefined') {\n+        if (!element || typeof element.key === 'undefined') {\n           return null\n         }\n ",
    "output": "fix(carousel): on load page create a carousel"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/build/rollup.config.js b/build/rollup.config.js\nindex e81a07ef5..b3a7929ec 100644\n--- a/build/rollup.config.js\n+++ b/build/rollup.config.js\n@@ -22,7 +22,6 @@ const plugins = [\n   })\n ]\n const globals = {\n-  jquery: 'jQuery', // Ensure we use jQuery which is always available even in noConflict mode\n   'popper.js': 'Popper'\n }\n \ndiff --git a/package.json b/package.json\nindex 09c273343..f204287f2 100644\n--- a/package.json\n+++ b/package.json\n@@ -96,7 +96,6 @@\n   \"license\": \"MIT\",\n   \"dependencies\": {},\n   \"peerDependencies\": {\n-    \"jquery\": \"1.9.1 - 3\",\n     \"popper.js\": \"^1.14.7\"\n   },\n   \"devDependencies\": {\n@@ -203,15 +202,12 @@\n     \"shim\": {\n       \"js/bootstrap\": {\n         \"deps\": [\n-          \"jquery\",\n           \"popper.js\"\n-        ],\n-        \"exports\": \"$\"\n+        ]\n       }\n     },\n     \"dependencies\": {},\n     \"peerDependencies\": {\n-      \"jquery\": \"1.9.1 - 3\",\n       \"popper.js\": \"^1.14.7\"\n     }\n   }",
    "output": "fix(build): remove jquery in our build"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dom/eventHandler.js b/js/src/dom/eventHandler.js\nindex 95bafe4ed..17f6d077a 100644\n--- a/js/src/dom/eventHandler.js\n+++ b/js/src/dom/eventHandler.js\n@@ -281,7 +281,14 @@ const EventHandler = (() => {\n \n       // merge custom informations in our event\n       if (typeof args !== 'undefined') {\n-        evt = Object.assign(evt, args)\n+        Object.keys(args)\n+          .forEach((key) => {\n+            Object.defineProperty(evt, key, {\n+              get() {\n+                return args[key]\n+              }\n+            })\n+          })\n       }\n \n       if (defaultPrevented) {",
    "output": "fix(event-handler): use Object.key for passing values in an event"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/tests/unit/util.js b/js/tests/unit/util.js\nindex 858fee6f4..fa930dcac 100644\n--- a/js/tests/unit/util.js\n+++ b/js/tests/unit/util.js\n@@ -160,4 +160,22 @@ $(function () {\n       sandbox.restore()\n     }\n   })\n+\n+  QUnit.test('noop should return an empty function', function (assert) {\n+    assert.expect(1)\n+    Util.noop().call()\n+    assert.ok(typeof Util.noop() === 'function')\n+  })\n+\n+  QUnit.test('should return jQuery if present', function (assert) {\n+    assert.expect(2)\n+\n+    assert.equal(Util.jQuery, $)\n+\n+    $.noConflict()\n+\n+    assert.equal(Util.jQuery, jQuery)\n+\n+    window.$ = jQuery\n+  })\n })",
    "output": "fix(util): increase util coverage"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dom/eventHandler.js b/js/src/dom/eventHandler.js\nindex 25248fb92..95bafe4ed 100644\n--- a/js/src/dom/eventHandler.js\n+++ b/js/src/dom/eventHandler.js\n@@ -281,7 +281,7 @@ const EventHandler = (() => {\n \n       // merge custom informations in our event\n       if (typeof args !== 'undefined') {\n-        evt = Util.extend(evt, args)\n+        evt = Object.assign(evt, args)\n       }\n \n       if (defaultPrevented) {\ndiff --git a/js/src/dom/polyfill.js b/js/src/dom/polyfill.js\nindex 159884df8..c0c1139f0 100644\n--- a/js/src/dom/polyfill.js\n+++ b/js/src/dom/polyfill.js\n@@ -155,6 +155,33 @@ const Polyfill = (() => {\n     }\n   }\n \n+  if (typeof Object.assign !== 'function') {\n+    Object.defineProperty(Object, 'assign', {\n+      value: (target, ...args) => {\n+        if (target === null || typeof target === 'undefined') {\n+          throw new TypeError('Cannot convert undefined or null to object')\n+        }\n+\n+        const to = Object(target)\n+\n+        for (let index = 1; index < args.length; index++) {\n+          const nextSource = args[index]\n+\n+          if (nextSource !== null || !nextSource) {\n+            for (const nextKey in nextSource) {\n+              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n+                to[nextKey] = nextSource[nextKey]\n+              }\n+            }\n+          }\n+        }\n+        return to\n+      },\n+      writable: true,\n+      configurable: true\n+    })\n+  }\n+\n   return {\n     defaultPreventedPreservedOnDispatch,\n     focusIn: typeof window.onfocusin === 'undefined',\ndiff --git a/js/src/util.js b/js/src/util.js\nindex 0b7f492fe..7a97411bb 100644\n--- a/js/src/util.js\n+++ b/js/src/util.js\n@@ -114,28 +114,6 @@ const Util = {\n     }\n   },\n \n-  extend(obj1, ...others) {\n-    const obj2 = others.shift()\n-    for (const secondProp in obj2) {\n-      if (Object.prototype.hasOwnProperty.call(obj2, secondProp)) {\n-        const secondVal = obj2[secondProp]\n-        // Is this value an object?  If so, iterate over its properties, copying them over\n-        if (secondVal && Object.prototype.toString.call(secondVal) === '[object Object]') {\n-          obj1[secondProp] = obj1[secondProp] || {}\n-          Util.extend(obj1[secondProp], secondVal)\n-        } else {\n-          obj1[secondProp] = secondVal\n-        }\n-      }\n-    }\n-\n-    if (others.length) {\n-      this.extend(obj1, ...others)\n-    }\n-\n-    return obj1\n-  },\n-\n   makeArray(nodeList) {\n     if (typeof nodeList === 'undefined' || nodeList === null) {\n       return []",
    "output": "fix(util): remove extend"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dom/eventHandler.js b/js/src/dom/eventHandler.js\nindex dda1eb216..25248fb92 100644\n--- a/js/src/dom/eventHandler.js\n+++ b/js/src/dom/eventHandler.js\n@@ -307,18 +307,4 @@ const EventHandler = (() => {\n   }\n })()\n \n-// focusin and focusout polyfill\n-if (Polyfill.focusIn) {\n-  (() => {\n-    function listenerFocus(event) {\n-      EventHandler.trigger(event.target, 'focusin')\n-    }\n-    function listenerBlur(event) {\n-      EventHandler.trigger(event.target, 'focusout')\n-    }\n-    EventHandler.on(document, 'focus', 'input', listenerFocus)\n-    EventHandler.on(document, 'blur', 'input', listenerBlur)\n-  })()\n-}\n-\n export default EventHandler\ndiff --git a/js/src/index.js b/js/src/index.js\nindex aa35ed07b..0c662873d 100644\n--- a/js/src/index.js\n+++ b/js/src/index.js\n@@ -3,7 +3,9 @@ import Button from './button'\n import Carousel from './carousel'\n import Collapse from './collapse'\n import Dropdown from './dropdown'\n+import EventHandler from './dom/eventHandler'\n import Modal from './modal'\n+import Polyfill from './dom/polyfill'\n import Popover from './popover'\n import ScrollSpy from './scrollspy'\n import Tab from './tab'\n@@ -18,6 +20,21 @@ import Util from './util'\n  * --------------------------------------------------------------------------\n  */\n \n+/* istanbul ignore next */\n+// focusin and focusout polyfill\n+if (Polyfill.focusIn) {\n+  (() => {\n+    function listenerFocus(event) {\n+      EventHandler.trigger(event.target, 'focusin')\n+    }\n+    function listenerBlur(event) {\n+      EventHandler.trigger(event.target, 'focusout')\n+    }\n+    EventHandler.on(document, 'focus', 'input', listenerFocus)\n+    EventHandler.on(document, 'blur', 'input', listenerBlur)\n+  })()\n+}\n+\n export {\n   Util,\n   Alert,",
    "output": "fix(event-handler): remove polyfill and move it to index"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/dom/polyfill.js b/js/src/dom/polyfill.js\nindex 2c811c25a..159884df8 100644\n--- a/js/src/dom/polyfill.js\n+++ b/js/src/dom/polyfill.js\n@@ -7,6 +7,7 @@ import Util from '../util'\n  * --------------------------------------------------------------------------\n  */\n \n+/* istanbul ignore next */\n const Polyfill = (() => {\n   // defaultPrevented is broken in IE\n   const workingDefaultPrevented = (() => {",
    "output": "fix(polyfill): disable coverage for our polyfills"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.2/assets/scss/_content.scss b/site/docs/4.2/assets/scss/_content.scss\nindex 723e4587d..16fc9d972 100644\n--- a/site/docs/4.2/assets/scss/_content.scss\n+++ b/site/docs/4.2/assets/scss/_content.scss\n@@ -29,7 +29,6 @@\n     @include media-breakpoint-down(md) {\n       display: block;\n       overflow-x: auto;\n-      -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057\n \n       &.table-bordered {\n         border: 0;",
    "output": "docs: remove `-ms-overflow-style: -ms-autohiding-scrollbar` (#28220)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_includes/footer.html b/site/_includes/footer.html\nindex 8e16577c1..e8328c6b9 100644\n--- a/site/_includes/footer.html\n+++ b/site/_includes/footer.html\n@@ -2,7 +2,7 @@\n   <div class=\"container-fluid p-3 p-md-5\">\n     <ul class=\"bd-footer-links\">\n       <li><a href=\"{{ site.repo }}\">GitHub</a></li>\n-      <li><a href=\"https://twitter.com/getbootstrap\">Twitter</a></li>\n+      <li><a href=\"https://twitter.com/{{ site.twitter }}\">Twitter</a></li>\n       <li><a href=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/examples/\">Examples</a></li>\n       <li><a href=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/about/overview/\">About</a></li>\n     </ul>\ndiff --git a/site/docs/4.2/getting-started/introduction.md b/site/docs/4.2/getting-started/introduction.md\nindex bf1ab73a7..0ca22507c 100644\n--- a/site/docs/4.2/getting-started/introduction.md\n+++ b/site/docs/4.2/getting-started/introduction.md\n@@ -136,11 +136,11 @@ For improved cross-browser rendering, we use [Reboot]({{ site.baseurl }}/docs/{{\n \n Stay up to date on the development of Bootstrap and reach out to the community with these helpful resources.\n \n-- Follow [@getbootstrap on Twitter](https://twitter.com/getbootstrap).\n+- Follow [@getbootstrap on Twitter](https://twitter.com/{{ site.twitter }}).\n - Read and subscribe to [The Official Bootstrap Blog]({{ site.blog }}/).\n - Join [the official Slack room]({{ site.slack }}/).\n - Chat with fellow Bootstrappers in IRC. On the `irc.freenode.net` server, in the `##bootstrap` channel.\n - Implementation help may be found at Stack Overflow (tagged [`bootstrap-4`](https://stackoverflow.com/questions/tagged/bootstrap-4)).\n - Developers should use the keyword `bootstrap` on packages which modify or add to the functionality of Bootstrap when distributing through [npm](https://www.npmjs.com/search?q=keywords:bootstrap) or similar delivery mechanisms for maximum discoverability.\n \n-You can also follow [@getbootstrap on Twitter](https://twitter.com/getbootstrap) for the latest gossip and awesome music videos.\n+You can also follow [@getbootstrap on Twitter](https://twitter.com/{{ site.twitter }}) for the latest gossip and awesome music videos.",
    "output": "docs: use the `twitter` Jekyll variable everywhere (#27990)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.1/getting-started/theming.md b/site/docs/4.1/getting-started/theming.md\nindex 9ab2a9bf8..931dc2849 100644\n--- a/site/docs/4.1/getting-started/theming.md\n+++ b/site/docs/4.1/getting-started/theming.md\n@@ -293,7 +293,7 @@ We use a subset of all colors to create a smaller color palette for generating c\n \n ### Grays\n \n-An expansive set of gray variables and a Sass map in `scss/_variables.scss` for consistent shades of gray across your project.\n+An expansive set of gray variables and a Sass map in `scss/_variables.scss` for consistent shades of gray across your project. Note that these are \"cool grays\", which tend towards a subtle blue tone, rather than neutral grays.\n \n <div class=\"row mb-3\">\n   <div class=\"col-md-4\">",
    "output": "docs: add note about the grays being \"cool\" (#27824)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_includes/scripts.html b/site/_includes/scripts.html\nindex 3c2e7fbbc..79b400bbe 100644\n--- a/site/_includes/scripts.html\n+++ b/site/_includes/scripts.html\n@@ -1,5 +1,5 @@\n <script src=\"{{ site.cdn.jquery }}\" integrity=\"{{ site.cdn.jquery_hash }}\" crossorigin=\"anonymous\"></script>\n-<script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/assets/js/vendor/jquery-slim.min.js\"><\\/script>')</script>\n+<script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/assets/js/vendor/jquery-slim.min.js\"><\\/script>')</script>\n \n {%- if jekyll.environment == \"production\" -%}\n   <script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/dist/js/bootstrap.bundle.min.js\" integrity=\"{{ site.cdn.js_bundle_hash }}\" crossorigin=\"anonymous\"></script>\ndiff --git a/site/_layouts/examples.html b/site/_layouts/examples.html\nindex bbf9e69ff..28aa0736c 100644\n--- a/site/_layouts/examples.html\n+++ b/site/_layouts/examples.html\n@@ -33,7 +33,7 @@\n \n     {%- if page.include_js != false -%}\n       <script src=\"{{ site.cdn.jquery }}\" integrity=\"{{ site.cdn.jquery_hash }}\" crossorigin=\"anonymous\"></script>\n-      <script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/assets/js/vendor/jquery-slim.min.js\"><\\/script>')</script>\n+      <script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/assets/js/vendor/jquery-slim.min.js\"><\\/script>')</script>\n \n       {%- if jekyll.environment == \"production\" -%}\n         <script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/dist/js/bootstrap.bundle.min.js\" integrity=\"{{ site.cdn.js_bundle_hash }}\" crossorigin=\"anonymous\"></script>\ndiff --git a/site/docs/4.1/utilities/image-replacement.md b/site/docs/4.1/utilities/image-replacement.md\nindex 0d5a4d30c..ab092d67f 100644\n--- a/site/docs/4.1/utilities/image-replacement.md\n+++ b/site/docs/4.1/utilities/image-replacement.md\n@@ -8,6 +8,7 @@ toc: true\n \n {% capture callout %}\n ##### Warning\n+\n The `text-hide()` class and mixin has been deprecated as of v4.1. It will be removed entirely in v5.\n {% endcapture %}\n {% include callout.html content=callout type=\"warning\" %}\n@@ -27,7 +28,10 @@ Utilize the `.text-hide` class or mixin to help replace an element's text conten\n \n Use the `.text-hide` class to maintain the accessibility and SEO benefits of heading tags, but want to utilize a `background-image` instead of text.\n \n-{% capture example %}\n-<h1 class=\"text-hide\" style=\"background-image: url('/docs/{{ site.docs_version }}/assets/brand/bootstrap-solid.svg'); width: 50px; height: 50px;\">Bootstrap</h1>\n-{% endcapture %}\n-{% include example.html content=example %}\n+<div class=\"bd-example\">\n+  <h1 class=\"text-hide\" style=\"background-image: url('{{ site.baseurl }}/docs/{{ site.docs_version }}/assets/brand/bootstrap-solid.svg'); width: 50px; height: 50px;\">Bootstrap</h1>\n+</div>\n+\n+{% highlight html %}\n+<h1 class=\"text-hide\" style=\"background-image: url('..');\">Bootstrap</h1>\n+{% endhighlight %}",
    "output": "docs: fix path to assets. (#27696)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.1/getting-started/browsers-devices.md b/site/docs/4.1/getting-started/browsers-devices.md\nindex 7e667a7b6..078d9912d 100644\n--- a/site/docs/4.1/getting-started/browsers-devices.md\n+++ b/site/docs/4.1/getting-started/browsers-devices.md\n@@ -121,9 +121,7 @@ For a list of some of the browser bugs that Bootstrap has to grapple with, see o\n \n ## Internet Explorer\n \n-Internet Explorer 10+ is supported; IE9 and down is not. Please be aware that some CSS3 properties and HTML5 elements are not fully supported in IE10, or require prefixed properties for full functionality. Visit [Can I use...](https://caniuse.com/) for details on browser support of CSS3 and HTML5 features.\n-\n-**If you require IE8-9 support, use Bootstrap 3.** It's the most stable version of our code and is still supported by our team for critical bugfixes and documentation changes. However, no new features will be added to it.\n+Internet Explorer 10+ is supported; IE9 and down is not. Please be aware that some CSS3 properties and HTML5 elements are not fully supported in IE10, or require prefixed properties for full functionality. Visit [Can I use...](https://caniuse.com/) for details on browser support of CSS3 and HTML5 features. **If you require IE8-9 support, use Bootstrap 3.**\n \n ## Modals and dropdowns on mobile\n ",
    "output": "docs: remove false info from v3 suggestion."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/modal.js b/js/src/modal.js\nindex 2c71baf73..704b02247 100644\n--- a/js/src/modal.js\n+++ b/js/src/modal.js\n@@ -81,6 +81,7 @@ class Modal {\n     this._isShown             = false\n     this._isBodyOverflowing   = false\n     this._ignoreBackdropClick = false\n+    this._isTransitioning     = false\n     this._scrollbarWidth      = 0\n   }\n \n@@ -101,7 +102,7 @@ class Modal {\n   }\n \n   show(relatedTarget) {\n-    if (this._isTransitioning || this._isShown) {\n+    if (this._isShown || this._isTransitioning) {\n       return\n     }\n \n@@ -153,7 +154,7 @@ class Modal {\n       event.preventDefault()\n     }\n \n-    if (this._isTransitioning || !this._isShown) {\n+    if (!this._isShown || this._isTransitioning) {\n       return\n     }\n \n@@ -206,6 +207,7 @@ class Modal {\n     this._isShown             = null\n     this._isBodyOverflowing   = null\n     this._ignoreBackdropClick = null\n+    this._isTransitioning     = null\n     this._scrollbarWidth      = null\n   }\n ",
    "output": "refactor(modal): add `_isTransitioning` default value"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.1/getting-started/webpack.md b/site/docs/4.1/getting-started/webpack.md\nindex 9a77dbda4..b35bf3d2a 100644\n--- a/site/docs/4.1/getting-started/webpack.md\n+++ b/site/docs/4.1/getting-started/webpack.md\n@@ -1,7 +1,7 @@\n ---\n layout: docs\n title: Webpack\n-description: Learn how to include Bootstrap in your project using Webpack 3.\n+description: Learn how to include Bootstrap in your project using Webpack.\n group: getting-started\n toc: true\n ---",
    "output": "docs: remove Webpack version reference."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_variables.scss b/scss/_variables.scss\nindex 79169319b..a8fc43280 100644\n--- a/scss/_variables.scss\n+++ b/scss/_variables.scss\n@@ -343,7 +343,7 @@ $table-dark-bg:               $gray-900 !default;\n $table-dark-accent-bg:        rgba($white, .05) !default;\n $table-dark-hover-bg:         rgba($white, .075) !default;\n $table-dark-border-color:     lighten($gray-900, 7.5%) !default;\n-$table-dark-color:            $body-bg !default;\n+$table-dark-color:            $white !default;\n \n $table-striped-order:         odd !default;\n ",
    "output": "feat: keep contrast on `.table-dark`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_config.yml b/_config.yml\nindex 6bb6c1a25..fdf8d47cd 100644\n--- a/_config.yml\n+++ b/_config.yml\n@@ -53,6 +53,8 @@ cdn:\n   css_hash:         \"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\n   js:               \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"\n   js_hash:          \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\"\n+  js_bundle:        \"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js\"\n+  js_bundle_hash:   \"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\"\n   jquery:           \"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n   jquery_hash:      \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n   popper:           \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\"\ndiff --git a/build/generate-sri.js b/build/generate-sri.js\nindex 8d0fedc4a..b3331001a 100644\n--- a/build/generate-sri.js\n+++ b/build/generate-sri.js\n@@ -36,8 +36,8 @@ const files = [\n     configPropertyName: 'jquery_hash'\n   },\n   {\n-    file: 'site/docs/4.1/assets/js/vendor/popper.min.js',\n-    configPropertyName: 'popper_hash'\n+    file: 'dist/js/bootstrap.bundle.min.js',\n+    configPropertyName: 'js_bundle_hash'\n   }\n ]\n \ndiff --git a/site/_includes/scripts.html b/site/_includes/scripts.html\nindex 346f97b00..2bd5ec8bc 100644\n--- a/site/_includes/scripts.html\n+++ b/site/_includes/scripts.html\n@@ -2,7 +2,7 @@\n <script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/assets/js/vendor/jquery-slim.min.js\"><\\/script>')</script>\n \n {%- if site.github -%}\n-  <script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/dist/js/bootstrap.bundle.min.js\" integrity=\"{{ site.cdn.js_hash }}\" crossorigin=\"anonymous\"></script>\n+  <script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/dist/js/bootstrap.bundle.min.js\" integrity=\"{{ site.cdn.js_bundle_hash }}\" crossorigin=\"anonymous\"></script>\n {%- else -%}\n   <script src=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/dist/js/bootstrap.bundle.js\"></script>\n {%- endif -%}",
    "output": "docs: fix bundle SRI hash."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.1/assets/scss/_algolia.scss b/site/docs/4.1/assets/scss/_algolia.scss\nindex ca1bccc57..7eca6c89c 100644\n--- a/site/docs/4.1/assets/scss/_algolia.scss\n+++ b/site/docs/4.1/assets/scss/_algolia.scss\n@@ -48,7 +48,7 @@\n     padding: .125rem 1rem !important;\n     margin-top: 0 !important;\n     font-size: .875rem !important;\n-    font-weight: 500 !important;\n+    font-weight: 600 !important;\n     color: $bd-purple-bright !important;\n     border-bottom: 0 !important;\n   }\ndiff --git a/site/docs/4.1/assets/scss/_buttons.scss b/site/docs/4.1/assets/scss/_buttons.scss\nindex 1e37857fd..21765b5a9 100644\n--- a/site/docs/4.1/assets/scss/_buttons.scss\n+++ b/site/docs/4.1/assets/scss/_buttons.scss\n@@ -3,7 +3,7 @@\n // Custom buttons for the docs.\n \n .btn-bd-primary {\n-  font-weight: 500;\n+  font-weight: 600;\n   color: $bd-purple-bright;\n   border-color: $bd-purple-bright;\n \n@@ -20,7 +20,7 @@\n }\n \n .btn-bd-download {\n-  font-weight: 500;\n+  font-weight: 600;\n   color: $bd-download;\n   border-color: $bd-download;\n \ndiff --git a/site/docs/4.1/assets/scss/_footer.scss b/site/docs/4.1/assets/scss/_footer.scss\nindex ab605d285..c9a8e70e4 100644\n--- a/site/docs/4.1/assets/scss/_footer.scss\n+++ b/site/docs/4.1/assets/scss/_footer.scss\n@@ -8,7 +8,7 @@\n   background-color: #f7f7f7;\n \n   a {\n-    font-weight: 500;\n+    font-weight: 600;\n     color: $gray-700;\n \n     &:hover,\ndiff --git a/site/docs/4.1/assets/scss/_masthead.scss b/site/docs/4.1/assets/scss/_masthead.scss\nindex 0e3cea069..06abf7131 100644\n--- a/site/docs/4.1/assets/scss/_masthead.scss\n+++ b/site/docs/4.1/assets/scss/_masthead.scss\n@@ -13,7 +13,7 @@\n     width: 100%;\n     padding: .8rem 2rem;\n     font-size: 1.25rem;\n-    font-weight: 500;\n+    font-weight: 600;\n   }\n \n   .carbonad {\ndiff --git a/site/docs/4.1/assets/scss/_nav.scss b/site/docs/4.1/assets/scss/_nav.scss\nindex 73c6bad64..a81577381 100644\n--- a/site/docs/4.1/assets/scss/_nav.scss\n+++ b/site/docs/4.1/assets/scss/_nav.scss\n@@ -48,7 +48,7 @@\n       }\n \n       &.active {\n-        font-weight: 500;\n+        font-weight: 600;\n       }\n     }\n   }\n@@ -65,7 +65,7 @@\n   }\n \n   .dropdown-item.active {\n-    font-weight: 500;\n+    font-weight: 600;\n     color: $gray-900;\n     background-color: transparent;\n     background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E\");\ndiff --git a/site/docs/4.1/assets/scss/_sidebar.scss b/site/docs/4.1/assets/scss/_sidebar.scss\nindex 0cfbd60d2..610458a38 100644\n--- a/site/docs/4.1/assets/scss/_sidebar.scss\n+++ b/site/docs/4.1/assets/scss/_sidebar.scss\n@@ -113,7 +113,7 @@\n .bd-toc-link {\n   display: block;\n   padding: .25rem 1.5rem;\n-  font-weight: 500;\n+  font-weight: 600;\n   color: rgba(0, 0, 0, .65);\n \n   &:hover {\n@@ -160,7 +160,7 @@\n \n .bd-sidebar .nav > .active > a,\n .bd-sidebar .nav > .active:hover > a {\n-  font-weight: 500;\n+  font-weight: 600;\n   color: rgba(0, 0, 0, .85);\n   background-color: transparent;\n }",
    "output": "docs: switch to font-weight 600. (#27226)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/util.js b/js/src/util.js\nindex 3008c2278..8165ab46f 100644\n--- a/js/src/util.js\n+++ b/js/src/util.js\n@@ -84,7 +84,7 @@ const Util = (($) => {\n       }\n \n       const validSelector = selector\n-      if (selector.charAt(0) === '#') {\n+      if (selector.charAt(0) === '#' && selector.indexOf(',') === -1) {\n         selector = selector.substr(1)\n         method = 'getElementById'\n       }\ndiff --git a/js/tests/unit/util.js b/js/tests/unit/util.js\nindex 49252701a..4f44c2907 100644\n--- a/js/tests/unit/util.js\n+++ b/js/tests/unit/util.js\n@@ -32,6 +32,19 @@ $(function () {\n     assert.ok(spy.called)\n   })\n \n+  QUnit.test('Util.getSelectorFromElement should use querySelector when there are multi ids', function (assert) {\n+    assert.expect(2)\n+\n+    var spy = sinon.spy(document, 'querySelector')\n+\n+    var $el = $('<div data-target=\"#j7, #j8\"></div>').appendTo($('#qunit-fixture'))\n+    $('<div id=\"j7\" />').appendTo($('#qunit-fixture'))\n+    $('<div id=\"j8\" />').appendTo($('#qunit-fixture'))\n+\n+    assert.strictEqual(Util.getSelectorFromElement($el[0]), '#j7, #j8')\n+    assert.ok(spy.called)\n+  })\n+\n   QUnit.test('Util.typeCheckConfig should thrown an error when a bad config is passed', function (assert) {\n     assert.expect(1)\n     var namePlugin = 'collapse'",
    "output": "fix(util): use querySelector for ids"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/util.js b/js/src/util.js\nindex eb98d449c..3008c2278 100644\n--- a/js/src/util.js\n+++ b/js/src/util.js\n@@ -77,12 +77,20 @@ const Util = (($) => {\n \n     getSelectorFromElement(element) {\n       let selector = element.getAttribute('data-target')\n+      let method = 'querySelector'\n+\n       if (!selector || selector === '#') {\n-        selector = element.getAttribute('href') || ''\n+        selector = (element.getAttribute('href') || '').trim()\n+      }\n+\n+      const validSelector = selector\n+      if (selector.charAt(0) === '#') {\n+        selector = selector.substr(1)\n+        method = 'getElementById'\n       }\n \n       try {\n-        return document.querySelector(selector) ? selector : null\n+        return document[method](selector) ? validSelector : null\n       } catch (err) {\n         return null\n       }\ndiff --git a/js/tests/unit/util.js b/js/tests/unit/util.js\nindex 37327b868..49252701a 100644\n--- a/js/tests/unit/util.js\n+++ b/js/tests/unit/util.js\n@@ -20,6 +20,18 @@ $(function () {\n     assert.strictEqual(Util.getSelectorFromElement($el2[0]), null)\n   })\n \n+  QUnit.test('Util.getSelectorFromElement should use getElementById', function (assert) {\n+    assert.expect(2)\n+\n+    var spy = sinon.spy(document, 'getElementById')\n+\n+    var $el = $('<div data-target=\"#7\"></div>').appendTo($('#qunit-fixture'))\n+    $('<div id=\"7\" />').appendTo($('#qunit-fixture'))\n+\n+    assert.strictEqual(Util.getSelectorFromElement($el[0]), '#7')\n+    assert.ok(spy.called)\n+  })\n+\n   QUnit.test('Util.typeCheckConfig should thrown an error when a bad config is passed', function (assert) {\n     assert.expect(1)\n     var namePlugin = 'collapse'",
    "output": "fix(util): use getElementById when it's possible"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/modal.js b/js/src/modal.js\nindex e7f9d2d96..29fcc76bf 100644\n--- a/js/src/modal.js\n+++ b/js/src/modal.js\n@@ -431,7 +431,6 @@ const Modal = (($) => {\n         //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n         const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT))\n         const stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT))\n-        const navbarToggler = [].slice.call(document.querySelectorAll(Selector.NAVBAR_TOGGLER))\n \n         // Adjust fixed content padding\n         $(fixedContent).each((index, element) => {\n@@ -465,11 +464,8 @@ const Modal = (($) => {\n       const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT))\n       $(fixedContent).each((index, element) => {\n         const padding = $(element).data('padding-right')\n-        if (typeof padding !== 'undefined') {\n-          $(element)\n-            .css('padding-right', padding)\n-            .removeData('padding-right')\n-        }\n+        $(element).removeData('padding-right')\n+        element.style.paddingRight = padding ? padding : ''\n       })\n \n       // Restore sticky content\n@@ -483,9 +479,8 @@ const Modal = (($) => {\n \n       // Restore body padding\n       const padding = $(document.body).data('padding-right')\n-      if (typeof padding !== 'undefined') {\n-        $(document.body).css('padding-right', padding).removeData('padding-right')\n-      }\n+      $(document.body).removeData('padding-right')\n+      document.body.style.paddingRight = padding ? padding : ''\n     }\n \n     _getScrollbarWidth() { // thx d.walsh\ndiff --git a/js/tests/unit/modal.js b/js/tests/unit/modal.js\nindex 2729e4e4b..53a2e0416 100644\n--- a/js/tests/unit/modal.js\n+++ b/js/tests/unit/modal.js\n@@ -21,7 +21,8 @@ $(function () {\n         document.body.removeChild(scrollDiv)\n         return scrollbarWidth\n       }\n-      // Simulate scrollbars in PhantomJS\n+\n+      // Simulate scrollbars\n       $('html').css('padding-right', '16px')\n     },\n     beforeEach: function () {",
    "output": "fix(modal): fix unit test and resetting style"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/tooltip.js b/js/src/tooltip.js\nindex 56c1aa0d1..c66e48385 100644\n--- a/js/src/tooltip.js\n+++ b/js/src/tooltip.js\n@@ -660,9 +660,11 @@ const Tooltip = (($) => {\n       }\n     }\n \n-    _handlePopperPlacementChange(data) {\n+    _handlePopperPlacementChange(popperData) {\n+      const popperInstance = popperData.instance\n+      this.tip = popperInstance.popper\n       this._cleanTipClass()\n-      this.addAttachmentClass(this._getAttachment(data.placement))\n+      this.addAttachmentClass(this._getAttachment(popperData.placement))\n     }\n \n     _fixTransition() {\ndiff --git a/js/tests/unit/tooltip.js b/js/tests/unit/tooltip.js\nindex 670e6d0c2..9cf3068a3 100644\n--- a/js/tests/unit/tooltip.js\n+++ b/js/tests/unit/tooltip.js\n@@ -943,4 +943,27 @@ $(function () {\n \n     assert.ok(tooltip._popper === null)\n   })\n+\n+  QUnit.test('should use Popper.js to get the tip on placement change', function (assert) {\n+    assert.expect(1)\n+\n+    var $tooltip = $('<a href=\"#\" rel=\"tooltip\" data-trigger=\"click\" title=\"Another tooltip\"/>')\n+      .appendTo('#qunit-fixture')\n+      .bootstrapTooltip()\n+\n+    var $tipTest = $('<div class=\"bs-tooltip\" />')\n+      .appendTo('#qunit-fixture')\n+\n+    var tooltip = $tooltip.data('bs.tooltip')\n+    tooltip.tip = null\n+\n+    tooltip._handlePopperPlacementChange({\n+      instance: {\n+        popper: $tipTest[0]\n+      },\n+      placement: 'auto'\n+    })\n+\n+    assert.ok(tooltip.tip === $tipTest[0])\n+  })\n })",
    "output": "fix(tooltip): get tip on placement change"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/scrollspy.js b/js/src/scrollspy.js\nindex 091b320bd..90905b05d 100644\n--- a/js/src/scrollspy.js\n+++ b/js/src/scrollspy.js\n@@ -115,7 +115,7 @@ const ScrollSpy = (($) => {\n \n       this._scrollHeight = this._getScrollHeight()\n \n-      const targets = $.makeArray($(this._selector))\n+      const targets = $.makeArray(document.querySelectorAll(this._selector))\n \n       targets\n         .map((element) => {",
    "output": "fix(scrollspy): xss in target option"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/collapse.js b/js/src/collapse.js\nindex a75654227..2c48cf545 100644\n--- a/js/src/collapse.js\n+++ b/js/src/collapse.js\n@@ -289,7 +289,7 @@ const Collapse = (($) => {\n           parent = this._config.parent[0]\n         }\n       } else {\n-        parent = $(this._config.parent)[0]\n+        parent = document.querySelector(this._config.parent)\n       }\n \n       const selector =\ndiff --git a/js/tests/visual/collapse.html b/js/tests/visual/collapse.html\nindex 300592095..24698d764 100644\n--- a/js/tests/visual/collapse.html\n+++ b/js/tests/visual/collapse.html\n@@ -54,6 +54,20 @@\n             </div>\n           </div>\n         </div>\n+        <div class=\"card\">\n+          <div class=\"card-header\" role=\"tab\" id=\"headingFour\">\n+            <h5 class=\"mb-0\">\n+              <a class=\"collapsed\" data-toggle=\"collapse\" href=\"#collapseFour\" aria-expanded=\"false\" aria-controls=\"collapseFour\">\n+                Collapsible Group Item with XSS in data-parent\n+              </a>\n+            </h5>\n+          </div>\n+          <div id=\"collapseFour\" class=\"collapse\" data-parent=\"<img src=1 onerror=alert(123) />\" role=\"tabpanel\" aria-labelledby=\"headingFour\">\n+            <div class=\"card-body\">\n+              Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.\n+            </div>\n+          </div>\n+        </div>\n       </div>\n     </div>\n ",
    "output": "fix(collapse): xss in parent option"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/tests/unit/tooltip.js b/js/tests/unit/tooltip.js\nindex e9e6ae324..670e6d0c2 100644\n--- a/js/tests/unit/tooltip.js\n+++ b/js/tests/unit/tooltip.js\n@@ -523,46 +523,6 @@ $(function () {\n     assert.ok(passed, '.tooltip(\\'show\\') should not throw an error if element no longer is in dom')\n   })\n \n-  QUnit.test('should place tooltip on top of element', function (assert) {\n-    assert.expect(1)\n-    var done = assert.async()\n-\n-    var containerHTML = '<div id=\"test\">' +\n-        '<p style=\"margin-top: 200px\">' +\n-        '<a href=\"#\" title=\"very very very very very very very long tooltip\">Hover me</a>' +\n-        '</p>' +\n-        '</div>'\n-\n-    var $container = $(containerHTML)\n-      .css({\n-        position: 'absolute',\n-        bottom: 0,\n-        left: 0,\n-        textAlign: 'right',\n-        width: 300,\n-        height: 300\n-      })\n-      .appendTo('#qunit-fixture')\n-\n-    $container\n-      .find('a')\n-      .css('margin-top', 200)\n-      .bootstrapTooltip({\n-        placement: 'top',\n-        animate: false\n-      })\n-      .on('shown.bs.tooltip', function () {\n-        var $tooltip = $($(this).data('bs.tooltip').tip)\n-        if (/iPhone|iPad|iPod/.test(navigator.userAgent)) {\n-          assert.ok(Math.round($tooltip.offset().top + $tooltip.outerHeight()) <= Math.round($(this).offset().top))\n-        } else {\n-          assert.ok(Math.round($tooltip.offset().top + $tooltip.outerHeight()) >= Math.round($(this).offset().top))\n-        }\n-        done()\n-      })\n-      .bootstrapTooltip('show')\n-  })\n-\n   QUnit.test('should show tooltip if leave event hasn\\'t occurred before delay expires', function (assert) {\n     assert.expect(2)\n     var done = assert.async()",
    "output": "fix(tooltip): remove useless unit test"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/4.1/components/dropdowns.md b/docs/4.1/components/dropdowns.md\nindex 0ee4e07c0..191cae9f6 100644\n--- a/docs/4.1/components/dropdowns.md\n+++ b/docs/4.1/components/dropdowns.md\n@@ -436,7 +436,7 @@ Trigger dropdown menus at the right of the elements by adding `.dropright` to th\n       Split dropright\n     </button>\n     <button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n-      <span class=\"sr-only\">Toggle Dropdright</span>\n+      <span class=\"sr-only\">Toggle Dropright</span>\n     </button>\n     <div class=\"dropdown-menu\">\n       <a class=\"dropdown-item\" href=\"#\">Action</a>",
    "output": "fix(doc): typo in dropdowns.md"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_config.yml b/_config.yml\nindex 559801608..7e1e7264a 100644\n--- a/_config.yml\n+++ b/_config.yml\n@@ -67,9 +67,9 @@ download:\n \n cdn:\n   # See https://www.srihash.org for info on how to generate the hashes\n-  css:              \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n+  css:              \"https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n   css_hash:         \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n-  js:               \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\n+  js:               \"https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\n   js_hash:          \"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\"\n   jquery:           \"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n   jquery_hash:      \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\ndiff --git a/docs/4.0/getting-started/introduction.md b/docs/4.0/getting-started/introduction.md\nindex 48e6dc549..e938bb534 100644\n--- a/docs/4.0/getting-started/introduction.md\n+++ b/docs/4.0/getting-started/introduction.md\n@@ -13,7 +13,7 @@ toc: true\n \n ## Quick start\n \n-Looking to quickly add Bootstrap to your project? Use BootstrapCDN, provided for free by the folks at MaxCDN. Using a package manager or need to download the source files? [Head to the downloads page.]({{ site.baseurl }}/docs/{{ site.docs_version }}/getting-started/download/)\n+Looking to quickly add Bootstrap to your project? Use BootstrapCDN, provided for free by the folks at StackPath. Using a package manager or need to download the source files? [Head to the downloads page.]({{ site.baseurl }}/docs/{{ site.docs_version }}/getting-started/download/)\n \n ### CSS\n ",
    "output": "docs: Switch to StackPath's URL."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/assets/scss/_sidebar.scss b/assets/scss/_sidebar.scss\nindex 385cb8cd8..0cfbd60d2 100644\n--- a/assets/scss/_sidebar.scss\n+++ b/assets/scss/_sidebar.scss\n@@ -65,7 +65,7 @@\n   }\n \n   @include media-breakpoint-up(xl) {\n-    max-width: 320px;\n+    flex: 0 1 320px;\n   }\n }\n ",
    "output": "docs: Fix overflow issue in IE. (#25142)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/assets/scss/_syntax.scss b/assets/scss/_syntax.scss\nindex 9b5b2e712..ca19dde81 100644\n--- a/assets/scss/_syntax.scss\n+++ b/assets/scss/_syntax.scss\n@@ -62,5 +62,15 @@\n .css .o + .nt,\n .css .nt + .nt { color: #999; }\n \n-.language-bash::before { color: #009; content: \"$ \"; user-select: none; }\n-.language-powershell::before { color: #009; content: \"PM> \"; user-select: none; }\n+.language-bash::before,\n+.language-sh::before {\n+  color: #009;\n+  content: \"$ \";\n+  user-select: none;\n+}\n+\n+.language-powershell::before {\n+  color: #009;\n+  content: \"PM> \";\n+  user-select: none;\n+}\ndiff --git a/docs/4.0/getting-started/download.md b/docs/4.0/getting-started/download.md\nindex a5a586e9c..33014a110 100644\n--- a/docs/4.0/getting-started/download.md\n+++ b/docs/4.0/getting-started/download.md\n@@ -52,7 +52,7 @@ Pull in Bootstrap's **source files** into nearly any project with some of the mo\n \n Install Bootstrap in your Node powered apps with [the npm package](https://www.npmjs.com/package/bootstrap):\n \n-{% highlight bash %}\n+{% highlight sh %}\n npm install bootstrap@{{ site.current_version }}\n {% endhighlight %}\n \n@@ -73,7 +73,7 @@ gem 'bootstrap', '~> 4.0.0.beta'\n \n Alternatively, if you're not using Bundler, you can install the gem by running this command:\n \n-{% highlight bash %}\n+{% highlight sh %}\n gem install bootstrap -v 4.0.0.beta\n {% endhighlight %}\n \n@@ -83,7 +83,7 @@ gem install bootstrap -v 4.0.0.beta\n \n You can also install and manage Bootstrap's Sass and JavaScript using [Composer](https://getcomposer.org):\n \n-{% highlight bash %}\n+{% highlight sh %}\n composer require twbs/bootstrap:{{ site.current_version }}\n {% endhighlight %}\n ",
    "output": "docs: fix syntax highlighting for shell scripts. (#24103)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/scrollspy.js b/js/src/scrollspy.js\nindex 70067c0b3..e8f0d3101 100644\n--- a/js/src/scrollspy.js\n+++ b/js/src/scrollspy.js\n@@ -54,6 +54,7 @@ const ScrollSpy = (() => {\n     ACTIVE          : '.active',\n     NAV_LIST_GROUP  : '.nav, .list-group',\n     NAV_LINKS       : '.nav-link',\n+    NAV_ITEMS       : '.nav-item',\n     LIST_ITEMS      : '.list-group-item',\n     DROPDOWN        : '.dropdown',\n     DROPDOWN_ITEMS  : '.dropdown-item',\n@@ -264,6 +265,8 @@ const ScrollSpy = (() => {\n         // Set triggered links parents as active\n         // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n         $link.parents(Selector.NAV_LIST_GROUP).prev(`${Selector.NAV_LINKS}, ${Selector.LIST_ITEMS}`).addClass(ClassName.ACTIVE)\n+        // Handle special case when .nav-link is inside .nav-item\n+        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE)\n       }\n \n       $(this._scrollElement).trigger(Event.ACTIVATE, {\ndiff --git a/js/tests/unit/scrollspy.js b/js/tests/unit/scrollspy.js\nindex 96cf54eef..7bdeb4a8d 100644\n--- a/js/tests/unit/scrollspy.js\n+++ b/js/tests/unit/scrollspy.js\n@@ -360,6 +360,47 @@ $(function () {\n     testActiveElements()\n   })\n \n+\n+  QUnit.test('should add the active class correctly when there are nested elements (nav nav-item markup)', function (assert) {\n+    assert.expect(6)\n+    var times = 0\n+    var done = assert.async()\n+    var navbarHtml = '<nav id=\"navigation\" class=\"navbar\">'\n+      + '<ul class=\"nav\">'\n+      + '<li class=\"nav-item\"><a id=\"a-1\" class=\"nav-link\" href=\"#div-1\">div 1</a></li>'\n+      + '<ul class=\"nav\">'\n+      + '<li class=\"nav-item\"><a id=\"a-2\" class=\"nav-link\" href=\"#div-2\">div 2</a></li>'\n+      + '</ul>'\n+      + '</ul>'\n+      + '</nav>'\n+\n+    var contentHtml = '<div class=\"content\" style=\"position: absolute; top: 0px; overflow: auto; height: 50px\">'\n+      + '<div id=\"div-1\" style=\"padding: 0; margin: 0\">'\n+      + '<div id=\"div-2\" style=\"height: 200px; padding: 0; margin: 0\">div 2</div>'\n+      + '</div>'\n+      + '</div>'\n+\n+    $(navbarHtml).appendTo('#qunit-fixture')\n+\n+    var $content = $(contentHtml)\n+      .appendTo('#qunit-fixture')\n+      .bootstrapScrollspy({ offset: 0, target: '#navigation' })\n+\n+    function testActiveElements() {\n+      if (++times > 3) { return done() }\n+\n+      $content.one('scroll', function () {\n+        assert.ok($('#a-1').hasClass('active'), 'nav item for outer element has \"active\" class')\n+        assert.ok($('#a-2').hasClass('active'), 'nav item for inner element has \"active\" class')\n+        testActiveElements()\n+      })\n+\n+      $content.scrollTop($content.scrollTop() + 10)\n+    }\n+\n+    testActiveElements()\n+  })\n+\n   QUnit.test('should add the active class correctly when there are nested elements (list-group markup)', function (assert) {\n     assert.expect(6)\n     var times = 0",
    "output": "fix(scrollspy): Spying on nested navs fails to activate for .nav-link's inside nav-item's (#23967)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/4.0/components/navbar.md b/docs/4.0/components/navbar.md\nindex fb5cc2c64..72eb28ce7 100644\n--- a/docs/4.0/components/navbar.md\n+++ b/docs/4.0/components/navbar.md\n@@ -70,7 +70,7 @@ The `.navbar-brand` can be applied to most elements, but an anchor works best as\n \n <!-- As a heading -->\n <nav class=\"navbar navbar-light bg-light\">\n-  <span class=\"h1\" class=\"navbar-brand mb-0\">Navbar</span>\n+  <span class=\"navbar-brand mb-0 h1\">Navbar</span>\n </nav>\n {% endexample %}\n ",
    "output": "fix(docs): duplicate class in navbar docs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_includes/footer.html b/_includes/footer.html\nindex 1f9b44c7b..c41c83578 100644\n--- a/_includes/footer.html\n+++ b/_includes/footer.html\n@@ -4,7 +4,7 @@\n       <li><a href=\"{{ site.repo }}\">GitHub</a></li>\n       <li><a href=\"https://twitter.com/getbootstrap\">Twitter</a></li>\n       <li><a href=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/examples/\">Examples</a></li>\n-      <li><a href=\"{{ site.baseurl }}/about/\">About</a></li>\n+      <li><a href=\"{{ site.baseurl }}/docs/{{ site.docs_version }}/about/\">About</a></li>\n     </ul>\n     <p>Designed and built with all the love in the world by <a href=\"https://twitter.com/mdo\" target=\"_blank\" rel=\"noopener\">@mdo</a> and <a href=\"https://twitter.com/fat\" target=\"_blank\" rel=\"noopener\">@fat</a>. Maintained by the <a href=\"https://github.com/orgs/twbs/people\">core team</a> with the help of <a href=\"https://github.com/twbs/bootstrap/graphs/contributors\">our contributors</a>.</p>\n     <p>Currently v{{ site.current_version }}. Code licensed <a rel=\"license noopener\" href=\"https://github.com/twbs/bootstrap/blob/master/LICENSE\" target=\"_blank\">MIT</a>, docs <a rel=\"license noopener\" href=\"https://creativecommons.org/licenses/by/3.0/\" target=\"_blank\">CC BY 3.0</a>.</p>",
    "output": "fix: Broken 'About' Link in the Footer (#23367)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/index.html b/index.html\nindex caf7e417f..aa3840da9 100644\n--- a/index.html\n+++ b/index.html\n@@ -62,7 +62,7 @@ bower install bootstrap#v{{ site.current_version }}\n <link rel=\"stylesheet\" href=\"{{ site.cdn.css }}\" integrity=\"{{ site.cdn.css_hash }}\" crossorigin=\"anonymous\">\n {% endhighlight %}\n \n-<h5>JS, Popper, and jQuery</h5>\n+<h5>JS, Popper.js, and jQuery</h5>\n {% highlight html %}\n <script src=\"{{ site.cdn.jquery }}\" integrity=\"{{ site.cdn.jquery_hash }}\" crossorigin=\"anonymous\"></script>\n <script src=\"{{ site.cdn.popper }}\" integrity=\"{{ site.cdn.popper_hash }}\" crossorigin=\"anonymous\"></script>",
    "output": "docs: fix Popper.js name and removed comma (#23335)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_includes/social.html b/_includes/social.html\nindex c488ea610..35bd9fde3 100644\n--- a/_includes/social.html\n+++ b/_includes/social.html\n@@ -19,12 +19,17 @@\n   <meta property=\"og:url\" content=\"{{ site.url }}{{ page.url }}\">\n   <meta property=\"og:title\" content=\"{{ page.title }}\">\n   <meta property=\"og:description\" content=\"{{ page.description }}\">\n+  <meta property=\"og:type\" content=\"website\">\n {% else %}\n   <meta property=\"og:url\" content=\"{{ site.url }}\">\n   <meta property=\"og:title\" content=\"{{ site.title }}\">\n   <meta property=\"og:description\" content=\"{{ site.description }}\">\n {% endif %}\n-<meta property=\"og:image\" content=\"{{ site.url }}{{ site.social_image_path }}\">\n+<meta property=\"og:image\" content=\"{{ site.url | replace: 'https://', 'http://' }}{{ site.social_image_path }}\">\n+<meta property=\"og:image:secure_url\" content=\"{{ site.url }}{{ site.social_image_path }}\">\n+<meta property=\"og:image:type\" content=\"image/png\">\n+<meta property=\"og:image:width\" content=\"1200\">\n+<meta property=\"og:image:height\" content=\"630\">\n \n <!-- Meta -->\n <meta name=\"description\" content=\"{{ site.description }}\">",
    "output": "docs: add a few more Open Graph tags."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_config.yml b/_config.yml\nindex 3bc514e29..9ddbe2dff 100644\n--- a/_config.yml\n+++ b/_config.yml\n@@ -15,7 +15,7 @@ port:             9001\n baseurl:          \"\"\n url:              https://getbootstrap.com\n encoding:         UTF-8\n-exclude:          [.git, .github, assets/scss/, build, js, node_modules, nuget, scss, vendor, bower.json, composer.json, Gemfile, Gemfile.lock, Gruntfile.js, package.js, package.json, sache.json]\n+exclude:          [.git, .github, assets/scss/, build, js, node_modules, nuget, scss, vendor, bower.json, composer.json, Gemfile, Gemfile.lock, Gruntfile.js, package.js, package.json, package-lock.json, sache.json]\n \n gems:\n   - jekyll-redirect-from",
    "output": "docs: exclude package-lock.json from dist."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/4.0/components/input-group.md b/docs/4.0/components/input-group.md\nindex ec1626b74..c13157db2 100644\n--- a/docs/4.0/components/input-group.md\n+++ b/docs/4.0/components/input-group.md\n@@ -123,7 +123,7 @@ Buttons in input groups must wrapped in a `.input-group-btn` for proper alignmen\n   </div>\n   <div class=\"col-lg-6\">\n     <div class=\"input-group\">\n-      <input type=\"text\" class=\"form-control\" placeholder=\"Search for...\" aria-label=\"Search for...>\n+      <input type=\"text\" class=\"form-control\" placeholder=\"Search for...\" aria-label=\"Search for...\">\n       <span class=\"input-group-btn\">\n         <button class=\"btn btn-secondary\" type=\"button\">Go!</button>\n       </span>",
    "output": "docs: added missing quote in input-group example (#23010)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/utilities/typography.md b/docs/utilities/typography.md\nindex 42b61131e..5e29fd88c 100644\n--- a/docs/utilities/typography.md\n+++ b/docs/utilities/typography.md\n@@ -19,14 +19,6 @@ Easily realign text to components with text alignment classes.\n <p class=\"text-justify\">Ambitioni dedisse scripsisse iudicaretur. Cras mattis iudicium purus sit amet fermentum. Donec sed odio operae, eu vulputate felis rhoncus. Praeterea iter est quasdam res quas ex communi. At nos hinc posthac, sitientis piros Afros. Petierunt uti sibi concilium totius Galliae in diem certam indicere. Cras mattis iudicium purus sit amet fermentum.</p>\n {% endexample %}\n \n-{% example html %}\n-<div class=\"card\">\n-  <div class=\"card-block text-nowrap\">\n-    Curabitur blandit tempus ardua ridiculus sed magna.\n-  </div>\n-</div>\n-{% endexample %}\n-\n For left, right, and center alignment, responsive classes are available that use the same viewport width breakpoints as the grid system.\n \n {% example html %}\n@@ -40,6 +32,31 @@ For left, right, and center alignment, responsive classes are available that use\n <p class=\"text-xl-left\">Left aligned text on viewports sized XL (extra-large) or wider.</p>\n {% endexample %}\n \n+## Text wrapping and overflow\n+\n+Prevent text from wrapping with a `.text-nowrap` class.\n+\n+{% example html %}\n+<div class=\"row\">\n+  <div class=\"col-1 text-nowrap\">\n+    Curabitur blandit tempus ardua ridiculus sed magna.\n+  </div>\n+  <div class=\"col-11\">\n+    <img data-src=\"holder.js/50x50\" alt=\"An image to show the text doesn't wrap\">\n+  </div>\n+</div>\n+{% endexample %}\n+\n+For longer content, you can add a `.text-truncate` class to truncate the text with an ellipsis.\n+\n+{% example html %}\n+<div class=\"row\">\n+  <div class=\"col-2 text-truncate\">\n+    Praeterea iter est quasdam res quas ex communi.\n+  </div>\n+</div>\n+{% endexample %}\n+\n ## Text transform\n \n Transform text in components with text capitalization classes.",
    "output": "docs: add text-truncate and extend on text-nowrap"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex 9635d759f..5996a7b49 100644\n--- a/README.md\n+++ b/README.md\n@@ -36,7 +36,7 @@ Several quick start options are available:\n - Install with [npm](https://www.npmjs.com): `npm install bootstrap@4.0.0-alpha.5`\n - Install with [yarn](https://github.com/yarnpkg/yarn): `yarn add bootstrap@4.0.0-alpha.5`\n - Install with [Meteor](https://www.meteor.com): `meteor add twbs:bootstrap@=4.0.0-alpha.5`\n-- Install with [Composer](https://getcomposer.org): `composer require twbs/bootstrap`\n+- Install with [Composer](https://getcomposer.org): `composer require twbs/bootstrap:4.0.0-alpha.5`\n - Install with [Bower](https://bower.io): `bower install bootstrap#v4.0.0-alpha.5`\n - Install with [NuGet](https://www.nuget.org): CSS: `Install-Package bootstrap -Pre` Sass: `Install-Package bootstrap.sass -Pre` (`-Pre` is only required until Bootstrap v4 has a stable release).\n ",
    "output": "fix(readme): locked composer to a proper version (#21338)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/download.md b/docs/getting-started/download.md\nindex 7ee6fecee..37fbbaa59 100644\n--- a/docs/getting-started/download.md\n+++ b/docs/getting-started/download.md\n@@ -78,7 +78,7 @@ $ meteor add twbs:bootstrap@={{ site.current_version }}\n You can also install and manage Bootstrap's Sass and JavaScript using [Composer](https://getcomposer.org):\n \n {% highlight bash %}\n-$ composer require twbs/bootstrap\n+$ composer require twbs/bootstrap:{{ site.current_version }}\n {% endhighlight %}\n \n ### Bower",
    "output": "docs: Update `composer require` command to download current v4 alpha version (#20328)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_data/translations.yml b/docs/_data/translations.yml\nindex 57bf28f50..5ad1d8ef1 100644\n--- a/docs/_data/translations.yml\n+++ b/docs/_data/translations.yml\n@@ -7,3 +7,8 @@\n   code: zh\n   description: Bootstrap 4 \u4e2d\u6587\u6587\u6863\u6559\u7a0b\n   url: http://boot4.com/\n+\n+- name: Japanese\n+  code: ja\n+  description: Bootstrap 4 \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n+  url: http://bootstrap4.jp/",
    "output": "docs: Add link to Japanese translation site (#19855)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/migration.md b/docs/migration.md\nindex f4044a399..f40b2c46c 100644\n--- a/docs/migration.md\n+++ b/docs/migration.md\n@@ -203,11 +203,11 @@ TODO: audit classes in v3 that aren't present in v4\n \n ### Responsive utilities\n \n-The following deprecated variables have been removed in v4.0.0:\n+The following variables have been removed in v4.0.0. Use the `media-breakpoint-up()`, `media-breakpoint-down()`, or `media-breakpoint-only()` Sass mixins or the `$grid-breakpoints` Sass map instead of:\n \n-* `@screen-phone`, `@screen-tablet`, `@screen-desktop`, `@screen-lg-desktop`. Use the more abstract `$screen-{xs,sm,md,lg,xl}-*` variables instead.\n-* `@screen-sm`, `@screen-md`, `@screen-lg`. Use the more clearly named `$screen-{xs,sm,md,lg,xl}-min` variables instead.\n-* `@screen-xs`, `@screen-xs-min`. The extra small breakpoint has no lower bound, so these variables were logically absurd. Reformulate your expression in terms of `$screen-xs-max` instead.\n+* `@screen-phone`, `@screen-tablet`, `@screen-desktop`, `@screen-lg-desktop`.\n+* `@screen-xs`, `@screen-sm`, `@screen-md`, `@screen-lg`.\n+* `@screen-xs-min`, `@screen-xs-max`, `@screen-sm-min`, `@screen-sm-max`, `@screen-md-min`, `@screen-md-max`, `@screen-lg-min`, `@screen-lg-max`\n \n The responsive utility classes have also been overhauled.\n ",
    "output": "docs: Call out removal of @screen-* variables in v4"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/popovers.md b/docs/components/popovers.md\nindex 727189083..a723f33e3 100644\n--- a/docs/components/popovers.md\n+++ b/docs/components/popovers.md\n@@ -265,7 +265,7 @@ Options can be passed via data attributes or JavaScript. For data attributes, ap\n         <td>An array of constraints - passed through to Tether. For more information refer to Tether's <a href=\"http://github.hubspot.com/tether/#constraints\">constraint docs</a>.</td>\n       </tr>\n       <tr>\n-        <td>offsets</td>\n+        <td>offset</td>\n         <td>string</td>\n         <td>'0 0'</td>\n         <td>Offset of the popover relative to its target. For more information refer to Tether's <a href=\"http://github.hubspot.com/tether/#offset\">offset docs</a>.</td>\ndiff --git a/docs/components/tooltips.md b/docs/components/tooltips.md\nindex 204c2ddaa..fb8cb24dd 100644\n--- a/docs/components/tooltips.md\n+++ b/docs/components/tooltips.md\n@@ -229,7 +229,7 @@ Options can be passed via data attributes or JavaScript. For data attributes, ap\n         <td>An array of constraints - passed through to Tether. For more information refer to Tether's <a href=\"http://github.hubspot.com/tether/#constraints\">constraint docs</a>.</td>\n       </tr>\n       <tr>\n-        <td>offsets</td>\n+        <td>offset</td>\n         <td>string</td>\n         <td>'0 0'</td>\n         <td>Offset of the popover relative to its target. For more information refer to Tether's <a href=\"http://github.hubspot.com/tether/#constraints\">offset docs</a>.</td>",
    "output": "docs: Correct arg `offsets` to `offset` in tooltips & popovers"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/browsers-devices.md b/docs/getting-started/browsers-devices.md\nindex 0709eee72..5d977d2ee 100644\n--- a/docs/getting-started/browsers-devices.md\n+++ b/docs/getting-started/browsers-devices.md\n@@ -218,13 +218,13 @@ Bootstrap includes a workaround for this, although it is disabled by default. By\n \n Even in some modern browsers, printing can be quirky.\n \n-In particular, as of Chrome v32 and regardless of margin settings, Chrome uses a viewport width significantly narrower than the physical paper size when resolving media queries while printing a webpage. This can result in Bootstrap's extra-small grid being unexpectedly activated when printing. See [issue #12078](https://github.com/twbs/bootstrap/issues/12078) for some details. Suggested workarounds:\n+In particular, as of Chrome v32 and regardless of margin settings, Chrome uses a viewport width significantly narrower than the physical paper size when resolving media queries while printing a webpage. This can result in Bootstrap's extra-small grid being unexpectedly activated when printing. See [issue #12078](https://github.com/twbs/bootstrap/issues/12078) and [Chrome bug #273306](https://bugs.chromium.org/p/chromium/issues/detail?id=273306) for some details. Suggested workarounds:\n \n * Embrace the extra-small grid and make sure your page looks acceptable under it.\n * Customize the value of the `$grid-breakpoints` Sass variable so that your printer paper is considered larger than extra-small.\n * Add custom media queries to change the grid size breakpoints for print media only.\n \n-Also, as of Safari v8.0, use of the fixed-width `.container` class can cause Safari to use an unusually small font size when printing. See [issue #14868](https://github.com/twbs/bootstrap/issues/14868) for more details. One potential workaround is the following CSS:\n+Also, as of Safari v8.0, use of the fixed-width `.container` class can cause Safari to use an unusually small font size when printing. See [issue #14868](https://github.com/twbs/bootstrap/issues/14868) and [WebKit bug #138192](https://bugs.webkit.org/show_bug.cgi?id=138192) for more details. One potential workaround is the following CSS:\n \n {% highlight css %}\n @media print {",
    "output": "docs: Link directly to printing-related browser bugs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/browsers-devices.md b/docs/getting-started/browsers-devices.md\nindex d06845e90..0709eee72 100644\n--- a/docs/getting-started/browsers-devices.md\n+++ b/docs/getting-started/browsers-devices.md\n@@ -195,7 +195,7 @@ As a heads up, we include this in all of Bootstrap's documentation and examples\n \n ### Overflow and scrolling\n \n-Support for `overflow: hidden;` on the `<body>` element is quite limited in iOS and Android. To that end, when you scroll past the top or bottom of a modal in either of those devices' browsers, the `<body>` content will begin to scroll. See [WebKit bug #153852](https://bugs.webkit.org/show_bug.cgi?id=153852).\n+Support for `overflow: hidden;` on the `<body>` element is quite limited in iOS and Android. To that end, when you scroll past the top or bottom of a modal in either of those devices' browsers, the `<body>` content will begin to scroll. See [Chrome bug #175502](https://bugs.chromium.org/p/chromium/issues/detail?id=175502) (fixed in Chrome v40) and [WebKit bug #153852](https://bugs.webkit.org/show_bug.cgi?id=153852).\n \n ### Virtual keyboards\n ",
    "output": "docs: Add link to Chrome bug regarding `body { overflow: hidden; }`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/dropdowns.md b/docs/components/dropdowns.md\nindex 5e153d596..09d518a60 100644\n--- a/docs/components/dropdowns.md\n+++ b/docs/components/dropdowns.md\n@@ -45,8 +45,6 @@ You can optionally use `<button>` elements in your dropdowns instead of `<a>`s.\n </div>\n {% endexample %}\n \n-\n-\n ## Alignment\n \n By default, a dropdown menu is automatically positioned 100% from the top and along the left side of its parent. Add `.dropdown-menu-right` to a `.dropdown-menu` to right align the dropdown menu.\n@@ -55,11 +53,18 @@ By default, a dropdown menu is automatically positioned 100% from the top and al\n **Heads up!** Dropdowns are positioned only with CSS and may need some additional styles for exact alignment.\n {% endcallout %}\n \n-{% highlight html %}\n-<div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dLabel\">\n-  ...\n+{% example html %}\n+<div class=\"btn-group\">\n+  <button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n+    This dropdown's menu is right-aligned\n+  </button>\n+  <div class=\"dropdown-menu dropdown-menu-right\">\n+    <button class=\"dropdown-item\" type=\"button\">Action</button>\n+    <button class=\"dropdown-item\" type=\"button\">Another action</button>\n+    <button class=\"dropdown-item\" type=\"button\">Something else here</button>\n+  </div>\n </div>\n-{% endhighlight %}\n+{% endexample %}\n \n ## Menu headers\n ",
    "output": "docs: Add example of .dropdown-menu-right"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/header.html b/docs/_includes/header.html\nindex e7ecb12ab..51b3cda8b 100644\n--- a/docs/_includes/header.html\n+++ b/docs/_includes/header.html\n@@ -2,7 +2,6 @@\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n <meta name=\"description\" content=\"Bootstrap, a sleek, intuitive, and powerful mobile first front-end framework for faster and easier web development.\">\n-<meta name=\"keywords\" content=\"HTML, CSS, JS, JavaScript, framework, bootstrap, front-end, frontend, web development\">\n <meta name=\"author\" content=\"Mark Otto, Jacob Thornton, and Bootstrap contributors\">\n \n <title>",
    "output": "docs: Remove <meta name=\"keywords\"> from <head>"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/utilities.md b/docs/components/utilities.md\nindex e59869fcd..b67221119 100644\n--- a/docs/components/utilities.md\n+++ b/docs/components/utilities.md\n@@ -60,7 +60,8 @@ Here are some representative examples of these classes:\n }\n {% endhighlight %}\n \n-Additionally, Bootstrap also includes an `.m-x-auto` class for centering fixed-width block level content by setting the horizontal margins to `auto`.\n+### Horizontal centering\n+Additionally, Bootstrap also includes an `.m-x-auto` class for horizontally centering fixed-width block level content by setting the horizontal margins to `auto`.\n \n <div class=\"bd-example\">\n   <div class=\"m-x-auto\" style=\"width: 200px; background-color: rgba(86,61,124,.15);\">\n@@ -69,7 +70,7 @@ Additionally, Bootstrap also includes an `.m-x-auto` class for centering fixed-w\n </div>\n \n {% highlight html %}\n-<div class=\"m-x-auto\" style=\"width: 200px;\"\">\n+<div class=\"m-x-auto\" style=\"width: 200px;\">\n   Centered element\n </div>\n {% endhighlight %}",
    "output": "docs: Add \"Horizontal centering\" subheading for .m-x-auto"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/content/typography.md b/docs/content/typography.md\nindex ddda8333d..82f80a8a8 100644\n--- a/docs/content/typography.md\n+++ b/docs/content/typography.md\n@@ -132,9 +132,9 @@ Styling for common inline HTML5 elements.\n <p><em>This line rendered as italicized text.</em></p>\n {% endexample %}\n \n-While not shown above, feel free to use `<b>` and `<i>` in HTML5. `<b>` is meant to highlight words or phrases without conveying additional importance while `<i>` is mostly for voice, technical terms, etc.\n+`.mark` and `.small` classes are also available to apply the same styles as `<mark>` and `<small>` while avoiding any unwanted semantic implications that the tags would bring.\n \n-Corresponding classes `.small` and `.mark` are also available and apply the respective styles without introducing additional semantics.\n+While not shown above, feel free to use `<b>` and `<i>` in HTML5. `<b>` is meant to highlight words or phrases without conveying additional importance while `<i>` is mostly for voice, technical terms, etc.\n \n ## Abbreviations\n ",
    "output": "docs: Tweak #18982"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/options.md b/docs/getting-started/options.md\nindex 53aad61fd..5de826f8b 100644\n--- a/docs/getting-started/options.md\n+++ b/docs/getting-started/options.md\n@@ -16,6 +16,6 @@ You can find and customize these variables in our `_variables.scss` file.\n | `$enable-flex`              | `true` or `false` (default)        | Swaps `float` and `display: table` styles for `display: flex`.          |\n | `$enable-rounded`           | `true` (default) or `false`        | Enables predefined `border-radius` styles on various components.        |\n | `$enable-shadows`           | `true` or `false` (default)        | Enables predefined `box-shadow` styles on various components.           |\n-| `$enable-gradients`         | `true` or `false` (default)        | Enables predefined gradients via `background-image` on various components. |\n+| `$enable-gradients`         | `true` or `false` (default)        | Enables predefined gradients via `background-image` styles on various components. |\n | `$enable-transitions`       | `true` (default) or `false`        | Enables predefined `transition`s on various components.                 |\n | `$enable-hover-media-query` | `true` or `false` (default)        | ...                                                                     |",
    "output": "docs: Tweak phrasing of description of $enable-gradients"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/assets/scss/_component-examples.scss b/docs/assets/scss/_component-examples.scss\nindex 5fbb7453c..c3feb6073 100644\n--- a/docs/assets/scss/_component-examples.scss\n+++ b/docs/assets/scss/_component-examples.scss\n@@ -203,11 +203,6 @@\n   margin-bottom: .5rem;\n }\n \n-// Pager\n-.bd-example > .pager {\n-  margin-top: 0;\n-}\n-\n // Example modals\n .bd-example-modal {\n   background-color: #f5f5f5;",
    "output": "docs: Remove defunct Pager example styles"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_data/nav.yml b/docs/_data/nav.yml\nindex dac90c0d8..615bdc1a3 100644\n--- a/docs/_data/nav.yml\n+++ b/docs/_data/nav.yml\n@@ -2,7 +2,9 @@\n   pages:\n     - title: Introduction\n     - title: Download\n+    - title: Contents\n     - title: Browsers & devices\n+    - title: JavaScript\n     - title: Options\n     - title: Flexbox\n     - title: Build tools",
    "output": "docs: Add missing pages to \"Getting started\" TOC"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/Gruntfile.js b/Gruntfile.js\nindex 00cb33c93..85e423a68 100644\n--- a/Gruntfile.js\n+++ b/Gruntfile.js\n@@ -496,10 +496,11 @@ module.exports = function (grunt) {\n   });\n \n   // Docs task.\n-  grunt.registerTask('docs-css', ['scsslint:docs', 'postcss:docs', 'postcss:examples', 'csscomb:docs', 'csscomb:examples', 'cssmin:docs']);\n+  grunt.registerTask('docs-css', ['postcss:docs', 'postcss:examples', 'csscomb:docs', 'csscomb:examples', 'cssmin:docs']);\n+  grunt.registerTask('lint-docs-css', ['scsslint:docs']);\n   grunt.registerTask('docs-js', ['uglify:docsJs']);\n   grunt.registerTask('lint-docs-js', ['jscs:assets']);\n-  grunt.registerTask('docs', ['docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs']);\n+  grunt.registerTask('docs', ['lint-docs-css', 'docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs']);\n   grunt.registerTask('docs-github', ['jekyll:github']);\n \n   grunt.registerTask('prep-release', ['dist', 'docs', 'docs-github', 'compress']);",
    "output": "grunt: Extract lint-docs-css task"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/forms.md b/docs/components/forms.md\nindex f40904f8e..ee001a473 100644\n--- a/docs/components/forms.md\n+++ b/docs/components/forms.md\n@@ -517,19 +517,33 @@ Wrap inputs in grid columns, or any custom parent element, to easily enforce des\n \n No official help text classes exist in Bootstrap 4 (previously we had `.help-block` in v3), but thanks to our utility classes like `.text-muted`, you can create much more flexible help text as you need it.\n \n+{% callout warning %}\n+#### Associating help text with form controls\n+\n+Help text should be explicitly associated with the form control it relates to using the `aria-describedby` attribute. This will ensure that assistive technologies \u2013 such as screen readers \u2013 will announce this help text when the user focuses or enters the control.\n+{% endcallout %}\n+\n Inline text can use any typical inline HTML element (be it a `<small>`, `<span>`, or something else).\n \n {% example html %}\n-<small class=\"text-muted\">\n-  Some inline text with a small tag looks like this.\n-</small>\n+<form class=\"form-inline\">\n+  <div class=\"form-group\">\n+    <label for=\"inputPassword4\">Password</label>\n+    <input type=\"password\" id=\"inputPassword4\" class=\"form-control\" aria-describedby=\"passwordHelpInline\">\n+    <small id=\"passwordHelpInline\" class=\"text-muted\">\n+      Must be 8-20 characters long.\n+    </small>\n+  </div>\n+</form>\n {% endexample %}\n \n Block help text\u2014for below inputs or for longer lines of help text\u2014can be easily achieved with a `<p>`.\n \n {% example html %}\n-<p class=\"text-muted\">\n-  A block of help text that breaks onto a new line and may extend beyond one line.\n+<label for=\"inputPassword5\">Password</label>\n+<input type=\"password\" id=\"inputPassword5\" class=\"form-control\" aria-describedby=\"passwordHelpBlock\">\n+<p id=\"passwordHelpBlock\" class=\"text-muted\">\n+  Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters or emoji. \n </p>\n {% endexample %}\n ",
    "output": "docs: reintroduce aria-describedby advice for help text"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_plugins/highlight_alt.rb b/docs/_plugins/highlight_alt.rb\nindex 1fc9f5d2a..d1ed9ccff 100644\n--- a/docs/_plugins/highlight_alt.rb\n+++ b/docs/_plugins/highlight_alt.rb\n@@ -59,7 +59,7 @@ eos\n       end\n     \n       def remove_holderjs(code)\n-        code = code.gsub(/\"holder.js.+?\"/, '\"...\"')\n+        code = code.gsub(/data-src=\"holder.js.+?\"/, 'src=\"...\"')\n       end\n \n       def render_rouge(code)",
    "output": "docs: Replace `data-src` attribute with `src` in highlighted code; fixes #18558"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/Gruntfile.js b/Gruntfile.js\nindex 0d0220fae..0c5091f3a 100644\n--- a/Gruntfile.js\n+++ b/Gruntfile.js\n@@ -524,8 +524,9 @@ module.exports = function (grunt) {\n   grunt.registerTask('docs-js', ['uglify:docsJs']);\n   grunt.registerTask('lint-docs-js', ['jscs:assets']);\n   grunt.registerTask('docs', ['docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs']);\n+  grunt.registerTask('docs-github', ['jekyll:github', 'htmlmin']);\n \n-  grunt.registerTask('prep-release', ['dist', 'docs', 'jekyll:github', 'htmlmin', 'compress']);\n+  grunt.registerTask('prep-release', ['dist', 'docs', 'docs-github', 'compress']);\n \n   // Publish to GitHub\n   grunt.registerTask('publish', ['buildcontrol:pages']);",
    "output": "grunt: Factor out new docs-github task"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/input-group.md b/docs/components/input-group.md\nindex 870e89fee..78ad26e27 100644\n--- a/docs/components/input-group.md\n+++ b/docs/components/input-group.md\n@@ -23,7 +23,7 @@ Place one add-on or button on either side of an input. You may also place one on\n <br>\n <div class=\"input-group\">\n   <input type=\"text\" class=\"form-control\" placeholder=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n-  <span class=\"input-group-addon\" id=\"basic-addon2\">.00</span>\n+  <span class=\"input-group-addon\" id=\"basic-addon2\">@example.com</span>\n </div>\n <br>\n <label for=\"basic-url\">Your vanity URL</label>",
    "output": "docs: Fix flavor text in input group example that got borked at some point"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/footer.html b/docs/_includes/footer.html\nindex 34b463900..3782eea04 100644\n--- a/docs/_includes/footer.html\n+++ b/docs/_includes/footer.html\n@@ -14,6 +14,8 @@\n <script src=\"{{ site.cdn.jquery }}\"></script>\n <script>window.jQuery || document.write('<script src=\"{{ site.baseurl }}/assets/js/vendor/jquery.min.js\"><\\/script>')</script>\n \n+<script src=\"{{ site.baseurl }}/assets/js/vendor/tether.min.js\"></script>\n+\n {% if site.github %}\n   <script src=\"{{ site.baseurl }}/dist/js/bootstrap.min.js\"></script>\n {% else %}\ndiff --git a/grunt/configBridge.json b/grunt/configBridge.json\nindex 7b965bbb5..2bda83394 100644\n--- a/grunt/configBridge.json\n+++ b/grunt/configBridge.json\n@@ -4,7 +4,6 @@\n       \"../assets/js/vendor/anchor.min.js\",\n       \"../assets/js/vendor/clipboard.min.js\",\n       \"../assets/js/vendor/holder.min.js\",\n-      \"../assets/js/vendor/tether.min.js\",\n       \"../assets/js/src/application.js\"\n     ]\n   }",
    "output": "docs: Separate Tether out from docs.min.js"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/pagination.md b/docs/components/pagination.md\nindex c0ff3a8a3..99d4220fa 100644\n--- a/docs/components/pagination.md\n+++ b/docs/components/pagination.md\n@@ -71,7 +71,7 @@ Links are customizable for different circumstances. Use `.disabled` for unclicka\n \n You can optionally swap out active or disabled anchors for `<span>`, or omit the anchor in the case of the prev/next arrows, to remove click functionality while retaining intended styles.\n \n-{% highlight html %}\n+{% example html %}\n <nav>\n   <ul class=\"pagination\">\n     <li class=\"disabled\">\n@@ -83,7 +83,7 @@ You can optionally swap out active or disabled anchors for `<span>`, or omit the\n     <li class=\"active\"><span>1 <span class=\"sr-only\">(current)</span></span></li>\n   </ul>\n </nav>\n-{% endhighlight %}\n+{% endexample %}\n \n \n ### Sizing",
    "output": "docs: Make pagination <span> example live"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 29cdc631b..a52e6d1aa 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -26,7 +26,7 @@ restrictions:\n \n * Please **do not** open issues or pull requests regarding the code in\n   [`Normalize`](https://github.com/necolas/normalize.css) (open them in\n-  their respective repositories).\n+  its repository).\n * Please **do not** open issues regarding the official themes offered on <http://themes.getbootstrap.com/>. Instead, please email any questions or feedback regarding those themes to `themes AT getbootstrap DOT com`.\n \n ",
    "output": "docs: Fix typo in contributing regarding normalize.css"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/components/card.md b/docs/components/card.md\nindex f7ec63ea8..966105e40 100644\n--- a/docs/components/card.md\n+++ b/docs/components/card.md\n@@ -86,7 +86,7 @@ Cards support a wide variety of content, including images, text, list groups, li\n \n ## Sizing\n \n-Constrain the width or cards via custom CSS, our predefined grid classes, or with custom styles using our grid mixins.\n+Constrain the width of cards via custom CSS, our predefined grid classes, or with custom styles using our grid mixins.\n \n Using the grid:\n ",
    "output": "docs: fix typo from 9c52e03"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/download.md b/docs/getting-started/download.md\nindex 076586d29..7255fbba5 100644\n--- a/docs/getting-started/download.md\n+++ b/docs/getting-started/download.md\n@@ -21,7 +21,7 @@ Download just the compiled and minified CSS and JavaScript. Doesn't include any\n   <div class=\"col-sm-6\">\n {% markdown %}\n ### Source files\n-Download everything: source Sass, JavaScript, and documentation files. **Requires a Sass compiler, [Autoprefixer](https://github.com/postcss/autoprefixer), and some setup.**\n+Download everything: source Sass, JavaScript, and documentation files. **Requires a Sass compiler, [Autoprefixer](https://github.com/postcss/autoprefixer), and [some setup]({{ site.baseurl }}/getting-started/build-tools/#tooling-setup).**\n \n <a href=\"{{ site.download.source }}\" class=\"btn btn-bs btn-outline\" onclick=\"ga('send', 'event', 'Getting started', 'Download', 'Download source');\">Download source</a>\n {% endmarkdown %}",
    "output": "docs: link to tooling setup on download page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/introduction.md b/docs/getting-started/introduction.md\nindex f5e650cae..05997c47c 100644\n--- a/docs/getting-started/introduction.md\n+++ b/docs/getting-started/introduction.md\n@@ -38,7 +38,7 @@ And that's it\u2014you're your way to a fully Bootstrapped site. If you're at all u\n Be sure to have your pages set up with the latest design and development standards. That means:\n \n * Using an HTML5 doctype\n-* Forcing Internet Explorer to use its latest rendering mode ([read more]())\n+* Forcing Internet Explorer to use its latest rendering mode ([read more](http://stackoverflow.com/q/6771258))\n * And, utilizing the viewport meta tag.\n \n Put it all together and your pages should look like this:",
    "output": "docs: Fix \"read more about x-ua\" link"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/_config.yml b/_config.yml\nindex b0b4019b7..0d47d652b 100644\n--- a/_config.yml\n+++ b/_config.yml\n@@ -36,7 +36,6 @@ expo:             http://expo.getbootstrap.com\n themes:           http://themes.getbootstrap.com\n \n cdn:\n-  css:            https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\n-  css_theme:      https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\n-  js:             https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\n+  css:            https://cdn.rawgit.com/twbs/bootstrap/v4-dev/dist/css/bootstrap.css\n+  js:             https://cdn.rawgit.com/twbs/bootstrap/v4-dev/dist/js/bootstrap.js\n   jquery:         https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js",
    "output": "docs: Update CDN links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/page-headers.html b/docs/_includes/page-headers.html\nindex e2842042c..053241bc5 100644\n--- a/docs/_includes/page-headers.html\n+++ b/docs/_includes/page-headers.html\n@@ -33,4 +33,9 @@\n   <p class=\"lead\">\n     Guidance on how to upgrade from Bootstrap v3.x to v4.x with emphasis on major changes, what's new, and what's been removed.\n   </p>\n+{% elsif page.group == \"browser-bugs\" %}\n+  <h1>Wall of browser bugs</h1>\n+  <p class=\"lead\">\n+    A list of the browser bugs that Bootstrap is currently grappling with.\n+  </p>\n {% endif %}\ndiff --git a/docs/browser-bugs.md b/docs/browser-bugs.md\nindex 75b4f0039..c41f19825 100644\n--- a/docs/browser-bugs.md\n+++ b/docs/browser-bugs.md\n@@ -1,6 +1,7 @@\n ---\n-layout: default\n+layout: docs\n title: Wall of browser bugs\n+group: browser-bugs\n ---\n \n Bootstrap currently works around several outstanding browser bugs in major browsers to deliver the best cross-browser experience possible. Some bugs, like those listed below, cannot be solved by us.",
    "output": "docs: a little bit of love for the wall of browser bugs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/Gruntfile.js b/Gruntfile.js\nindex 28cd22481..1bffd7c34 100644\n--- a/Gruntfile.js\n+++ b/Gruntfile.js\n@@ -515,7 +515,7 @@ module.exports = function (grunt) {\n   grunt.registerTask('lint-docs-js', ['jshint:assets', 'jscs:assets']);\n   grunt.registerTask('docs', ['docs-css', 'lint-docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs', 'build-glyphicons-data', 'build-customizer']);\n \n-  grunt.registerTask('prep-release', ['jekyll:github', 'htmlmin', 'compress']);\n+  grunt.registerTask('prep-release', ['dist', 'docs', 'jekyll:github', 'htmlmin', 'compress']);\n \n   // Task for updating the cached npm packages used by the Travis build (which are controlled by test-infra/npm-shrinkwrap.json).\n   // This task should be run and the updated file should be committed whenever Bootstrap's dependencies change.",
    "output": "grunt: extend `prep-release` task."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/js/tabs.html b/docs/_includes/js/tabs.html\nindex b107ca6a2..16fa6e05d 100644\n--- a/docs/_includes/js/tabs.html\n+++ b/docs/_includes/js/tabs.html\n@@ -4,7 +4,7 @@\n   <h2 id=\"tabs-examples\">Example tabs</h2>\n   <p>Add quick, dynamic tab functionality to transition through panes of local content, even via dropdown menus.</p>\n   <div class=\"bs-example bs-example-tabs\" role=\"tabpanel\" data-example-id=\"togglable-tabs\">\n-    <ul id=\"myTab\" class=\"nav nav-tabs\" role=\"tablist\">\n+    <ul id=\"myTabs\" class=\"nav nav-tabs\" role=\"tablist\">\n       <li role=\"presentation\" class=\"active\"><a href=\"#home\" id=\"home-tab\" role=\"tab\" data-toggle=\"tab\" aria-controls=\"home\" aria-expanded=\"true\">Home</a></li>\n       <li role=\"presentation\"><a href=\"#profile\" role=\"tab\" id=\"profile-tab\" data-toggle=\"tab\" aria-controls=\"profile\">Profile</a></li>\n       <li role=\"presentation\" class=\"dropdown\">\n@@ -41,7 +41,7 @@\n   <p>Enable tabbable tabs via JavaScript (each tab needs to be activated individually):</p>\n \n {% highlight js %}\n-$('#myTab a').click(function (e) {\n+$('#myTabs a').click(function (e) {\n   e.preventDefault()\n   $(this).tab('show')\n })\n@@ -50,10 +50,10 @@ $('#myTab a').click(function (e) {\n   <p>You can activate individual tabs in several ways:</p>\n \n {% highlight js %}\n-$('#myTab a[href=\"#profile\"]').tab('show') // Select tab by name\n-$('#myTab a:first').tab('show') // Select first tab\n-$('#myTab a:last').tab('show') // Select last tab\n-$('#myTab li:eq(2) a').tab('show') // Select third tab (0-indexed)\n+$('#myTabs a[href=\"#profile\"]').tab('show') // Select tab by name\n+$('#myTabs a:first').tab('show') // Select first tab\n+$('#myTabs a:last').tab('show') // Select last tab\n+$('#myTabs li:eq(2) a').tab('show') // Select third tab (0-indexed)\n {% endhighlight %}\n \n   <h3>Markup</h3>\n@@ -97,7 +97,7 @@ $('#myTab li:eq(2) a').tab('show') // Select third tab (0-indexed)\n     Activates a tab element and content container. Tab should have either a <code>data-target</code> or an <code>href</code> targeting a container node in the DOM.\n   </p>\n {% highlight html %}\n-<ul class=\"nav nav-tabs\" role=\"tablist\" id=\"myTab\">\n+<ul class=\"nav nav-tabs\" role=\"tablist\" id=\"myTabs\">\n   <li role=\"presentation\" class=\"active\"><a href=\"#home\" aria-controls=\"home\" role=\"tab\" data-toggle=\"tab\">Home</a></li>\n   <li role=\"presentation\"><a href=\"#profile\" aria-controls=\"profile\" role=\"tab\" data-toggle=\"tab\">Profile</a></li>\n   <li role=\"presentation\"><a href=\"#messages\" aria-controls=\"messages\" role=\"tab\" data-toggle=\"tab\">Messages</a></li>\n@@ -113,7 +113,7 @@ $('#myTab li:eq(2) a').tab('show') // Select third tab (0-indexed)\n \n <script>\n   $(function () {\n-    $('#myTab a:last').tab('show')\n+    $('#myTabs a:last').tab('show')\n   })\n </script>\n {% endhighlight %}",
    "output": "docs: #myTab => #myTabs, to slightly increase clarity"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/getting-started/download.html b/docs/_includes/getting-started/download.html\nindex 7059dc6d1..13a56bebd 100644\n--- a/docs/_includes/getting-started/download.html\n+++ b/docs/_includes/getting-started/download.html\n@@ -50,7 +50,7 @@\n   <p><code>require('bootstrap')</code> will load all of Bootstrap's jQuery plugins onto the jQuery object. The <code>bootstrap</code> module itself does not export anything. You can manually load Bootstrap's jQuery plugins individually by loading the <code>/js/*.js</code> files under the package's top-level directory.</p>\n   <p>Bootstrap's <code>package.json</code> contains some additional metadata under the following keys:</p>\n   <ul>\n-    <li><code>less</code> - path to Bootstrap's main <a href=\"lesscss.org\">Less</a> source file</li>\n+    <li><code>less</code> - path to Bootstrap's main <a href=\"http://lesscss.org\">Less</a> source file</li>\n     <li><code>style</code> - path to Bootstrap's non-minified CSS that's been precompiled using the default settings (no customization)</li>\n   </ul>\n ",
    "output": "docs: add missing \"http://\""
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/layout/media-queries.md b/docs/layout/media-queries.md\nindex d628b4589..f9bc7c3fd 100644\n--- a/docs/layout/media-queries.md\n+++ b/docs/layout/media-queries.md\n@@ -32,7 +32,7 @@ These media queries are available via Sass mixins:\n @include media-breakpoint-up(sm) { ... }\n @include media-breakpoint-up(md) { ... }\n @include media-breakpoint-up(lg) { ... }\n-@include media-breakpoint-up(lxl) { ... }\n+@include media-breakpoint-up(xl) { ... }\n \n // Example usage:\n @include media-breakpoint-up(sm) {\n@@ -66,5 +66,5 @@ These media queries are available via Sass mixins:\n @include media-breakpoint-down(sm) { ... }\n @include media-breakpoint-down(md) { ... }\n @include media-breakpoint-down(lg) { ... }\n-@include media-breakpoint-down(lxl) { ... }\n+@include media-breakpoint-down(xl) { ... }\n {% endhighlight %}",
    "output": "docs: fix typo in media-queries.md"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/getting-started/compiling.md b/docs/getting-started/compiling.md\nindex 7a12becf7..c7a221176 100644\n--- a/docs/getting-started/compiling.md\n+++ b/docs/getting-started/compiling.md\n@@ -13,11 +13,15 @@ From the command line:\n \n 1. Install `grunt-cli` globally with `npm install -g grunt-cli`.\n 2. Navigate to the root `/bootstrap` directory, then run `npm install`. npm will look at [package.json](https://github.com/twbs/bootstrap/blob/master/package.json) and automatically install the necessary local dependencies listed there.\n+3. [Install Ruby][install-ruby], install [Bundler][gembundler] with `gem install bundler`, and finally run `bundle`. This will install all Ruby dependencies, such as Jekyll and Sass linter.\n \n When completed, you'll be able to run the various Grunt commands provided from the command line.\n \n **Unfamiliar with npm? Don't have node installed?** That's a-okay. npm stands for [node packaged modules](http://npmjs.org/) and is a way to manage development dependencies through node.js. [Download and install node.js](http://nodejs.org/download/) before proceeding.\n \n+[install-ruby]: https://www.ruby-lang.org/en/documentation/installation/\n+[gembundler]: http://bundler.io/\n+\n ### Available Grunt commands\n \n #### Build - `grunt`\n@@ -35,6 +39,20 @@ Builds and tests CSS, JavaScript, and other assets which are used when running t\n #### Watch - `grunt watch`\n This is a convenience method for watching just Sass files and automatically building them whenever you save.\n \n+### Use another Sass compiler\n+Bootstrap is compiled with [libsass][libsass] by default.\n+Use another compiler by setting `TWBS_SASS` environment variable to:\n+\n+* `sass` to use [Ruby Sass][ruby-sass] via [grunt-contrib-sass][grunt-contrib-sass].\n+* `libsass` (default) to use [libsass][libsass] via [grunt-sass][grunt-sass].\n+\n+For example, run `TWBS_SASS=sass grunt` to test and build Bootstrap with Ruby Sass.\n+\n+[ruby-sass]: https://github.com/sass/sass\n+[grunt-contrib-sass]: https://github.com/gruntjs/grunt-contrib-sass\n+[libsass]: https://github.com/sass/libsass\n+[grunt-sass]: https://github.com/sindresorhus/grunt-sass\n+\n ### Troubleshooting dependencies\n \n Should you encounter problems with installing dependencies or running Grunt commands, uninstall all previous dependency versions (global and local). Then, rerun `npm install`.",
    "output": "docs: Use another Sass compiler"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/components/progress-bars.html b/docs/_includes/components/progress-bars.html\nindex adf686853..f4c1631e7 100644\n--- a/docs/_includes/components/progress-bars.html\n+++ b/docs/_includes/components/progress-bars.html\n@@ -168,12 +168,13 @@\n   <p>Add <code>.active</code> to <code>.progress-bar-striped</code> to animate the stripes right to left. Not available in IE9 and below.</p>\n   <div class=\"bs-example\">\n     <div class=\"progress\">\n-      <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\"><span class=\"sr-only\">45% Complete</span></div>\n+      <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\"><span class=\"sr-only\">45% Complete</span></div>\n     </div>\n+    <button type=\"button\" class=\"btn btn-default bs-docs-activate-animated-progressbar\" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\">Toggle animation</button>\n   </div>\n {% highlight html %}\n <div class=\"progress\">\n-  <div class=\"progress-bar progress-bar-striped active\"  role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\">\n+  <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\">\n     <span class=\"sr-only\">45% Complete</span>\n   </div>\n </div>\ndiff --git a/docs/assets/js/src/application.js b/docs/assets/js/src/application.js\nindex 9cd8ea24d..571645e5f 100644\n--- a/docs/assets/js/src/application.js\n+++ b/docs/assets/js/src/application.js\n@@ -101,7 +101,7 @@\n     $('.bs-docs-popover').popover()\n \n     // Button state demo\n-    $('#loading-example-btn').click(function () {\n+    $('#loading-example-btn').on('click', function () {\n       var btn = $(this)\n       btn.button('loading')\n       setTimeout(function () {\n@@ -109,6 +109,10 @@\n       }, 3000)\n     })\n \n+    // Activate animated progress bar\n+    $('.bs-docs-activate-animated-progressbar').on('click', function () {\n+      $(this).siblings('.progress').find('.progress-bar-striped').toggleClass('active')\n+    })\n \n     // Config ZeroClipboard\n     ZeroClipboard.config({",
    "output": "docs: progress bars' animation now needs to be manually toggled"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/components/progress-bars.html b/docs/_includes/components/progress-bars.html\nindex adf686853..43b641262 100644\n--- a/docs/_includes/components/progress-bars.html\n+++ b/docs/_includes/components/progress-bars.html\n@@ -168,12 +168,13 @@\n   <p>Add <code>.active</code> to <code>.progress-bar-striped</code> to animate the stripes right to left. Not available in IE9 and below.</p>\n   <div class=\"bs-example\">\n     <div class=\"progress\">\n-      <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\"><span class=\"sr-only\">45% Complete</span></div>\n+      <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\"><span class=\"sr-only\">45% Complete</span></div>\n     </div>\n+    <button type=\"button\" class=\"btn btn-default bs-docs-activate-aniamted-progressbar\" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\">Toggle animation</button>\n   </div>\n {% highlight html %}\n <div class=\"progress\">\n-  <div class=\"progress-bar progress-bar-striped active\"  role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\">\n+  <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"45\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 45%\">\n     <span class=\"sr-only\">45% Complete</span>\n   </div>\n </div>\ndiff --git a/docs/assets/js/src/application.js b/docs/assets/js/src/application.js\nindex 9cd8ea24d..a547fe20c 100644\n--- a/docs/assets/js/src/application.js\n+++ b/docs/assets/js/src/application.js\n@@ -101,7 +101,7 @@\n     $('.bs-docs-popover').popover()\n \n     // Button state demo\n-    $('#loading-example-btn').click(function () {\n+    $('#loading-example-btn').on('click', function () {\n       var btn = $(this)\n       btn.button('loading')\n       setTimeout(function () {\n@@ -109,6 +109,10 @@\n       }, 3000)\n     })\n \n+    // Activate animated progress bar\n+    $('.bs-docs-activate-aniamted-progressbar').on('click', function () {\n+      $(this).siblings('.progress').find('.progress-bar-striped').toggleClass('active')\n+    })\n \n     // Config ZeroClipboard\n     ZeroClipboard.config({",
    "output": "docs: progress bars' animation now needs to be manually toggled"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/header.html b/docs/_includes/header.html\nindex 9f77a4862..d3f78d424 100644\n--- a/docs/_includes/header.html\n+++ b/docs/_includes/header.html\n@@ -45,7 +45,7 @@\n <![endif]-->\n \n <!-- Favicons -->\n-<link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-precomposed.png\">\n+<link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n <link rel=\"icon\" href=\"/favicon.ico\">\n \n <script>\ndiff --git a/docs/apple-touch-icon-precomposed.png b/docs/apple-touch-icon-precomposed.png\ndeleted file mode 100644\nindex 61e0831cd..000000000\nBinary files a/docs/apple-touch-icon-precomposed.png and /dev/null differ\ndiff --git a/docs/apple-touch-icon.png b/docs/apple-touch-icon.png\nnew file mode 100644\nindex 000000000..5726470e6\nBinary files /dev/null and b/docs/apple-touch-icon.png differ",
    "output": "docs: Use a 180x180 apple-touch-icon.png."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/css/code.html b/docs/_includes/css/code.html\nindex 675ac10e9..ba2edc151 100644\n--- a/docs/_includes/css/code.html\n+++ b/docs/_includes/css/code.html\n@@ -17,7 +17,8 @@ For example, <code>&lt;section&gt;</code> should be wrapped as inline.\n   To edit settings, press <kbd><kbd>ctrl</kbd> + <kbd>,</kbd></kbd>\n </div>\n {% highlight html %}\n-To switch directories, type <kbd>cd</kbd> followed by the name of the directory.\n+To switch directories, type <kbd>cd</kbd> followed by the name of the directory.<br>\n+To edit settings, press <kbd><kbd>ctrl</kbd> + <kbd>,</kbd></kbd>\n {% endhighlight %}\n \n   <h2 id=\"code-block\">Basic block</h2>",
    "output": "docs: add missing example code code for `kbd` after #13351."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/js/popovers.html b/docs/_includes/js/popovers.html\nindex 3f5702b49..ef8e07941 100644\n--- a/docs/_includes/js/popovers.html\n+++ b/docs/_includes/js/popovers.html\n@@ -175,7 +175,7 @@ $('.popover-dismiss').popover({\n           <td>\n            <p>Delay showing and hiding the popover (ms) - does not apply to manual trigger type</p>\n            <p>If a number is supplied, delay is applied to both hide/show</p>\n-           <p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p>\n+           <p>Object structure is: <code>delay: { \"show\": 500, \"hide\": 100 }</code></p>\n           </td>\n         </tr>\n         <tr>\n@@ -225,7 +225,7 @@ $('.popover-dismiss').popover({\n          <td>string | object</td>\n          <td>{ selector: 'body', padding: 0 }</td>\n          <td>\n-          <p>Keeps the popover within the bounds of this element. Example: <code>viewport: '#viewport'</code> or <code>{ selector: '#viewport', padding: 0 }</code></p>\n+          <p>Keeps the popover within the bounds of this element. Example: <code>viewport: '#viewport'</code> or <code>{ \"selector\": \"#viewport\", \"padding\": 0 }</code></p>\n          </td>\n        </tr>\n       </tbody>\ndiff --git a/docs/_includes/js/tooltips.html b/docs/_includes/js/tooltips.html\nindex 858a91ec3..fac4f6519 100644\n--- a/docs/_includes/js/tooltips.html\n+++ b/docs/_includes/js/tooltips.html\n@@ -105,7 +105,7 @@ $('#example').tooltip(options)\n          <td>\n           <p>Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type</p>\n           <p>If a number is supplied, delay is applied to both hide/show</p>\n-          <p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p>\n+          <p>Object structure is: <code>delay: { \"show\": 500, \"hide\": 100 }</code></p>\n          </td>\n        </tr>\n        <tr>\n@@ -154,7 +154,7 @@ $('#example').tooltip(options)\n          <td>string | object</td>\n          <td>{ selector: 'body', padding: 0 }</td>\n          <td>\n-          <p>Keeps the tooltip within the bounds of this element. Example: <code>viewport: '#viewport'</code> or <code>{ selector: '#viewport', padding: 0 }</code></p>\n+          <p>Keeps the tooltip within the bounds of this element. Example: <code>viewport: '#viewport'</code> or <code>{ \"selector\": \"#viewport\", \"padding\": 0 }</code></p>\n          </td>\n        </tr>\n       </tbody>",
    "output": "docs: use valid JSON in compound option value examples"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/js/popovers.html b/docs/_includes/js/popovers.html\nindex 03bea643a..3f5702b49 100644\n--- a/docs/_includes/js/popovers.html\n+++ b/docs/_includes/js/popovers.html\n@@ -109,7 +109,7 @@ sagittis lacus vel augue laoreet rutrum faucibus.\">\n {% endhighlight %}\n \n   <h4>Dismiss on next click</h4>\n-  <p>Use the <code>focus</code> trigger to dismiss popovers on their next click.</p>\n+  <p>Use the <code>focus</code> trigger to dismiss popovers on the next click that the user makes.</p>\n   <div class=\"bs-example\" style=\"padding-bottom: 24px;\">\n     <button type=\"button\" class=\"btn btn-lg btn-danger bs-docs-popover-dismiss\" data-toggle=\"popover\" title=\"Dismissible popover\" data-content=\"And here's some amazing content. It's very engaging. Right?\">Dismissible popover</button>\n   </div>",
    "output": "docs: minor correction to the focus-triggered popover demo explanation"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/migration.html b/docs/migration.html\nindex afc66863c..5a1e1a012 100644\n--- a/docs/migration.html\n+++ b/docs/migration.html\n@@ -41,6 +41,10 @@ lead: \"Guidance on how to upgrade from Bootstrap v2.x to v3.x with emphasis on m\n           <td><code>.brand</code></td>\n           <td><code>.navbar-brand</code></td>\n         </tr>\n+        <tr>\n+          <td><code>.navbar .nav</code></td>\n+          <td><code>.navbar-nav</code></td>\n+        </tr>\n         <tr>\n           <td><code>.nav-collapse</code></td>\n           <td><code>.navbar-collapse</code></td>",
    "output": "fix: #13355. Added .navbar-nav to migration change list."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/header.html b/docs/_includes/header.html\nindex f11ed4baa..212981ed6 100644\n--- a/docs/_includes/header.html\n+++ b/docs/_includes/header.html\n@@ -31,12 +31,10 @@\n                                <link rel=\"icon\" href=\"../assets/ico/favicon.ico\">\n \n <script>\n-  var _gaq = _gaq || [];\n-  _gaq.push(['_setAccount', 'UA-146052-10']);\n-  _gaq.push(['_trackPageview']);\n-  (function() {\n-    var ga = document.createElement('script'); ga.async = true;\n-    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n-    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n-  })();\n+  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n+  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n+  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n+  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n+  ga('create', 'UA-146052-10', 'getbootstrap.com');\n+  ga('send', 'pageview');\n </script>",
    "output": "docs: switch to the Universal Analytics code."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/assets/img/components.png b/docs/assets/img/components.png\nindex 847acc1d5..2cbee5463 100644\nBinary files a/docs/assets/img/components.png and b/docs/assets/img/components.png differ\ndiff --git a/docs/assets/img/devices.png b/docs/assets/img/devices.png\nindex a4fa3c078..34c65a0a3 100644\nBinary files a/docs/assets/img/devices.png and b/docs/assets/img/devices.png differ\ndiff --git a/docs/assets/img/sass-less.png b/docs/assets/img/sass-less.png\nindex c9214032a..24cfaf847 100644\nBinary files a/docs/assets/img/sass-less.png and b/docs/assets/img/sass-less.png differ",
    "output": "docs: losslessly compress images."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/scrollspy.js b/js/scrollspy.js\nindex d2c9c8d4d..f1fc8f27f 100644\n--- a/js/scrollspy.js\n+++ b/js/scrollspy.js\n@@ -62,7 +62,7 @@\n \n   ScrollSpy.prototype.process = function () {\n     var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n-    var scrollHeight = this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight,\ufeffdocument.documentElement.scrollHeight)\n+    var scrollHeight = this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n     var maxScroll    = scrollHeight - this.$scrollElement.height()\n     var offsets      = this.offsets\n     var targets      = this.targets",
    "output": "fix: IE10 or lower incorrectly determines the scrollheight of the body. Use document.documentElement for IE. To make this browser agnostic, the maximum scrollheight of both body and documentElement is used."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/scrollspy.js b/js/scrollspy.js\nindex b41c27413..d2c9c8d4d 100644\n--- a/js/scrollspy.js\n+++ b/js/scrollspy.js\n@@ -62,7 +62,7 @@\n \n   ScrollSpy.prototype.process = function () {\n     var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n-    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight\n+    var scrollHeight = this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight,\ufeffdocument.documentElement.scrollHeight)\n     var maxScroll    = scrollHeight - this.$scrollElement.height()\n     var offsets      = this.offsets\n     var targets      = this.targets",
    "output": "fix: IE10 or lower incorrectly determines the scrollheight of the body. Use document.documentElement for IE. To make this browser agnostic, the maximum scrollheight of both body and documentElement is used."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 8d603d12e..b66bb1d8a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.7.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n-        \"terser\": \"^5.18.0\",\n+        \"terser\": \"^5.18.1\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10192,9 +10192,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.18.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.0.tgz\",\n-      \"integrity\": \"sha512-pdL757Ig5a0I+owA42l6tIuEycRuM7FPY4n62h44mRLRfnOxJkkOHd6i89dOpwZlpF6JXBwaAHF6yWzFrt+QyA==\",\n+      \"version\": \"5.18.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.1.tgz\",\n+      \"integrity\": \"sha512-j1n0Ao919h/Ai5r43VAnfV/7azUYW43GPxK7qSATzrsERfW7+y2QW9Cp9ufnRF5CQUWbnLSo7UJokSWCqg4tsQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -18186,9 +18186,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.18.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.0.tgz\",\n-      \"integrity\": \"sha512-pdL757Ig5a0I+owA42l6tIuEycRuM7FPY4n62h44mRLRfnOxJkkOHd6i89dOpwZlpF6JXBwaAHF6yWzFrt+QyA==\",\n+      \"version\": \"5.18.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.1.tgz\",\n+      \"integrity\": \"sha512-j1n0Ao919h/Ai5r43VAnfV/7azUYW43GPxK7qSATzrsERfW7+y2QW9Cp9ufnRF5CQUWbnLSo7UJokSWCqg4tsQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 1a49f21db..8781d4e55 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.7.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n-    \"terser\": \"^5.18.0\",\n+    \"terser\": \"^5.18.1\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.18.0 to 5.18.1 (#38798)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 910f9bf8e..8b45be430 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.21.5\",\n+        \"@babel/cli\": \"^7.22.5\",\n         \"@babel/core\": \"^7.22.5\",\n         \"@babel/preset-env\": \"^7.22.4\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -87,9 +87,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.21.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.21.5.tgz\",\n-      \"integrity\": \"sha512-TOKytQ9uQW9c4np8F+P7ZfPINy5Kv+pizDIUwSVH8X5zHgYHV4AA8HE5LA450xXeu4jEfmUckTYvv1I4S26M/g==\",\n+      \"version\": \"7.22.5\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.5.tgz\",\n+      \"integrity\": \"sha512-N5d7MjzwsQ2wppwjhrsicVDhJSqF9labEP/swYiHhio4Ca2XjEehpgPmerjnLQl7BPE59BLud0PTWGYwqFl/cQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -10946,9 +10946,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.21.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.21.5.tgz\",\n-      \"integrity\": \"sha512-TOKytQ9uQW9c4np8F+P7ZfPINy5Kv+pizDIUwSVH8X5zHgYHV4AA8HE5LA450xXeu4jEfmUckTYvv1I4S26M/g==\",\n+      \"version\": \"7.22.5\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.5.tgz\",\n+      \"integrity\": \"sha512-N5d7MjzwsQ2wppwjhrsicVDhJSqF9labEP/swYiHhio4Ca2XjEehpgPmerjnLQl7BPE59BLud0PTWGYwqFl/cQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex 61c488e57..fb9757d91 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.7\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.21.5\",\n+    \"@babel/cli\": \"^7.22.5\",\n     \"@babel/core\": \"^7.22.5\",\n     \"@babel/preset-env\": \"^7.22.4\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.21.5 to 7.22.5 (#38756)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c3b280b43..910f9bf8e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.24\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.23.1\",\n+        \"rollup\": \"^3.25.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.1\",\n@@ -9102,9 +9102,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.23.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.1.tgz\",\n-      \"integrity\": \"sha512-ybRdFVHOoljGEFILHLd2g/qateqUdjE6YS41WXq4p3C/WwD3xtWxV4FYWETA1u9TeXQc5K8L8zHE5d/scOvrOQ==\",\n+      \"version\": \"3.25.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.1.tgz\",\n+      \"integrity\": \"sha512-tywOR+rwIt5m2ZAWSe5AIJcTat8vGlnPFAv15ycCrw33t6iFsXZ6mzHVFh2psSjxQPmI+xgzMZZizUAukBI4aQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17382,9 +17382,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.23.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.1.tgz\",\n-      \"integrity\": \"sha512-ybRdFVHOoljGEFILHLd2g/qateqUdjE6YS41WXq4p3C/WwD3xtWxV4FYWETA1u9TeXQc5K8L8zHE5d/scOvrOQ==\",\n+      \"version\": \"3.25.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.1.tgz\",\n+      \"integrity\": \"sha512-tywOR+rwIt5m2ZAWSe5AIJcTat8vGlnPFAv15ycCrw33t6iFsXZ6mzHVFh2psSjxQPmI+xgzMZZizUAukBI4aQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 6a99a9b5e..61c488e57 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.24\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.23.1\",\n+    \"rollup\": \"^3.25.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.1\",",
    "output": "build(deps-dev): Bump rollup from 3.23.1 to 3.25.1 (#38757)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b02125e02..53d54c975 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -51,7 +51,7 @@\n         \"karma-detect-browsers\": \"^2.3.3\",\n         \"karma-firefox-launcher\": \"^2.1.2\",\n         \"karma-jasmine\": \"^5.1.0\",\n-        \"karma-jasmine-html-reporter\": \"^2.0.0\",\n+        \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.10.5\",\n         \"nodemon\": \"^2.0.22\",\n@@ -6962,12 +6962,12 @@\n       }\n     },\n     \"node_modules/karma-jasmine-html-reporter\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/karma-jasmine-html-reporter/-/karma-jasmine-html-reporter-2.0.0.tgz\",\n-      \"integrity\": \"sha512-SB8HNNiazAHXM1vGEzf8/tSyEhkfxuDdhYdPBX2Mwgzt0OuF2gicApQ+uvXLID/gXyJQgvrM9+1/2SxZFUUDIA==\",\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/karma-jasmine-html-reporter/-/karma-jasmine-html-reporter-2.1.0.tgz\",\n+      \"integrity\": \"sha512-sPQE1+nlsn6Hwb5t+HHwyy0A1FNCVKuL1192b+XNauMYWThz2kweiBVW1DqloRpVvZIJkIoHVB7XRpK78n1xbQ==\",\n       \"dev\": true,\n       \"peerDependencies\": {\n-        \"jasmine-core\": \"^4.0.0\",\n+        \"jasmine-core\": \"^4.0.0 || ^5.0.0\",\n         \"karma\": \"^6.0.0\",\n         \"karma-jasmine\": \"^5.0.0\"\n       }\n@@ -15891,9 +15891,9 @@\n       }\n     },\n     \"karma-jasmine-html-reporter\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/karma-jasmine-html-reporter/-/karma-jasmine-html-reporter-2.0.0.tgz\",\n-      \"integrity\": \"sha512-SB8HNNiazAHXM1vGEzf8/tSyEhkfxuDdhYdPBX2Mwgzt0OuF2gicApQ+uvXLID/gXyJQgvrM9+1/2SxZFUUDIA==\",\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/karma-jasmine-html-reporter/-/karma-jasmine-html-reporter-2.1.0.tgz\",\n+      \"integrity\": \"sha512-sPQE1+nlsn6Hwb5t+HHwyy0A1FNCVKuL1192b+XNauMYWThz2kweiBVW1DqloRpVvZIJkIoHVB7XRpK78n1xbQ==\",\n       \"dev\": true,\n       \"requires\": {}\n     },\ndiff --git a/package.json b/package.json\nindex 4530057ca..4f79d9d8b 100644\n--- a/package.json\n+++ b/package.json\n@@ -135,7 +135,7 @@\n     \"karma-detect-browsers\": \"^2.3.3\",\n     \"karma-firefox-launcher\": \"^2.1.2\",\n     \"karma-jasmine\": \"^5.1.0\",\n-    \"karma-jasmine-html-reporter\": \"^2.0.0\",\n+    \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.10.5\",\n     \"nodemon\": \"^2.0.22\",",
    "output": "build(deps-dev): Bump karma-jasmine-html-reporter from 2.0.0 to 2.1.0 (#38717)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 913acbc56..da9673580 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.24\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.23.0\",\n+        \"rollup\": \"^3.23.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.1\",\n@@ -9090,9 +9090,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.23.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.0.tgz\",\n-      \"integrity\": \"sha512-h31UlwEi7FHihLe1zbk+3Q7z1k/84rb9BSwmBSr/XjOCEaBJ2YyedQDuM0t/kfOS0IxM+vk1/zI9XxYj9V+NJQ==\",\n+      \"version\": \"3.23.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.1.tgz\",\n+      \"integrity\": \"sha512-ybRdFVHOoljGEFILHLd2g/qateqUdjE6YS41WXq4p3C/WwD3xtWxV4FYWETA1u9TeXQc5K8L8zHE5d/scOvrOQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17370,9 +17370,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.23.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.0.tgz\",\n-      \"integrity\": \"sha512-h31UlwEi7FHihLe1zbk+3Q7z1k/84rb9BSwmBSr/XjOCEaBJ2YyedQDuM0t/kfOS0IxM+vk1/zI9XxYj9V+NJQ==\",\n+      \"version\": \"3.23.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.1.tgz\",\n+      \"integrity\": \"sha512-ybRdFVHOoljGEFILHLd2g/qateqUdjE6YS41WXq4p3C/WwD3xtWxV4FYWETA1u9TeXQc5K8L8zHE5d/scOvrOQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 75550f3e8..8b90e6608 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.24\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.23.0\",\n+    \"rollup\": \"^3.23.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.1\",",
    "output": "build(deps-dev): Bump rollup from 3.23.0 to 3.23.1 (#38714)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex 0f1018b06..1d8caed66 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -220,15 +220,16 @@\n \n // scss-docs-start custom-tooltip\n .custom-tooltip {\n-  --bs-tooltip-bg: var(--bs-primary);\n+  --bs-tooltip-bg: var(--bd-violet-bg);\n+  --bs-tooltip-color: var(--bs-white);\n }\n // scss-docs-end custom-tooltip\n \n // scss-docs-start custom-popovers\n .custom-popover {\n   --bs-popover-max-width: 200px;\n-  --bs-popover-border-color: var(--bs-primary);\n-  --bs-popover-header-bg: var(--bs-primary);\n+  --bs-popover-border-color: var(--bd-violet-bg);\n+  --bs-popover-header-bg: var(--bd-violet-bg);\n   --bs-popover-header-color: var(--bs-white);\n   --bs-popover-body-padding-x: 1rem;\n   --bs-popover-body-padding-y: .5rem;",
    "output": "docs: consistency between custom buttons, popovers and tooltips"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 6056feb43..98e885f3d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -25,7 +25,7 @@\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n         \"@rollup/plugin-commonjs\": \"^25.0.0\",\n-        \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n+        \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.14\",\n         \"bundlewatch\": \"^0.3.3\",\n@@ -2198,9 +2198,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.0.2.tgz\",\n-      \"integrity\": \"sha512-Y35fRGUjC3FaurG722uhUuG8YHOJRJQbI6/CkbRkdPotSpDj9NtIN85z1zrcyDcCQIW4qp5mgG72U+gJ0TAFEg==\",\n+      \"version\": \"15.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.1.0.tgz\",\n+      \"integrity\": \"sha512-xeZHCgsiZ9pzYVgAo9580eCGqwh/XCEUM9q6iQfGNocjgkufHAqC3exA+45URvhiYV8sBF9RlBai650eNs7AsA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12572,9 +12572,9 @@\n       }\n     },\n     \"@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.0.2.tgz\",\n-      \"integrity\": \"sha512-Y35fRGUjC3FaurG722uhUuG8YHOJRJQbI6/CkbRkdPotSpDj9NtIN85z1zrcyDcCQIW4qp5mgG72U+gJ0TAFEg==\",\n+      \"version\": \"15.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.1.0.tgz\",\n+      \"integrity\": \"sha512-xeZHCgsiZ9pzYVgAo9580eCGqwh/XCEUM9q6iQfGNocjgkufHAqC3exA+45URvhiYV8sBF9RlBai650eNs7AsA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex ca15e9622..840a66611 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n     \"@rollup/plugin-commonjs\": \"^25.0.0\",\n-    \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n+    \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.14\",\n     \"bundlewatch\": \"^0.3.3\",",
    "output": "build(deps-dev): Bump @rollup/plugin-node-resolve from 15.0.2 to 15.1.0 (#38685)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/spinners.md b/site/content/docs/5.3/components/spinners.md\nindex f2635c63e..977257dd0 100644\n--- a/site/content/docs/5.3/components/spinners.md\n+++ b/site/content/docs/5.3/components/spinners.md\n@@ -96,8 +96,8 @@ Use [flexbox utilities][flex], [float utilities][float], or [text alignment][tex\n \n {{< example >}}\n <div class=\"d-flex align-items-center\">\n-  <strong>Loading...</strong>\n-  <div class=\"spinner-border ms-auto\" role=\"status\" aria-hidden=\"true\"></div>\n+  <strong role=\"status\">Loading...</strong>\n+  <div class=\"spinner-border ms-auto\" aria-hidden=\"true\"></div>\n </div>\n {{< /example >}}\n \n@@ -151,23 +151,23 @@ Use spinners within buttons to indicate an action is currently processing or tak\n \n {{< example >}}\n <button class=\"btn btn-primary\" type=\"button\" disabled>\n-  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  <span class=\"visually-hidden\">Loading...</span>\n+  <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+  <span class=\"visually-hidden\" role=\"status\">Loading...</span>\n </button>\n <button class=\"btn btn-primary\" type=\"button\" disabled>\n-  <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  Loading...\n+  <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n+  <span role=\"status\">Loading...</span>\n </button>\n {{< /example >}}\n \n {{< example >}}\n <button class=\"btn btn-primary\" type=\"button\" disabled>\n-  <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  <span class=\"visually-hidden\">Loading...</span>\n+  <span class=\"spinner-grow spinner-grow-sm\" aria-hidden=\"true\"></span>\n+  <span class=\"visually-hidden\" role=\"status\">Loading...</span>\n </button>\n <button class=\"btn btn-primary\" type=\"button\" disabled>\n-  <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\n-  Loading...\n+  <span class=\"spinner-grow spinner-grow-sm\" aria-hidden=\"true\"></span>\n+  <span role=\"status\">Loading...</span>\n </button>\n {{< /example >}}\n ",
    "output": "docs(spinners): improve buttons examples accessibility (#38632)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/callouts/warning-color-assistive-technologies.md b/site/layouts/partials/callouts/warning-color-assistive-technologies.md\nindex aaa6f64c8..6750517bb 100644\n--- a/site/layouts/partials/callouts/warning-color-assistive-technologies.md\n+++ b/site/layouts/partials/callouts/warning-color-assistive-technologies.md\n@@ -1 +1 @@\n-**Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.\n\\ No newline at end of file\n+**Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](/docs/{{ .Site.Params.docs_version }}/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.",
    "output": "docs: add more details on accessibility tips (#38583)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 22b5a9238..585eceb14 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.103.3\",\n+        \"hugo-bin\": \"^0.103.5\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -6102,9 +6102,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.103.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.3.tgz\",\n-      \"integrity\": \"sha512-nB5CcOni4zAkWcPVCu2CJGq0WKEmrjONjGgZBVoxPe0DZivIclu2BLurkWFwMTuoiipfmsmqyCk9LZfLVhgwpw==\",\n+      \"version\": \"0.103.5\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.5.tgz\",\n+      \"integrity\": \"sha512-sQimVihr60yRjkZVvO26XoLTZiUmNQbyK40aoFkXcaHO59BoCQFrsFDSXDxFjRuJxMaIwMDkZ9QYmY1Sp7cMrw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15480,9 +15480,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.103.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.3.tgz\",\n-      \"integrity\": \"sha512-nB5CcOni4zAkWcPVCu2CJGq0WKEmrjONjGgZBVoxPe0DZivIclu2BLurkWFwMTuoiipfmsmqyCk9LZfLVhgwpw==\",\n+      \"version\": \"0.103.5\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.5.tgz\",\n+      \"integrity\": \"sha512-sQimVihr60yRjkZVvO26XoLTZiUmNQbyK40aoFkXcaHO59BoCQFrsFDSXDxFjRuJxMaIwMDkZ9QYmY1Sp7cMrw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 495ae2be2..05d01d43e 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.103.3\",\n+    \"hugo-bin\": \"^0.103.5\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.103.3 to 0.103.5 (#38667)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 14733e071..f7e3face1 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.10.5\",\n         \"nodemon\": \"^2.0.22\",\n         \"npm-run-all2\": \"^6.0.5\",\n-        \"postcss\": \"^8.4.23\",\n+        \"postcss\": \"^8.4.24\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.23.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8471,9 +8471,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.23\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.23.tgz\",\n-      \"integrity\": \"sha512-bQ3qMcpF6A/YjR55xtoTr0jGOlnPOKAIMdOWiv0EIT6HVPEaJiJB4NLljSbiHoC2RX7DN5Uvjtpbg1NPdwv1oA==\",\n+      \"version\": \"8.4.24\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.24.tgz\",\n+      \"integrity\": \"sha512-M0RzbcI0sO/XJNucsGjvWU9ERWxb/ytp1w6dKtxTKgixdtQDq4rmx/g8W1hnaheq9jgwL/oyEdH5Bc4WwJKMqg==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17176,9 +17176,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.23\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.23.tgz\",\n-      \"integrity\": \"sha512-bQ3qMcpF6A/YjR55xtoTr0jGOlnPOKAIMdOWiv0EIT6HVPEaJiJB4NLljSbiHoC2RX7DN5Uvjtpbg1NPdwv1oA==\",\n+      \"version\": \"8.4.24\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.24.tgz\",\n+      \"integrity\": \"sha512-M0RzbcI0sO/XJNucsGjvWU9ERWxb/ytp1w6dKtxTKgixdtQDq4rmx/g8W1hnaheq9jgwL/oyEdH5Bc4WwJKMqg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.6\",\ndiff --git a/package.json b/package.json\nindex 27905c35a..ad2195ffd 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.10.5\",\n     \"nodemon\": \"^2.0.22\",\n     \"npm-run-all2\": \"^6.0.5\",\n-    \"postcss\": \"^8.4.23\",\n+    \"postcss\": \"^8.4.24\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.23.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.23 to 8.4.24 (#38666)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 68af6f66c..eef032886 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.23\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.21.8\",\n+        \"rollup\": \"^3.23.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.1\",\n@@ -9226,9 +9226,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.21.8\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.8.tgz\",\n-      \"integrity\": \"sha512-SSFV2T2fWtQ/vvBip85u2Nr0GNKireabH9d7nXswBg+XSH+jbVDSYptRAEbCEsquhs503rpPA9POYAp0/Jhasw==\",\n+      \"version\": \"3.23.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.0.tgz\",\n+      \"integrity\": \"sha512-h31UlwEi7FHihLe1zbk+3Q7z1k/84rb9BSwmBSr/XjOCEaBJ2YyedQDuM0t/kfOS0IxM+vk1/zI9XxYj9V+NJQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17629,9 +17629,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.21.8\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.8.tgz\",\n-      \"integrity\": \"sha512-SSFV2T2fWtQ/vvBip85u2Nr0GNKireabH9d7nXswBg+XSH+jbVDSYptRAEbCEsquhs503rpPA9POYAp0/Jhasw==\",\n+      \"version\": \"3.23.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.23.0.tgz\",\n+      \"integrity\": \"sha512-h31UlwEi7FHihLe1zbk+3Q7z1k/84rb9BSwmBSr/XjOCEaBJ2YyedQDuM0t/kfOS0IxM+vk1/zI9XxYj9V+NJQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 73811b68d..c4dfe76ca 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.23\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.21.8\",\n+    \"rollup\": \"^3.23.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.1\",",
    "output": "build(deps-dev): Bump rollup from 3.21.8 to 3.23.0 (#38639)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a31cd0edd..2b182f7ad 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.102.1\",\n+        \"hugo-bin\": \"^0.103.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -6018,9 +6018,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.102.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.1.tgz\",\n-      \"integrity\": \"sha512-PgMcOXM/E9kWlB/H5gwp9yD7f+YwbQvRU2AIl4fD4ZIlb74ABLuqFVPLR7gmlZcZ5zdUkOWHFEDUA8E0vVHHpg==\",\n+      \"version\": \"0.103.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.1.tgz\",\n+      \"integrity\": \"sha512-ju1AxlfFOPggJ0m15Ff/QeHqiBn+s9qxtixPFQFq8/jJNZCXBIGrcfHDO0lApn6qMd0bZxBLkDE8k0bdPICxjQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15352,9 +15352,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.102.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.1.tgz\",\n-      \"integrity\": \"sha512-PgMcOXM/E9kWlB/H5gwp9yD7f+YwbQvRU2AIl4fD4ZIlb74ABLuqFVPLR7gmlZcZ5zdUkOWHFEDUA8E0vVHHpg==\",\n+      \"version\": \"0.103.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.103.1.tgz\",\n+      \"integrity\": \"sha512-ju1AxlfFOPggJ0m15Ff/QeHqiBn+s9qxtixPFQFq8/jJNZCXBIGrcfHDO0lApn6qMd0bZxBLkDE8k0bdPICxjQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 2abf5ef63..f0f354c1a 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.102.1\",\n+    \"hugo-bin\": \"^0.103.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.102.1 to 0.103.1 (#38642)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 428a38d44..a31cd0edd 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -9633,9 +9633,9 @@\n       }\n     },\n     \"node_modules/socket.io-parser\": {\n-      \"version\": \"4.2.2\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.2.tgz\",\n-      \"integrity\": \"sha512-DJtziuKypFkMMHCm2uIshOYC7QaylbtzQwiMYDuCKy3OPkjLzu4B2vAhTlqipRHHzrI0NJeBAizTK7X+6m1jVw==\",\n+      \"version\": \"4.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.3.tgz\",\n+      \"integrity\": \"sha512-JMafRntWVO2DCJimKsRTh/wnqVvO4hrfwOqtO7f+uzwsQMuxO6VwImtYxaQ+ieoyshWOTJyV0fA21lccEXRPpQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@socket.io/component-emitter\": \"~3.1.0\",\n@@ -17924,9 +17924,9 @@\n       }\n     },\n     \"socket.io-parser\": {\n-      \"version\": \"4.2.2\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.2.tgz\",\n-      \"integrity\": \"sha512-DJtziuKypFkMMHCm2uIshOYC7QaylbtzQwiMYDuCKy3OPkjLzu4B2vAhTlqipRHHzrI0NJeBAizTK7X+6m1jVw==\",\n+      \"version\": \"4.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.3.tgz\",\n+      \"integrity\": \"sha512-JMafRntWVO2DCJimKsRTh/wnqVvO4hrfwOqtO7f+uzwsQMuxO6VwImtYxaQ+ieoyshWOTJyV0fA21lccEXRPpQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@socket.io/component-emitter\": \"~3.1.0\",",
    "output": "build(deps): Bump socket.io-parser from 4.2.2 to 4.2.3 (#38643)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/color-modes.md b/site/content/docs/5.3/customize/color-modes.md\nindex 5c7ccf862..945d5ec33 100644\n--- a/site/content/docs/5.3/customize/color-modes.md\n+++ b/site/content/docs/5.3/customize/color-modes.md\n@@ -189,6 +189,54 @@ Here's a look at the JavaScript that powers it. Feel free to inspect our own doc\n {{< /js.inline >}}\n {{< /example >}}\n \n+## Adding theme colors\n+\n+Adding a new color in `$theme-colors` is not enough for some of our components like [alerts]({{< docsref \"/components/alerts\" >}}) and [list groups]({{< docsref \"/components/list-group\" >}}). New colors must also be defined in `$theme-colors-text`, `$theme-colors-bg-subtle`, and `$theme-colors-border-subtle` for light theme; but also in `$theme-colors-text-dark`, `$theme-colors-bg-subtle-dark`, and `$theme-colors-border-subtle-dark` for dark theme.\n+\n+This is a manual process because Sass cannot generate its own Sass variables from an existing variable or map. In future versions of Bootstrap, we'll revisit this setup to reduce the duplication.\n+\n+```scss\n+// Required\n+@import \"functions\";\n+@import \"variables\";\n+@import \"variables-dark\";\n+\n+// Add a custom color to $theme-colors\n+$custom-colors: (\n+  \"custom-color\": #712cf9\n+);\n+$theme-colors: map-merge($theme-colors, $custom-colors);\n+\n+@import \"maps\";\n+@import \"mixins\";\n+@import \"utilities\";\n+\n+// Add a custom color to new theme maps\n+\n+// Light mode\n+$custom-colors-text: (\"custom-color\": #712cf9);\n+$custom-colors-bg-subtle: (\"custom-color\": #e1d2fe);\n+$custom-colors-border-subtle: (\"custom-color\": #bfa1fc);\n+\n+$theme-colors-text: map-merge($theme-colors-text, $custom-colors-text);\n+$theme-colors-bg-subtle: map-merge($theme-colors-bg-subtle, $custom-colors-bg-subtle);\n+$theme-colors-border-subtle: map-merge($theme-colors-border-subtle, $custom-colors-border-subtle);\n+\n+// Dark mode\n+$custom-colors-text-dark: (\"custom-color\": #e1d2f2);\n+$custom-colors-bg-subtle-dark: (\"custom-color\": #8951fa);\n+$custom-colors-border-subtle-dark: (\"custom-color\": #e1d2f2);\n+\n+$theme-colors-text-dark: map-merge($theme-colors-text-dark, $custom-colors-text-dark);\n+$theme-colors-bg-subtle-dark: map-merge($theme-colors-bg-subtle-dark, $custom-colors-bg-subtle-dark);\n+$theme-colors-border-subtle-dark: map-merge($theme-colors-border-subtle-dark, $custom-colors-border-subtle-dark);\n+\n+// Remainder of Bootstrap imports\n+@import \"root\";\n+@import \"reboot\";\n+// etc\n+```\n+\n ## CSS\n \n ### Variables",
    "output": "docs: new section to explain how to add a new color to the theme (#37737)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0d103bcce..bdbbccf37 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"sass\": \"^1.62.1\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^15.6.1\",\n+        \"stylelint\": \"^15.6.2\",\n         \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n         \"terser\": \"5.16.0\",\n         \"vnu-jar\": \"23.4.11\"\n@@ -9969,9 +9969,9 @@\n       \"dev\": true\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"15.6.1\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.6.1.tgz\",\n-      \"integrity\": \"sha512-d8icFBlVl93Elf3Z5ABQNOCe4nx69is3D/NZhDLAie1eyYnpxfeKe7pCfqzT5W4F8vxHCLSDfV8nKNJzogvV2Q==\",\n+      \"version\": \"15.6.2\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.6.2.tgz\",\n+      \"integrity\": \"sha512-fjQWwcdUye4DU+0oIxNGwawIPC5DvG5kdObY5Sg4rc87untze3gC/5g/ikePqVjrAsBUZjwMN+pZsAYbDO6ArQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@csstools/css-parser-algorithms\": \"^2.1.1\",\n@@ -18193,9 +18193,9 @@\n       \"dev\": true\n     },\n     \"stylelint\": {\n-      \"version\": \"15.6.1\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.6.1.tgz\",\n-      \"integrity\": \"sha512-d8icFBlVl93Elf3Z5ABQNOCe4nx69is3D/NZhDLAie1eyYnpxfeKe7pCfqzT5W4F8vxHCLSDfV8nKNJzogvV2Q==\",\n+      \"version\": \"15.6.2\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.6.2.tgz\",\n+      \"integrity\": \"sha512-fjQWwcdUye4DU+0oIxNGwawIPC5DvG5kdObY5Sg4rc87untze3gC/5g/ikePqVjrAsBUZjwMN+pZsAYbDO6ArQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@csstools/css-parser-algorithms\": \"^2.1.1\",\ndiff --git a/package.json b/package.json\nindex 7e9693d7f..2abf5ef63 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"sass\": \"^1.62.1\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^15.6.1\",\n+    \"stylelint\": \"^15.6.2\",\n     \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n     \"terser\": \"5.16.0\",\n     \"vnu-jar\": \"23.4.11\"",
    "output": "build(deps-dev): Bump stylelint from 15.6.1 to 15.6.2 (#38614)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e33472348..0d103bcce 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"hugo-bin\": \"^0.102.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n-        \"jquery\": \"^3.6.4\",\n+        \"jquery\": \"^3.7.0\",\n         \"karma\": \"^6.4.2\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n         \"karma-chrome-launcher\": \"^3.2.0\",\n@@ -6879,9 +6879,9 @@\n       }\n     },\n     \"node_modules/jquery\": {\n-      \"version\": \"3.6.4\",\n-      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.4.tgz\",\n-      \"integrity\": \"sha512-v28EW9DWDFpzcD9O5iyJXg3R3+q+mET5JhnjJzQUZMHOv67bpSIHq81GEYpPNZHG+XXHsfSme3nxp/hndKEcsQ==\",\n+      \"version\": \"3.7.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.7.0.tgz\",\n+      \"integrity\": \"sha512-umpJ0/k8X0MvD1ds0P9SfowREz2LenHsQaxSohMZ5OMNEU2r0tf8pdeEFTHMFxWVxKNyU9rTtK3CWzUCTKJUeQ==\",\n       \"dev\": true\n     },\n     \"node_modules/js-sdsl\": {\n@@ -15961,9 +15961,9 @@\n       \"dev\": true\n     },\n     \"jquery\": {\n-      \"version\": \"3.6.4\",\n-      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.4.tgz\",\n-      \"integrity\": \"sha512-v28EW9DWDFpzcD9O5iyJXg3R3+q+mET5JhnjJzQUZMHOv67bpSIHq81GEYpPNZHG+XXHsfSme3nxp/hndKEcsQ==\",\n+      \"version\": \"3.7.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.7.0.tgz\",\n+      \"integrity\": \"sha512-umpJ0/k8X0MvD1ds0P9SfowREz2LenHsQaxSohMZ5OMNEU2r0tf8pdeEFTHMFxWVxKNyU9rTtK3CWzUCTKJUeQ==\",\n       \"dev\": true\n     },\n     \"js-sdsl\": {\ndiff --git a/package.json b/package.json\nindex b59d2e0eb..e564d9918 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"hugo-bin\": \"^0.102.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n-    \"jquery\": \"^3.6.4\",\n+    \"jquery\": \"^3.7.0\",\n     \"karma\": \"^6.4.2\",\n     \"karma-browserstack-launcher\": \"1.4.0\",\n     \"karma-chrome-launcher\": \"^3.2.0\",",
    "output": "build(deps-dev): Bump jquery from 3.6.4 to 3.7.0 (#38613)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 7a795d9ad..e33472348 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.21.5\",\n         \"@popperjs/core\": \"^2.11.7\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^24.1.0\",\n+        \"@rollup/plugin-commonjs\": \"^25.0.0\",\n         \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.14\",\n@@ -2048,9 +2048,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"24.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.1.0.tgz\",\n-      \"integrity\": \"sha512-eSL45hjhCWI0jCCXcNtLVqM5N1JlBGvlFfY0m6oOYnLCJ6N0qEXoZql4sY2MOUArzhH4SA/qBpTxvvZp2Sc+DQ==\",\n+      \"version\": \"25.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.0.tgz\",\n+      \"integrity\": \"sha512-hoho2Kay9TZrLu0bnDsTTCaj4Npa+THk9snajP/XDNb9a9mmjTjh52EQM9sKl3HD1LsnihX7js+eA2sd2uKAhw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12398,9 +12398,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"24.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.1.0.tgz\",\n-      \"integrity\": \"sha512-eSL45hjhCWI0jCCXcNtLVqM5N1JlBGvlFfY0m6oOYnLCJ6N0qEXoZql4sY2MOUArzhH4SA/qBpTxvvZp2Sc+DQ==\",\n+      \"version\": \"25.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.0.tgz\",\n+      \"integrity\": \"sha512-hoho2Kay9TZrLu0bnDsTTCaj4Npa+THk9snajP/XDNb9a9mmjTjh52EQM9sKl3HD1LsnihX7js+eA2sd2uKAhw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex bcc490c35..b59d2e0eb 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/preset-env\": \"^7.21.5\",\n     \"@popperjs/core\": \"^2.11.7\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^24.1.0\",\n+    \"@rollup/plugin-commonjs\": \"^25.0.0\",\n     \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.14\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 24.1.0 to 25.0.0 (#38610)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ca462ef44..7a795d9ad 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.102.0\",\n+        \"hugo-bin\": \"^0.102.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.6.4\",\n@@ -6038,9 +6038,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.102.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.0.tgz\",\n-      \"integrity\": \"sha512-gJeDdC4W0x/+a8rf7pz8L/NheEeHIKrtLIHFwMumX04UAFYUA065A4uQmDjRspsMdQ9muwB9eQfOwTSjqaYyrQ==\",\n+      \"version\": \"0.102.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.1.tgz\",\n+      \"integrity\": \"sha512-PgMcOXM/E9kWlB/H5gwp9yD7f+YwbQvRU2AIl4fD4ZIlb74ABLuqFVPLR7gmlZcZ5zdUkOWHFEDUA8E0vVHHpg==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -6054,7 +6054,7 @@\n         \"pkg-conf\": \"^4.0.0\"\n       },\n       \"bin\": {\n-        \"hugo\": \"cli.js\"\n+        \"hugo\": \"bin/cli.js\"\n       },\n       \"engines\": {\n         \"node\": \"^14.14.0 || >=16.0.0\"\n@@ -15370,9 +15370,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.102.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.0.tgz\",\n-      \"integrity\": \"sha512-gJeDdC4W0x/+a8rf7pz8L/NheEeHIKrtLIHFwMumX04UAFYUA065A4uQmDjRspsMdQ9muwB9eQfOwTSjqaYyrQ==\",\n+      \"version\": \"0.102.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.1.tgz\",\n+      \"integrity\": \"sha512-PgMcOXM/E9kWlB/H5gwp9yD7f+YwbQvRU2AIl4fD4ZIlb74ABLuqFVPLR7gmlZcZ5zdUkOWHFEDUA8E0vVHHpg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex fa2d9a303..bcc490c35 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.102.0\",\n+    \"hugo-bin\": \"^0.102.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.6.4\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.102.0 to 0.102.1 (#38612)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 545344efc..2ba8fdde1 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.23\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.21.2\",\n+        \"rollup\": \"^3.21.8\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.1\",\n@@ -9215,9 +9215,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.21.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.2.tgz\",\n-      \"integrity\": \"sha512-c4vC+JZ3bbF4Kqq2TtM7zSKtSyMybFOjqmomFax3xpfYaPZDZ4iz8NMIuBRMjnXOcKYozw7bC6vhJjiWD6JpzQ==\",\n+      \"version\": \"3.21.8\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.8.tgz\",\n+      \"integrity\": \"sha512-SSFV2T2fWtQ/vvBip85u2Nr0GNKireabH9d7nXswBg+XSH+jbVDSYptRAEbCEsquhs503rpPA9POYAp0/Jhasw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17610,9 +17610,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.21.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.2.tgz\",\n-      \"integrity\": \"sha512-c4vC+JZ3bbF4Kqq2TtM7zSKtSyMybFOjqmomFax3xpfYaPZDZ4iz8NMIuBRMjnXOcKYozw7bC6vhJjiWD6JpzQ==\",\n+      \"version\": \"3.21.8\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.8.tgz\",\n+      \"integrity\": \"sha512-SSFV2T2fWtQ/vvBip85u2Nr0GNKireabH9d7nXswBg+XSH+jbVDSYptRAEbCEsquhs503rpPA9POYAp0/Jhasw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 8d8237b8b..032109e4b 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.23\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.21.2\",\n+    \"rollup\": \"^3.21.8\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.1\",",
    "output": "build(deps-dev): Bump rollup from 3.21.2 to 3.21.8 (#38608)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/content/tables.md b/site/content/docs/5.3/content/tables.md\nindex 78d9870c0..b75b233e1 100644\n--- a/site/content/docs/5.3/content/tables.md\n+++ b/site/content/docs/5.3/content/tables.md\n@@ -227,8 +227,8 @@ Highlight a table row or cell by adding a `.table-active` class.\n For the accented tables ([striped rows](#striped-rows), [striped columns](#striped-columns), [hoverable rows](#hoverable-rows), and [active tables](#active-tables)), we used some techniques to make these effects work for all our [table variants](#variants):\n \n - We start by setting the background of a table cell with the `--bs-table-bg` custom property. All table variants then set that custom property to colorize the table cells. This way, we don't get into trouble if semi-transparent colors are used as table backgrounds.\n-- Then we add an inset box shadow on the table cells with `box-shadow: inset 0 0 0 9999px var(--#{$prefix}table-bg--state, var(--#{$prefix}table-bg--type, var(--#{$prefix}table-accent-bg)));` to layer on top of any specified `background-color`. It uses custom cascade to override the `box-shadow`, regardless the CSS specificity. Because we use a huge spread and no blur, the color will be monotone. Since `--bs-table-accent-bg` is set to `transparent` by default, we don't have a default box shadow.\n-- When either `.table-striped`, `.table-striped-columns`, `.table-hover` or `.table-active` classes are added, either `--bs-table-bg--type` or `--bs-table-bg--state` (by default set to `initial`) are set to a semitransparent color (`--bs-table-striped-bg`, `--bs-table-active-bg` or `--bs-table-hover-bg`) to colorize the background and override default `--bs-table-accent-bg`.\n+- Then we add an inset box shadow on the table cells with `box-shadow: inset 0 0 0 9999px var(--bs-table-bg-state, var(--bs-table-bg-type, var(--bs-table-accent-bg)));` to layer on top of any specified `background-color`. It uses custom cascade to override the `box-shadow`, regardless the CSS specificity. Because we use a huge spread and no blur, the color will be monotone. Since `--bs-table-accent-bg` is set to `transparent` by default, we don't have a default box shadow.\n+- When either `.table-striped`, `.table-striped-columns`, `.table-hover` or `.table-active` classes are added, either `--bs-table-bg-type` or `--bs-table-bg-state` (by default set to `initial`) are set to a semitransparent color (`--bs-table-striped-bg`, `--bs-table-active-bg` or `--bs-table-hover-bg`) to colorize the background and override default `--bs-table-accent-bg`.\n - For each table variant, we generate a `--bs-table-accent-bg` color with the highest contrast depending on that color. For example, the accent color for `.table-primary` is darker while `.table-dark` has a lighter accent color.\n - Text and border colors are generated the same way, and their colors are inherited by default.\n ",
    "output": "docs: fix paragraph on how do the variants and accented tables work"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 97c4fe930..10d4e49e8 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -4292,9 +4292,9 @@\n       }\n     },\n     \"node_modules/engine.io\": {\n-      \"version\": \"6.4.1\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.4.1.tgz\",\n-      \"integrity\": \"sha512-JFYQurD/nbsA5BSPmbaOSLa3tSVj8L6o4srSwXXY3NqE+gGUNmmPTbhn8tjzcCtSqhFgIeqef81ngny8JM25hw==\",\n+      \"version\": \"6.4.2\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.4.2.tgz\",\n+      \"integrity\": \"sha512-FKn/3oMiJjrOEOeUub2WCox6JhxBXq/Zn3fZOMCBxKnNYtsdKjxhl7yR3fZhM9PV+rdE75SU5SYMc+2PGzo+Tg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@types/cookie\": \"^0.4.1\",\n@@ -14035,9 +14035,9 @@\n       }\n     },\n     \"engine.io\": {\n-      \"version\": \"6.4.1\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.4.1.tgz\",\n-      \"integrity\": \"sha512-JFYQurD/nbsA5BSPmbaOSLa3tSVj8L6o4srSwXXY3NqE+gGUNmmPTbhn8tjzcCtSqhFgIeqef81ngny8JM25hw==\",\n+      \"version\": \"6.4.2\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.4.2.tgz\",\n+      \"integrity\": \"sha512-FKn/3oMiJjrOEOeUub2WCox6JhxBXq/Zn3fZOMCBxKnNYtsdKjxhl7yR3fZhM9PV+rdE75SU5SYMc+2PGzo+Tg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@types/cookie\": \"^0.4.1\",",
    "output": "build(deps): Bump engine.io from 6.4.1 to 6.4.2 (#38549)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 203b5b79b..997665f61 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.22\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.20.5\",\n+        \"rollup\": \"^3.21.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.0\",\n@@ -9218,9 +9218,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.20.5\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.5.tgz\",\n-      \"integrity\": \"sha512-Mx6NE3nLPIP6a9ReV4dTPOYYmDiyarJNtSbc37Jx0jvh8SHySoFPgyZAp9aDP3LnYvaJOrz+fclcwq3oZDzlnA==\",\n+      \"version\": \"3.21.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.0.tgz\",\n+      \"integrity\": \"sha512-ANPhVcyeHvYdQMUyCbczy33nbLzI7RzrBje4uvNiTDJGIMtlKoOStmympwr9OtS1LZxiDmE2wvxHyVhoLtf1KQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17589,9 +17589,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.20.5\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.5.tgz\",\n-      \"integrity\": \"sha512-Mx6NE3nLPIP6a9ReV4dTPOYYmDiyarJNtSbc37Jx0jvh8SHySoFPgyZAp9aDP3LnYvaJOrz+fclcwq3oZDzlnA==\",\n+      \"version\": \"3.21.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.21.0.tgz\",\n+      \"integrity\": \"sha512-ANPhVcyeHvYdQMUyCbczy33nbLzI7RzrBje4uvNiTDJGIMtlKoOStmympwr9OtS1LZxiDmE2wvxHyVhoLtf1KQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex de0ff4bf3..2cb597929 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.22\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.20.5\",\n+    \"rollup\": \"^3.21.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.0\",",
    "output": "build(deps-dev): Bump rollup from 3.20.5 to 3.21.0 (#38508)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a9fd87279..203b5b79b 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -44,7 +44,7 @@\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.6.4\",\n-        \"karma\": \"^6.4.1\",\n+        \"karma\": \"^6.4.2\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n         \"karma-chrome-launcher\": \"^3.1.1\",\n         \"karma-coverage-istanbul-reporter\": \"^3.0.3\",\n@@ -6961,9 +6961,9 @@\n       \"dev\": true\n     },\n     \"node_modules/karma\": {\n-      \"version\": \"6.4.1\",\n-      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.1.tgz\",\n-      \"integrity\": \"sha512-Cj57NKOskK7wtFWSlMvZf459iX+kpYIPXmkNUzP2WAFcA7nhr/ALn5R7sw3w+1udFDcpMx/tuB8d5amgm3ijaA==\",\n+      \"version\": \"6.4.2\",\n+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.2.tgz\",\n+      \"integrity\": \"sha512-C6SU/53LB31BEgRg+omznBEMY4SjHU3ricV6zBcAe1EeILKkeScr+fZXtaI5WyDbkVowJxxAI6h73NcFPmXolQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@colors/colors\": \"1.5.0\",\n@@ -15981,9 +15981,9 @@\n       \"dev\": true\n     },\n     \"karma\": {\n-      \"version\": \"6.4.1\",\n-      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.1.tgz\",\n-      \"integrity\": \"sha512-Cj57NKOskK7wtFWSlMvZf459iX+kpYIPXmkNUzP2WAFcA7nhr/ALn5R7sw3w+1udFDcpMx/tuB8d5amgm3ijaA==\",\n+      \"version\": \"6.4.2\",\n+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.2.tgz\",\n+      \"integrity\": \"sha512-C6SU/53LB31BEgRg+omznBEMY4SjHU3ricV6zBcAe1EeILKkeScr+fZXtaI5WyDbkVowJxxAI6h73NcFPmXolQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@colors/colors\": \"1.5.0\",\ndiff --git a/package.json b/package.json\nindex 392fae438..de0ff4bf3 100644\n--- a/package.json\n+++ b/package.json\n@@ -128,7 +128,7 @@\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.6.4\",\n-    \"karma\": \"^6.4.1\",\n+    \"karma\": \"^6.4.2\",\n     \"karma-browserstack-launcher\": \"1.4.0\",\n     \"karma-chrome-launcher\": \"^3.1.1\",\n     \"karma-coverage-istanbul-reporter\": \"^3.0.3\",",
    "output": "build(deps-dev): Bump karma from 6.4.1 to 6.4.2 (#38506)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/position.md b/site/content/docs/5.3/utilities/position.md\nindex e7cd420fa..a2ef4ecc7 100644\n--- a/site/content/docs/5.3/utilities/position.md\n+++ b/site/content/docs/5.3/utilities/position.md\n@@ -93,8 +93,8 @@ Here are some real life examples of these classes:\n   Mails <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-secondary\">+99 <span class=\"visually-hidden\">unread messages</span></span>\n </button>\n \n-<div class=\"position-relative py-2 px-4 text-bg-dark border border-dark rounded-pill\">\n-  Marker <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"position-absolute top-100 start-50 translate-middle mt-1\" fill=\"var(--bs-dark)\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/></svg>\n+<div class=\"position-relative py-2 px-4 text-bg-secondary border border-secondary rounded-pill\">\n+  Marker <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"position-absolute top-100 start-50 translate-middle mt-1\" fill=\"var(--bs-secondary)\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/></svg>\n </div>\n \n <button type=\"button\" class=\"btn btn-primary position-relative\">",
    "output": "docs: change colors of position marker example to work with dark mode (#38445)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 5ad84874c..d4e51447d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.22\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.20.2\",\n+        \"rollup\": \"^3.20.5\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.0\",\n@@ -9215,9 +9215,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.20.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.2.tgz\",\n-      \"integrity\": \"sha512-3zwkBQl7Ai7MFYQE0y1MeQ15+9jsi7XxfrqwTb/9EK8D9C9+//EBR4M+CuA1KODRaNbFez/lWxA5vhEGZp4MUg==\",\n+      \"version\": \"3.20.5\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.5.tgz\",\n+      \"integrity\": \"sha512-Mx6NE3nLPIP6a9ReV4dTPOYYmDiyarJNtSbc37Jx0jvh8SHySoFPgyZAp9aDP3LnYvaJOrz+fclcwq3oZDzlnA==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17586,9 +17586,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.20.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.2.tgz\",\n-      \"integrity\": \"sha512-3zwkBQl7Ai7MFYQE0y1MeQ15+9jsi7XxfrqwTb/9EK8D9C9+//EBR4M+CuA1KODRaNbFez/lWxA5vhEGZp4MUg==\",\n+      \"version\": \"3.20.5\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.5.tgz\",\n+      \"integrity\": \"sha512-Mx6NE3nLPIP6a9ReV4dTPOYYmDiyarJNtSbc37Jx0jvh8SHySoFPgyZAp9aDP3LnYvaJOrz+fclcwq3oZDzlnA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex e33eccdbb..36df8bfa6 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.22\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.20.2\",\n+    \"rollup\": \"^3.20.5\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.0\",",
    "output": "build(deps-dev): Bump rollup from 3.20.2 to 3.20.5 (#38477)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 93bf9ec00..5ad84874c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"sass\": \"^1.62.0\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^15.4.0\",\n+        \"stylelint\": \"^15.5.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^9.0.1\",\n         \"terser\": \"5.16.0\",\n         \"vnu-jar\": \"23.4.11\"\n@@ -9945,14 +9945,14 @@\n       \"dev\": true\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"15.4.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.4.0.tgz\",\n-      \"integrity\": \"sha512-TlOvpG3MbcFwHmK0q2ykhmpKo7Dq892beJit0NPdpyY9b1tFah/hGhqnAz/bRm2PDhDbJLKvjzkEYYBEz7Dxcg==\",\n+      \"version\": \"15.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.5.0.tgz\",\n+      \"integrity\": \"sha512-jyMO3R1QtE5mUS4v40+Gg+sIQBqe7CF1xPslxycDzNVkIBCUD4O+5F1vLPq16VmunUTv4qG9o2rUKLnU5KkVeQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@csstools/css-parser-algorithms\": \"^2.1.0\",\n         \"@csstools/css-tokenizer\": \"^2.1.0\",\n-        \"@csstools/media-query-list-parser\": \"^2.0.1\",\n+        \"@csstools/media-query-list-parser\": \"^2.0.2\",\n         \"@csstools/selector-specificity\": \"^2.2.0\",\n         \"balanced-match\": \"^2.0.0\",\n         \"colord\": \"^2.9.3\",\n@@ -9966,7 +9966,7 @@\n         \"global-modules\": \"^2.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"globjoin\": \"^0.1.4\",\n-        \"html-tags\": \"^3.2.0\",\n+        \"html-tags\": \"^3.3.1\",\n         \"ignore\": \"^5.2.4\",\n         \"import-lazy\": \"^4.0.0\",\n         \"imurmurhash\": \"^0.1.4\",\n@@ -18131,14 +18131,14 @@\n       \"dev\": true\n     },\n     \"stylelint\": {\n-      \"version\": \"15.4.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.4.0.tgz\",\n-      \"integrity\": \"sha512-TlOvpG3MbcFwHmK0q2ykhmpKo7Dq892beJit0NPdpyY9b1tFah/hGhqnAz/bRm2PDhDbJLKvjzkEYYBEz7Dxcg==\",\n+      \"version\": \"15.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.5.0.tgz\",\n+      \"integrity\": \"sha512-jyMO3R1QtE5mUS4v40+Gg+sIQBqe7CF1xPslxycDzNVkIBCUD4O+5F1vLPq16VmunUTv4qG9o2rUKLnU5KkVeQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@csstools/css-parser-algorithms\": \"^2.1.0\",\n         \"@csstools/css-tokenizer\": \"^2.1.0\",\n-        \"@csstools/media-query-list-parser\": \"^2.0.1\",\n+        \"@csstools/media-query-list-parser\": \"^2.0.2\",\n         \"@csstools/selector-specificity\": \"^2.2.0\",\n         \"balanced-match\": \"^2.0.0\",\n         \"colord\": \"^2.9.3\",\n@@ -18152,7 +18152,7 @@\n         \"global-modules\": \"^2.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"globjoin\": \"^0.1.4\",\n-        \"html-tags\": \"^3.2.0\",\n+        \"html-tags\": \"^3.3.1\",\n         \"ignore\": \"^5.2.4\",\n         \"import-lazy\": \"^4.0.0\",\n         \"imurmurhash\": \"^0.1.4\",\ndiff --git a/package.json b/package.json\nindex 0263ec4f8..e33eccdbb 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"sass\": \"^1.62.0\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^15.4.0\",\n+    \"stylelint\": \"^15.5.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^9.0.1\",\n     \"terser\": \"5.16.0\",\n     \"vnu-jar\": \"23.4.11\"",
    "output": "build(deps-dev): Bump stylelint from 15.4.0 to 15.5.0 (#38476)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 79bc1b243..93bf9ec00 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.10.1\",\n         \"nodemon\": \"^2.0.22\",\n         \"npm-run-all2\": \"^6.0.5\",\n-        \"postcss\": \"^8.4.21\",\n+        \"postcss\": \"^8.4.22\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.20.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8396,9 +8396,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.21\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.21.tgz\",\n-      \"integrity\": \"sha512-tP7u/Sn/dVxK2NnruI4H9BG+x+Wxz6oeZ1cJ8P6G/PZY0IKk4k/63TDsQf2kQq3+qoJeLm2kIBUNlZe3zgb4Zg==\",\n+      \"version\": \"8.4.22\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.22.tgz\",\n+      \"integrity\": \"sha512-XseknLAfRHzVWjCEtdviapiBtfLdgyzExD50Rg2ePaucEesyh8Wv4VPdW0nbyDa1ydbrAxV19jvMT4+LFmcNUA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -8408,10 +8408,14 @@\n         {\n           \"type\": \"tidelift\",\n           \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\n+        },\n+        {\n+          \"type\": \"github\",\n+          \"url\": \"https://github.com/sponsors/ai\"\n         }\n       ],\n       \"dependencies\": {\n-        \"nanoid\": \"^3.3.4\",\n+        \"nanoid\": \"^3.3.6\",\n         \"picocolors\": \"^1.0.0\",\n         \"source-map-js\": \"^1.0.2\"\n       },\n@@ -17006,12 +17010,12 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.21\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.21.tgz\",\n-      \"integrity\": \"sha512-tP7u/Sn/dVxK2NnruI4H9BG+x+Wxz6oeZ1cJ8P6G/PZY0IKk4k/63TDsQf2kQq3+qoJeLm2kIBUNlZe3zgb4Zg==\",\n+      \"version\": \"8.4.22\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.22.tgz\",\n+      \"integrity\": \"sha512-XseknLAfRHzVWjCEtdviapiBtfLdgyzExD50Rg2ePaucEesyh8Wv4VPdW0nbyDa1ydbrAxV19jvMT4+LFmcNUA==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"nanoid\": \"^3.3.4\",\n+        \"nanoid\": \"^3.3.6\",\n         \"picocolors\": \"^1.0.0\",\n         \"source-map-js\": \"^1.0.2\"\n       }\ndiff --git a/package.json b/package.json\nindex 0ddc2d596..0263ec4f8 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.10.1\",\n     \"nodemon\": \"^2.0.22\",\n     \"npm-run-all2\": \"^6.0.5\",\n-    \"postcss\": \"^8.4.21\",\n+    \"postcss\": \"^8.4.22\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.20.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.21 to 8.4.22 (#38475)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/navbar.md b/site/content/docs/5.3/components/navbar.md\nindex 32813486e..277ef0429 100644\n--- a/site/content/docs/5.3/components/navbar.md\n+++ b/site/content/docs/5.3/components/navbar.md\n@@ -655,9 +655,9 @@ With a toggler on the left and brand name on the right:\n Sometimes you want to use the collapse plugin to trigger a container element for content that structurally sits outside of the `.navbar` . Because our plugin works on the `id` and `data-bs-target` matching, that's easily done!\n \n {{< example >}}\n-<div class=\"collapse\" id=\"navbarToggleExternalContent\">\n+<div class=\"collapse\" id=\"navbarToggleExternalContent\" data-bs-theme=\"dark\">\n   <div class=\"bg-dark p-4\">\n-    <h5 class=\"text-white h4\">Collapsed content</h5>\n+    <h5 class=\"text-body-emphasis h4\">Collapsed content</h5>\n     <span class=\"text-body-secondary\">Toggleable via the navbar brand.</span>\n   </div>\n </div>",
    "output": "docs: fix text rendering of navbar external content"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/vite.md b/site/content/docs/5.3/getting-started/vite.md\nindex b62e6190d..9c2be9f11 100644\n--- a/site/content/docs/5.3/getting-started/vite.md\n+++ b/site/content/docs/5.3/getting-started/vite.md\n@@ -86,8 +86,7 @@ With dependencies installed and our project folder ready for us to start coding,\n        outDir: '../dist'\n      },\n      server: {\n-       port: 8080,\n-       hot: true\n+       port: 8080\n      }\n    }\n    ```",
    "output": "docs: remove moot `hot` option from Vite guide (#38405)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a5376fdcf..def6185fb 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^4.0.8\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.101.5\",\n+        \"hugo-bin\": \"^0.102.0\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.6.4\",\n@@ -5975,9 +5975,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.101.5\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.5.tgz\",\n-      \"integrity\": \"sha512-iq125a7Z0Zwx9nk/+66O+Yy7juwoY5ttQ8+6tkCzDoyDN71n2m8BiG8qeFLYQF1joMiiPE8ItGYu0Tkn98aGxA==\",\n+      \"version\": \"0.102.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.0.tgz\",\n+      \"integrity\": \"sha512-gJeDdC4W0x/+a8rf7pz8L/NheEeHIKrtLIHFwMumX04UAFYUA065A4uQmDjRspsMdQ9muwB9eQfOwTSjqaYyrQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -5988,14 +5988,13 @@\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.1\",\n-        \"pkg-conf\": \"^4.0.0\",\n-        \"rimraf\": \"^3.0.2\"\n+        \"pkg-conf\": \"^4.0.0\"\n       },\n       \"bin\": {\n         \"hugo\": \"cli.js\"\n       },\n       \"engines\": {\n-        \"node\": \"^14.13.1 || >=16.0.0\"\n+        \"node\": \"^14.14.0 || >=16.0.0\"\n       }\n     },\n     \"node_modules/human-signals\": {\n@@ -15311,14 +15310,13 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.101.5\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.5.tgz\",\n-      \"integrity\": \"sha512-iq125a7Z0Zwx9nk/+66O+Yy7juwoY5ttQ8+6tkCzDoyDN71n2m8BiG8qeFLYQF1joMiiPE8ItGYu0Tkn98aGxA==\",\n+      \"version\": \"0.102.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.102.0.tgz\",\n+      \"integrity\": \"sha512-gJeDdC4W0x/+a8rf7pz8L/NheEeHIKrtLIHFwMumX04UAFYUA065A4uQmDjRspsMdQ9muwB9eQfOwTSjqaYyrQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.1\",\n-        \"pkg-conf\": \"^4.0.0\",\n-        \"rimraf\": \"^3.0.2\"\n+        \"pkg-conf\": \"^4.0.0\"\n       }\n     },\n     \"human-signals\": {\ndiff --git a/package.json b/package.json\nindex c862fccab..cffecf0cf 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^4.0.8\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.101.5\",\n+    \"hugo-bin\": \"^0.102.0\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.6.4\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.101.5 to 0.102.0 (#38400)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex cc199d80d..57724497e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -37,7 +37,7 @@\n         \"eslint-plugin-import\": \"^2.27.5\",\n         \"eslint-plugin-markdown\": \"^3.0.0\",\n         \"eslint-plugin-unicorn\": \"^46.0.0\",\n-        \"find-unused-sass-variables\": \"^4.0.6\",\n+        \"find-unused-sass-variables\": \"^4.0.8\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.101.5\",\n@@ -5245,9 +5245,9 @@\n       }\n     },\n     \"node_modules/find-unused-sass-variables\": {\n-      \"version\": \"4.0.6\",\n-      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.6.tgz\",\n-      \"integrity\": \"sha512-LLmve6yEAvkjCSji2JuY4LEEMvD5a1NBQPu05oSK1vVfJUx8cZW6K/gDyfYZt0B1FnCiz7cJsa3DAZfTHsEdUg==\",\n+      \"version\": \"4.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.8.tgz\",\n+      \"integrity\": \"sha512-IllJ9d85P1NRZHS51ql0Q+ddhgD6+9CTo1q4exgpNfmRgCf36/bP1VCYpsI6IoJuNSrDGrdaFyNMo5YWZO44yw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"commander\": \"^9.5.0\",\n@@ -14788,9 +14788,9 @@\n       }\n     },\n     \"find-unused-sass-variables\": {\n-      \"version\": \"4.0.6\",\n-      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.6.tgz\",\n-      \"integrity\": \"sha512-LLmve6yEAvkjCSji2JuY4LEEMvD5a1NBQPu05oSK1vVfJUx8cZW6K/gDyfYZt0B1FnCiz7cJsa3DAZfTHsEdUg==\",\n+      \"version\": \"4.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.8.tgz\",\n+      \"integrity\": \"sha512-IllJ9d85P1NRZHS51ql0Q+ddhgD6+9CTo1q4exgpNfmRgCf36/bP1VCYpsI6IoJuNSrDGrdaFyNMo5YWZO44yw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"commander\": \"^9.5.0\",\ndiff --git a/package.json b/package.json\nindex 9ffc216e5..51b3e1886 100644\n--- a/package.json\n+++ b/package.json\n@@ -121,7 +121,7 @@\n     \"eslint-plugin-import\": \"^2.27.5\",\n     \"eslint-plugin-markdown\": \"^3.0.0\",\n     \"eslint-plugin-unicorn\": \"^46.0.0\",\n-    \"find-unused-sass-variables\": \"^4.0.6\",\n+    \"find-unused-sass-variables\": \"^4.0.8\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.101.5\",",
    "output": "build(deps-dev): Bump find-unused-sass-variables from 4.0.6 to 4.0.8 (#38402)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/customize.html b/site/layouts/partials/home/customize.html\nindex c38243dc2..a6d04fed4 100644\n--- a/site/layouts/partials/home/customize.html\n+++ b/site/layouts/partials/home/customize.html\n@@ -41,6 +41,7 @@ $prefix: \"mo-\";\n \n // Required Bootstrap imports\n @import \"../node_modules/bootstrap/scss/variables\";\n+@import \"../node_modules/bootstrap/scss/variables-dark\";\n @import \"../node_modules/bootstrap/scss/maps\";\n @import \"../node_modules/bootstrap/scss/mixins\";\n @import \"../node_modules/bootstrap/scss/root\";",
    "output": "docs: add variables-dark import in home page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/webpack.md b/site/content/docs/5.3/getting-started/webpack.md\nindex ffad34e39..bd539b891 100644\n--- a/site/content/docs/5.3/getting-started/webpack.md\n+++ b/site/content/docs/5.3/getting-started/webpack.md\n@@ -115,7 +115,6 @@ With dependencies installed and our project folder ready for us to start coding,\n          <h1>Hello, Bootstrap and Webpack!</h1>\n          <button class=\"btn btn-primary\">Primary button</button>\n        </div>\n-       <script src=\"./main.js\"></script>\n      </body>\n    </html>\n    ```\n@@ -129,7 +128,7 @@ With dependencies installed and our project folder ready for us to start coding,\n      // ...\n      \"scripts\": {\n        \"start\": \"webpack serve\",\n-       \"build\": \"webpack build\",\n+       \"build\": \"webpack build --mode=production\",\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n      },\n      // ...",
    "output": "docs: update Webpack guide (#38345)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/shortcodes/js-docs.html b/site/layouts/shortcodes/js-docs.html\nindex 1a479db67..fad4f034f 100644\n--- a/site/layouts/shortcodes/js-docs.html\n+++ b/site/layouts/shortcodes/js-docs.html\n@@ -32,6 +32,27 @@\n         <svg class=\"bi\" aria-hidden=\"true\"><use xlink:href=\"#clipboard\"></use></svg>\n       </button>\n     </div>\n-    {{- highlight $match \"js\" \"\" -}}\n+    {{- $unindent := 0 -}}\n+    {{- $found := false -}}\n+    {{- $first_line:= index (split $match \"\\n\") 0 -}}\n+    {{- range $char := split $first_line \"\" -}}\n+      {{- if and (eq $char \" \") (not $found) -}}\n+        {{- $unindent = add $unindent 1 -}}\n+      {{- else -}}\n+        {{- $found = true -}}\n+      {{- end -}}\n+    {{- end -}}\n+    {{- $output := \"\" -}}\n+    {{- if (gt $unindent 0) -}}\n+      {{- $prefix := (strings.Repeat $unindent \" \") -}}\n+      {{- range $line := split $match \"\\n\" -}}\n+        {{- $line = strings.TrimPrefix $prefix $line -}}\n+        {{ $output = printf \"%s%s\\n\" $output $line }}\n+      {{- end -}}\n+      {{- $output = chomp $output -}}\n+    {{- else -}}\n+      {{- $output = $match -}}\n+    {{- end -}}\n+    {{- highlight $output \"js\" \"\" -}}\n   </div>\n {{- end -}}",
    "output": "docs: `js-docs` unindent automatically the code inside shortcode (#38349)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/modal.md b/site/content/docs/5.3/components/modal.md\nindex e723a49ce..f556ed9f8 100644\n--- a/site/content/docs/5.3/components/modal.md\n+++ b/site/content/docs/5.3/components/modal.md\n@@ -643,7 +643,7 @@ Another override is the option to pop up a modal that covers the user viewport,\n \n {{< bs-table >}}\n | Class | Availability |\n-| --- | --- | --- |\n+| --- | --- |\n | `.modal-fullscreen` | Always |\n | `.modal-fullscreen-sm-down` | `576px` |\n | `.modal-fullscreen-md-down` | `768px` |",
    "output": "docs: fix Markdown table with empty column (#38342)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/code-examples.js b/site/assets/js/code-examples.js\nindex 555bd7b6f..f224500f4 100644\n--- a/site/assets/js/code-examples.js\n+++ b/site/assets/js/code-examples.js\n@@ -13,6 +13,7 @@\n \n (() => {\n   'use strict'\n+\n   // Insert copy to clipboard button before .highlight\n   const btnTitle = 'Copy to clipboard'\n   const btnEdit = 'Edit on StackBlitz'\n@@ -27,7 +28,7 @@\n     '</div>'\n   ].join('')\n \n-  // wrap programmatically code blocks and add copy btn.\n+  // Wrap programmatically code blocks and add copy btn.\n   document.querySelectorAll('.highlight')\n     .forEach(element => {\n       if (!element.closest('.bd-example-snippet')) { // Ignore examples made be shortcode\n@@ -51,7 +52,8 @@\n   snippetButtonTooltip('.btn-edit', btnEdit)\n \n   const clipboard = new ClipboardJS('.btn-clipboard', {\n-    target: trigger => trigger.closest('.bd-code-snippet').querySelector('.highlight')\n+    target: trigger => trigger.closest('.bd-code-snippet').querySelector('.highlight'),\n+    text: trigger => trigger.parentNode.nextElementSibling.textContent.trimEnd()\n   })\n \n   clipboard.on('success', event => {",
    "output": "docs: remove trailing newline when copying snippets (#38321)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/shortcodes/scss-docs.html b/site/layouts/shortcodes/scss-docs.html\nindex 2bfdf8de5..d28b29c92 100644\n--- a/site/layouts/shortcodes/scss-docs.html\n+++ b/site/layouts/shortcodes/scss-docs.html\n@@ -50,6 +50,27 @@\n         </button>\n       </div>\n     </div>\n-    {{- highlight $match \"scss\" \"\" -}}\n+    {{- $unindent := 0 -}}\n+    {{- $found := false -}}\n+    {{- $first_line:= index (split $match \"\\n\") 0 -}}\n+    {{- range $char := split $first_line \"\" -}}\n+      {{- if and (eq $char \" \") (not $found) -}}\n+        {{- $unindent = add $unindent 1 -}}\n+      {{- else -}}\n+        {{- $found = true -}}\n+      {{- end -}}\n+    {{- end -}}\n+    {{- $output := \"\" -}}\n+    {{- if (gt $unindent 0) -}}\n+      {{- $prefix := (strings.Repeat $unindent \" \") -}}\n+      {{- range $line := split $match \"\\n\" -}}\n+        {{- $line = strings.TrimPrefix $prefix $line -}}\n+        {{ $output = printf \"%s%s\\n\" $output $line }}\n+      {{- end -}}\n+      {{- $output = chomp $output -}}\n+    {{- else -}}\n+      {{- $output = $match -}}\n+    {{- end -}}\n+    {{- highlight $output \"scss\" \"\" -}}\n   </div>\n {{- end -}}",
    "output": "docs: `scss-docs` unindent automatically the code inside shortcode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/javascript.md b/site/content/docs/5.3/getting-started/javascript.md\nindex f80e6f26a..827cd2199 100644\n--- a/site/content/docs/5.3/getting-started/javascript.md\n+++ b/site/content/docs/5.3/getting-started/javascript.md\n@@ -65,7 +65,7 @@ To fix this, you can use an `importmap` to resolve the arbitrary module names to\n   </head>\n   <body>\n     <h1>Hello, modularity!</h1>\n-    <button id=\"popoverButton\" type=\"button\" class=\"btn btn-primary btn-lg\" class=\"btn btn-lg btn-danger\" data-bs-toggle=\"popover\" title=\"ESM in Browser\" data-bs-content=\"Bang!\">Custom popover</button>\n+    <button id=\"popoverButton\" type=\"button\" class=\"btn btn-primary btn-lg\" data-bs-toggle=\"popover\" title=\"ESM in Browser\" data-bs-content=\"Bang!\">Custom popover</button>\n \n     <script async src=\"https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js\" crossorigin=\"anonymous\"></script>\n     <script type=\"importmap\">",
    "output": "docs: fix two class attributes on same button (#38317)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 9a2fc91e5..f2a3d87a8 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -2,6 +2,8 @@ name: BrowserStack\n \n on:\n   push:\n+    branches:\n+      - main\n   workflow_dispatch:\n \n env:\n@@ -14,7 +16,7 @@ permissions:\n jobs:\n   browserstack:\n     runs-on: ubuntu-latest\n-    if: github.repository == 'twbs/bootstrap' && (!contains(github.event.commits[0].message, '[ci skip]') && !contains(github.event.commits[0].message, '[skip ci]'))\n+    if: github.repository == 'twbs/bootstrap'\n     timeout-minutes: 30\n \n     steps:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 2add86c49..c02a37ed9 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -2,8 +2,8 @@ name: Bundlewatch\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex 1d946981c..11788e3cc 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -2,8 +2,8 @@ name: cspell\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex f8da71b31..66112a96c 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -2,8 +2,8 @@ name: CSS\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex bdeae6043..2a684f618 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -2,8 +2,8 @@ name: Docs\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex d24cff976..805b1b7b1 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -2,8 +2,8 @@ name: JS Tests\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 51ee18999..fd62b418b 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -2,8 +2,8 @@ name: Lint\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex dc687ca46..fb4d4944c 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -2,8 +2,8 @@ name: CSS (node-sass)\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n ",
    "output": "ci: limit the on push triggers (#38291)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 642813a97..d24cff976 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -45,7 +45,7 @@ jobs:\n         run: npm run js-test\n \n       - name: Run Coveralls\n-        uses: coverallsapp/github-action@v1.2.4\n+        uses: coverallsapp/github-action@v2\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"",
    "output": "build(deps): Bump coverallsapp/github-action from 1.2.4 to 2.0.0 (#38288)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e4d7fccb5..cf12c3701 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.19.1\",\n+        \"rollup\": \"^3.20.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.59.3\",\n@@ -9343,9 +9343,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.19.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.19.1.tgz\",\n-      \"integrity\": \"sha512-lAbrdN7neYCg/8WaoWn/ckzCtz+jr70GFfYdlf50OF7387HTg+wiuiqJRFYawwSPpqfqDNYqK7smY/ks2iAudg==\",\n+      \"version\": \"3.20.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.0.tgz\",\n+      \"integrity\": \"sha512-YsIfrk80NqUDrxrjWPXUa7PWvAfegZEXHuPsEZg58fGCdjL1I9C1i/NaG+L+27kxxwkrG/QEDEQc8s/ynXWWGQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17816,9 +17816,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.19.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.19.1.tgz\",\n-      \"integrity\": \"sha512-lAbrdN7neYCg/8WaoWn/ckzCtz+jr70GFfYdlf50OF7387HTg+wiuiqJRFYawwSPpqfqDNYqK7smY/ks2iAudg==\",\n+      \"version\": \"3.20.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.20.0.tgz\",\n+      \"integrity\": \"sha512-YsIfrk80NqUDrxrjWPXUa7PWvAfegZEXHuPsEZg58fGCdjL1I9C1i/NaG+L+27kxxwkrG/QEDEQc8s/ynXWWGQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 563edbd15..884740252 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.19.1\",\n+    \"rollup\": \"^3.20.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.59.3\",",
    "output": "build(deps-dev): Bump rollup from 3.19.1 to 3.20.0 (#38290)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 6d5e76397..e4d7fccb5 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^4.0.6\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.101.0\",\n+        \"hugo-bin\": \"^0.101.2\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.6.4\",\n@@ -5982,10 +5982,16 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.101.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.0.tgz\",\n-      \"integrity\": \"sha512-gXMrXc9RBgtt0kNR7UvzkIpdLeU7gtxswRv1rDfIH6RRApRDcM/goN8+TG91KOLmiwIl0QJhPNdW/8h2KfnS2Q==\",\n+      \"version\": \"0.101.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.2.tgz\",\n+      \"integrity\": \"sha512-BnDDz7Fjw30V3Wq+KgzK1QJZCArfKM7yAE8U2PKDeG0j1GqNMIVpN2K/L2b3rwxF94Dm+hZ//M71OG+/Hp8DOg==\",\n       \"dev\": true,\n+      \"funding\": [\n+        {\n+          \"type\": \"github\",\n+          \"url\": \"https://github.com/sponsors/XhmikosR\"\n+        }\n+      ],\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.0\",\n@@ -15392,9 +15398,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.101.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.0.tgz\",\n-      \"integrity\": \"sha512-gXMrXc9RBgtt0kNR7UvzkIpdLeU7gtxswRv1rDfIH6RRApRDcM/goN8+TG91KOLmiwIl0QJhPNdW/8h2KfnS2Q==\",\n+      \"version\": \"0.101.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.101.2.tgz\",\n+      \"integrity\": \"sha512-BnDDz7Fjw30V3Wq+KgzK1QJZCArfKM7yAE8U2PKDeG0j1GqNMIVpN2K/L2b3rwxF94Dm+hZ//M71OG+/Hp8DOg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^5.0.0\",\ndiff --git a/package.json b/package.json\nindex f6e932996..563edbd15 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^4.0.6\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.101.0\",\n+    \"hugo-bin\": \"^0.101.2\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.6.4\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.101.0 to 0.101.2 (#38289)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_masthead.scss b/site/assets/scss/_masthead.scss\nindex b42d8c54e..33015d681 100644\n--- a/site/assets/scss/_masthead.scss\n+++ b/site/assets/scss/_masthead.scss\n@@ -10,6 +10,7 @@\n   // stylelint-enable\n \n   h1 {\n+    --bs-heading-color: var(--bs-emphasis-color);\n     @include font-size(4rem);\n   }\n \n@@ -64,6 +65,12 @@\n }\n \n .masthead-followup {\n+  h2,\n+  h3,\n+  h4 {\n+    --bs-heading-color: var(--bs-emphasis-color);\n+  }\n+\n   .lead {\n     @include font-size(1rem);\n   }",
    "output": "docs: make all headings use `var(--bs-emphasis-color)` (#38262)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex adb1b9f68..6d5e76397 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -42,7 +42,7 @@\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.101.0\",\n         \"ip\": \"^2.0.0\",\n-        \"jasmine\": \"^4.5.0\",\n+        \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.6.4\",\n         \"karma\": \"^6.4.1\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n@@ -6757,22 +6757,22 @@\n       }\n     },\n     \"node_modules/jasmine\": {\n-      \"version\": \"4.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/jasmine/-/jasmine-4.5.0.tgz\",\n-      \"integrity\": \"sha512-9olGRvNZyADIwYL9XBNBst5BTU/YaePzuddK+YRslc7rI9MdTIE4r3xaBKbv2GEmzYYUfMOdTR8/i6JfLZaxSQ==\",\n+      \"version\": \"4.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jasmine/-/jasmine-4.6.0.tgz\",\n+      \"integrity\": \"sha512-iq7HQ5M8ydNUspjd9vbFW9Lu+6lQ1QLDIqjl0WysEllF5EJZy8XaUyNlhCJVwOx2YFzqTtARWbS56F/f0PzRFw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"glob\": \"^7.1.6\",\n-        \"jasmine-core\": \"^4.5.0\"\n+        \"jasmine-core\": \"^4.6.0\"\n       },\n       \"bin\": {\n         \"jasmine\": \"bin/jasmine.js\"\n       }\n     },\n     \"node_modules/jasmine-core\": {\n-      \"version\": \"4.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/jasmine-core/-/jasmine-core-4.5.0.tgz\",\n-      \"integrity\": \"sha512-9PMzyvhtocxb3aXJVOPqBDswdgyAeSB81QnLop4npOpbqnheaTEwPc9ZloQeVswugPManznQBjD8kWDTjlnHuw==\",\n+      \"version\": \"4.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jasmine-core/-/jasmine-core-4.6.0.tgz\",\n+      \"integrity\": \"sha512-O236+gd0ZXS8YAjFx8xKaJ94/erqUliEkJTDedyE7iHvv4ZVqi+q+8acJxu05/WJDKm512EUNn809In37nWlAQ==\",\n       \"dev\": true\n     },\n     \"node_modules/jest-diff\": {\n@@ -15935,19 +15935,19 @@\n       }\n     },\n     \"jasmine\": {\n-      \"version\": \"4.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/jasmine/-/jasmine-4.5.0.tgz\",\n-      \"integrity\": \"sha512-9olGRvNZyADIwYL9XBNBst5BTU/YaePzuddK+YRslc7rI9MdTIE4r3xaBKbv2GEmzYYUfMOdTR8/i6JfLZaxSQ==\",\n+      \"version\": \"4.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jasmine/-/jasmine-4.6.0.tgz\",\n+      \"integrity\": \"sha512-iq7HQ5M8ydNUspjd9vbFW9Lu+6lQ1QLDIqjl0WysEllF5EJZy8XaUyNlhCJVwOx2YFzqTtARWbS56F/f0PzRFw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"glob\": \"^7.1.6\",\n-        \"jasmine-core\": \"^4.5.0\"\n+        \"jasmine-core\": \"^4.6.0\"\n       }\n     },\n     \"jasmine-core\": {\n-      \"version\": \"4.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/jasmine-core/-/jasmine-core-4.5.0.tgz\",\n-      \"integrity\": \"sha512-9PMzyvhtocxb3aXJVOPqBDswdgyAeSB81QnLop4npOpbqnheaTEwPc9ZloQeVswugPManznQBjD8kWDTjlnHuw==\",\n+      \"version\": \"4.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/jasmine-core/-/jasmine-core-4.6.0.tgz\",\n+      \"integrity\": \"sha512-O236+gd0ZXS8YAjFx8xKaJ94/erqUliEkJTDedyE7iHvv4ZVqi+q+8acJxu05/WJDKm512EUNn809In37nWlAQ==\",\n       \"dev\": true\n     },\n     \"jest-diff\": {\ndiff --git a/package.json b/package.json\nindex 74baa7fa2..f6e932996 100644\n--- a/package.json\n+++ b/package.json\n@@ -126,7 +126,7 @@\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.101.0\",\n     \"ip\": \"^2.0.0\",\n-    \"jasmine\": \"^4.5.0\",\n+    \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.6.4\",\n     \"karma\": \"^6.4.1\",\n     \"karma-browserstack-launcher\": \"1.4.0\",",
    "output": "build(deps-dev): Bump jasmine from 4.5.0 to 4.6.0 (#38267)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 167e87f6f..125e047d9 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -37,7 +37,7 @@\n         \"eslint-plugin-import\": \"^2.27.5\",\n         \"eslint-plugin-markdown\": \"^3.0.0\",\n         \"eslint-plugin-unicorn\": \"^46.0.0\",\n-        \"find-unused-sass-variables\": \"^4.0.5\",\n+        \"find-unused-sass-variables\": \"^4.0.6\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.101.0\",\n@@ -5243,17 +5243,17 @@\n       }\n     },\n     \"node_modules/find-unused-sass-variables\": {\n-      \"version\": \"4.0.5\",\n-      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.5.tgz\",\n-      \"integrity\": \"sha512-g/VikpyoOi3bpGnNQDhaqeOJtp+qvK6xNJXEOe/M+FFRpR6X74f2/R+x95WaLE+BemFlJBS5IXqs6hw6a8HCzQ==\",\n+      \"version\": \"4.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.6.tgz\",\n+      \"integrity\": \"sha512-LLmve6yEAvkjCSji2JuY4LEEMvD5a1NBQPu05oSK1vVfJUx8cZW6K/gDyfYZt0B1FnCiz7cJsa3DAZfTHsEdUg==\",\n       \"dev\": true,\n       \"dependencies\": {\n-        \"commander\": \"^9.4.1\",\n+        \"commander\": \"^9.5.0\",\n         \"escape-string-regexp\": \"^5.0.0\",\n         \"glob\": \"^7.2.3\",\n         \"picocolors\": \"^1.0.0\",\n-        \"postcss\": \"^8.4.19\",\n-        \"postcss-scss\": \"^4.0.5\"\n+        \"postcss\": \"^8.4.21\",\n+        \"postcss-scss\": \"^4.0.6\"\n       },\n       \"bin\": {\n         \"find-unused-sass-variables\": \"cli.js\",\n@@ -14864,17 +14864,17 @@\n       }\n     },\n     \"find-unused-sass-variables\": {\n-      \"version\": \"4.0.5\",\n-      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.5.tgz\",\n-      \"integrity\": \"sha512-g/VikpyoOi3bpGnNQDhaqeOJtp+qvK6xNJXEOe/M+FFRpR6X74f2/R+x95WaLE+BemFlJBS5IXqs6hw6a8HCzQ==\",\n+      \"version\": \"4.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-4.0.6.tgz\",\n+      \"integrity\": \"sha512-LLmve6yEAvkjCSji2JuY4LEEMvD5a1NBQPu05oSK1vVfJUx8cZW6K/gDyfYZt0B1FnCiz7cJsa3DAZfTHsEdUg==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"commander\": \"^9.4.1\",\n+        \"commander\": \"^9.5.0\",\n         \"escape-string-regexp\": \"^5.0.0\",\n         \"glob\": \"^7.2.3\",\n         \"picocolors\": \"^1.0.0\",\n-        \"postcss\": \"^8.4.19\",\n-        \"postcss-scss\": \"^4.0.5\"\n+        \"postcss\": \"^8.4.21\",\n+        \"postcss-scss\": \"^4.0.6\"\n       },\n       \"dependencies\": {\n         \"commander\": {\ndiff --git a/package.json b/package.json\nindex 12748b9dc..dfb5a3c24 100644\n--- a/package.json\n+++ b/package.json\n@@ -121,7 +121,7 @@\n     \"eslint-plugin-import\": \"^2.27.5\",\n     \"eslint-plugin-markdown\": \"^3.0.0\",\n     \"eslint-plugin-unicorn\": \"^46.0.0\",\n-    \"find-unused-sass-variables\": \"^4.0.5\",\n+    \"find-unused-sass-variables\": \"^4.0.6\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.101.0\",",
    "output": "build(deps-dev): Bump find-unused-sass-variables from 4.0.5 to 4.0.6 (#38269)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 381fd139b..167e87f6f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.19.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.59.2\",\n+        \"sass\": \"^1.59.3\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.1\",\n@@ -9461,9 +9461,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.59.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.59.2.tgz\",\n-      \"integrity\": \"sha512-jJyO6SmbzkJexF8MUorHx5tAilcgabioYxT/BHbY4+OvoqmbHxsYlrjZ8Adhqcgl6Zqwie0TgMXLCAmPFxXOuw==\",\n+      \"version\": \"1.59.3\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.59.3.tgz\",\n+      \"integrity\": \"sha512-QCq98N3hX1jfTCoUAsF3eyGuXLsY7BCnCEg9qAact94Yc21npG2/mVOqoDvE0fCbWDqiM4WlcJQla0gWG2YlxQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17882,9 +17882,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.59.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.59.2.tgz\",\n-      \"integrity\": \"sha512-jJyO6SmbzkJexF8MUorHx5tAilcgabioYxT/BHbY4+OvoqmbHxsYlrjZ8Adhqcgl6Zqwie0TgMXLCAmPFxXOuw==\",\n+      \"version\": \"1.59.3\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.59.3.tgz\",\n+      \"integrity\": \"sha512-QCq98N3hX1jfTCoUAsF3eyGuXLsY7BCnCEg9qAact94Yc21npG2/mVOqoDvE0fCbWDqiM4WlcJQla0gWG2YlxQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex b0ef4382c..12748b9dc 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.19.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.59.2\",\n+    \"sass\": \"^1.59.3\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.1\",",
    "output": "build(deps-dev): Bump sass from 1.59.2 to 1.59.3 (#38265)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/close-button.md b/site/content/docs/5.3/components/close-button.md\nindex 033958ded..533271b49 100644\n--- a/site/content/docs/5.3/components/close-button.md\n+++ b/site/content/docs/5.3/components/close-button.md\n@@ -24,7 +24,9 @@ Disabled close buttons change their `opacity`. We've also applied `pointer-event\n \n ## Dark variant\n \n-{{< callout info >}}\n+{{< deprecated-in \"5.3.0\" >}}\n+\n+{{< callout warning >}}\n **Heads up!** As of v5.3.0, the `.btn-close-white` class is deprecated. Instead, use `data-bs-theme=\"dark\"` to change the color mode of the close button.\n {{< /callout >}}\n ",
    "output": "docs: consistent deprecation messages in Close Button dark variant (#38247)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_masthead.scss b/site/assets/scss/_masthead.scss\nindex 4ca5068bc..b42d8c54e 100644\n--- a/site/assets/scss/_masthead.scss\n+++ b/site/assets/scss/_masthead.scss\n@@ -99,7 +99,7 @@\n \n .animate-img {\n   > img {\n-    transition: .2s ease-in-out transform; // stylelint-disable-line property-disallowed-list\n+    @include transition(transform .2s ease-in-out);\n   }\n \n   &:hover > img {\ndiff --git a/site/assets/scss/_navbar.scss b/site/assets/scss/_navbar.scss\nindex 5a1c529ca..110797b98 100644\n--- a/site/assets/scss/_navbar.scss\n+++ b/site/assets/scss/_navbar.scss\n@@ -39,7 +39,7 @@\n \n   .navbar-brand {\n     color: $white;\n-    transition: .2s ease-in-out transform; // stylelint-disable-line property-disallowed-list\n+    @include transition(transform .2s ease-in-out);\n \n     &:hover {\n       transform: rotate(-5deg) scale(1.1);\ndiff --git a/site/assets/scss/_variables.scss b/site/assets/scss/_variables.scss\nindex 3770e81d8..5e8ab5d6c 100644\n--- a/site/assets/scss/_variables.scss\n+++ b/site/assets/scss/_variables.scss\n@@ -2,7 +2,7 @@\n $bd-purple:        #4c0bce;\n $bd-violet:        lighten(saturate($bd-purple, 5%), 15%); // stylelint-disable-line function-disallowed-list\n $bd-purple-light:  lighten(saturate($bd-purple, 5%), 45%); // stylelint-disable-line function-disallowed-list\n-$bd-accent:       #ffe484;\n+$bd-accent:        #ffe484;\n \n $bd-gutter-x: 3rem;\n $bd-callout-variants: info, warning, danger !default;",
    "output": "docs: use core mixins in a couple of places (#38236)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 10d6da330..642813a97 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -45,7 +45,7 @@ jobs:\n         run: npm run js-test\n \n       - name: Run Coveralls\n-        uses: coverallsapp/github-action@v1.2.2\n+        uses: coverallsapp/github-action@v1.2.4\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"",
    "output": "build(deps): Bump coverallsapp/github-action from 1.2.2 to 1.2.4 (#38183)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a2aeb431e..3cb6197ef 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -36,7 +36,7 @@\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.27.5\",\n         \"eslint-plugin-markdown\": \"^3.0.0\",\n-        \"eslint-plugin-unicorn\": \"^45.0.2\",\n+        \"eslint-plugin-unicorn\": \"^46.0.0\",\n         \"find-unused-sass-variables\": \"^4.0.5\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n@@ -4534,9 +4534,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-unicorn\": {\n-      \"version\": \"45.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-45.0.2.tgz\",\n-      \"integrity\": \"sha512-Y0WUDXRyGDMcKLiwgL3zSMpHrXI00xmdyixEGIg90gHnj0PcHY4moNv3Ppje/kDivdAy5vUeUr7z211ImPv2gw==\",\n+      \"version\": \"46.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-46.0.0.tgz\",\n+      \"integrity\": \"sha512-j07WkC+PFZwk8J33LYp6JMoHa1lXc1u6R45pbSAipjpfpb7KIGr17VE2D685zCxR5VL4cjrl65kTJflziQWMDA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-validator-identifier\": \"^7.19.1\",\n@@ -14284,9 +14284,9 @@\n       }\n     },\n     \"eslint-plugin-unicorn\": {\n-      \"version\": \"45.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-45.0.2.tgz\",\n-      \"integrity\": \"sha512-Y0WUDXRyGDMcKLiwgL3zSMpHrXI00xmdyixEGIg90gHnj0PcHY4moNv3Ppje/kDivdAy5vUeUr7z211ImPv2gw==\",\n+      \"version\": \"46.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-46.0.0.tgz\",\n+      \"integrity\": \"sha512-j07WkC+PFZwk8J33LYp6JMoHa1lXc1u6R45pbSAipjpfpb7KIGr17VE2D685zCxR5VL4cjrl65kTJflziQWMDA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/helper-validator-identifier\": \"^7.19.1\",\ndiff --git a/package.json b/package.json\nindex b9ca44a0c..5c62d7f0e 100644\n--- a/package.json\n+++ b/package.json\n@@ -121,7 +121,7 @@\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.27.5\",\n     \"eslint-plugin-markdown\": \"^3.0.0\",\n-    \"eslint-plugin-unicorn\": \"^45.0.2\",\n+    \"eslint-plugin-unicorn\": \"^46.0.0\",\n     \"find-unused-sass-variables\": \"^4.0.5\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-unicorn from 45.0.2 to 46.0.0 (#38187)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3f7a2cf98..a2aeb431e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -54,7 +54,7 @@\n         \"karma-jasmine-html-reporter\": \"^2.0.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.10.1\",\n-        \"nodemon\": \"^2.0.20\",\n+        \"nodemon\": \"^2.0.21\",\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n@@ -7547,9 +7547,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nodemon\": {\n-      \"version\": \"2.0.20\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-2.0.20.tgz\",\n-      \"integrity\": \"sha512-Km2mWHKKY5GzRg6i1j5OxOHQtuvVsgskLfigG25yTtbyfRGn/GNvIbRyOf1PSCKJ2aT/58TiuUsuOU5UToVViw==\",\n+      \"version\": \"2.0.21\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-2.0.21.tgz\",\n+      \"integrity\": \"sha512-djN/n2549DUtY33S7o1djRCd7dEm0kBnj9c7S9XVXqRUbuggN1MZH/Nqa+5RFQr63Fbefq37nFXAE9VU86yL1A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \"^3.5.2\",\n@@ -16433,9 +16433,9 @@\n       \"dev\": true\n     },\n     \"nodemon\": {\n-      \"version\": \"2.0.20\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-2.0.20.tgz\",\n-      \"integrity\": \"sha512-Km2mWHKKY5GzRg6i1j5OxOHQtuvVsgskLfigG25yTtbyfRGn/GNvIbRyOf1PSCKJ2aT/58TiuUsuOU5UToVViw==\",\n+      \"version\": \"2.0.21\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-2.0.21.tgz\",\n+      \"integrity\": \"sha512-djN/n2549DUtY33S7o1djRCd7dEm0kBnj9c7S9XVXqRUbuggN1MZH/Nqa+5RFQr63Fbefq37nFXAE9VU86yL1A==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \"^3.5.2\",\ndiff --git a/package.json b/package.json\nindex a3845553b..b9ca44a0c 100644\n--- a/package.json\n+++ b/package.json\n@@ -139,7 +139,7 @@\n     \"karma-jasmine-html-reporter\": \"^2.0.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.10.1\",\n-    \"nodemon\": \"^2.0.20\",\n+    \"nodemon\": \"^2.0.21\",\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",",
    "output": "build(deps-dev): Bump nodemon from 2.0.20 to 2.0.21 (#38186)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/dropdowns.md b/site/content/docs/5.3/components/dropdowns.md\nindex 19719a9f2..098882064 100644\n--- a/site/content/docs/5.3/components/dropdowns.md\n+++ b/site/content/docs/5.3/components/dropdowns.md\n@@ -1025,7 +1025,7 @@ Variables for the CSS-based carets that indicate a dropdown's interactivity:\n \n {{< scss-docs name=\"caret-variables\" file=\"scss/_variables.scss\" >}}\n \n-### Mixins\n+### Sass mixins\n \n Mixins are used to generate the CSS-based carets and can be found in `scss/mixins/_caret.scss`.\n \ndiff --git a/site/content/docs/5.3/components/modal.md b/site/content/docs/5.3/components/modal.md\nindex 6471673f5..e723a49ce 100644\n--- a/site/content/docs/5.3/components/modal.md\n+++ b/site/content/docs/5.3/components/modal.md\n@@ -786,7 +786,7 @@ As part of Bootstrap's evolving CSS variables approach, modals now use local CSS\n \n {{< scss-docs name=\"modal-variables\" file=\"scss/_variables.scss\" >}}\n \n-### Loop\n+### Sass loop\n \n [Responsive fullscreen modals](#fullscreen-modal) are generated via the `$breakpoints` map and a loop in `scss/_modal.scss`.\n \ndiff --git a/site/content/docs/5.3/components/placeholders.md b/site/content/docs/5.3/components/placeholders.md\nindex 6faf51e08..3dca3476b 100644\n--- a/site/content/docs/5.3/components/placeholders.md\n+++ b/site/content/docs/5.3/components/placeholders.md\n@@ -138,8 +138,8 @@ Animate placeholders with `.placeholder-glow` or `.placeholder-wave` to better c\n </p>\n {{< /example >}}\n \n-## Sass\n+## CSS\n \n-### Variables\n+### Sass variables\n \n {{< scss-docs name=\"placeholders\" file=\"scss/_variables.scss\" >}}\ndiff --git a/site/content/docs/5.3/content/images.md b/site/content/docs/5.3/content/images.md\nindex b55e7a2b8..02795617f 100644\n--- a/site/content/docs/5.3/content/images.md\n+++ b/site/content/docs/5.3/content/images.md\n@@ -54,9 +54,9 @@ If you are using the `<picture>` element to specify multiple `<source>` elements\n </picture>\n ```\n \n-## Sass\n+## CSS\n \n-### Variables\n+### Sass variables\n \n Variables are available for image thumbnails.\n \ndiff --git a/site/content/docs/5.3/forms/floating-labels.md b/site/content/docs/5.3/forms/floating-labels.md\nindex 6b33fb67b..a65a85797 100644\n--- a/site/content/docs/5.3/forms/floating-labels.md\n+++ b/site/content/docs/5.3/forms/floating-labels.md\n@@ -173,8 +173,8 @@ When working with the Bootstrap grid system, be sure to place form elements with\n </div>\n {{< /example >}}\n \n-## Sass\n+## CSS\n \n-### Variables\n+### Sass variables\n \n {{< scss-docs name=\"form-floating-variables\" file=\"scss/_variables.scss\" >}}",
    "output": "docs: consistent usage of CSS sections (#38175)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/placeholders.md b/site/content/docs/5.3/components/placeholders.md\nindex 5ebaab3aa..6faf51e08 100644\n--- a/site/content/docs/5.3/components/placeholders.md\n+++ b/site/content/docs/5.3/components/placeholders.md\n@@ -38,7 +38,7 @@ In the example below, we take a typical card component and recreate it with plac\n       <span class=\"placeholder col-6\"></span>\n       <span class=\"placeholder col-8\"></span>\n     </p>\n-    <a href=\"#\" tabindex=\"-1\" class=\"btn btn-primary disabled placeholder col-6\"></a>\n+    <a class=\"btn btn-primary disabled placeholder col-6\"></a>\n   </div>\n </div>\n </div>\n@@ -67,7 +67,7 @@ In the example below, we take a typical card component and recreate it with plac\n       <span class=\"placeholder col-6\"></span>\n       <span class=\"placeholder col-8\"></span>\n     </p>\n-    <a href=\"#\" tabindex=\"-1\" class=\"btn btn-primary disabled placeholder col-6\"></a>\n+    <a class=\"btn btn-primary disabled placeholder col-6\"></a>\n   </div>\n </div>\n ```\n@@ -83,7 +83,7 @@ We apply additional styling to `.btn`s via `::before` to ensure the `height` is\n   <span class=\"placeholder col-6\"></span>\n </p>\n \n-<a href=\"#\" tabindex=\"-1\" class=\"btn btn-primary disabled placeholder col-4\" aria-hidden=\"true\"></a>\n+<a class=\"btn btn-primary disabled placeholder col-4\"></a>\n {{< /example >}}\n \n {{< callout info >}}",
    "output": "docs: Remove unnecessary `href` and `tabindex=\"-1\"` (#38196)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/color-modes.md b/site/content/docs/5.3/customize/color-modes.md\nindex b59872de5..c6f9bef20 100644\n--- a/site/content/docs/5.3/customize/color-modes.md\n+++ b/site/content/docs/5.3/customize/color-modes.md\n@@ -92,7 +92,7 @@ Our new dark mode option is available to use for all users of Bootstrap, but it'\n \n We use a custom Sass mixin, `color-mode()`, to help you control _how_ color modes are applied. By default, we use a `data` attribute approach, allowing you to create more user-friendly experiences where your visitors can choose to have an automatic dark mode or control their preference (like in our own docs here). This is also an easy and scalable way to add different themes and more custom color modes beyond light and dark.\n \n-In case you want to use media queries and only make color modes automatic, you can change the mixin's default type via Sass variable. Consider the following snippet and it's compiled CSS output.\n+In case you want to use media queries and only make color modes automatic, you can change the mixin's default type via Sass variable. Consider the following snippet and its compiled CSS output.\n \n ```scss\n $color-mode-type: data;",
    "output": "docs: fix typo in Color modes page (#38198)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 0321e9661..afca35155 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -69,7 +69,7 @@ If you're migrating from our previous alpha release of v5.3.0, please reviewing\n \n ### Docs\n \n-- Examples are now displayed with the appropriate light or dark color mode as dictated by the setting in our docs. However, they lack an individual color mode picker for the time being.\n+- Examples are now displayed with the appropriate light or dark color mode as dictated by the setting in our docs. Each example has an individual color mode picker.\n \n - Improved included JavaScript for live Toast demo.\n \n@@ -150,7 +150,7 @@ Learn more by reading the new [color modes documentation]({{< docsref \"/customiz\n \n #### Dropdowns\n \n-- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `.dropdown-menu-dark` class has been deprecated and replaced with `data-bs-theme=\"dark\"` on the close button or any parent element. [See the docs for an example.]({{< docsref \"/components/dropdowns#dark-dropdowns\" >}})\n+- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `.dropdown-menu-dark` class has been deprecated and replaced with `data-bs-theme=\"dark\"` on the dropdown or any parent element. [See the docs for an example.]({{< docsref \"/components/dropdowns#dark-dropdowns\" >}})\n \n #### Close button\n ",
    "output": "docs: minor modifications in our migration guide for the v5.3.0-alpha2 (#38177)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/examples/_index.md b/site/content/docs/5.3/examples/_index.md\nindex 1b7121e9e..4ab6ffe5b 100644\n--- a/site/content/docs/5.3/examples/_index.md\n+++ b/site/content/docs/5.3/examples/_index.md\n@@ -23,7 +23,7 @@ aliases: \"/examples/\"\n     {{ if (eq $i 0) }}<div class=\"row\">{{ end }}\n       {{ if $entry.external }}\n         <div class=\"col-md-6 col-lg-4 mb-3 d-flex gap-3\">\n-          <svg class=\"bi fs-5 flex-shrink-0\"><use xlink:href=\"#box-seam\"></use></svg>\n+          <svg class=\"bi fs-5 flex-shrink-0 mt-1\"><use xlink:href=\"#box-seam\"></use></svg>\n           <div>\n             <h3 class=\"h5 mb-1\">\n               <a class=\"d-block link-offset-1\" href=\"{{ $.Site.Params.github_org }}{{ $example.url }}/\" target=\"_blank\">",
    "output": "docs: vertically align starters images in example page (#38179)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_clipboard-js.scss b/site/assets/scss/_clipboard-js.scss\nindex 97b454e03..de709d09b 100644\n--- a/site/assets/scss/_clipboard-js.scss\n+++ b/site/assets/scss/_clipboard-js.scss\n@@ -39,6 +39,6 @@\n .btn-clipboard {\n   position: relative;\n   z-index: 2;\n-  margin-top: .75rem;\n+  margin-top: 1.25rem;\n   margin-right: .75rem;\n }\ndiff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex bc75559aa..14adbe94d 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -359,10 +359,11 @@\n   }\n \n   pre {\n-    padding: 0;\n-    margin-top: .625rem;\n+    padding: .25rem 0 .875rem;\n+    margin-top: .8125rem;\n     margin-right: 1.875rem;\n-    margin-bottom: .625rem;\n+    margin-bottom: 0;\n+    overflow: overlay;\n     white-space: pre;\n     background-color: transparent;\n     border: 0;\ndiff --git a/site/assets/scss/_masthead.scss b/site/assets/scss/_masthead.scss\nindex d39f640ae..4ca5068bc 100644\n--- a/site/assets/scss/_masthead.scss\n+++ b/site/assets/scss/_masthead.scss\n@@ -36,10 +36,18 @@\n     @include media-breakpoint-up(lg) {\n       padding-right: 4rem;\n     }\n+\n+    pre {\n+      padding: 0;\n+      margin-top: .625rem;\n+      margin-right: 1.875rem;\n+      margin-bottom: .625rem;\n+      overflow: hidden;\n+    }\n   }\n   .btn-clipboard {\n     position: absolute;\n-    top: -.125rem;\n+    top: -.625rem;\n     right: 0;\n     background-color: transparent;\n   }",
    "output": "docs: fix overflow:auto horizontal scrollbars covering last line of code blocks (#37694)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/colors.md b/site/content/docs/5.3/utilities/colors.md\nindex 8f27d826c..3aa551550 100644\n--- a/site/content/docs/5.3/utilities/colors.md\n+++ b/site/content/docs/5.3/utilities/colors.md\n@@ -25,9 +25,8 @@ Color utilities like `.text-*` that generated from our original `$theme-colors`\n <p class=\"text-{{ .name }}-emphasis\">.text-{{ .name }}-emphasis</p>\n {{- end -}}\n {{< /colors.inline >}}\n-<p class=\"text-body\">.text-body</p>\n-<p class=\"text-body-secondary\">.text-body-secondary</p>\n \n+<p class=\"text-body\">.text-body</p>\n <p class=\"text-body-emphasis\">.text-body-emphasis</p>\n <p class=\"text-body-secondary\">.text-body-secondary</p>\n <p class=\"text-body-tertiary\">.text-body-tertiary</p>",
    "output": "docs: `.text-body-secondary` appears two times in Utilities > Colors"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/tooltips.md b/site/content/docs/5.3/components/tooltips.md\nindex 77a69ff03..1a6a5cc00 100644\n--- a/site/content/docs/5.3/components/tooltips.md\n+++ b/site/content/docs/5.3/components/tooltips.md\n@@ -214,7 +214,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` opt\n | `sanitizeFn` | null, function | `null` | Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization. |\n | `selector` | string, false | `false` | If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (`jQuery.on` support). See [this issue]({{< param repo >}}/issues/4215) and [an informative example](https://codepen.io/Johann-S/pen/djJYPb). **Note**: `title` attribute must not be used as a selector. |\n | `template` | string | `'<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>'` | Base HTML to use when creating the tooltip. The tooltip's `title` will be injected into the `.tooltip-inner`. `.tooltip-arrow` will become the tooltip's arrow. The outermost wrapper element should have the `.tooltip` class and `role=\"tooltip\"`. |\n-| `title` | string, element, function | `''` | Default title value if `title` attribute isn't present. If a function is given, it will be called with its `this` reference set to the element that the popover is attached to. |\n+| `title` | string, element, function | `''` | Default title value if `title` attribute isn't present. If a function is given, it will be called with its `this` reference set to the element that the tooltip is attached to. |\n | `trigger` | string | `'hover focus'` | How tooltip is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. `'manual'` indicates that the tooltip will be triggered programmatically via the `.tooltip('show')`, `.tooltip('hide')` and `.tooltip('toggle')` methods; this value cannot be combined with any other trigger. `'hover'` on its own will result in tooltips that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present. |\n {{< /bs-table >}}\n ",
    "output": "docs: replace 'popover' by 'tooltip' in tooltip's page' options section"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex e13391e14..3cf60aaf2 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -214,9 +214,9 @@ We've also introduced a new `.progress-stacked` class to more logically wrap [mu\n \n ### Utilities\n \n-- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> `.text-body-secondary` will be be replaced by `.text-body-secondary` in v6.\n+- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> `.text-muted` will be be replaced by `.text-body-secondary` in v6.\n \n-  With the addition of the expanded theme colors and variables, the `.text-body-secondary` variables and utility have been deprecated with v5.3.0. Its default value has also has been reassigned to the new `--bs-secondary-color` CSS variable to better support color modes. It will be removed in v6.0.0.\n+  With the addition of the expanded theme colors and variables, the `.text-muted` variables and utility have been deprecated with v5.3.0. Its default value has also has been reassigned to the new `--bs-secondary-color` CSS variable to better support color modes. It will be removed in v6.0.0.\n \n - Adds new `.overflow-x`, `.overflow-y`, and several `.object-fit-*` utilities. _The object-fit property is used to specify how an `<img>` or `<video>` should be resized to fit its container, giving us a responsive alternative to using `background-image` for a resizable fill/fit image._\n \ndiff --git a/site/content/docs/5.3/utilities/colors.md b/site/content/docs/5.3/utilities/colors.md\nindex 2023049d4..8f27d826c 100644\n--- a/site/content/docs/5.3/utilities/colors.md\n+++ b/site/content/docs/5.3/utilities/colors.md\n@@ -43,7 +43,7 @@ Color utilities like `.text-*` that generated from our original `$theme-colors`\n {{< /callout >}}\n \n {{< callout warning >}}\n-**Deprecation:** With the addition of the expanded theme colors and variables, the `.text-body-secondary` utility has been deprecated as of v5.3.0. Its default value has also has been reassigned to the new `--bs-secondary-color` CSS variable to better support color modes. It will be removed in v6.0.0.\n+**Deprecation:** With the addition of the expanded theme colors and variables, the `.text-muted` utility has been deprecated as of v5.3.0. Its default value has also has been reassigned to the new `--bs-secondary-color` CSS variable to better support color modes. It will be removed in v6.0.0.\n {{< /callout >}}\n \n ## Opacity",
    "output": "docs: rollback some modification about `.text-muted` deprecation messages"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex a8994b6cc..10d6da330 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -45,7 +45,7 @@ jobs:\n         run: npm run js-test\n \n       - name: Run Coveralls\n-        uses: coverallsapp/github-action@1.1.3\n+        uses: coverallsapp/github-action@v1.2.2\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"",
    "output": "build(deps): Bump coverallsapp/github-action from 1.1.3 to 1.2.2"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/plugins.html b/site/layouts/partials/home/plugins.html\nindex cf441efa7..ab48d9bc6 100644\n--- a/site/layouts/partials/home/plugins.html\n+++ b/site/layouts/partials/home/plugins.html\n@@ -32,14 +32,14 @@\n       </div>\n \n       {{ highlight (printf `<div class=\"dropdown\">\n-<button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n-  Dropdown\n-</button>\n-<ul class=\"dropdown-menu\">\n-  <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n-  <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n-  <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n-</ul>\n+  <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n+    Dropdown\n+  </button>\n+  <ul class=\"dropdown-menu\">\n+    <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n+    <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n+    <li><button class=\"dropdown-item\" type=\"button\">Dropdown item</button></li>\n+  </ul>\n </div>\n `) \"html\" \"\" }}\n       <p>Learn more about <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/javascript/#using-bootstrap-as-a-module\">our JavaScript as modules</a> and <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/javascript/#programmatic-api\">using the programmatic API</a>.</p>",
    "output": "docs: fix code indentation in homepage JavaScript plugins section (#38112)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex 25385cf8e..bc75559aa 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -404,8 +404,3 @@\n     @include border-top-radius(calc(var(--bs-border-radius) + 1px));\n   }\n }\n-\n-.focused {\n-  outline: 0;\n-  box-shadow: var(--#{$variable-prefix}focus-ring-offset), var(--#{$variable-prefix}focus-ring-x, 0) var(--#{$variable-prefix}focus-ring-y, 0) var(--#{$variable-prefix}focus-ring-blur) var(--#{$variable-prefix}focus-ring-width) var(--#{$variable-prefix}focus-ring-color);\n-}",
    "output": "docs: Drop unused `.focused` style (#38087)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e68882082..3f7a2cf98 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.15.0\",\n+        \"rollup\": \"^3.17.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.58.3\",\n@@ -9192,9 +9192,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.15.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.15.0.tgz\",\n-      \"integrity\": \"sha512-F9hrCAhnp5/zx/7HYmftvsNBkMfLfk/dXUh73hPSM2E3CRgap65orDNJbLetoiUFwSAk6iHPLvBrZ5iHYvzqsg==\",\n+      \"version\": \"3.17.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.17.2.tgz\",\n+      \"integrity\": \"sha512-qMNZdlQPCkWodrAZ3qnJtvCAl4vpQ8q77uEujVCCbC/6CLB7Lcmvjq7HyiOSnf4fxTT9XgsE36oLHJBH49xjqA==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17611,9 +17611,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.15.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.15.0.tgz\",\n-      \"integrity\": \"sha512-F9hrCAhnp5/zx/7HYmftvsNBkMfLfk/dXUh73hPSM2E3CRgap65orDNJbLetoiUFwSAk6iHPLvBrZ5iHYvzqsg==\",\n+      \"version\": \"3.17.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.17.2.tgz\",\n+      \"integrity\": \"sha512-qMNZdlQPCkWodrAZ3qnJtvCAl4vpQ8q77uEujVCCbC/6CLB7Lcmvjq7HyiOSnf4fxTT9XgsE36oLHJBH49xjqA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 5b15324ed..a3845553b 100644\n--- a/package.json\n+++ b/package.json\n@@ -143,7 +143,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.15.0\",\n+    \"rollup\": \"^3.17.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.58.3\",",
    "output": "build(deps-dev): Bump rollup from 3.15.0 to 3.17.2 (#38097)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3258a3925..e68882082 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.15.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.58.1\",\n+        \"sass\": \"^1.58.3\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.1\",\n@@ -9316,9 +9316,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.58.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.1.tgz\",\n-      \"integrity\": \"sha512-bnINi6nPXbP1XNRaranMFEBZWUfdW/AF16Ql5+ypRxfTvCRTTKrLsMIakyDcayUt2t/RZotmL4kgJwNH5xO+bg==\",\n+      \"version\": \"1.58.3\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.3.tgz\",\n+      \"integrity\": \"sha512-Q7RaEtYf6BflYrQ+buPudKR26/lH+10EmO9bBqbmPh/KeLqv8bjpTNqxe71ocONqXq+jYiCbpPUmQMS+JJPk4A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17683,9 +17683,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.58.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.1.tgz\",\n-      \"integrity\": \"sha512-bnINi6nPXbP1XNRaranMFEBZWUfdW/AF16Ql5+ypRxfTvCRTTKrLsMIakyDcayUt2t/RZotmL4kgJwNH5xO+bg==\",\n+      \"version\": \"1.58.3\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.3.tgz\",\n+      \"integrity\": \"sha512-Q7RaEtYf6BflYrQ+buPudKR26/lH+10EmO9bBqbmPh/KeLqv8bjpTNqxe71ocONqXq+jYiCbpPUmQMS+JJPk4A==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex d09e04c93..5b15324ed 100644\n--- a/package.json\n+++ b/package.json\n@@ -146,7 +146,7 @@\n     \"rollup\": \"^3.15.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.58.1\",\n+    \"sass\": \"^1.58.3\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.1\",",
    "output": "build(deps-dev): Bump sass from 1.58.1 to 1.58.3 (#38100)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_scrolling.scss b/site/assets/scss/_scrolling.scss\nnew file mode 100644\nindex 000000000..dcd9f3d39\n--- /dev/null\n+++ b/site/assets/scss/_scrolling.scss\n@@ -0,0 +1,5 @@\n+// When navigating with the keyboard, prevent focus from landing behind the sticky header\n+\n+main *:focus {\n+  scroll-margin-top: 100px;\n+}\ndiff --git a/site/assets/scss/docs.scss b/site/assets/scss/docs.scss\nindex 9d71147a8..fb85262e7 100644\n--- a/site/assets/scss/docs.scss\n+++ b/site/assets/scss/docs.scss\n@@ -52,6 +52,7 @@ $enable-cssgrid: true; // stylelint-disable-line scss/dollar-variable-default\n @import \"colors\";\n @import \"clipboard-js\";\n @import \"placeholder-img\";\n+@import \"scrolling\";\n \n // Load docs dependencies\n @import \"syntax\";",
    "output": "docs: add scroll-margin-top for keyboard navigation"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/config.yml b/config.yml\nindex b217aaa53..983564606 100644\n--- a/config.yml\n+++ b/config.yml\n@@ -82,6 +82,7 @@ params:\n     js_bundle_hash:   \"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\"\n     popper:           \"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\"\n     popper_hash:      \"sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3\"\n+    popper_esm:       \"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/esm/popper.min.js\"\n \n   anchors:\n     min: 2\ndiff --git a/site/content/docs/5.3/getting-started/javascript.md b/site/content/docs/5.3/getting-started/javascript.md\nindex 80eed9ce1..f80e6f26a 100644\n--- a/site/content/docs/5.3/getting-started/javascript.md\n+++ b/site/content/docs/5.3/getting-started/javascript.md\n@@ -71,7 +71,7 @@ To fix this, you can use an `importmap` to resolve the arbitrary module names to\n     <script type=\"importmap\">\n     {\n       \"imports\": {\n-        \"@popperjs/core\": \"{{< param \"cdn.popper\" >}}\",\n+        \"@popperjs/core\": \"{{< param \"cdn.popper_esm\" >}}\",\n         \"bootstrap\": \"https://cdn.jsdelivr.net/npm/bootstrap@{{< param \"current_version\" >}}/dist/js/bootstrap.esm.min.js\"\n       }\n     }",
    "output": "docs: Use ESM Popper CDN reference in 'Using Boottrap as a module'"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d6b1a4d29..3258a3925 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.10.1\",\n+        \"rollup\": \"^3.15.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.58.1\",\n@@ -9192,9 +9192,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.10.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.10.1.tgz\",\n-      \"integrity\": \"sha512-3Er+yel3bZbZX1g2kjVM+FW+RUWDxbG87fcqFM5/9HbPCTpbVp6JOLn7jlxnNlbu7s/N/uDA4EV/91E2gWnxzw==\",\n+      \"version\": \"3.15.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.15.0.tgz\",\n+      \"integrity\": \"sha512-F9hrCAhnp5/zx/7HYmftvsNBkMfLfk/dXUh73hPSM2E3CRgap65orDNJbLetoiUFwSAk6iHPLvBrZ5iHYvzqsg==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17611,9 +17611,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.10.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.10.1.tgz\",\n-      \"integrity\": \"sha512-3Er+yel3bZbZX1g2kjVM+FW+RUWDxbG87fcqFM5/9HbPCTpbVp6JOLn7jlxnNlbu7s/N/uDA4EV/91E2gWnxzw==\",\n+      \"version\": \"3.15.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.15.0.tgz\",\n+      \"integrity\": \"sha512-F9hrCAhnp5/zx/7HYmftvsNBkMfLfk/dXUh73hPSM2E3CRgap65orDNJbLetoiUFwSAk6iHPLvBrZ5iHYvzqsg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex d7a9ab6e8..f5635bd5b 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.10.1\",\n+    \"rollup\": \"^3.15.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.58.1\",",
    "output": "build(deps-dev): Bump rollup from 3.10.1 to 3.15.0"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex fddbb8813..350396995 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -31,7 +31,7 @@\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.2\",\n         \"cross-env\": \"^7.0.3\",\n-        \"eslint\": \"^8.33.0\",\n+        \"eslint\": \"^8.34.0\",\n         \"eslint-config-xo\": \"^0.43.1\",\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.27.5\",\n@@ -4340,9 +4340,9 @@\n       }\n     },\n     \"node_modules/eslint\": {\n-      \"version\": \"8.33.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.33.0.tgz\",\n-      \"integrity\": \"sha512-WjOpFQgKK8VrCnAtl8We0SUOy/oVZ5NHykyMiagV1M9r8IFpIJX7DduK6n1mpfhlG7T1NLWm2SuD8QB7KFySaA==\",\n+      \"version\": \"8.34.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.34.0.tgz\",\n+      \"integrity\": \"sha512-1Z8iFsucw+7kSqXNZVslXS8Ioa4u2KM7GPwuKtkTFAqZ/cHMcEaR+1+Br0wLlot49cNxIiZk5wp8EAbPcYZxTg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\n@@ -14044,9 +14044,9 @@\n       \"dev\": true\n     },\n     \"eslint\": {\n-      \"version\": \"8.33.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.33.0.tgz\",\n-      \"integrity\": \"sha512-WjOpFQgKK8VrCnAtl8We0SUOy/oVZ5NHykyMiagV1M9r8IFpIJX7DduK6n1mpfhlG7T1NLWm2SuD8QB7KFySaA==\",\n+      \"version\": \"8.34.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.34.0.tgz\",\n+      \"integrity\": \"sha512-1Z8iFsucw+7kSqXNZVslXS8Ioa4u2KM7GPwuKtkTFAqZ/cHMcEaR+1+Br0wLlot49cNxIiZk5wp8EAbPcYZxTg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\ndiff --git a/package.json b/package.json\nindex d31ff2b56..b2f8701f7 100644\n--- a/package.json\n+++ b/package.json\n@@ -115,7 +115,7 @@\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.2\",\n     \"cross-env\": \"^7.0.3\",\n-    \"eslint\": \"^8.33.0\",\n+    \"eslint\": \"^8.34.0\",\n     \"eslint-config-xo\": \"^0.43.1\",\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.27.5\",",
    "output": "build(deps-dev): Bump eslint from 8.33.0 to 8.34.0"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 6bc3c5907..fddbb8813 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.10.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.58.0\",\n+        \"sass\": \"^1.58.1\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.1\",\n@@ -9316,9 +9316,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.58.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.0.tgz\",\n-      \"integrity\": \"sha512-PiMJcP33DdKtZ/1jSjjqVIKihoDc6yWmYr9K/4r3fVVIEDAluD0q7XZiRKrNJcPK3qkLRF/79DND1H5q1LBjgg==\",\n+      \"version\": \"1.58.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.1.tgz\",\n+      \"integrity\": \"sha512-bnINi6nPXbP1XNRaranMFEBZWUfdW/AF16Ql5+ypRxfTvCRTTKrLsMIakyDcayUt2t/RZotmL4kgJwNH5xO+bg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17683,9 +17683,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.58.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.0.tgz\",\n-      \"integrity\": \"sha512-PiMJcP33DdKtZ/1jSjjqVIKihoDc6yWmYr9K/4r3fVVIEDAluD0q7XZiRKrNJcPK3qkLRF/79DND1H5q1LBjgg==\",\n+      \"version\": \"1.58.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.1.tgz\",\n+      \"integrity\": \"sha512-bnINi6nPXbP1XNRaranMFEBZWUfdW/AF16Ql5+ypRxfTvCRTTKrLsMIakyDcayUt2t/RZotmL4kgJwNH5xO+bg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex f0d14fd2d..d31ff2b56 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.10.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.58.0\",\n+    \"sass\": \"^1.58.1\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.1\",",
    "output": "build(deps-dev): Bump sass from 1.58.0 to 1.58.1"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/progress.md b/site/content/docs/5.3/components/progress.md\nindex ea9e3d2d2..73f131589 100644\n--- a/site/content/docs/5.3/components/progress.md\n+++ b/site/content/docs/5.3/components/progress.md\n@@ -15,7 +15,7 @@ toc: true\n Progress components are built with two HTML elements, some CSS to set the width, and a few attributes. We don't use [the HTML5 `<progress>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress), ensuring you can stack progress bars, animate them, and place text labels over them.\n \n - We use the `.progress` as a wrapper to indicate the max value of the progress bar.\n-- The `.progress` wrapper also requires a `role=\"progress\"` and `aria` attributes to make it accessible, including an accessible name (using `aria-label`, `aria-labelledby`, or similar).\n+- The `.progress` wrapper also requires a `role=\"progressbar\"` and `aria` attributes to make it accessible, including an accessible name (using `aria-label`, `aria-labelledby`, or similar).\n - We use the inner `.progress-bar` purely for the visual bar and label.\n - The `.progress-bar` requires an inline style, utility class, or custom CSS to set its width.\n - We provide a special `.progress-stacked` class to create multiple/stacked progress bars.\n@@ -57,7 +57,7 @@ Bootstrap provides a handful of [utilities for setting width]({{< docsref \"/util\n You only set a `height` value on the `.progress` container, so if you change that value, the inner `.progress-bar` will automatically resize accordingly.\n \n {{< example >}}\n-<div class=\"progress\"  role=\"progressbar\" aria-label=\"Example 1px high\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"height: 1px\">\n+<div class=\"progress\" role=\"progressbar\" aria-label=\"Example 1px high\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"height: 1px\">\n   <div class=\"progress-bar\" style=\"width: 25%\"></div>\n </div>\n <div class=\"progress\" role=\"progressbar\" aria-label=\"Example 20px high\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"height: 20px\">",
    "output": "docs: Progress fix + proposal (#38014)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/navs-tabs.md b/site/content/docs/5.3/components/navs-tabs.md\nindex ca1effd70..324250664 100644\n--- a/site/content/docs/5.3/components/navs-tabs.md\n+++ b/site/content/docs/5.3/components/navs-tabs.md\n@@ -183,7 +183,7 @@ Take that same HTML, but use `.nav-underline` instead:\n     <a class=\"nav-link\" href=\"#\">Link</a>\n   </li>\n   <li class=\"nav-item\">\n-    <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n+    <a class=\"nav-link disabled\">Disabled</a>\n   </li>\n </ul>\n {{< /example >}}",
    "output": "docs: uniformize disabled nav links for underline nav"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c3cdacd64..6bc3c5907 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.10.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.57.1\",\n+        \"sass\": \"^1.58.0\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.1\",\n@@ -9316,9 +9316,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.57.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.57.1.tgz\",\n-      \"integrity\": \"sha512-O2+LwLS79op7GI0xZ8fqzF7X2m/m8WFfI02dHOdsK5R2ECeS5F62zrwg/relM1rjSLy7Vd/DiMNIvPrQGsA0jw==\",\n+      \"version\": \"1.58.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.0.tgz\",\n+      \"integrity\": \"sha512-PiMJcP33DdKtZ/1jSjjqVIKihoDc6yWmYr9K/4r3fVVIEDAluD0q7XZiRKrNJcPK3qkLRF/79DND1H5q1LBjgg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17683,9 +17683,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.57.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.57.1.tgz\",\n-      \"integrity\": \"sha512-O2+LwLS79op7GI0xZ8fqzF7X2m/m8WFfI02dHOdsK5R2ECeS5F62zrwg/relM1rjSLy7Vd/DiMNIvPrQGsA0jw==\",\n+      \"version\": \"1.58.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.58.0.tgz\",\n+      \"integrity\": \"sha512-PiMJcP33DdKtZ/1jSjjqVIKihoDc6yWmYr9K/4r3fVVIEDAluD0q7XZiRKrNJcPK3qkLRF/79DND1H5q1LBjgg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex e0a5ff79d..f0d14fd2d 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.10.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.57.1\",\n+    \"sass\": \"^1.58.0\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.1\",",
    "output": "build(deps-dev): Bump sass from 1.57.1 to 1.58.0 (#38017)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 781d7128d..c3cdacd64 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -31,7 +31,7 @@\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.2\",\n         \"cross-env\": \"^7.0.3\",\n-        \"eslint\": \"^8.32.0\",\n+        \"eslint\": \"^8.33.0\",\n         \"eslint-config-xo\": \"^0.43.1\",\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.27.5\",\n@@ -4340,9 +4340,9 @@\n       }\n     },\n     \"node_modules/eslint\": {\n-      \"version\": \"8.32.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.32.0.tgz\",\n-      \"integrity\": \"sha512-nETVXpnthqKPFyuY2FNjz/bEd6nbosRgKbkgS/y1C7LJop96gYHWpiguLecMHQ2XCPxn77DS0P+68WzG6vkZSQ==\",\n+      \"version\": \"8.33.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.33.0.tgz\",\n+      \"integrity\": \"sha512-WjOpFQgKK8VrCnAtl8We0SUOy/oVZ5NHykyMiagV1M9r8IFpIJX7DduK6n1mpfhlG7T1NLWm2SuD8QB7KFySaA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\n@@ -14044,9 +14044,9 @@\n       \"dev\": true\n     },\n     \"eslint\": {\n-      \"version\": \"8.32.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.32.0.tgz\",\n-      \"integrity\": \"sha512-nETVXpnthqKPFyuY2FNjz/bEd6nbosRgKbkgS/y1C7LJop96gYHWpiguLecMHQ2XCPxn77DS0P+68WzG6vkZSQ==\",\n+      \"version\": \"8.33.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.33.0.tgz\",\n+      \"integrity\": \"sha512-WjOpFQgKK8VrCnAtl8We0SUOy/oVZ5NHykyMiagV1M9r8IFpIJX7DduK6n1mpfhlG7T1NLWm2SuD8QB7KFySaA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\ndiff --git a/package.json b/package.json\nindex cd4a138af..e0a5ff79d 100644\n--- a/package.json\n+++ b/package.json\n@@ -115,7 +115,7 @@\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.2\",\n     \"cross-env\": \"^7.0.3\",\n-    \"eslint\": \"^8.32.0\",\n+    \"eslint\": \"^8.33.0\",\n     \"eslint-config-xo\": \"^0.43.1\",\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.27.5\",",
    "output": "build(deps-dev): Bump eslint from 8.32.0 to 8.33.0 (#37984)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 845441e8f..781d7128d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.20.2\",\n         \"@popperjs/core\": \"^2.11.6\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^24.0.0\",\n+        \"@rollup/plugin-commonjs\": \"^24.0.1\",\n         \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.13\",\n@@ -1996,9 +1996,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"24.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.0.0.tgz\",\n-      \"integrity\": \"sha512-0w0wyykzdyRRPHOb0cQt14mIBLujfAv6GgP6g8nvg/iBxEm112t3YPPq+Buqe2+imvElTka+bjNlJ/gB56TD8g==\",\n+      \"version\": \"24.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.0.1.tgz\",\n+      \"integrity\": \"sha512-15LsiWRZk4eOGqvrJyu3z3DaBu5BhXIMeWnijSRvd8irrrg9SHpQ1pH+BUK4H6Z9wL9yOxZJMTLU+Au86XHxow==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12270,9 +12270,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"24.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.0.0.tgz\",\n-      \"integrity\": \"sha512-0w0wyykzdyRRPHOb0cQt14mIBLujfAv6GgP6g8nvg/iBxEm112t3YPPq+Buqe2+imvElTka+bjNlJ/gB56TD8g==\",\n+      \"version\": \"24.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-24.0.1.tgz\",\n+      \"integrity\": \"sha512-15LsiWRZk4eOGqvrJyu3z3DaBu5BhXIMeWnijSRvd8irrrg9SHpQ1pH+BUK4H6Z9wL9yOxZJMTLU+Au86XHxow==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 8ae049faf..cd4a138af 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/preset-env\": \"^7.20.2\",\n     \"@popperjs/core\": \"^2.11.6\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^24.0.0\",\n+    \"@rollup/plugin-commonjs\": \"^24.0.1\",\n     \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.13\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 24.0.0 to 24.0.1 (#37945)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 12384e117..845441e8f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^4.0.5\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.97.0\",\n+        \"hugo-bin\": \"^0.98.0\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.5.0\",\n         \"jquery\": \"^3.6.3\",\n@@ -5885,9 +5885,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.97.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.97.0.tgz\",\n-      \"integrity\": \"sha512-k6zr1TIQu/AW4j7WxtqAL3RE2z59PRCo5xvxD+jP/9tEgrRfnyULkbeiK8vfKaj4hB8Gzy1dws1MDNwtkHv3Ww==\",\n+      \"version\": \"0.98.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.98.0.tgz\",\n+      \"integrity\": \"sha512-njaLdSl4DorvQ9uf9SL0Np8s4dn0Sbtrl1+xiBlQCDegtPLgCU4kOgJNl6rhzevxXAl7oMXRrNJROhOVDmNqvA==\",\n       \"dev\": true,\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n@@ -15213,9 +15213,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.97.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.97.0.tgz\",\n-      \"integrity\": \"sha512-k6zr1TIQu/AW4j7WxtqAL3RE2z59PRCo5xvxD+jP/9tEgrRfnyULkbeiK8vfKaj4hB8Gzy1dws1MDNwtkHv3Ww==\",\n+      \"version\": \"0.98.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.98.0.tgz\",\n+      \"integrity\": \"sha512-njaLdSl4DorvQ9uf9SL0Np8s4dn0Sbtrl1+xiBlQCDegtPLgCU4kOgJNl6rhzevxXAl7oMXRrNJROhOVDmNqvA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"bin-wrapper\": \"^4.1.0\",\ndiff --git a/package.json b/package.json\nindex d90252436..8ae049faf 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^4.0.5\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.97.0\",\n+    \"hugo-bin\": \"^0.98.0\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.5.0\",\n     \"jquery\": \"^3.6.3\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.97.0 to 0.98.0 (#37946)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 1081be3fe..12384e117 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -10472,9 +10472,9 @@\n       }\n     },\n     \"node_modules/ua-parser-js\": {\n-      \"version\": \"0.7.32\",\n-      \"resolved\": \"https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.32.tgz\",\n-      \"integrity\": \"sha512-f9BESNVhzlhEFf2CHMSj40NWOjYPl1YKYbrvIr/hFTDEmLq7SRbWvm7FcdcpCYT95zrOhC7gZSxjdnnTpBcwVw==\",\n+      \"version\": \"0.7.33\",\n+      \"resolved\": \"https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.33.tgz\",\n+      \"integrity\": \"sha512-s8ax/CeZdK9R/56Sui0WM6y9OFREJarMRHqLB2EwkovemBxNQ+Bqu8GAsUnVcXKgphb++ghr/B2BZx4mahujPw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -18590,9 +18590,9 @@\n       }\n     },\n     \"ua-parser-js\": {\n-      \"version\": \"0.7.32\",\n-      \"resolved\": \"https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.32.tgz\",\n-      \"integrity\": \"sha512-f9BESNVhzlhEFf2CHMSj40NWOjYPl1YKYbrvIr/hFTDEmLq7SRbWvm7FcdcpCYT95zrOhC7gZSxjdnnTpBcwVw==\",\n+      \"version\": \"0.7.33\",\n+      \"resolved\": \"https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.33.tgz\",\n+      \"integrity\": \"sha512-s8ax/CeZdK9R/56Sui0WM6y9OFREJarMRHqLB2EwkovemBxNQ+Bqu8GAsUnVcXKgphb++ghr/B2BZx4mahujPw==\",\n       \"dev\": true\n     },\n     \"unbox-primitive\": {",
    "output": "build(deps): Bump ua-parser-js from 0.7.32 to 0.7.33 (#37957)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 491904fba..539ac9890 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -31,7 +31,7 @@\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.1\",\n         \"cross-env\": \"^7.0.3\",\n-        \"eslint\": \"^8.31.0\",\n+        \"eslint\": \"^8.32.0\",\n         \"eslint-config-xo\": \"^0.43.1\",\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.27.5\",\n@@ -4340,9 +4340,9 @@\n       }\n     },\n     \"node_modules/eslint\": {\n-      \"version\": \"8.31.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.31.0.tgz\",\n-      \"integrity\": \"sha512-0tQQEVdmPZ1UtUKXjX7EMm9BlgJ08G90IhWh0PKDCb3ZLsgAOHI8fYSIzYVZej92zsgq+ft0FGsxhJ3xo2tbuA==\",\n+      \"version\": \"8.32.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.32.0.tgz\",\n+      \"integrity\": \"sha512-nETVXpnthqKPFyuY2FNjz/bEd6nbosRgKbkgS/y1C7LJop96gYHWpiguLecMHQ2XCPxn77DS0P+68WzG6vkZSQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\n@@ -14044,9 +14044,9 @@\n       \"dev\": true\n     },\n     \"eslint\": {\n-      \"version\": \"8.31.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.31.0.tgz\",\n-      \"integrity\": \"sha512-0tQQEVdmPZ1UtUKXjX7EMm9BlgJ08G90IhWh0PKDCb3ZLsgAOHI8fYSIzYVZej92zsgq+ft0FGsxhJ3xo2tbuA==\",\n+      \"version\": \"8.32.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.32.0.tgz\",\n+      \"integrity\": \"sha512-nETVXpnthqKPFyuY2FNjz/bEd6nbosRgKbkgS/y1C7LJop96gYHWpiguLecMHQ2XCPxn77DS0P+68WzG6vkZSQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@eslint/eslintrc\": \"^1.4.1\",\ndiff --git a/package.json b/package.json\nindex 9d6179d00..df07aea50 100644\n--- a/package.json\n+++ b/package.json\n@@ -115,7 +115,7 @@\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.1\",\n     \"cross-env\": \"^7.0.3\",\n-    \"eslint\": \"^8.31.0\",\n+    \"eslint\": \"^8.32.0\",\n     \"eslint-config-xo\": \"^0.43.1\",\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.27.5\",",
    "output": "build(deps-dev): Bump eslint from 8.31.0 to 8.32.0"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ceb2912b7..491904fba 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.9.1\",\n+        \"rollup\": \"^3.10.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.57.1\",\n@@ -9192,9 +9192,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.9.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.1.tgz\",\n-      \"integrity\": \"sha512-GswCYHXftN8ZKGVgQhTFUJB/NBXxrRGgO2NCy6E8s1rwEJ4Q9/VttNqcYfEvx4dTo4j58YqdC3OVztPzlKSX8w==\",\n+      \"version\": \"3.10.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.10.1.tgz\",\n+      \"integrity\": \"sha512-3Er+yel3bZbZX1g2kjVM+FW+RUWDxbG87fcqFM5/9HbPCTpbVp6JOLn7jlxnNlbu7s/N/uDA4EV/91E2gWnxzw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17611,9 +17611,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.9.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.1.tgz\",\n-      \"integrity\": \"sha512-GswCYHXftN8ZKGVgQhTFUJB/NBXxrRGgO2NCy6E8s1rwEJ4Q9/VttNqcYfEvx4dTo4j58YqdC3OVztPzlKSX8w==\",\n+      \"version\": \"3.10.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.10.1.tgz\",\n+      \"integrity\": \"sha512-3Er+yel3bZbZX1g2kjVM+FW+RUWDxbG87fcqFM5/9HbPCTpbVp6JOLn7jlxnNlbu7s/N/uDA4EV/91E2gWnxzw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 1449d428f..9d6179d00 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.9.1\",\n+    \"rollup\": \"^3.10.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.57.1\",",
    "output": "build(deps-dev): Bump rollup from 3.9.1 to 3.10.1"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/color-modes.md b/site/content/docs/5.3/customize/color-modes.md\nindex 7eaa44073..964170a3c 100644\n--- a/site/content/docs/5.3/customize/color-modes.md\n+++ b/site/content/docs/5.3/customize/color-modes.md\n@@ -79,8 +79,8 @@ For example, despite using `data-bs-theme=\"dark\"` on a random `<div>`, the `<div\n \n   <p>This should be shown in a <strong>dark</strong> theme at all times.</p>\n \n-  <div class=\"progress mb-4\">\n-    <div class=\"progress-bar\" role=\"progressbar\" aria-label=\"Basic example\" style=\"width: 25%\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n+  <div class=\"progress mb-4\" role=\"progressbar\" aria-label=\"Basic example\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n+    <div class=\"progress-bar\" style=\"width: 25%\"></div>\n   </div>\n \n   <div class=\"dropdown mb-4\">\n@@ -108,8 +108,8 @@ For example, despite using `data-bs-theme=\"dark\"` on a random `<div>`, the `<div\n \n     <p>This should be shown in a <strong>light</strong> theme at all times.</p>\n \n-    <div class=\"progress mb-4\">\n-      <div class=\"progress-bar\" role=\"progressbar\" aria-label=\"Basic example\" style=\"width: 25%\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n+    <div class=\"progress mb-4\" role=\"progressbar\" aria-label=\"Basic example\" aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n+      <div class=\"progress-bar\" style=\"width: 25%\"></div>\n     </div>\n \n     <div class=\"dropdown\">",
    "output": "docs: update progress markup in Color modes page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/color-modes.md b/site/content/docs/5.3/customize/color-modes.md\nindex 55d06ee97..7eaa44073 100644\n--- a/site/content/docs/5.3/customize/color-modes.md\n+++ b/site/content/docs/5.3/customize/color-modes.md\n@@ -11,7 +11,7 @@ added: \"5.3\"\n \n **Bootstrap now supports color modes, starting with dark mode!** With v5.3.0 you can implement your own color mode toggler (see below for an example from Bootstrap's docs) and apply the different color modes as you see fit. We support a light mode (default) and now dark mode. Color modes can be toggled globally on the `<html>` element, or on specific components and elements, thanks to the `data-bs-theme` attribute.\n \n-Alternatively, you can also switch to a media query implementation thanks to our color mode mixin\u2014see [the usage section for details](#sass-usage). Heads up though\u2014this eliminates your ability to change themes on a per-component basis as shown below.\n+Alternatively, you can also switch to a media query implementation thanks to our color mode mixin\u2014see [the usage section for details](#building-with-sass). Heads up though\u2014this eliminates your ability to change themes on a per-component basis as shown below.\n \n ## Example\n \n@@ -256,7 +256,7 @@ Here's a look at the JavaScript that powers it. Feel free to inspect our own doc\n \n ### Variables\n \n-Dozens of root level CSS variables are repeated as overrides for dark mode. These are scoped to the color mode selector, which defaults to `data-bs-theme` but [can be configured](#sass-usage) to use a `prefers-color-scheme` media query. Use these variables as a guideline for generating your own new color modes.\n+Dozens of root level CSS variables are repeated as overrides for dark mode. These are scoped to the color mode selector, which defaults to `data-bs-theme` but [can be configured](#building-with-sass) to use a `prefers-color-scheme` media query. Use these variables as a guideline for generating your own new color modes.\n \n {{< scss-docs name=\"root-dark-mode-vars\" file=\"scss/_root.scss\" >}}\n \n@@ -268,6 +268,6 @@ CSS variables for our dark color mode are partially generated from dark mode spe\n \n ### Sass mixin\n \n-Styles for dark mode, and any custom color modes you create, can be scoped appropriately to the `data-bs-theme` attribute selector or media query with the customizable `color-mode()` mixin. See the [Sass usage section](#sass-usage) for more details.\n+Styles for dark mode, and any custom color modes you create, can be scoped appropriately to the `data-bs-theme` attribute selector or media query with the customizable `color-mode()` mixin. See the [Sass usage section](#building-with-sass) for more details.\n \n {{< scss-docs name=\"color-mode-mixin\" file=\"scss/mixins/_color-mode.scss\" >}}",
    "output": "docs: fix broken links in Color modes page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 870474346..f1d6a6201 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -576,7 +576,7 @@ Want more information? [Read the v5.1.0 blog post.](https://blog.getbootstrap.co\n   - Renamed `.rounded-left` and `.rounded-right` to `.rounded-start` and `.rounded-end`.\n   - Renamed `.ml-*` and `.mr-*` to `.ms-*` and `.me-*`.\n   - Renamed `.pl-*` and `.pr-*` to `.ps-*` and `.pe-*`.\n-  - Renamed `.text-left` and `.text-right` to `.text-start` and `.text-end`.\n+  - Renamed `.text-*-left` and `.text-*-right` to `.text-*-start` and `.text-*-end`.\n \n - <span class=\"badge bg-danger\">Breaking</span> Disabled negative margins by default.\n ",
    "output": "docs: updates `.text-*-left` changes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4ff6cf0f2..5c665dd42 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.10.0\",\n         \"nodemon\": \"^2.0.20\",\n         \"npm-run-all\": \"^4.1.5\",\n-        \"postcss\": \"^8.4.20\",\n+        \"postcss\": \"^8.4.21\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.9.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8264,9 +8264,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.20\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.20.tgz\",\n-      \"integrity\": \"sha512-6Q04AXR1212bXr5fh03u8aAwbLxAQNGQ/Q1LNa0VfOI06ZAlhPHtQvE4OIdpj4kLThXilalPnmDSOD65DcHt+g==\",\n+      \"version\": \"8.4.21\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.21.tgz\",\n+      \"integrity\": \"sha512-tP7u/Sn/dVxK2NnruI4H9BG+x+Wxz6oeZ1cJ8P6G/PZY0IKk4k/63TDsQf2kQq3+qoJeLm2kIBUNlZe3zgb4Zg==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16930,9 +16930,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.20\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.20.tgz\",\n-      \"integrity\": \"sha512-6Q04AXR1212bXr5fh03u8aAwbLxAQNGQ/Q1LNa0VfOI06ZAlhPHtQvE4OIdpj4kLThXilalPnmDSOD65DcHt+g==\",\n+      \"version\": \"8.4.21\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.21.tgz\",\n+      \"integrity\": \"sha512-tP7u/Sn/dVxK2NnruI4H9BG+x+Wxz6oeZ1cJ8P6G/PZY0IKk4k/63TDsQf2kQq3+qoJeLm2kIBUNlZe3zgb4Zg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.4\",\ndiff --git a/package.json b/package.json\nindex 8af80250f..1a7dac229 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.10.0\",\n     \"nodemon\": \"^2.0.20\",\n     \"npm-run-all\": \"^4.1.5\",\n-    \"postcss\": \"^8.4.20\",\n+    \"postcss\": \"^8.4.21\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.9.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.20 to 8.4.21 (#37851)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 0b71ec3bc..870474346 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -19,7 +19,7 @@ Learn more by reading the new [color modes documentation]({{< docsref \"/customiz\n \n   <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span>  Color modes replace dark variants for components, so  `.btn-close-white`, `.carousel-dark`, `.dropdown-menu-dark`, and `.navbar-dark` are deprecated.\n \n-- **New extended color system.** We've added new theme colors (but not in `$theme-colors)`) for a more nuanced, system-wide color palette with new secondary, tertiary, and emphasis colors for `color` and `background-color`. These new colors are available as Sass variables, CSS variables, and utilities.\n+- **New extended color system.** We've added new theme colors (but not in `$theme-colors`) for a more nuanced, system-wide color palette with new secondary, tertiary, and emphasis colors for `color` and `background-color`. These new colors are available as Sass variables, CSS variables, and utilities.\n \n - We've also expanded our theme color Sass variables, CSS variables, and utilities to include text emphasis, subtle background colors, and subtle border colors. These are available as Sass variables, CSS variables, and utilities.\n ",
    "output": "docs: fix typo in migration guide"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/text.md b/site/content/docs/5.3/utilities/text.md\nindex 5b3cd028b..f28b362e2 100644\n--- a/site/content/docs/5.3/utilities/text.md\n+++ b/site/content/docs/5.3/utilities/text.md\n@@ -90,6 +90,7 @@ Quickly change the `font-weight` or `font-style` of text with these utilities. `\n <p class=\"fw-bold\">Bold text.</p>\n <p class=\"fw-bolder\">Bolder weight text (relative to the parent element).</p>\n <p class=\"fw-semibold\">Semibold weight text.</p>\n+<p class=\"fw-medium\">Medium weight text.</p>\n <p class=\"fw-normal\">Normal weight text.</p>\n <p class=\"fw-light\">Light weight text.</p>\n <p class=\"fw-lighter\">Lighter weight text (relative to the parent element).</p>",
    "output": "docs: add `.fw-medium` utility class example"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_list-group.scss b/scss/mixins/_list-group.scss\nindex 5a61f3c24..6274f3431 100644\n--- a/scss/mixins/_list-group.scss\n+++ b/scss/mixins/_list-group.scss\n@@ -1,6 +1,5 @@\n @include deprecate(\"`list-group-item-variant()`\", \"v5.3.0\", \"v6.0.0\");\n \n-\n // List Groups\n \n // scss-docs-start list-group-mixin\ndiff --git a/site/content/docs/5.3/components/list-group.md b/site/content/docs/5.3/components/list-group.md\nindex daa7a8818..c23e75814 100644\n--- a/site/content/docs/5.3/components/list-group.md\n+++ b/site/content/docs/5.3/components/list-group.md\n@@ -319,6 +319,8 @@ As part of Bootstrap's evolving CSS variables approach, list groups now use loca\n \n ### Sass mixins\n \n+{{< deprecated-in \"5.3.0\" >}}\n+\n Used in combination with `$theme-colors` to generate the [contextual variant classes](#variants) for `.list-group-item`s.\n \n {{< scss-docs name=\"list-group-mixin\" file=\"scss/mixins/_list-group.scss\" >}}",
    "output": "docs: missing deprecated callout for `list-group-item-variant()` mixin"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_clipboard-js.scss b/site/assets/scss/_clipboard-js.scss\nindex 6bf42db64..97b454e03 100644\n--- a/site/assets/scss/_clipboard-js.scss\n+++ b/site/assets/scss/_clipboard-js.scss\n@@ -28,7 +28,7 @@\n   @include border-radius(.25rem);\n \n   &:hover {\n-    color: var(--bs-link-color);\n+    color: var(--bs-link-hover-color);\n   }\n \n   &:focus {",
    "output": "docs: fix `.btn-clipboard` and `.btn-edit` link hover color"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex cde77a2c9..f47ca1ada 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -389,13 +389,6 @@\n \n .highlight-toolbar {\n   background-color: var(--bd-pre-bg);\n-  border: solid var(--bs-border-color);\n-  border-width: 1px 0;\n-\n-  .btn-clipboard {\n-    margin-top: 0;\n-    margin-right: 0;\n-  }\n }\n \n .focused {\ndiff --git a/site/layouts/shortcodes/example.html b/site/layouts/shortcodes/example.html\nindex 8a9cdff0c..fccb39b6b 100644\n--- a/site/layouts/shortcodes/example.html\n+++ b/site/layouts/shortcodes/example.html\n@@ -28,7 +28,7 @@\n \n   {{- if eq $show_markup true -}}\n     {{- if eq $show_preview true -}}\n-      <div class=\"d-flex align-items-center highlight-toolbar ps-3 pe-2 py-1\">\n+      <div class=\"d-flex align-items-center highlight-toolbar ps-3 pe-2 py-1 border-0 border-top border-bottom\">\n         <small class=\"font-monospace text-muted text-uppercase\">{{- $lang -}}</small>\n         <div class=\"d-flex ms-auto\">\n           <button type=\"button\" class=\"btn-edit text-nowrap\"{{ with $stackblitz_add_js }} data-sb-js-snippet=\"{{ $stackblitz_add_js }}\"{{ end }} title=\"Try it on StackBlitz\">",
    "output": "docs: remove some CSS from `.highlight-toolbar` def"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_content.scss b/site/assets/scss/_content.scss\nindex 126ec9f88..9eca80464 100644\n--- a/site/assets/scss/_content.scss\n+++ b/site/assets/scss/_content.scss\n@@ -12,7 +12,7 @@\n   > h2,\n   > h3,\n   > h4 {\n-    --#{$prefix}heading-color: #fff;\n+    --bs-heading-color: var(--bs-emphasis-color);\n   }\n \n   > h2:not(:first-child) {\n@@ -108,7 +108,7 @@\n }\n \n .bd-title {\n-  --#{$prefix}heading-color: #fff;\n+  --bs-heading-color: var(--bs-emphasis-color);\n   @include font-size(3rem);\n }\n ",
    "output": "docs: fix headings color in light/dark mode (#37802)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e44a1f608..4ff6cf0f2 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -6782,9 +6782,9 @@\n       \"dev\": true\n     },\n     \"node_modules/json5\": {\n-      \"version\": \"2.2.2\",\n-      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.2.tgz\",\n-      \"integrity\": \"sha512-46Tk9JiOL2z7ytNQWFLpj99RZkVgeHf87yGQKsIkaPz1qSH9UczKH1rO7K3wgRselo0tYMUNfecYpm/p1vC7tQ==\",\n+      \"version\": \"2.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.3.tgz\",\n+      \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\n       \"dev\": true,\n       \"bin\": {\n         \"json5\": \"lib/cli.js\"\n@@ -10393,9 +10393,9 @@\n       }\n     },\n     \"node_modules/tsconfig-paths/node_modules/json5\": {\n-      \"version\": \"1.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-1.0.1.tgz\",\n-      \"integrity\": \"sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==\",\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-1.0.2.tgz\",\n+      \"integrity\": \"sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"minimist\": \"^1.2.0\"\n@@ -15844,9 +15844,9 @@\n       \"dev\": true\n     },\n     \"json5\": {\n-      \"version\": \"2.2.2\",\n-      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.2.tgz\",\n-      \"integrity\": \"sha512-46Tk9JiOL2z7ytNQWFLpj99RZkVgeHf87yGQKsIkaPz1qSH9UczKH1rO7K3wgRselo0tYMUNfecYpm/p1vC7tQ==\",\n+      \"version\": \"2.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.3.tgz\",\n+      \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\n       \"dev\": true\n     },\n     \"jsonfile\": {\n@@ -18515,9 +18515,9 @@\n       },\n       \"dependencies\": {\n         \"json5\": {\n-          \"version\": \"1.0.1\",\n-          \"resolved\": \"https://registry.npmjs.org/json5/-/json5-1.0.1.tgz\",\n-          \"integrity\": \"sha512-aKS4WQjPenRxiQsC93MNfjx+nbF4PAdYzmd/1JIj8HYzqfbu86beTuNgXDzPknWk0n0uARlyewZo4s++ES36Ow==\",\n+          \"version\": \"1.0.2\",\n+          \"resolved\": \"https://registry.npmjs.org/json5/-/json5-1.0.2.tgz\",\n+          \"integrity\": \"sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==\",\n           \"dev\": true,\n           \"requires\": {\n             \"minimist\": \"^1.2.0\"",
    "output": "build(deps): Bump json5 from 1.0.1 to 1.0.2"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 7f8860a95..e44a1f608 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"sass\": \"^1.57.1\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^14.16.0\",\n+        \"stylelint\": \"^14.16.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n         \"terser\": \"5.16.0\",\n         \"vnu-jar\": \"22.9.29\"\n@@ -9921,9 +9921,9 @@\n       \"dev\": true\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"14.16.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-14.16.0.tgz\",\n-      \"integrity\": \"sha512-X6uTi9DcxjzLV8ZUAjit1vsRtSwcls0nl07c9rqOPzvpA8IvTX/xWEkBRowS0ffevRrqkHa/ThDEu86u73FQDg==\",\n+      \"version\": \"14.16.1\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-14.16.1.tgz\",\n+      \"integrity\": \"sha512-ErlzR/T3hhbV+a925/gbfc3f3Fep9/bnspMiJPorfGEmcBbXdS+oo6LrVtoUZ/w9fqD6o6k7PtUlCOsCRdjX/A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@csstools/selector-specificity\": \"^2.0.2\",\n@@ -18150,9 +18150,9 @@\n       \"dev\": true\n     },\n     \"stylelint\": {\n-      \"version\": \"14.16.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-14.16.0.tgz\",\n-      \"integrity\": \"sha512-X6uTi9DcxjzLV8ZUAjit1vsRtSwcls0nl07c9rqOPzvpA8IvTX/xWEkBRowS0ffevRrqkHa/ThDEu86u73FQDg==\",\n+      \"version\": \"14.16.1\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-14.16.1.tgz\",\n+      \"integrity\": \"sha512-ErlzR/T3hhbV+a925/gbfc3f3Fep9/bnspMiJPorfGEmcBbXdS+oo6LrVtoUZ/w9fqD6o6k7PtUlCOsCRdjX/A==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@csstools/selector-specificity\": \"^2.0.2\",\ndiff --git a/package.json b/package.json\nindex ce91fdebe..8af80250f 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"sass\": \"^1.57.1\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^14.16.0\",\n+    \"stylelint\": \"^14.16.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n     \"terser\": \"5.16.0\",\n     \"vnu-jar\": \"22.9.29\"",
    "output": "build(deps-dev): Bump stylelint from 14.16.0 to 14.16.1"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 759efadb1..7f8860a95 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.20\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.9.0\",\n+        \"rollup\": \"^3.9.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.57.1\",\n@@ -9177,9 +9177,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.9.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.0.tgz\",\n-      \"integrity\": \"sha512-nGGylpmblyjTpF4lEUPgmOw6OVxRvnI6Iuuh6Lz4O/X66cVOX1XJSsqP1YamxQ+mPuFE7qJxLFDSCk8rNv5dDw==\",\n+      \"version\": \"3.9.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.1.tgz\",\n+      \"integrity\": \"sha512-GswCYHXftN8ZKGVgQhTFUJB/NBXxrRGgO2NCy6E8s1rwEJ4Q9/VttNqcYfEvx4dTo4j58YqdC3OVztPzlKSX8w==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17587,9 +17587,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.9.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.0.tgz\",\n-      \"integrity\": \"sha512-nGGylpmblyjTpF4lEUPgmOw6OVxRvnI6Iuuh6Lz4O/X66cVOX1XJSsqP1YamxQ+mPuFE7qJxLFDSCk8rNv5dDw==\",\n+      \"version\": \"3.9.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.1.tgz\",\n+      \"integrity\": \"sha512-GswCYHXftN8ZKGVgQhTFUJB/NBXxrRGgO2NCy6E8s1rwEJ4Q9/VttNqcYfEvx4dTo4j58YqdC3OVztPzlKSX8w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex e5e88a04c..ce91fdebe 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.20\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.9.0\",\n+    \"rollup\": \"^3.9.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.57.1\",",
    "output": "build(deps-dev): Bump rollup from 3.9.0 to 3.9.1"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/accordion.md b/site/content/docs/5.3/components/accordion.md\nindex 76508b25f..227d11a86 100644\n--- a/site/content/docs/5.3/components/accordion.md\n+++ b/site/content/docs/5.3/components/accordion.md\n@@ -64,7 +64,7 @@ Click the accordions below to expand/collapse the accordion content.\n \n ### Flush\n \n-Add `.accordion-flush` to remove the default `background-color`, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\n+Add `.accordion-flush` to remove some borders and rounded corners to render accordions edge-to-edge with their parent container.\n \n {{< example class=\"bg-body-secondary\" >}}\n <div class=\"accordion accordion-flush\" id=\"accordionFlushExample\">",
    "output": "docs: fix accordion flush description"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/buttons.md b/site/content/docs/5.3/components/buttons.md\nindex 396beec7f..8d9ff0201 100644\n--- a/site/content/docs/5.3/components/buttons.md\n+++ b/site/content/docs/5.3/components/buttons.md\n@@ -6,7 +6,21 @@ group: components\n toc: true\n ---\n \n-## Examples\n+## Base class\n+\n+Bootstrap has a base `.btn` class that sets up basic styles such as padding and content alignment. By default, `.btn` controls have a transparent border and background color, and lack any explicit focus and hover styles.\n+\n+{{< example >}}\n+<button type=\"button\" class=\"btn\">Base class</button>\n+{{< /example >}}\n+\n+The `.btn` class is intended to be used in conjunction with our additional predefined button styles, or to serve as a basis for your own custom styles.\n+\n+{{< callout warning >}}\n+If you are using the `.btn` class on its own, remember to at least define some explicit `:focus` and/or `:focus-visible` styles.\n+{{< /callout >}}\n+\n+## Predefined styles\n \n Bootstrap includes several predefined button styles, each serving its own semantic purpose, with a few extras thrown in for more control.\n ",
    "output": "docs: add explanation of the base `.btn` class (#37275)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_close.scss b/scss/_close.scss\nindex 503a105cc..4d6e73c13 100644\n--- a/scss/_close.scss\n+++ b/scss/_close.scss\n@@ -4,6 +4,7 @@\n // See https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile\n \n .btn-close {\n+  // scss-docs-start close-css-vars\n   --#{$prefix}btn-close-color: #{$btn-close-color};\n   --#{$prefix}btn-close-bg: #{ escape-svg($btn-close-bg) };\n   --#{$prefix}btn-close-opacity: #{$btn-close-opacity};\n@@ -12,6 +13,7 @@\n   --#{$prefix}btn-close-focus-opacity: #{$btn-close-focus-opacity};\n   --#{$prefix}btn-close-disabled-opacity: #{$btn-close-disabled-opacity};\n   --#{$prefix}btn-close-white-filter: #{$btn-close-white-filter};\n+  // scss-docs-end close-css-vars\n \n   box-sizing: content-box;\n   width: $btn-close-width;\ndiff --git a/site/content/docs/5.3/components/close-button.md b/site/content/docs/5.3/components/close-button.md\nindex 39b80e1cd..033958ded 100644\n--- a/site/content/docs/5.3/components/close-button.md\n+++ b/site/content/docs/5.3/components/close-button.md\n@@ -37,8 +37,16 @@ Add `data-bs-theme=\"dark\"` to the `.btn-close`, or to its parent element, to inv\n </div>\n {{< /example >}}\n \n-## Sass\n+## CSS\n \n ### Variables\n \n+{{< added-in \"5.3.0\" >}}\n+\n+As part of Bootstrap's evolving CSS variables approach, close button now uses local CSS variables on `.btn-close` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n+\n+{{< scss-docs name=\"close-css-vars\" file=\"scss/_close.scss\" >}}\n+\n+### Sass variables\n+\n {{< scss-docs name=\"close-variables\" file=\"scss/_variables.scss\" >}}",
    "output": "docs: add CSS variables section in close button section"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/helpers/focus-ring.md b/site/content/docs/5.3/helpers/focus-ring.md\nindex 5819bf1c6..2a71975cc 100644\n--- a/site/content/docs/5.3/helpers/focus-ring.md\n+++ b/site/content/docs/5.3/helpers/focus-ring.md\n@@ -11,7 +11,7 @@ The `.focus-ring` helper removes the default `outline` on `:focus`, replacing it\n \n ## Example\n \n-Click into the example below and press <kbd>Tab</kbd> to see the focus ring in action.\n+Click directly on the link below to see the focus ring in action, or into the example below and then press <kbd>Tab</kbd>.\n \n {{< example >}}\n <a href=\"#\" class=\"d-inline-flex focus-ring py-1 px-2 text-decoration-none border rounded-2\">",
    "output": "docs: enhance Focus ring example section desc"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_callouts.scss b/site/assets/scss/_callouts.scss\nindex a398dd957..b39b947c4 100644\n--- a/site/assets/scss/_callouts.scss\n+++ b/site/assets/scss/_callouts.scss\n@@ -3,7 +3,7 @@\n //\n \n .bd-callout {\n-  --#{$prefix}link-color-rgb: #{to-rgb($blue-600)};\n+  --#{$prefix}link-color-rgb: var(--bd-callout-link);\n \n   padding: 1.25rem;\n   margin-top: 1.25rem;\ndiff --git a/site/assets/scss/_variables.scss b/site/assets/scss/_variables.scss\nindex 964a77394..6da6a4761 100644\n--- a/site/assets/scss/_variables.scss\n+++ b/site/assets/scss/_variables.scss\n@@ -21,6 +21,7 @@ $bd-callout-variants: info, warning, danger !default;\n   --bd-violet-bg: var(--bd-violet);\n   --bd-toc-color: var(--bd-violet);\n   --bd-sidebar-link-bg: rgba(var(--bd-violet-rgb), .1);\n+  --bd-callout-link: #{to-rgb($blue-600)};\n }\n \n @include color-mode(dark, true) {\n@@ -28,4 +29,5 @@ $bd-callout-variants: info, warning, danger !default;\n   --bd-violet-bg: #{$bd-violet};\n   --bd-toc-color: var(--#{$prefix}emphasis-color);\n   --bd-sidebar-link-bg: rgba(#{to-rgb(mix($bd-violet, $black, 75%))}, .5);\n+  --bd-callout-link: #{to-rgb($blue-300)};\n }",
    "output": "docs: enhance callouts links on dark mode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/button-group.md b/site/content/docs/5.3/components/button-group.md\nindex 8f7d2d6a9..6889ed1f4 100644\n--- a/site/content/docs/5.3/components/button-group.md\n+++ b/site/content/docs/5.3/components/button-group.md\n@@ -145,21 +145,21 @@ Instead of applying button sizing classes to every button in a group, just add `\n \n {{< example >}}\n <div class=\"btn-group btn-group-lg\" role=\"group\" aria-label=\"Large button group\">\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Left</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Middle</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Right</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Left</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Middle</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Right</button>\n </div>\n <br>\n <div class=\"btn-group\" role=\"group\" aria-label=\"Default button group\">\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Left</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Middle</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Right</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Left</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Middle</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Right</button>\n </div>\n <br>\n <div class=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"Small button group\">\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Left</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Middle</button>\n-  <button type=\"button\" class=\"btn btn-outline-dark\">Right</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Left</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Middle</button>\n+  <button type=\"button\" class=\"btn btn-outline-primary\">Right</button>\n </div>\n {{< /example >}}\n \n@@ -190,12 +190,12 @@ Make a set of buttons appear vertically stacked rather than horizontally. **Spli\n \n {{< example >}}\n <div class=\"btn-group-vertical\" role=\"group\" aria-label=\"Vertical button group\">\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n-  <button type=\"button\" class=\"btn btn-dark\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n+  <button type=\"button\" class=\"btn btn-primary\">Button</button>\n </div>\n {{< /example >}}\n ",
    "output": "docs: replace dark btns by primary ones from Button group docs to avoid issues in dark mode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/scorecards.yml b/.github/workflows/scorecards.yml\nindex 01977ac1c..0f40cf228 100644\n--- a/.github/workflows/scorecards.yml\n+++ b/.github/workflows/scorecards.yml\n@@ -33,7 +33,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run analysis\n-        uses: ossf/scorecard-action@v2.1.1\n+        uses: ossf/scorecard-action@v2.1.2\n         with:\n           results_file: results.sarif\n           results_format: sarif",
    "output": "build(deps): Bump ossf/scorecard-action from 2.1.1 to 2.1.2 (#37728)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 597b37f2e..cd9cd2a44 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.20\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.8.1\",\n+        \"rollup\": \"^3.9.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.57.1\",\n@@ -9159,9 +9159,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.8.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.8.1.tgz\",\n-      \"integrity\": \"sha512-4yh9eMW7byOroYcN8DlF9P/2jCpu6txVIHjEqquQVSx7DI0RgyCCN3tjrcy4ra6yVtV336aLBB3v2AarYAxePQ==\",\n+      \"version\": \"3.9.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.0.tgz\",\n+      \"integrity\": \"sha512-nGGylpmblyjTpF4lEUPgmOw6OVxRvnI6Iuuh6Lz4O/X66cVOX1XJSsqP1YamxQ+mPuFE7qJxLFDSCk8rNv5dDw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17551,9 +17551,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.8.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.8.1.tgz\",\n-      \"integrity\": \"sha512-4yh9eMW7byOroYcN8DlF9P/2jCpu6txVIHjEqquQVSx7DI0RgyCCN3tjrcy4ra6yVtV336aLBB3v2AarYAxePQ==\",\n+      \"version\": \"3.9.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.9.0.tgz\",\n+      \"integrity\": \"sha512-nGGylpmblyjTpF4lEUPgmOw6OVxRvnI6Iuuh6Lz4O/X66cVOX1XJSsqP1YamxQ+mPuFE7qJxLFDSCk8rNv5dDw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 9c7686d4b..b40c1fc89 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.20\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.8.1\",\n+    \"rollup\": \"^3.9.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.57.1\",",
    "output": "build(deps-dev): Bump rollup from 3.8.1 to 3.9.0 (#37750)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_search.scss b/site/assets/scss/_search.scss\nindex 01e9d036e..3046d57db 100644\n--- a/site/assets/scss/_search.scss\n+++ b/site/assets/scss/_search.scss\n@@ -1,5 +1,30 @@\n // stylelint-disable selector-class-pattern\n \n+:root {\n+  --docsearch-primary-color: var(--bd-violet);\n+  --docsearch-logo-color: var(--bd-violet);\n+}\n+\n+@include color-mode(dark, true) {\n+  // From here, the values are copied from https://cdn.jsdelivr.net/npm/@docsearch/css@3\n+  // in html[data-theme=\"dark\"] selector\n+  // and are slightly modified for formatting purpose\n+  --docsearch-text-color: #f5f6f7;\n+  --docsearch-container-background: rgba(9, 10, 17, .8);\n+  --docsearch-modal-background: #15172a;\n+  --docsearch-modal-shadow: inset 1px 1px 0 0 #2c2e40, 0 3px 8px 0 #000309;\n+  --docsearch-searchbox-background: #090a11;\n+  --docsearch-searchbox-focus-background: #000;\n+  --docsearch-hit-color: #bec3c9;\n+  --docsearch-hit-shadow: none;\n+  --docsearch-hit-background: #090a11;\n+  --docsearch-key-gradient: linear-gradient(-26.5deg, #565872, #31355b);\n+  --docsearch-key-shadow: inset 0 -2px 0 0 #282d55, inset 0 0 1px 1px #51577d, 0 2px 2px 0 rgba(3, 4, 9, .3);\n+  --docsearch-footer-background: #1e2136;\n+  --docsearch-footer-shadow: inset 0 1px 0 0 rgba(73, 76, 106, .5), 0 -4px 8px 0 rgba(0, 0, 0, .2);\n+  --docsearch-muted-color: #7f8497;\n+}\n+\n .bd-search {\n   position: relative;\n \n@@ -139,3 +164,9 @@\n   display: flex;\n   align-items: center;\n }\n+\n+// Fix --docsearch-logo-color that doesn't do anything\n+.DocSearch-Logo svg .cls-1,\n+.DocSearch-Logo svg .cls-2 {\n+  fill: var(--docsearch-logo-color);\n+}\ndiff --git a/site/assets/scss/_variables.scss b/site/assets/scss/_variables.scss\nindex b3730ebef..9d3f82e12 100644\n--- a/site/assets/scss/_variables.scss\n+++ b/site/assets/scss/_variables.scss\n@@ -18,8 +18,6 @@ $bd-callout-variants: info, warning, danger !default;\n   --bd-accent-rgb: #{to-rgb($bd-accent)};\n   --bd-pink-rgb: #{to-rgb($pink-500)};\n   --bd-teal-rgb: #{to-rgb($teal-500)};\n-  --docsearch-primary-color: var(--bd-violet);\n-  --docsearch-logo-color: var(--bd-violet);\n \n   --bd-violet-bg: var(--bd-violet);\n   --bd-sidebar-link-bg: rgba(var(--bd-violet-rgb), .1);",
    "output": "docs: handle light/dark mode in Algolia search modal (#37738)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/parcel.md b/site/content/docs/5.3/getting-started/parcel.md\nindex 833b07713..8d6a66222 100644\n--- a/site/content/docs/5.3/getting-started/parcel.md\n+++ b/site/content/docs/5.3/getting-started/parcel.md\n@@ -1,6 +1,6 @@\n ---\n layout: docs\n-title: \"Bootstrap & Parcel\"\n+title: Bootstrap and Parcel\n description: The official guide for how to include and bundle Bootstrap's CSS and JavaScript in your project using Parcel.\n group: getting-started\n toc: true\ndiff --git a/site/content/docs/5.3/getting-started/vite.md b/site/content/docs/5.3/getting-started/vite.md\nindex 4086316d3..7e91ebfc3 100644\n--- a/site/content/docs/5.3/getting-started/vite.md\n+++ b/site/content/docs/5.3/getting-started/vite.md\n@@ -1,6 +1,6 @@\n ---\n layout: docs\n-title: \"Bootstrap & Vite\"\n+title: Bootstrap and Vite\n description: The official guide for how to include and bundle Bootstrap's CSS and JavaScript in your project using Vite.\n group: getting-started\n toc: true\ndiff --git a/site/content/docs/5.3/getting-started/webpack.md b/site/content/docs/5.3/getting-started/webpack.md\nindex 870e070e3..685da3947 100644\n--- a/site/content/docs/5.3/getting-started/webpack.md\n+++ b/site/content/docs/5.3/getting-started/webpack.md\n@@ -1,6 +1,6 @@\n ---\n layout: docs\n-title: \"Bootstrap & Webpack\"\n+title: Bootstrap and Webpack\n description: The official guide for how to include and bundle Bootstrap's CSS and JavaScript in your project using Webpack.\n group: getting-started\n toc: true",
    "output": "docs: change some title containing '&' to bypass Algolia issue"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/social.html b/site/layouts/partials/social.html\nindex 2226c386c..f4f556e5a 100644\n--- a/site/layouts/partials/social.html\n+++ b/site/layouts/partials/social.html\n@@ -1,15 +1,27 @@\n+{{- $pageTitle := .Title | markdownify -}}\n+{{- $pageDescription := .Page.Params.description | default .Site.Params.description | markdownify -}}\n+{{- $socialImagePath := printf \"/docs/%s/assets\" .Site.Params.docs_version -}}\n+\n+{{- if .Page.Params.thumbnail -}}\n+  {{- $socialImagePath = path.Join $socialImagePath \"img/\" .Page.Params.thumbnail -}}\n+{{- else -}}\n+  {{- $socialImagePath = path.Join $socialImagePath \"brand/bootstrap-social.png\" -}}\n+{{- end -}}\n+\n <meta name=\"twitter:card\" content=\"summary_large_image\">\n <meta name=\"twitter:site\" content=\"@{{ .Site.Params.twitter }}\">\n <meta name=\"twitter:creator\" content=\"@{{ .Site.Params.twitter }}\">\n-<meta name=\"twitter:title\" content=\"{{ .Title | markdownify }}\">\n-<meta name=\"twitter:description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n-<meta name=\"twitter:image\" content=\"/docs/{{ .Site.Params.docs_version }}/assets/{{ if .Page.Params.thumbnail }}img/{{ .Page.Params.thumbnail }}{{else}}brand/bootstrap-social.png{{end}}\">\n+<meta name=\"twitter:title\" content=\"{{ $pageTitle }}\">\n+<meta name=\"twitter:description\" content=\"{{ $pageDescription }}\">\n+<meta name=\"twitter:image\" content=\"{{ $socialImagePath | absURL }}\">\n \n <meta property=\"og:url\" content=\"{{ .Permalink }}\">\n-<meta property=\"og:title\" content=\"{{ .Title | markdownify }}\">\n-<meta property=\"og:description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n+<meta property=\"og:title\" content=\"{{ $pageTitle }}\">\n+<meta property=\"og:description\" content=\"{{ $pageDescription }}\">\n <meta property=\"og:type\" content=\"{{ if .IsPage }}article{{ else }}website{{ end }}\">\n+<meta property=\"og:image\" content=\"{{ $socialImagePath | absURL }}\">\n <meta property=\"og:image:type\" content=\"image/png\">\n-<meta property=\"og:image:width\" content=\"1000\">\n-<meta property=\"og:image:height\" content=\"500\">\n-<meta property=\"og:image\" content=\"/docs/{{ .Site.Params.docs_version }}/assets/{{ if .Page.Params.thumbnail }}img/{{ .Page.Params.thumbnail }}{{else}}brand/bootstrap-social.png{{end}}\">\n+{{ with (imageConfig (path.Join \"site/static\" $socialImagePath)) -}}\n+<meta property=\"og:image:width\" content=\"{{ .Width }}\">\n+<meta property=\"og:image:height\" content=\"{{ .Height }}\">\n+{{- end }}",
    "output": "docs: improve social image partial (#37717)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex c3445eda8..f8da71b31 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -33,8 +33,8 @@ jobs:\n       - name: Install npm dependencies\n         run: npm ci\n \n-      - name: Run CSS tests\n-        run: npm run css-test\n-\n       - name: Build CSS\n         run: npm run css\n+\n+      - name: Run CSS tests\n+        run: npm run css-test",
    "output": "ci: test CSS after build (#37714)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c2a84800b..d7641854a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -9471,9 +9471,9 @@\n       \"dev\": true\n     },\n     \"node_modules/socket.io-parser\": {\n-      \"version\": \"4.0.4\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.4.tgz\",\n-      \"integrity\": \"sha512-t+b0SS+IxG7Rxzda2EVvyBZbvFPBCjJoyHuE0P//7OAsN23GItzDRdWa6ALxZI/8R5ygK7jAR6t028/z+7295g==\",\n+      \"version\": \"4.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.5.tgz\",\n+      \"integrity\": \"sha512-sNjbT9dX63nqUFIOv95tTVm6elyIU4RvB1m8dOeZt+IgWwcWklFDOdmGcfo3zSiRsnR/3pJkjY5lfoGqEe4Eig==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@types/component-emitter\": \"^1.2.10\",\n@@ -17679,9 +17679,9 @@\n       \"dev\": true\n     },\n     \"socket.io-parser\": {\n-      \"version\": \"4.0.4\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.4.tgz\",\n-      \"integrity\": \"sha512-t+b0SS+IxG7Rxzda2EVvyBZbvFPBCjJoyHuE0P//7OAsN23GItzDRdWa6ALxZI/8R5ygK7jAR6t028/z+7295g==\",\n+      \"version\": \"4.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.0.5.tgz\",\n+      \"integrity\": \"sha512-sNjbT9dX63nqUFIOv95tTVm6elyIU4RvB1m8dOeZt+IgWwcWklFDOdmGcfo3zSiRsnR/3pJkjY5lfoGqEe4Eig==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@types/component-emitter\": \"^1.2.10\",",
    "output": "build(deps): Bump socket.io-parser from 4.0.4 to 4.0.5 (#37709)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/customize/color-modes.md b/site/content/docs/5.2/customize/color-modes.md\nindex bf1692ae1..55d06ee97 100644\n--- a/site/content/docs/5.2/customize/color-modes.md\n+++ b/site/content/docs/5.2/customize/color-modes.md\n@@ -155,14 +155,14 @@ Bootstrap does not yet ship with a built-in color mode picker, but you can use t\n \n ### Building with Sass\n \n-Our new dark mode option is available to use for all users of Bootstrap, but it's controlled via data attributes instead of media queries and does not automatically toggle your project's color mode. You can disable our dark mode entirely via Sass by changing `@enable-dark-mode` to `false`.\n+Our new dark mode option is available to use for all users of Bootstrap, but it's controlled via data attributes instead of media queries and does not automatically toggle your project's color mode. You can disable our dark mode entirely via Sass by changing `$enable-dark-mode` to `false`.\n \n We use a custom Sass mixin, `color-mode()`, to help you control _how_ color modes are applied. By default, we use a `data` attribute approach, allowing you to create more user-friendly experiences where your visitors can choose to have an automatic dark mode or control their preference (like in our own docs here). This is also an easy and scalable way to add different themes and more custom color modes beyond light and dark.\n \n In case you want to use media queries and only make color modes automatic, you can change the mixin's default type via Sass variable. Consider the following snippet and it's compiled CSS output.\n \n ```scss\n-@color-mode-type: data !default;\n+$color-mode-type: data;\n \n @include color-mode(dark) {\n   .element {\n@@ -184,7 +184,7 @@ Outputs to:\n And when setting to `media-query`:\n \n ```scss\n-@color-mode-type: media-query;\n+$color-mode-type: media-query;\n \n @include color-mode(dark) {\n   .element {",
    "output": "docs: fix typo for Sass vars references in Customize > Color modes > Building with Sass"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b07e24e05..e1ed09ca4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -60,7 +60,7 @@\n         \"rollup\": \"^3.7.5\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.56.2\",\n+        \"sass\": \"^1.57.1\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n@@ -9068,9 +9068,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.56.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.2.tgz\",\n-      \"integrity\": \"sha512-ciEJhnyCRwzlBCB+h5cCPM6ie/6f8HrhZMQOf5vlU60Y1bI1rx5Zb0vlDZvaycHsg/MqFfF1Eq2eokAa32iw8w==\",\n+      \"version\": \"1.57.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.57.1.tgz\",\n+      \"integrity\": \"sha512-O2+LwLS79op7GI0xZ8fqzF7X2m/m8WFfI02dHOdsK5R2ECeS5F62zrwg/relM1rjSLy7Vd/DiMNIvPrQGsA0jw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17216,9 +17216,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.56.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.2.tgz\",\n-      \"integrity\": \"sha512-ciEJhnyCRwzlBCB+h5cCPM6ie/6f8HrhZMQOf5vlU60Y1bI1rx5Zb0vlDZvaycHsg/MqFfF1Eq2eokAa32iw8w==\",\n+      \"version\": \"1.57.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.57.1.tgz\",\n+      \"integrity\": \"sha512-O2+LwLS79op7GI0xZ8fqzF7X2m/m8WFfI02dHOdsK5R2ECeS5F62zrwg/relM1rjSLy7Vd/DiMNIvPrQGsA0jw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 2510c645a..db6ee774b 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.7.5\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.56.2\",\n+    \"sass\": \"^1.57.1\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",",
    "output": "build(deps-dev): Bump sass from 1.56.2 to 1.57.1 (#37683)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2add42041..b07e24e05 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -57,7 +57,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.20\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.7.4\",\n+        \"rollup\": \"^3.7.5\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.56.2\",\n@@ -8944,9 +8944,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.7.4\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.4.tgz\",\n-      \"integrity\": \"sha512-jN9rx3k5pfg9H9al0r0y1EYKSeiRANZRYX32SuNXAnKzh6cVyf4LZVto1KAuDnbHT03E1CpsgqDKaqQ8FZtgxw==\",\n+      \"version\": \"3.7.5\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.5.tgz\",\n+      \"integrity\": \"sha512-z0ZbqHBtS/et2EEUKMrAl2CoSdwN7ZPzL17UMiKN9RjjqHShTlv7F9J6ZJZJNREYjBh3TvBrdfjkFDIXFNeuiQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17144,9 +17144,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.7.4\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.4.tgz\",\n-      \"integrity\": \"sha512-jN9rx3k5pfg9H9al0r0y1EYKSeiRANZRYX32SuNXAnKzh6cVyf4LZVto1KAuDnbHT03E1CpsgqDKaqQ8FZtgxw==\",\n+      \"version\": \"3.7.5\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.5.tgz\",\n+      \"integrity\": \"sha512-z0ZbqHBtS/et2EEUKMrAl2CoSdwN7ZPzL17UMiKN9RjjqHShTlv7F9J6ZJZJNREYjBh3TvBrdfjkFDIXFNeuiQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 96067821b..2510c645a 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.20\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.7.4\",\n+    \"rollup\": \"^3.7.5\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.56.2\",",
    "output": "build(deps-dev): Bump rollup from 3.7.4 to 3.7.5 (#37685)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/scorecards.yml b/.github/workflows/scorecards.yml\nindex 19ceb8e0d..01977ac1c 100644\n--- a/.github/workflows/scorecards.yml\n+++ b/.github/workflows/scorecards.yml\n@@ -33,7 +33,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run analysis\n-        uses: ossf/scorecard-action@v2.1.0\n+        uses: ossf/scorecard-action@v2.1.1\n         with:\n           results_file: results.sarif\n           results_format: sarif",
    "output": "build(deps): Bump ossf/scorecard-action from 2.1.0 to 2.1.1 (#37680)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/getting-started/parcel.md b/site/content/docs/5.2/getting-started/parcel.md\nindex d28f92384..833b07713 100644\n--- a/site/content/docs/5.2/getting-started/parcel.md\n+++ b/site/content/docs/5.2/getting-started/parcel.md\n@@ -88,7 +88,7 @@ With dependencies installed and our project folder ready for us to start coding,\n    </html>\n    ```\n \n-   We're including a little bit of Bootstrap styling here with the `div class=\"container\"` and `<button>` so that we see when Bootstrap's CSS is loaded by Webpack.\n+   We're including a little bit of Bootstrap styling here with the `div class=\"container\"` and `<button>` so that we see when Bootstrap's CSS is loaded by Parcel.\n \n    Parcel will automatically detect we're using Sass and install the [Sass Parcel plugin](https://parceljs.org/languages/sass/) to support it. However, if you wish, you can also manually run `npm i --save-dev @parcel/transformer-sass`.\n ",
    "output": "docs: remove Webpack reference in Parcel guide (#37670)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/customize/color-modes.md b/site/content/docs/5.2/customize/color-modes.md\nindex 929075cbb..bf1692ae1 100644\n--- a/site/content/docs/5.2/customize/color-modes.md\n+++ b/site/content/docs/5.2/customize/color-modes.md\n@@ -248,7 +248,7 @@ Here's a look at the JavaScript that powers it. Feel free to inspect our own doc\n \n {{< example lang=\"js\" show_preview=\"false\" >}}\n {{< js.inline >}}\n-{{- readFile (path.Join \"site/assets/js/color-modes/index.js\") -}}\n+{{- readFile (path.Join \"site/static/docs\" .Site.Params.docs_version \"assets/js/color-modes.js\") -}}\n {{< /js.inline >}}\n {{< /example >}}\n \ndiff --git a/site/layouts/partials/header.html b/site/layouts/partials/header.html\nindex 327ed1488..22528ae47 100644\n--- a/site/layouts/partials/header.html\n+++ b/site/layouts/partials/header.html\n@@ -1,6 +1,3 @@\n-{{- $colorModeJS := resources.Get \"js/color-modes/index.js\" }}\n-<script src=\"{{ $colorModeJS.Permalink | relURL }}\"></script>\n-\n <meta charset=\"utf-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <meta name=\"description\" content=\"{{ .Page.Params.description | default .Site.Params.description | markdownify }}\">\n@@ -22,6 +19,9 @@\n <meta name=\"robots\" content=\"{{ . }}\">\n {{- end }}\n \n+{{- $colorModeJS := printf \"/docs/%s/assets/js/color-modes.js\" $.Site.Params.docs_version -}}\n+<script src=\"{{ $colorModeJS | relURL }}\"></script>\n+\n {{ partial \"stylesheet\" . }}\n {{ partial \"favicons\" . }}\n {{ partial \"social\" . }}\ndiff --git a/site/assets/js/color-modes/index.js b/site/static/docs/5.2/assets/js/color-modes.js\nsimilarity index 97%\nrename from site/assets/js/color-modes/index.js\nrename to site/static/docs/5.2/assets/js/color-modes.js\nindex 51bfd40a7..41b6b893e 100644\n--- a/site/assets/js/color-modes/index.js\n+++ b/site/static/docs/5.2/assets/js/color-modes.js\n@@ -46,7 +46,7 @@\n     }\n   })\n \n-  window.addEventListener('load', () => {\n+  window.addEventListener('DOMContentLoaded', () => {\n     showActiveTheme(getPreferredTheme())\n \n     document.querySelectorAll('[data-bs-theme-value]')",
    "output": "docs: move color-mode script (#37658)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_brand.scss b/site/assets/scss/_brand.scss\nindex 304075c92..03fe2fe1f 100644\n--- a/site/assets/scss/_brand.scss\n+++ b/site/assets/scss/_brand.scss\n@@ -15,13 +15,13 @@\n // Individual items\n .bd-brand-item {\n   + .bd-brand-item {\n-    border-top: 1px solid var(--#{$prefix}border-color);\n+    border-top: 1px solid var(--bs-border-color);\n   }\n \n   @include media-breakpoint-up(md) {\n     + .bd-brand-item {\n       border-top: 0;\n-      border-left: 1px solid var(--#{$prefix}border-color);\n+      border-left: 1px solid var(--bs-border-color);\n     }\n   }\n }\ndiff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex dcedffa13..11800a638 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -180,7 +180,7 @@\n     width: 10rem;\n     color: var(--bs-secondary-color);\n     background-color: var(--bs-tertiary-bg);\n-    border: var(--#{$prefix}border-width) solid var(--#{$prefix}border-color);\n+    border: var(--bs-border-width) solid var(--bs-border-color);\n \n     > div {\n       display: flex;",
    "output": "docs: replace some `--#{$prefix}` by `--bs` in Sass files (#37617)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 9a2fc91e5..2a10dfc9d 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -2,6 +2,11 @@ name: BrowserStack\n \n on:\n   push:\n+    branches:\n+      - main\n+  pull_request:\n+    branches:\n+      - main\n   workflow_dispatch:\n \n env:\n@@ -14,7 +19,7 @@ permissions:\n jobs:\n   browserstack:\n     runs-on: ubuntu-latest\n-    if: github.repository == 'twbs/bootstrap' && (!contains(github.event.commits[0].message, '[ci skip]') && !contains(github.event.commits[0].message, '[skip ci]'))\n+    if: github.repository == 'twbs/bootstrap'\n     timeout-minutes: 30\n \n     steps:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 2add86c49..c02a37ed9 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -2,8 +2,8 @@ name: Bundlewatch\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex 1d946981c..11788e3cc 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -2,8 +2,8 @@ name: cspell\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 6bfde50af..3ad8fef93 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -2,8 +2,8 @@ name: CSS\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex bdeae6043..2a684f618 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -2,8 +2,8 @@ name: Docs\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex a8994b6cc..8dd5e2a10 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -2,8 +2,8 @@ name: JS Tests\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 51ee18999..fd62b418b 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -2,8 +2,8 @@ name: Lint\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n \ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex dc687ca46..fb4d4944c 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -2,8 +2,8 @@ name: CSS (node-sass)\n \n on:\n   push:\n-    branches-ignore:\n-      - \"dependabot/**\"\n+    branches:\n+      - main\n   pull_request:\n   workflow_dispatch:\n ",
    "output": "ci: limit the on push triggers (#35574)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ceb7861e5..f7b0f212e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -55,7 +55,7 @@\n         \"lockfile-lint\": \"^4.9.6\",\n         \"nodemon\": \"^2.0.20\",\n         \"npm-run-all\": \"^4.1.5\",\n-        \"postcss\": \"^8.4.19\",\n+        \"postcss\": \"^8.4.20\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.7.4\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8043,9 +8043,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.19\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.19.tgz\",\n-      \"integrity\": \"sha512-h+pbPsyhlYj6N2ozBmHhHrs9DzGmbaarbLvWipMRO7RLS+v4onj26MPFXA5OBYFxyqYhUJK456SwDcY9H2/zsA==\",\n+      \"version\": \"8.4.20\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.20.tgz\",\n+      \"integrity\": \"sha512-6Q04AXR1212bXr5fh03u8aAwbLxAQNGQ/Q1LNa0VfOI06ZAlhPHtQvE4OIdpj4kLThXilalPnmDSOD65DcHt+g==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16485,9 +16485,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.19\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.19.tgz\",\n-      \"integrity\": \"sha512-h+pbPsyhlYj6N2ozBmHhHrs9DzGmbaarbLvWipMRO7RLS+v4onj26MPFXA5OBYFxyqYhUJK456SwDcY9H2/zsA==\",\n+      \"version\": \"8.4.20\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.20.tgz\",\n+      \"integrity\": \"sha512-6Q04AXR1212bXr5fh03u8aAwbLxAQNGQ/Q1LNa0VfOI06ZAlhPHtQvE4OIdpj4kLThXilalPnmDSOD65DcHt+g==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.4\",\ndiff --git a/package.json b/package.json\nindex 04f0f2e02..6bd726416 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.9.6\",\n     \"nodemon\": \"^2.0.20\",\n     \"npm-run-all\": \"^4.1.5\",\n-    \"postcss\": \"^8.4.19\",\n+    \"postcss\": \"^8.4.20\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.7.4\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.19 to 8.4.20 (#37634)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 40cf4a63e..ceb7861e5 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -57,7 +57,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.19\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.5.0\",\n+        \"rollup\": \"^3.7.4\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.56.2\",\n@@ -8924,9 +8924,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.5.0.tgz\",\n-      \"integrity\": \"sha512-TYu2L+TGhmNsXCtByont89u+ATQLcDy6A+++PwLXYunRtOm7XnaD+65s1pvewaOxMYR0eOkMXn9/i0saBxxpnQ==\",\n+      \"version\": \"3.7.4\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.4.tgz\",\n+      \"integrity\": \"sha512-jN9rx3k5pfg9H9al0r0y1EYKSeiRANZRYX32SuNXAnKzh6cVyf4LZVto1KAuDnbHT03E1CpsgqDKaqQ8FZtgxw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17117,9 +17117,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.5.0.tgz\",\n-      \"integrity\": \"sha512-TYu2L+TGhmNsXCtByont89u+ATQLcDy6A+++PwLXYunRtOm7XnaD+65s1pvewaOxMYR0eOkMXn9/i0saBxxpnQ==\",\n+      \"version\": \"3.7.4\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.7.4.tgz\",\n+      \"integrity\": \"sha512-jN9rx3k5pfg9H9al0r0y1EYKSeiRANZRYX32SuNXAnKzh6cVyf4LZVto1KAuDnbHT03E1CpsgqDKaqQ8FZtgxw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 687b0ac3b..04f0f2e02 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.19\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.5.0\",\n+    \"rollup\": \"^3.7.4\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.56.2\",",
    "output": "build(deps-dev): Bump rollup from 3.5.0 to 3.7.4 (#37633)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0a8e30c59..40cf4a63e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -42,7 +42,7 @@\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.96.0\",\n         \"ip\": \"^2.0.0\",\n-        \"jquery\": \"^3.6.1\",\n+        \"jquery\": \"^3.6.2\",\n         \"karma\": \"^6.4.1\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n         \"karma-chrome-launcher\": \"^3.1.1\",\n@@ -6504,9 +6504,9 @@\n       \"dev\": true\n     },\n     \"node_modules/jquery\": {\n-      \"version\": \"3.6.1\",\n-      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.1.tgz\",\n-      \"integrity\": \"sha512-opJeO4nCucVnsjiXOE+/PcCgYw9Gwpvs/a6B1LL/lQhwWwpbVEVYDZ1FokFr8PRc7ghYlrFPuyHuiiDNTQxmcw==\",\n+      \"version\": \"3.6.2\",\n+      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.2.tgz\",\n+      \"integrity\": \"sha512-/e7ulNIEEYk1Z/l4X0vpxGt+B/dNsV8ghOPAWZaJs8pkGvsSC0tm33aMGylXcj/U7y4IcvwtMXPMyBFZn/gK9A==\",\n       \"dev\": true\n     },\n     \"node_modules/js-sdsl\": {\n@@ -15351,9 +15351,9 @@\n       \"dev\": true\n     },\n     \"jquery\": {\n-      \"version\": \"3.6.1\",\n-      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.1.tgz\",\n-      \"integrity\": \"sha512-opJeO4nCucVnsjiXOE+/PcCgYw9Gwpvs/a6B1LL/lQhwWwpbVEVYDZ1FokFr8PRc7ghYlrFPuyHuiiDNTQxmcw==\",\n+      \"version\": \"3.6.2\",\n+      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.2.tgz\",\n+      \"integrity\": \"sha512-/e7ulNIEEYk1Z/l4X0vpxGt+B/dNsV8ghOPAWZaJs8pkGvsSC0tm33aMGylXcj/U7y4IcvwtMXPMyBFZn/gK9A==\",\n       \"dev\": true\n     },\n     \"js-sdsl\": {\ndiff --git a/package.json b/package.json\nindex 678efee18..687b0ac3b 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.96.0\",\n     \"ip\": \"^2.0.0\",\n-    \"jquery\": \"^3.6.1\",\n+    \"jquery\": \"^3.6.2\",\n     \"karma\": \"^6.4.1\",\n     \"karma-browserstack-launcher\": \"1.4.0\",\n     \"karma-chrome-launcher\": \"^3.1.1\",",
    "output": "build(deps-dev): Bump jquery from 3.6.1 to 3.6.2 (#37638)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex dc4966304..9f32586cd 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.20.2\",\n         \"@popperjs/core\": \"^2.11.6\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^23.0.3\",\n+        \"@rollup/plugin-commonjs\": \"^23.0.4\",\n         \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n         \"@rollup/plugin-replace\": \"^5.0.1\",\n         \"autoprefixer\": \"^10.4.13\",\n@@ -1964,9 +1964,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"23.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.3.tgz\",\n-      \"integrity\": \"sha512-31HxrT5emGfTyIfAs1lDQHj6EfYxTXcwtX5pIIhq+B/xZBNIqQ179d/CkYxlpYmFCxT78AeU4M8aL8Iv/IBxFA==\",\n+      \"version\": \"23.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.4.tgz\",\n+      \"integrity\": \"sha512-bOPJeTZg56D2MCm+TT4psP8e8Jmf1Jsi7pFUMl8BN5kOADNzofNHe47+84WVCt7D095xPghC235/YKuNDEhczg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -11926,9 +11926,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"23.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.3.tgz\",\n-      \"integrity\": \"sha512-31HxrT5emGfTyIfAs1lDQHj6EfYxTXcwtX5pIIhq+B/xZBNIqQ179d/CkYxlpYmFCxT78AeU4M8aL8Iv/IBxFA==\",\n+      \"version\": \"23.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.4.tgz\",\n+      \"integrity\": \"sha512-bOPJeTZg56D2MCm+TT4psP8e8Jmf1Jsi7pFUMl8BN5kOADNzofNHe47+84WVCt7D095xPghC235/YKuNDEhczg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex eea30d02a..6162a72de 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@babel/preset-env\": \"^7.20.2\",\n     \"@popperjs/core\": \"^2.11.6\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^23.0.3\",\n+    \"@rollup/plugin-commonjs\": \"^23.0.4\",\n     \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n     \"@rollup/plugin-replace\": \"^5.0.1\",\n     \"autoprefixer\": \"^10.4.13\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 23.0.3 to 23.0.4 (#37635)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ee3df0385..dc4966304 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^4.0.5\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.95.0\",\n+        \"hugo-bin\": \"^0.96.0\",\n         \"ip\": \"^2.0.0\",\n         \"jquery\": \"^3.6.1\",\n         \"karma\": \"^6.4.1\",\n@@ -5743,9 +5743,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.95.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.95.0.tgz\",\n-      \"integrity\": \"sha512-0hE/PMGpb5ACqDgkJ2zLtl0rFoLDfmRZbC9wkLnMEnjF4Mrz/dCFJIZb66HgxrdK4SfrZfmNLL5usuOi0bjhag==\",\n+      \"version\": \"0.96.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.96.0.tgz\",\n+      \"integrity\": \"sha512-a85/ZvD7NJ/Puz8/fRKVhHxxB/+qaN96fdOxHrtTeqsnZXXcpMGuD3LhN4h8xeqfAfJHWroeI2R7bPfnr+qmWg==\",\n       \"dev\": true,\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n@@ -14789,9 +14789,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.95.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.95.0.tgz\",\n-      \"integrity\": \"sha512-0hE/PMGpb5ACqDgkJ2zLtl0rFoLDfmRZbC9wkLnMEnjF4Mrz/dCFJIZb66HgxrdK4SfrZfmNLL5usuOi0bjhag==\",\n+      \"version\": \"0.96.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.96.0.tgz\",\n+      \"integrity\": \"sha512-a85/ZvD7NJ/Puz8/fRKVhHxxB/+qaN96fdOxHrtTeqsnZXXcpMGuD3LhN4h8xeqfAfJHWroeI2R7bPfnr+qmWg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"bin-wrapper\": \"^4.1.0\",\ndiff --git a/package.json b/package.json\nindex b8bae51f2..eea30d02a 100644\n--- a/package.json\n+++ b/package.json\n@@ -125,7 +125,7 @@\n     \"find-unused-sass-variables\": \"^4.0.5\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.95.0\",\n+    \"hugo-bin\": \"^0.96.0\",\n     \"ip\": \"^2.0.0\",\n     \"jquery\": \"^3.6.1\",\n     \"karma\": \"^6.4.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.95.0 to 0.96.0 (#37636)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a09aa70ef..ee3df0385 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -60,7 +60,7 @@\n         \"rollup\": \"^3.5.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n-        \"sass\": \"^1.56.1\",\n+        \"sass\": \"^1.56.2\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.16.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n@@ -9016,9 +9016,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.56.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.1.tgz\",\n-      \"integrity\": \"sha512-VpEyKpyBPCxE7qGDtOcdJ6fFbcpOM+Emu7uZLxVrkX8KVU/Dp5UF7WLvzqRuUhB6mqqQt1xffLoG+AndxTZrCQ==\",\n+      \"version\": \"1.56.2\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.2.tgz\",\n+      \"integrity\": \"sha512-ciEJhnyCRwzlBCB+h5cCPM6ie/6f8HrhZMQOf5vlU60Y1bI1rx5Zb0vlDZvaycHsg/MqFfF1Eq2eokAa32iw8w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17140,9 +17140,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.56.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.1.tgz\",\n-      \"integrity\": \"sha512-VpEyKpyBPCxE7qGDtOcdJ6fFbcpOM+Emu7uZLxVrkX8KVU/Dp5UF7WLvzqRuUhB6mqqQt1xffLoG+AndxTZrCQ==\",\n+      \"version\": \"1.56.2\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.56.2.tgz\",\n+      \"integrity\": \"sha512-ciEJhnyCRwzlBCB+h5cCPM6ie/6f8HrhZMQOf5vlU60Y1bI1rx5Zb0vlDZvaycHsg/MqFfF1Eq2eokAa32iw8w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 5989982cc..b8bae51f2 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.5.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n-    \"sass\": \"^1.56.1\",\n+    \"sass\": \"^1.56.2\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.16.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",",
    "output": "build(deps-dev): Bump sass from 1.56.1 to 1.56.2 (#37637)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex f0d2c04fb..5e73cb420 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -31,7 +31,7 @@\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.1\",\n         \"cross-env\": \"^7.0.3\",\n-        \"eslint\": \"^8.28.0\",\n+        \"eslint\": \"^8.29.0\",\n         \"eslint-config-xo\": \"^0.43.1\",\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.26.0\",\n@@ -4239,9 +4239,9 @@\n       }\n     },\n     \"node_modules/eslint\": {\n-      \"version\": \"8.28.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.28.0.tgz\",\n-      \"integrity\": \"sha512-S27Di+EVyMxcHiwDrFzk8dJYAaD+/5SoWKxL1ri/71CRHsnJnRDPNt2Kzj24+MT9FDupf4aqqyqPrvI8MvQ4VQ==\",\n+      \"version\": \"8.29.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.29.0.tgz\",\n+      \"integrity\": \"sha512-isQ4EEiyUjZFbEKvEGJKKGBwXtvXX+zJbkVKCgTuB9t/+jUBcy8avhkEwWJecI15BkRkOYmvIM5ynbhRjEkoeg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@eslint/eslintrc\": \"^1.3.3\",\n@@ -13637,9 +13637,9 @@\n       \"dev\": true\n     },\n     \"eslint\": {\n-      \"version\": \"8.28.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.28.0.tgz\",\n-      \"integrity\": \"sha512-S27Di+EVyMxcHiwDrFzk8dJYAaD+/5SoWKxL1ri/71CRHsnJnRDPNt2Kzj24+MT9FDupf4aqqyqPrvI8MvQ4VQ==\",\n+      \"version\": \"8.29.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.29.0.tgz\",\n+      \"integrity\": \"sha512-isQ4EEiyUjZFbEKvEGJKKGBwXtvXX+zJbkVKCgTuB9t/+jUBcy8avhkEwWJecI15BkRkOYmvIM5ynbhRjEkoeg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@eslint/eslintrc\": \"^1.3.3\",\ndiff --git a/package.json b/package.json\nindex 736b7a21d..477e3b2fe 100644\n--- a/package.json\n+++ b/package.json\n@@ -116,7 +116,7 @@\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.1\",\n     \"cross-env\": \"^7.0.3\",\n-    \"eslint\": \"^8.28.0\",\n+    \"eslint\": \"^8.29.0\",\n     \"eslint-config-xo\": \"^0.43.1\",\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.26.0\",",
    "output": "build(deps-dev): Bump eslint from 8.28.0 to 8.29.0 (#37595)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex fe967eefa..f0d2c04fb 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -3635,9 +3635,9 @@\n       }\n     },\n     \"node_modules/decode-uri-component\": {\n-      \"version\": \"0.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz\",\n-      \"integrity\": \"sha512-hjf+xovcEn31w/EUYdTXQh/8smFL/dzYjohQGEIgjyNavaJfBY2p5F527Bo1VPATxv0VYTUC2bOcXvqFwk78Og==\",\n+      \"version\": \"0.2.2\",\n+      \"resolved\": \"https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz\",\n+      \"integrity\": \"sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==\",\n       \"dev\": true,\n       \"engines\": {\n         \"node\": \">=0.10\"\n@@ -13152,9 +13152,9 @@\n       }\n     },\n     \"decode-uri-component\": {\n-      \"version\": \"0.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz\",\n-      \"integrity\": \"sha512-hjf+xovcEn31w/EUYdTXQh/8smFL/dzYjohQGEIgjyNavaJfBY2p5F527Bo1VPATxv0VYTUC2bOcXvqFwk78Og==\",\n+      \"version\": \"0.2.2\",\n+      \"resolved\": \"https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz\",\n+      \"integrity\": \"sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==\",\n       \"dev\": true\n     },\n     \"decompress\": {",
    "output": "build(deps): Bump decode-uri-component from 0.2.0 to 0.2.2 (#37572)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 63b590aa7..fe967eefa 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^14.15.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n-        \"terser\": \"^5.15.1\",\n+        \"terser\": \"^5.16.0\",\n         \"vnu-jar\": \"22.9.29\"\n       },\n       \"peerDependencies\": {\n@@ -9920,9 +9920,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.15.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.15.1.tgz\",\n-      \"integrity\": \"sha512-K1faMUvpm/FBxjBXud0LWVAGxmvoPbZbfTCYbSgaaYQaIXI3/TdI7a7ZGA73Zrou6Q8Zmz3oeUTsp/dj+ag2Xw==\",\n+      \"version\": \"5.16.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.16.0.tgz\",\n+      \"integrity\": \"sha512-KjTV81QKStSfwbNiwlBXfcgMcOloyuRdb62/iLFPGBcVNF4EXjhdYBhYHmbJpiBrVxZhDvltE11j+LBQUxEEJg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.2\",\n@@ -17838,9 +17838,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.15.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.15.1.tgz\",\n-      \"integrity\": \"sha512-K1faMUvpm/FBxjBXud0LWVAGxmvoPbZbfTCYbSgaaYQaIXI3/TdI7a7ZGA73Zrou6Q8Zmz3oeUTsp/dj+ag2Xw==\",\n+      \"version\": \"5.16.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.16.0.tgz\",\n+      \"integrity\": \"sha512-KjTV81QKStSfwbNiwlBXfcgMcOloyuRdb62/iLFPGBcVNF4EXjhdYBhYHmbJpiBrVxZhDvltE11j+LBQUxEEJg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.2\",\ndiff --git a/package.json b/package.json\nindex 3f9ae4b21..736b7a21d 100644\n--- a/package.json\n+++ b/package.json\n@@ -149,7 +149,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^14.15.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^7.0.0\",\n-    \"terser\": \"^5.15.1\",\n+    \"terser\": \"^5.16.0\",\n     \"vnu-jar\": \"22.9.29\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.15.1 to 5.16.0 (#37556)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 347060e63..35b258e34 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -57,7 +57,7 @@\n         \"npm-run-all\": \"^4.1.5\",\n         \"postcss\": \"^8.4.19\",\n         \"postcss-cli\": \"^10.0.0\",\n-        \"rollup\": \"^3.4.0\",\n+        \"rollup\": \"^3.5.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.0.0\",\n         \"sass\": \"^1.56.1\",\n@@ -8880,9 +8880,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.4.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.4.0.tgz\",\n-      \"integrity\": \"sha512-4g8ZrEFK7UbDvy3JF+d5bLiC8UKkS3n/27/cnVeESwB1LVPl6MoPL32/6+SCQ1vHTp6Mvp2veIHtwELhi+uXEw==\",\n+      \"version\": \"3.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.5.0.tgz\",\n+      \"integrity\": \"sha512-TYu2L+TGhmNsXCtByont89u+ATQLcDy6A+++PwLXYunRtOm7XnaD+65s1pvewaOxMYR0eOkMXn9/i0saBxxpnQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17048,9 +17048,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.4.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.4.0.tgz\",\n-      \"integrity\": \"sha512-4g8ZrEFK7UbDvy3JF+d5bLiC8UKkS3n/27/cnVeESwB1LVPl6MoPL32/6+SCQ1vHTp6Mvp2veIHtwELhi+uXEw==\",\n+      \"version\": \"3.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.5.0.tgz\",\n+      \"integrity\": \"sha512-TYu2L+TGhmNsXCtByont89u+ATQLcDy6A+++PwLXYunRtOm7XnaD+65s1pvewaOxMYR0eOkMXn9/i0saBxxpnQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex a4bf63212..a4d28702e 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all\": \"^4.1.5\",\n     \"postcss\": \"^8.4.19\",\n     \"postcss-cli\": \"^10.0.0\",\n-    \"rollup\": \"^3.4.0\",\n+    \"rollup\": \"^3.5.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.0.0\",\n     \"sass\": \"^1.56.1\",",
    "output": "build(deps-dev): Bump rollup from 3.4.0 to 3.5.0 (#37559)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 01ed18aff..347060e63 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.20.2\",\n         \"@popperjs/core\": \"^2.11.6\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^23.0.2\",\n+        \"@rollup/plugin-commonjs\": \"^23.0.3\",\n         \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n         \"@rollup/plugin-replace\": \"^5.0.1\",\n         \"autoprefixer\": \"^10.4.13\",\n@@ -1964,9 +1964,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"23.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.2.tgz\",\n-      \"integrity\": \"sha512-e9ThuiRf93YlVxc4qNIurvv+Hp9dnD+4PjOqQs5vAYfcZ3+AXSrcdzXnVjWxcGQOa6KGJFcRZyUI3ktWLavFjg==\",\n+      \"version\": \"23.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.3.tgz\",\n+      \"integrity\": \"sha512-31HxrT5emGfTyIfAs1lDQHj6EfYxTXcwtX5pIIhq+B/xZBNIqQ179d/CkYxlpYmFCxT78AeU4M8aL8Iv/IBxFA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -11914,9 +11914,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"23.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.2.tgz\",\n-      \"integrity\": \"sha512-e9ThuiRf93YlVxc4qNIurvv+Hp9dnD+4PjOqQs5vAYfcZ3+AXSrcdzXnVjWxcGQOa6KGJFcRZyUI3ktWLavFjg==\",\n+      \"version\": \"23.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-23.0.3.tgz\",\n+      \"integrity\": \"sha512-31HxrT5emGfTyIfAs1lDQHj6EfYxTXcwtX5pIIhq+B/xZBNIqQ179d/CkYxlpYmFCxT78AeU4M8aL8Iv/IBxFA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 45f91b62f..a4bf63212 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@babel/preset-env\": \"^7.20.2\",\n     \"@popperjs/core\": \"^2.11.6\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^23.0.2\",\n+    \"@rollup/plugin-commonjs\": \"^23.0.3\",\n     \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n     \"@rollup/plugin-replace\": \"^5.0.1\",\n     \"autoprefixer\": \"^10.4.13\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 23.0.2 to 23.0.3 (#37557)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b912385e3..01ed18aff 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -23,7 +23,7 @@\n         \"@babel/core\": \"^7.20.2\",\n         \"@babel/preset-env\": \"^7.20.2\",\n         \"@popperjs/core\": \"^2.11.6\",\n-        \"@rollup/plugin-babel\": \"^6.0.2\",\n+        \"@rollup/plugin-babel\": \"^6.0.3\",\n         \"@rollup/plugin-commonjs\": \"^23.0.2\",\n         \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n         \"@rollup/plugin-replace\": \"^5.0.1\",\n@@ -1938,9 +1938,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-babel\": {\n-      \"version\": \"6.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.2.tgz\",\n-      \"integrity\": \"sha512-Vnt8XIWYwCf3MD7qhBWYlP9pjSZvcE++nlPXhQYw6YNehl5742AzFbrV6h4BHb20VAOVUlIksVLymQCTwVCGDg==\",\n+      \"version\": \"6.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.3.tgz\",\n+      \"integrity\": \"sha512-fKImZKppa1A/gX73eg4JGo+8kQr/q1HBQaCGKECZ0v4YBBv3lFqi14+7xyApECzvkLTHCifx+7ntcrvtBIRcpg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-module-imports\": \"^7.18.6\",\n@@ -11904,9 +11904,9 @@\n       \"dev\": true\n     },\n     \"@rollup/plugin-babel\": {\n-      \"version\": \"6.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.2.tgz\",\n-      \"integrity\": \"sha512-Vnt8XIWYwCf3MD7qhBWYlP9pjSZvcE++nlPXhQYw6YNehl5742AzFbrV6h4BHb20VAOVUlIksVLymQCTwVCGDg==\",\n+      \"version\": \"6.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.3.tgz\",\n+      \"integrity\": \"sha512-fKImZKppa1A/gX73eg4JGo+8kQr/q1HBQaCGKECZ0v4YBBv3lFqi14+7xyApECzvkLTHCifx+7ntcrvtBIRcpg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/helper-module-imports\": \"^7.18.6\",\ndiff --git a/package.json b/package.json\nindex 21210012e..45f91b62f 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/core\": \"^7.20.2\",\n     \"@babel/preset-env\": \"^7.20.2\",\n     \"@popperjs/core\": \"^2.11.6\",\n-    \"@rollup/plugin-babel\": \"^6.0.2\",\n+    \"@rollup/plugin-babel\": \"^6.0.3\",\n     \"@rollup/plugin-commonjs\": \"^23.0.2\",\n     \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n     \"@rollup/plugin-replace\": \"^5.0.1\",",
    "output": "build(deps-dev): Bump @rollup/plugin-babel from 6.0.2 to 6.0.3 (#37560)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c7ffd1880..b912385e3 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^4.0.5\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.94.0\",\n+        \"hugo-bin\": \"^0.95.0\",\n         \"ip\": \"^2.0.0\",\n         \"jquery\": \"^3.6.1\",\n         \"karma\": \"^6.4.1\",\n@@ -5743,9 +5743,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.94.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.94.0.tgz\",\n-      \"integrity\": \"sha512-qo/jl+Rc2EZ0glyunLNu2WUFYl9BhUWMGO+VFB/hmT9Hj1MjeVHzQ38zB0etq+RaGKW8TunEHeQ+vT6iApT7Yw==\",\n+      \"version\": \"0.95.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.95.0.tgz\",\n+      \"integrity\": \"sha512-0hE/PMGpb5ACqDgkJ2zLtl0rFoLDfmRZbC9wkLnMEnjF4Mrz/dCFJIZb66HgxrdK4SfrZfmNLL5usuOi0bjhag==\",\n       \"dev\": true,\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n@@ -14777,9 +14777,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.94.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.94.0.tgz\",\n-      \"integrity\": \"sha512-qo/jl+Rc2EZ0glyunLNu2WUFYl9BhUWMGO+VFB/hmT9Hj1MjeVHzQ38zB0etq+RaGKW8TunEHeQ+vT6iApT7Yw==\",\n+      \"version\": \"0.95.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.95.0.tgz\",\n+      \"integrity\": \"sha512-0hE/PMGpb5ACqDgkJ2zLtl0rFoLDfmRZbC9wkLnMEnjF4Mrz/dCFJIZb66HgxrdK4SfrZfmNLL5usuOi0bjhag==\",\n       \"dev\": true,\n       \"requires\": {\n         \"bin-wrapper\": \"^4.1.0\",\ndiff --git a/package.json b/package.json\nindex f870e03f9..21210012e 100644\n--- a/package.json\n+++ b/package.json\n@@ -125,7 +125,7 @@\n     \"find-unused-sass-variables\": \"^4.0.5\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.94.0\",\n+    \"hugo-bin\": \"^0.95.0\",\n     \"ip\": \"^2.0.0\",\n     \"jquery\": \"^3.6.1\",\n     \"karma\": \"^6.4.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.94.0 to 0.95.0 (#37561)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/customize/color-modes.md b/site/content/docs/5.2/customize/color-modes.md\nindex a127143ab..929075cbb 100644\n--- a/site/content/docs/5.2/customize/color-modes.md\n+++ b/site/content/docs/5.2/customize/color-modes.md\n@@ -137,14 +137,14 @@ Enable the built in dark color mode across your entire project by adding the `da\n \n ```html\n <!doctype html>\n-<html lang=\"en\">\n+<html lang=\"en\" data-bs-theme=\"dark\">\n   <head>\n     <meta charset=\"utf-8\">\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n     <title>Bootstrap demo</title>\n     <link href=\"{{< param \"cdn.css\" >}}\" rel=\"stylesheet\" integrity=\"{{< param \"cdn.css_hash\" >}}\" crossorigin=\"anonymous\">\n   </head>\n-  <body data-bs-theme=\"dark\">\n+  <body>\n     <h1>Hello, world!</h1>\n     <script src=\"{{< param \"cdn.js_bundle\" >}}\" integrity=\"{{< param \"cdn.js_bundle_hash\" >}}\" crossorigin=\"anonymous\"></script>\n   </body>",
    "output": "docs: fix 'Usage > Enable dark mode' code example (#37553)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/utilities/background.md b/site/content/docs/5.2/utilities/background.md\nindex ef7b2468e..dad71ec37 100644\n--- a/site/content/docs/5.2/utilities/background.md\n+++ b/site/content/docs/5.2/utilities/background.md\n@@ -17,11 +17,11 @@ Similar to the contextual text color classes, set the background of an element t\n <div class=\"p-3 mb-2 bg-{{ .name }}-subtle text-emphasis-{{ .name }}\">.bg-{{ .name }}-subtle</div>\n {{- end -}}\n {{< /colors.inline >}}\n-\n <p class=\"p-3 mb-2 bg-body-secondary\">.bg-body-secondary</p>\n <p class=\"p-3 mb-2 bg-body-tertiary\">.bg-body-tertiary</p>\n \n <div class=\"p-3 mb-2 bg-body text-body\">.bg-body</div>\n+<div class=\"p-3 mb-2 bg-black text-white\">.bg-black</div>\n <div class=\"p-3 mb-2 bg-white text-dark\">.bg-white</div>\n <div class=\"p-3 mb-2 bg-transparent text-body\">.bg-transparent</div>\n {{< /example >}}\n@@ -38,6 +38,7 @@ Do you need a gradient in your custom CSS? Just add `background-image: var(--bs-\n <div class=\"p-3 mb-2 bg-{{ .name }} bg-gradient{{ with .contrast_color }} text-{{ . }}{{ else }} text-white{{ end }}\">.bg-{{ .name }}.bg-gradient</div>\n {{- end -}}\n {{< /colors.inline >}}\n+<div class=\"p-3 mb-2 bg-black bg-gradient text-white\">.bg-black.bg-gradient</div>\n {{< /markdown >}}\n \n ## Opacity\ndiff --git a/site/content/docs/5.2/utilities/colors.md b/site/content/docs/5.2/utilities/colors.md\nindex 94418ac5e..4b1647242 100644\n--- a/site/content/docs/5.2/utilities/colors.md\n+++ b/site/content/docs/5.2/utilities/colors.md\n@@ -24,6 +24,7 @@ Colorize text with color utilities. If you want to colorize links, you can use t\n <p class=\"text-body-secondary\">.text-body-secondary</p>\n <p class=\"text-body-tertiary\">.text-body-tertiary</p>\n \n+<p class=\"text-black bg-white\">.text-black</p>\n <p class=\"text-white bg-dark\">.text-white</p>\n <p class=\"text-black-50 bg-white\">.text-black-50</p>\n <p class=\"text-white-50 bg-dark\">.text-white-50</p>",
    "output": "docs: Add black text/background examples (#37538)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/examples/navbars/index.html b/site/content/docs/5.2/examples/navbars/index.html\nindex e0e83b152..c4d0d89e4 100644\n--- a/site/content/docs/5.2/examples/navbars/index.html\n+++ b/site/content/docs/5.2/examples/navbars/index.html\n@@ -400,7 +400,7 @@ extra_css:\n       </div>\n     </nav>\n \n-    <nav class=\"navbar navbar-expand-lg bg-light rounded\" aria-label=\"Thirtheenth navbar example\">\n+    <nav class=\"navbar navbar-expand-lg bg-light rounded\" aria-label=\"Thirteenth navbar example\">\n       <div class=\"container-fluid\">\n         <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarsExample11\" aria-controls=\"navbarsExample11\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n           <span class=\"navbar-toggler-icon\"></span>",
    "output": "docs: fix typo in Navbars example (#37535)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_carousel.scss b/scss/_carousel.scss\nindex 3d8fb15a0..858b83634 100644\n--- a/scss/_carousel.scss\n+++ b/scss/_carousel.scss\n@@ -42,7 +42,6 @@\n   display: block;\n }\n \n-/* rtl:begin:ignore */\n .carousel-item-next:not(.carousel-item-start),\n .active.carousel-item-end {\n   transform: translateX(100%);\n@@ -53,8 +52,6 @@\n   transform: translateX(-100%);\n }\n \n-/* rtl:end:ignore */\n-\n \n //\n // Alternate transitions",
    "output": "fix(carousel): RTL `translate()` direction"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex 8f39b2209..0d8460a14 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -208,8 +208,14 @@\n }\n \n // Tooltips\n-.tooltip-demo a {\n-  white-space: nowrap;\n+.tooltip-demo {\n+  a {\n+    white-space: nowrap;\n+  }\n+\n+  .btn {\n+    margin: .25rem .125rem;\n+  }\n }\n \n // scss-docs-start custom-tooltip",
    "output": "docs: add margin between buttons in tooltip examples"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/components/card.md b/site/content/docs/5.2/components/card.md\nindex 89466fe5c..f715a5eac 100644\n--- a/site/content/docs/5.2/components/card.md\n+++ b/site/content/docs/5.2/components/card.md\n@@ -207,7 +207,7 @@ Using the grid, wrap cards in columns and rows as needed.\n \n {{< example >}}\n <div class=\"row\">\n-  <div class=\"col-sm-6\">\n+  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n     <div class=\"card\">\n       <div class=\"card-body\">\n         <h5 class=\"card-title\">Special title treatment</h5>\n@@ -233,7 +233,7 @@ Using the grid, wrap cards in columns and rows as needed.\n Use our handful of [available sizing utilities]({{< docsref \"/utilities/sizing\" >}}) to quickly set a card's width.\n \n {{< example >}}\n-<div class=\"card w-75\">\n+<div class=\"card w-75 mb-3\">\n   <div class=\"card-body\">\n     <h5 class=\"card-title\">Card title</h5>\n     <p class=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n@@ -269,7 +269,7 @@ Use custom CSS in your stylesheets or as inline styles to set a width.\n You can quickly change the text alignment of any card\u2014in its entirety or specific parts\u2014with our [text align classes]({{< docsref \"/utilities/text#text-alignment\" >}}).\n \n {{< example >}}\n-<div class=\"card\" style=\"width: 18rem;\">\n+<div class=\"card mb-3\" style=\"width: 18rem;\">\n   <div class=\"card-body\">\n     <h5 class=\"card-title\">Special title treatment</h5>\n     <p class=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n@@ -277,7 +277,7 @@ You can quickly change the text alignment of any card\u2014in its entirety or speci\n   </div>\n </div>\n \n-<div class=\"card text-center\" style=\"width: 18rem;\">\n+<div class=\"card text-center mb-3\" style=\"width: 18rem;\">\n   <div class=\"card-body\">\n     <h5 class=\"card-title\">Special title treatment</h5>\n     <p class=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>",
    "output": "docs: fix margins between cards in examples"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/utilities/z-index.md b/site/content/docs/5.2/utilities/z-index.md\nindex 7cfd22faa..5e4fe05b0 100644\n--- a/site/content/docs/5.2/utilities/z-index.md\n+++ b/site/content/docs/5.2/utilities/z-index.md\n@@ -4,12 +4,11 @@ title: Z-index\n description: Use our low-level `z-index` utilities to quickly change the stack level of an element or component.\n group: utilities\n toc: true\n+added: \"5.3\"\n ---\n \n ## Example\n \n-{{< added-in \"5.3.0\" >}}\n-\n Use `z-index` utilities to stack elements on top of one another. Requires a `position` value other than `static`, which can be set with custom styles or using our [position utilities]({{< docsref \"/utilities/position/\" >}}).\n \n {{< callout >}}\n@@ -43,4 +42,3 @@ Learn about our [`z-index` approach]({{< docsref \"/extend/approach#z-index-scale\n Customize this Sass map to change the available values and generated utilities.\n \n {{< scss-docs name=\"zindex-levels-map\" file=\"scss/_variables.scss\" >}}\n-",
    "output": "docs: Make added-in badge page-level for z-index utilities (#37491)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex ab03e2de7..918e0a152 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -6,7 +6,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   browserstack:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 1783fc48b..8159ae2da 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   bundlewatch:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex c271ddd51..68323a975 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   css:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex a4c58175b..a47d82fda 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   docs:\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex fc34b7c21..724f16c62 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   run:\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 179f86991..b804462c9 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   lint:\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 89a59d4f7..b0f9a72de 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 16\n+  NODE: 18\n \n jobs:\n   css:",
    "output": "ci: switch to Node.js 18 LTS (#37461)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/util/index.js b/js/src/util/index.js\nindex 8c6922173..b04fdc120 100644\n--- a/js/src/util/index.js\n+++ b/js/src/util/index.js\n@@ -17,7 +17,7 @@ const TRANSITION_END = 'transitionend'\n const parseSelector = selector => {\n   if (selector && window.CSS && window.CSS.escape) {\n     // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n-    selector = selector.replaceAll(/#([^\\s\"#']+)/g, (match, id) => '#' + CSS.escape(id))\n+    selector = selector.replace(/#([^\\s\"#']+)/g, (match, id) => '#' + CSS.escape(id))\n   }\n \n   return selector",
    "output": "fix: change `replaceAll` usage introduced in #35566 (#37473)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/_default/docs.html b/site/layouts/_default/docs.html\nindex 27314c37d..d534f2c04 100644\n--- a/site/layouts/_default/docs.html\n+++ b/site/layouts/_default/docs.html\n@@ -17,7 +17,9 @@\n       <div class=\"bd-intro pt-2 ps-lg-2\">\n         <div class=\"d-md-flex flex-md-row-reverse align-items-center justify-content-between\">\n           <div class=\"mb-3 mb-md-0 d-flex\">\n-            <small class=\"d-inline-flex px-2 py-1 fw-semibold text-success bg-success bg-opacity-10 border border-success border-opacity-10 rounded-2 me-2\">Added in v{{ .Page.Params.added }}</small>\n+            {{- if .Page.Params.added -}}\n+              <small class=\"d-inline-flex px-2 py-1 fw-semibold text-success bg-success bg-opacity-10 border border-success border-opacity-10 rounded-2 me-2\">Added in v{{ .Page.Params.added }}</small>\n+            {{- end -}}\n             <a class=\"btn btn-sm btn-bd-light rounded-2\" href=\"{{ .Site.Params.repo }}/blob/v{{ .Site.Params.current_version }}/site/content/{{ .Page.File.Path | replaceRE `\\\\` \"/\" }}\" title=\"View and edit this file on GitHub\" target=\"_blank\" rel=\"noopener\">\n               View on GitHub\n             </a>",
    "output": "docs: Only show added in page badge if relevant (#37399)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/getting-started/contribute.md b/site/content/docs/5.2/getting-started/contribute.md\nindex c42ad3c49..b6e1faa54 100644\n--- a/site/content/docs/5.2/getting-started/contribute.md\n+++ b/site/content/docs/5.2/getting-started/contribute.md\n@@ -14,7 +14,7 @@ Bootstrap uses [npm scripts](https://docs.npmjs.com/misc/scripts/) to build the\n To use our build system and run our documentation locally, you'll need a copy of Bootstrap's source files and Node. Follow these steps and you should be ready to rock:\n \n 1. [Download and install Node.js](https://nodejs.org/en/download/), which we use to manage our dependencies.\n-2. Either [download Bootstrap's sources]({{< param \"download.source\" >}}) or fork [Bootstrap's repository]({{< param repo >}}).\n+2. Either [download Bootstrap's sources]({{< param \"download.source\" >}}) or fork and clone [Bootstrap's repository]({{< param repo >}}).\n 3. Navigate to the root `/bootstrap` directory and run `npm install` to install our local dependencies listed in [package.json]({{< param repo >}}/blob/v{{< param current_version >}}/package.json).\n \n When completed, you'll be able to run the various commands provided from the command line.",
    "output": "docs: Slightly improve tooling setup description"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/utilities/borders.md b/site/content/docs/5.2/utilities/borders.md\nindex 60be796d9..631df172a 100644\n--- a/site/content/docs/5.2/utilities/borders.md\n+++ b/site/content/docs/5.2/utilities/borders.md\n@@ -140,7 +140,6 @@ Use the scaling classes for larger or smaller rounded corners. Sizes range from\n {{< /example >}}\n \n {{< example class=\"bd-example-rounded-utils\" >}}\n-\n {{< placeholder width=\"75\" height=\"75\" class=\"rounded-bottom-1\" title=\"Example small rounded image\" >}}\n {{< placeholder width=\"75\" height=\"75\" class=\"rounded-start-2\" title=\"Example default left rounded image\" >}}\n {{< placeholder width=\"75\" height=\"75\" class=\"rounded-end-circle\" title=\"Example right completely round image\" >}}\ndiff --git a/site/layouts/shortcodes/placeholder.html b/site/layouts/shortcodes/placeholder.html\nindex 9c915bcd6..7c65bf00b 100644\n--- a/site/layouts/shortcodes/placeholder.html\n+++ b/site/layouts/shortcodes/placeholder.html\n@@ -29,7 +29,6 @@\n \n {{- $markup := .Get \"markup\" | default \"svg\" -}}\n \n-\n {{- if eq $markup \"img\" -}}\n   <img class=\"bd-placeholder-img{{ with $class }} {{ . }}{{ end }}\" alt=\"{{ $title }} : {{ $text }}\" width=\"{{ $width }}\" height=\"{{ $height }}\" src=\"data:image/svg+xml,%3Csvg%20style='font-size:%201.125rem;%20font-family:system-ui,-apple-system,%22Segoe%20UI%22,Roboto,%22Helvetica%20Neue%22,%22Noto%20Sans%22,%22Liberation%20Sans%22,Arial,sans-serif,%22Apple%20Color%20Emoji%22,%22Segoe%20UI%20Emoji%22,%22Segoe%20UI%20Symbol%22,%22Noto%20Color%20Emoji%22;%20-webkit-user-select:%20none;%20-moz-user-select:%20none;%20user-select:%20none;%20text-anchor:%20middle;'%20width='200'%20height='200'%20xmlns='http://www.w3.org/2000/svg'%3E\n       {{- if $show_title }}%3Ctitle%3E{{ $title }}%3C/title%3E{{ end -}}",
    "output": "docs: remove moot newlines (#37379)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/helpers/color-background.md b/site/content/docs/5.2/helpers/color-background.md\nindex c4174845c..1aa9f1a54 100644\n--- a/site/content/docs/5.2/helpers/color-background.md\n+++ b/site/content/docs/5.2/helpers/color-background.md\n@@ -9,8 +9,6 @@ added: \"5.2\"\n \n ## Overview\n \n-{{< added-in \"5.2.0\" >}}\n-\n Color and background helpers combine the power of our [`.text-*` utilities]({{< docsref \"/utilities/colors\" >}}) and [`.bg-*` utilities]({{< docsref \"/utilities/background\" >}}) in one class. Using our Sass `color-contrast()` function, we automatically determine a contrasting `color` for a particular `background-color`.\n \n {{< callout warning >}}\ndiff --git a/site/layouts/_default/docs.html b/site/layouts/_default/docs.html\nindex 1a3f9c1a1..27314c37d 100644\n--- a/site/layouts/_default/docs.html\n+++ b/site/layouts/_default/docs.html\n@@ -16,9 +16,12 @@\n     <main class=\"bd-main order-1\">\n       <div class=\"bd-intro pt-2 ps-lg-2\">\n         <div class=\"d-md-flex flex-md-row-reverse align-items-center justify-content-between\">\n-          <a class=\"btn btn-sm btn-bd-light mb-3 mb-md-0 rounded-2\" href=\"{{ .Site.Params.repo }}/blob/v{{ .Site.Params.current_version }}/site/content/{{ .Page.File.Path | replaceRE `\\\\` \"/\" }}\" title=\"View and edit this file on GitHub\" target=\"_blank\" rel=\"noopener\">\n-            View on GitHub\n-          </a>\n+          <div class=\"mb-3 mb-md-0 d-flex\">\n+            <small class=\"d-inline-flex px-2 py-1 fw-semibold text-success bg-success bg-opacity-10 border border-success border-opacity-10 rounded-2 me-2\">Added in v{{ .Page.Params.added }}</small>\n+            <a class=\"btn btn-sm btn-bd-light rounded-2\" href=\"{{ .Site.Params.repo }}/blob/v{{ .Site.Params.current_version }}/site/content/{{ .Page.File.Path | replaceRE `\\\\` \"/\" }}\" title=\"View and edit this file on GitHub\" target=\"_blank\" rel=\"noopener\">\n+              View on GitHub\n+            </a>\n+          </div>\n           <h1 class=\"bd-title mb-0\" id=\"content\">{{ .Title | markdownify }}</h1>\n         </div>\n         <p class=\"bd-lead\">{{ .Page.Params.Description | markdownify }}</p>",
    "output": "docs: use 'added' page information to display a tag on top of the pages (#37341)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/components/dropdowns.md b/site/content/docs/5.2/components/dropdowns.md\nindex c729542db..70087aa8d 100644\n--- a/site/content/docs/5.2/components/dropdowns.md\n+++ b/site/content/docs/5.2/components/dropdowns.md\n@@ -956,7 +956,7 @@ By default, the dropdown menu is closed when clicking inside or outside the drop\n \n <div class=\"btn-group\">\n   <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" data-bs-auto-close=\"inside\" aria-expanded=\"false\">\n-    Clickable outside\n+    Clickable inside\n   </button>\n   <ul class=\"dropdown-menu\">\n     <li><a class=\"dropdown-item\" href=\"#\">Menu item</a></li>\n@@ -967,7 +967,7 @@ By default, the dropdown menu is closed when clicking inside or outside the drop\n \n <div class=\"btn-group\">\n   <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" data-bs-auto-close=\"outside\" aria-expanded=\"false\">\n-    Clickable inside\n+    Clickable outside\n   </button>\n   <ul class=\"dropdown-menu\">\n     <li><a class=\"dropdown-item\" href=\"#\">Menu item</a></li>",
    "output": "docs: fixes text buttons to match behavior"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/getting-started/vite.md b/site/content/docs/5.2/getting-started/vite.md\nindex ee08379a7..b203eef8a 100644\n--- a/site/content/docs/5.2/getting-started/vite.md\n+++ b/site/content/docs/5.2/getting-started/vite.md\n@@ -73,7 +73,7 @@ At this point, everything is in the right place, but Vite won't work because we\n \n With dependencies installed and our project folder ready for us to start coding, we can now configure Vite and run our project locally.\n \n-1. **Open `vite.config.js` in your editor.** Since it's blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Vite were to look for our project's JavaScript and how the development server should behave (pulling from the `src` folder with hot reload).\n+1. **Open `vite.config.js` in your editor.** Since it's blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Vite where to look for our project's JavaScript and how the development server should behave (pulling from the `src` folder with hot reload).\n \n    <!-- eslint-skip -->\n    ```js\ndiff --git a/site/content/docs/5.2/getting-started/webpack.md b/site/content/docs/5.2/getting-started/webpack.md\nindex 86bab39eb..870e070e3 100644\n--- a/site/content/docs/5.2/getting-started/webpack.md\n+++ b/site/content/docs/5.2/getting-started/webpack.md\n@@ -75,7 +75,7 @@ At this point, everything is in the right place, but Webpack won't work because\n \n With dependencies installed and our project folder ready for us to start coding, we can now configure Webpack and run our project locally.\n \n-1. **Open `webpack.config.js` in your editor.** Since it's blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Webpack were to look for our project's JavaScript, where to output the compiled code to (`dist`), and how the development server should behave (pulling from the `dist` folder with hot reload).\n+1. **Open `webpack.config.js` in your editor.** Since it's blank, we'll need to add some boilerplate config to it so we can start our server. This part of the config tells Webpack where to look for our project's JavaScript, where to output the compiled code to (`dist`), and how the development server should behave (pulling from the `dist` folder with hot reload).\n \n    ```js\n    const path = require('path')",
    "output": "docs: Fix typo Getting Started > Vite and Webpack guides (#37153)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/components/navbar.md b/site/content/docs/5.2/components/navbar.md\nindex b37db0f92..7cbc4e2c1 100644\n--- a/site/content/docs/5.2/components/navbar.md\n+++ b/site/content/docs/5.2/components/navbar.md\n@@ -708,7 +708,7 @@ In the example below, to create an offcanvas navbar that is always collapsed acr\n             </ul>\n           </li>\n         </ul>\n-        <form class=\"d-flex\" role=\"search\">\n+        <form class=\"d-flex mt-3\" role=\"search\">\n           <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n           <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n         </form>\n@@ -768,7 +768,7 @@ When using offcanvas in a dark navbar, be aware that you may need to have a dark\n             </ul>\n           </li>\n         </ul>\n-        <form class=\"d-flex\" role=\"search\">\n+        <form class=\"d-flex mt-3\" role=\"search\">\n           <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n           <button class=\"btn btn-success\" type=\"submit\">Search</button>\n         </form>",
    "output": "docs: minor fix for Navbar > Offcanvas examples (#37145)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/components/card.md b/site/content/docs/5.2/components/card.md\nindex 78c7cd3f3..6bc90e7b8 100644\n--- a/site/content/docs/5.2/components/card.md\n+++ b/site/content/docs/5.2/components/card.md\n@@ -381,7 +381,7 @@ Turn an image into a card background and overlay your card's text. Depending on\n   <div class=\"card-img-overlay\">\n     <h5 class=\"card-title\">Card title</h5>\n     <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n-    <p class=\"card-text\">Last updated 3 mins ago</p>\n+    <p class=\"card-text\"><small>Last updated 3 mins ago</small></p>\n   </div>\n </div>\n {{< /example >}}",
    "output": "docs: improve cards image overlays markup"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/layout/grid.md b/site/content/docs/5.2/layout/grid.md\nindex 44465e907..a9d00376f 100644\n--- a/site/content/docs/5.2/layout/grid.md\n+++ b/site/content/docs/5.2/layout/grid.md\n@@ -420,6 +420,7 @@ Variables and maps determine the number of columns, the gutter width, and the me\n ```scss\n $grid-columns:      12;\n $grid-gutter-width: 1.5rem;\n+$grid-row-columns:  6;\n ```\n \n {{< scss-docs name=\"grid-breakpoints\" file=\"scss/_variables.scss\" >}}\n@@ -499,11 +500,12 @@ Using our built-in grid Sass variables and maps, it's possible to completely cus\n \n ### Columns and gutters\n \n-The number of grid columns can be modified via Sass variables. `$grid-columns` is used to generate the widths (in percent) of each individual column while `$grid-gutter-width` sets the width for the column gutters.\n+The number of grid columns can be modified via Sass variables. `$grid-columns` is used to generate the widths (in percent) of each individual column while `$grid-gutter-width` sets the width for the column gutters. `$grid-row-columns` is used to set the maximum number of columns of `.row-cols-*`, any number over this limit is ignored.\n \n ```scss\n $grid-columns: 12 !default;\n $grid-gutter-width: 1.5rem !default;\n+$grid-row-columns: 6 !default;\n ```\n \n ### Grid tiers",
    "output": "docs: add grid-row-columns variable"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/components/offcanvas.md b/site/content/docs/5.2/components/offcanvas.md\nindex 39a5fb826..ffe69a898 100644\n--- a/site/content/docs/5.2/components/offcanvas.md\n+++ b/site/content/docs/5.2/components/offcanvas.md\n@@ -155,7 +155,7 @@ When backdrop is set to static, the offcanvas will not close when clicking outsi\n \n ## Responsive\n \n-<small class=\"d-inline-flex px-2 py-1 fw-semibold text-success bg-success bg-opacity-10 rounded-2\">Added in v5.2.0</small>\n+{{< added-in \"5.2.0\" >}}\n \n Responsive offcanvas classes hide content outside the viewport from a specified breakpoint and down. Above that breakpoint, the contents within will behave as usual. For example, `.offcanvas-lg` hides content in an offcanvas below the `lg` breakpoint, but shows the content above the `lg` breakpoint.\n \n@@ -245,7 +245,7 @@ Since the offcanvas panel is conceptually a modal dialog, be sure to add `aria-l\n \n ### Variables\n \n-<small class=\"d-inline-flex px-2 py-1 fw-semibold text-success bg-success bg-opacity-10 rounded-2\">Added in v5.2.0</small>\n+{{< added-in \"5.2.0\" >}}\n \n As part of Bootstrap's evolving CSS variables approach, offcanvas now uses local CSS variables on `.offcanvas` for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n ",
    "output": "docs: use added-in shortcode in Offcanvas (#36836)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/forms/range.md b/site/content/docs/5.2/forms/range.md\nindex d7ac6965c..5c4f02612 100644\n--- a/site/content/docs/5.2/forms/range.md\n+++ b/site/content/docs/5.2/forms/range.md\n@@ -17,7 +17,7 @@ Create custom `<input type=\"range\">` controls with `.form-range`. The track (the\n \n ## Disabled\n \n-Add the `disabled` boolean attribute on an input to give it a grayed out appearance and remove pointer events.\n+Add the `disabled` boolean attribute on an input to give it a grayed out appearance, remove pointer events, and prevent focusing.\n \n {{< example >}}\n <label for=\"disabledRange\" class=\"form-label\">Disabled range</label>",
    "output": "docs: same text for disabled ranges and disabled form controls (#36741)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/content/reboot.md b/site/content/docs/5.2/content/reboot.md\nindex 911155af2..8790d13c4 100644\n--- a/site/content/docs/5.2/content/reboot.md\n+++ b/site/content/docs/5.2/content/reboot.md\n@@ -76,7 +76,7 @@ $font-family-sans-serif:\n   \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;\n ```\n \n-Note that because the font stack includes emoji fonts, many common symbol/dingbat unicode characters will be rendered as multi-colored pictographs. Their appearance will vary, depending on the style used in the browser/platform's native emoji font, and they won't be affected by any CSS `color` styles.\n+Note that because the font stack includes emoji fonts, many common symbol/dingbat Unicode characters will be rendered as multi-colored pictographs. Their appearance will vary, depending on the style used in the browser/platform's native emoji font, and they won't be affected by any CSS `color` styles.\n \n This `font-family` is applied to the `<body>` and automatically inherited globally throughout Bootstrap. To switch the global `font-family`, update `$font-family-base` and recompile Bootstrap.\n ",
    "output": "docs: Capitalize Unicode (#36734)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.2/utilities/display.md b/site/content/docs/5.2/utilities/display.md\nindex cbbb9d48e..5ed825acb 100644\n--- a/site/content/docs/5.2/utilities/display.md\n+++ b/site/content/docs/5.2/utilities/display.md\n@@ -32,7 +32,7 @@ Where *value* is one of:\n - `flex`\n - `inline-flex`\n \n-The display values can be altered by changing the `$displays` variable and recompiling the SCSS.\n+The display values can be altered by changing the `display` values defined in `$utilities` and recompiling the SCSS.\n \n The media queries affect screen widths with the given breakpoint *or larger*. For example, `.d-lg-none` sets `display: none;` on `lg`, `xl`, and `xxl` screens.\n ",
    "output": "docs: fix description on how to alter display values (#36712)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/footer.html b/site/layouts/partials/footer.html\nindex c7eb7e217..78febb204 100644\n--- a/site/layouts/partials/footer.html\n+++ b/site/layouts/partials/footer.html\n@@ -18,6 +18,7 @@\n           <li class=\"mb-2\"><a href=\"/\">Home</a></li>\n           <li class=\"mb-2\"><a href=\"/docs/{{ .Site.Params.docs_version }}/\">Docs</a></li>\n           <li class=\"mb-2\"><a href=\"/docs/{{ .Site.Params.docs_version }}/examples/\">Examples</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.icons }}\">Icons</a></li>\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.themes }}\">Themes</a></li>\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.blog }}\">Blog</a></li>\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.swag }}\">Swag Store</a></li>",
    "output": "docs: Add 'Icons' link in footer"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/snippets.js b/site/assets/js/snippets.js\nindex 66ef949f7..640ff85c5 100644\n--- a/site/assets/js/snippets.js\n+++ b/site/assets/js/snippets.js\n@@ -102,7 +102,9 @@\n   // Indeterminate checkbox example in docs and StackBlitz\n   document.querySelectorAll('.bd-example-indeterminate [type=\"checkbox\"]')\n     .forEach(checkbox => {\n-      checkbox.indeterminate = true\n+      if (checkbox.id.includes('Indeterminate')) {\n+        checkbox.indeterminate = true\n+      }\n     })\n \n   // -------------------------------\ndiff --git a/site/content/docs/5.2/forms/checks-radios.md b/site/content/docs/5.2/forms/checks-radios.md\nindex 5c7ab5261..12f8b00d1 100644\n--- a/site/content/docs/5.2/forms/checks-radios.md\n+++ b/site/content/docs/5.2/forms/checks-radios.md\n@@ -49,7 +49,13 @@ Checkboxes can utilize the `:indeterminate` pseudo class when manually set via J\n \n Add the `disabled` attribute and the associated `<label>`s are automatically styled to match with a lighter color to help indicate the input's state.\n \n-{{< example >}}\n+{{< example class=\"bd-example-indeterminate\" stackblitz_add_js=\"true\" >}}\n+<div class=\"form-check\">\n+  <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckIndeterminateDisabled\" disabled>\n+  <label class=\"form-check-label\" for=\"flexCheckIndeterminateDisabled\">\n+    Disabled indeterminate checkbox\n+  </label>\n+</div>\n <div class=\"form-check\">\n   <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDisabled\" disabled>\n   <label class=\"form-check-label\" for=\"flexCheckDisabled\">",
    "output": "docs: add indeterminate disabled checkbox example (#36674)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/modal.js b/js/src/modal.js\nindex d3f0540bb..6efb13d9d 100644\n--- a/js/src/modal.js\n+++ b/js/src/modal.js\n@@ -30,7 +30,7 @@ const EVENT_HIDDEN = `hidden${EVENT_KEY}`\n const EVENT_SHOW = `show${EVENT_KEY}`\n const EVENT_SHOWN = `shown${EVENT_KEY}`\n const EVENT_RESIZE = `resize${EVENT_KEY}`\n-const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`\n+const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`\n const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\n const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n \n@@ -221,7 +221,7 @@ class Modal extends BaseComponent {\n       }\n     })\n \n-    EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {\n+    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {\n       if (event.target !== event.currentTarget) { // click is inside modal-dialog\n         return\n       }\ndiff --git a/js/tests/unit/modal.spec.js b/js/tests/unit/modal.spec.js\nindex 318410a8c..9e463d2be 100644\n--- a/js/tests/unit/modal.spec.js\n+++ b/js/tests/unit/modal.spec.js\n@@ -641,9 +641,10 @@ describe('Modal', () => {\n \n         modalEl.addEventListener('shown.bs.modal', () => {\n           const spy = spyOn(modal, '_queueCallback').and.callThrough()\n+          const mouseDown = createEvent('mousedown')\n \n-          modalEl.click()\n-          modalEl.click()\n+          modalEl.dispatchEvent(mouseDown)\n+          modalEl.dispatchEvent(mouseDown)\n \n           setTimeout(() => {\n             expect(spy).toHaveBeenCalledTimes(1)\n@@ -709,13 +710,19 @@ describe('Modal', () => {\n         fixtureEl.innerHTML = '<div class=\"modal\"><div class=\"modal-dialog\"></div></div>'\n \n         const modalEl = fixtureEl.querySelector('.modal')\n+        const dialogEl = modalEl.querySelector('.modal-dialog')\n         const modal = new Modal(modalEl)\n+\n+        spyOn(modal, 'hide')\n+\n         modalEl.addEventListener('shown.bs.modal', () => {\n-          modalEl.click()\n-        })\n+          const mouseDown = createEvent('mousedown')\n \n-        modalEl.addEventListener('hidden.bs.modal', () => {\n-          expect(document.querySelector('.modal-backdrop')).toBeNull()\n+          dialogEl.dispatchEvent(mouseDown)\n+          expect(modal.hide).not.toHaveBeenCalled()\n+\n+          modalEl.dispatchEvent(mouseDown)\n+          expect(modal.hide).toHaveBeenCalled()\n           resolve()\n         })\n ",
    "output": "fix: change dismiss handler, listening to key down, instead of click (#36401)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4e874cbdd..83b5b8a14 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.119.0\",\n+        \"hugo-bin\": \"^0.120.2\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6316,9 +6316,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.119.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.119.0.tgz\",\n-      \"integrity\": \"sha512-RnjlxHKdOjo7i7yRX/001t53142tC9NTa5JVrnPCTpX2kNQQCz5XdI/WWX7emf0dNkxipj55Z58EsA2ft9W16g==\",\n+      \"version\": \"0.120.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.2.tgz\",\n+      \"integrity\": \"sha512-I2Xc84CLtDKh8jBQym8J1PdwuF0wKBbcQzNoqdjMNnae0RhkWOWOm3tV2CsQX9a1eWsRvBt1QoCLeNw8v0C0Ig==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16223,9 +16223,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.119.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.119.0.tgz\",\n-      \"integrity\": \"sha512-RnjlxHKdOjo7i7yRX/001t53142tC9NTa5JVrnPCTpX2kNQQCz5XdI/WWX7emf0dNkxipj55Z58EsA2ft9W16g==\",\n+      \"version\": \"0.120.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.2.tgz\",\n+      \"integrity\": \"sha512-I2Xc84CLtDKh8jBQym8J1PdwuF0wKBbcQzNoqdjMNnae0RhkWOWOm3tV2CsQX9a1eWsRvBt1QoCLeNw8v0C0Ig==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^12.0.0\",\ndiff --git a/package.json b/package.json\nindex 2c5335915..4b9e87e4d 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.119.0\",\n+    \"hugo-bin\": \"^0.120.2\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.119.0 to 0.120.2 (#39704)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex bead6238f..4e874cbdd 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -53,7 +53,7 @@\n         \"karma-jasmine\": \"^5.1.0\",\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n-        \"lockfile-lint\": \"^4.13.1\",\n+        \"lockfile-lint\": \"^4.13.2\",\n         \"nodemon\": \"^3.0.3\",\n         \"npm-run-all2\": \"^6.1.2\",\n         \"postcss\": \"^8.4.35\",\n@@ -7622,9 +7622,9 @@\n       }\n     },\n     \"node_modules/lockfile-lint\": {\n-      \"version\": \"4.13.1\",\n-      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.13.1.tgz\",\n-      \"integrity\": \"sha512-JUOsgO2wUGSvo5UzVAj4z0IwQkRLgDY3OnsusnWy/uCUzpG9PDUJtMn718KjkSmnmmxwXqqWlc/Fvho1GaEFGg==\",\n+      \"version\": \"4.13.2\",\n+      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.13.2.tgz\",\n+      \"integrity\": \"sha512-yeg0vJ3NjC6OVMZtC+nSLLavu/e8LE5FZp9u0Itqyt7I0gYYCgGxAsJV3TJ7WtaJd4PahineJvHqSk/4sqzU8w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"cosmiconfig\": \"^8.2.0\",\n@@ -17173,9 +17173,9 @@\n       }\n     },\n     \"lockfile-lint\": {\n-      \"version\": \"4.13.1\",\n-      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.13.1.tgz\",\n-      \"integrity\": \"sha512-JUOsgO2wUGSvo5UzVAj4z0IwQkRLgDY3OnsusnWy/uCUzpG9PDUJtMn718KjkSmnmmxwXqqWlc/Fvho1GaEFGg==\",\n+      \"version\": \"4.13.2\",\n+      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.13.2.tgz\",\n+      \"integrity\": \"sha512-yeg0vJ3NjC6OVMZtC+nSLLavu/e8LE5FZp9u0Itqyt7I0gYYCgGxAsJV3TJ7WtaJd4PahineJvHqSk/4sqzU8w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"cosmiconfig\": \"^8.2.0\",\ndiff --git a/package.json b/package.json\nindex 83c6a4bb2..2c5335915 100644\n--- a/package.json\n+++ b/package.json\n@@ -137,7 +137,7 @@\n     \"karma-jasmine\": \"^5.1.0\",\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n-    \"lockfile-lint\": \"^4.13.1\",\n+    \"lockfile-lint\": \"^4.13.2\",\n     \"nodemon\": \"^3.0.3\",\n     \"npm-run-all2\": \"^6.1.2\",\n     \"postcss\": \"^8.4.35\",",
    "output": "build(deps-dev): Bump lockfile-lint from 4.13.1 to 4.13.2 (#39703)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d7d9213b1..bead6238f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^4.12.0\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.71.0\",\n+        \"sass\": \"^1.71.1\",\n         \"sass-true\": \"^7.0.1\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.2.1\",\n@@ -9795,9 +9795,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.71.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.0.tgz\",\n-      \"integrity\": \"sha512-HKKIKf49Vkxlrav3F/w6qRuPcmImGVbIXJ2I3Kg0VMA+3Bav+8yE9G5XmP5lMj6nl4OlqbPftGAscNaNu28b8w==\",\n+      \"version\": \"1.71.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.1.tgz\",\n+      \"integrity\": \"sha512-wovtnV2PxzteLlfNzbgm1tFXPLoZILYAMJtvoXXkD7/+1uP41eKkIt1ypWq5/q2uT94qHjXehEYfmjKOvjL9sg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18650,9 +18650,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.71.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.0.tgz\",\n-      \"integrity\": \"sha512-HKKIKf49Vkxlrav3F/w6qRuPcmImGVbIXJ2I3Kg0VMA+3Bav+8yE9G5XmP5lMj6nl4OlqbPftGAscNaNu28b8w==\",\n+      \"version\": \"1.71.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.1.tgz\",\n+      \"integrity\": \"sha512-wovtnV2PxzteLlfNzbgm1tFXPLoZILYAMJtvoXXkD7/+1uP41eKkIt1ypWq5/q2uT94qHjXehEYfmjKOvjL9sg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex de3d4dd74..83c6a4bb2 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^4.12.0\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.71.0\",\n+    \"sass\": \"^1.71.1\",\n     \"sass-true\": \"^7.0.1\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.2.1\",",
    "output": "build(deps-dev): Bump sass from 1.71.0 to 1.71.1 (#39699)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 75fbb18d3..88c968652 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.2.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n-        \"terser\": \"^5.27.1\",\n+        \"terser\": \"^5.27.2\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10995,9 +10995,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.27.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.1.tgz\",\n-      \"integrity\": \"sha512-29wAr6UU/oQpnTw5HoadwjUZnFQXGdOfj0LjZ4sVxzqwHh/QVkvr7m8y9WoR4iN3FRitVduTc6KdjcW38Npsug==\",\n+      \"version\": \"5.27.2\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.2.tgz\",\n+      \"integrity\": \"sha512-sHXmLSkImesJ4p5apTeT63DsV4Obe1s37qT8qvwHRmVxKTBH7Rv9Wr26VcAMmLbmk9UliiwK8z+657NyJHHy/w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19533,9 +19533,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.27.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.1.tgz\",\n-      \"integrity\": \"sha512-29wAr6UU/oQpnTw5HoadwjUZnFQXGdOfj0LjZ4sVxzqwHh/QVkvr7m8y9WoR4iN3FRitVduTc6KdjcW38Npsug==\",\n+      \"version\": \"5.27.2\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.2.tgz\",\n+      \"integrity\": \"sha512-sHXmLSkImesJ4p5apTeT63DsV4Obe1s37qT8qvwHRmVxKTBH7Rv9Wr26VcAMmLbmk9UliiwK8z+657NyJHHy/w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex d1660aa9f..0f160b01c 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.2.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n-    \"terser\": \"^5.27.1\",\n+    \"terser\": \"^5.27.2\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.27.1 to 5.27.2 (#39690)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 20ebc1e6c..75fbb18d3 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -41,7 +41,7 @@\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.119.0\",\n-        \"ip\": \"^2.0.0\",\n+        \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n         \"karma\": \"^6.4.2\",\n@@ -6489,9 +6489,9 @@\n       }\n     },\n     \"node_modules/ip\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/ip/-/ip-2.0.0.tgz\",\n-      \"integrity\": \"sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ==\",\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/ip/-/ip-2.0.1.tgz\",\n+      \"integrity\": \"sha512-lJUL9imLTNi1ZfXT+DU6rBBdbiKGBuay9B6xGSPVjUeQwaH1RIGqef8RZkUtHioLmSNpPR5M4HVKJGm1j8FWVQ==\",\n       \"dev\": true\n     },\n     \"node_modules/is-alphabetical\": {\n@@ -16342,9 +16342,9 @@\n       \"dev\": true\n     },\n     \"ip\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/ip/-/ip-2.0.0.tgz\",\n-      \"integrity\": \"sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ==\",\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/ip/-/ip-2.0.1.tgz\",\n+      \"integrity\": \"sha512-lJUL9imLTNi1ZfXT+DU6rBBdbiKGBuay9B6xGSPVjUeQwaH1RIGqef8RZkUtHioLmSNpPR5M4HVKJGm1j8FWVQ==\",\n       \"dev\": true\n     },\n     \"is-alphabetical\": {\ndiff --git a/package.json b/package.json\nindex fc286354c..d1660aa9f 100644\n--- a/package.json\n+++ b/package.json\n@@ -125,7 +125,7 @@\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.119.0\",\n-    \"ip\": \"^2.0.0\",\n+    \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",\n     \"karma\": \"^6.4.2\",",
    "output": "build(deps-dev): Bump ip from 2.0.0 to 2.0.1 (#39691)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e83504042..20ebc1e6c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^4.12.0\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.70.0\",\n+        \"sass\": \"^1.71.0\",\n         \"sass-true\": \"^7.0.1\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.2.1\",\n@@ -9795,9 +9795,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.70.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.70.0.tgz\",\n-      \"integrity\": \"sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==\",\n+      \"version\": \"1.71.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.0.tgz\",\n+      \"integrity\": \"sha512-HKKIKf49Vkxlrav3F/w6qRuPcmImGVbIXJ2I3Kg0VMA+3Bav+8yE9G5XmP5lMj6nl4OlqbPftGAscNaNu28b8w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18650,9 +18650,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.70.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.70.0.tgz\",\n-      \"integrity\": \"sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==\",\n+      \"version\": \"1.71.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.71.0.tgz\",\n+      \"integrity\": \"sha512-HKKIKf49Vkxlrav3F/w6qRuPcmImGVbIXJ2I3Kg0VMA+3Bav+8yE9G5XmP5lMj6nl4OlqbPftGAscNaNu28b8w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex e38849bda..fc286354c 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^4.12.0\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.70.0\",\n+    \"sass\": \"^1.71.0\",\n     \"sass-true\": \"^7.0.1\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.2.1\",",
    "output": "build(deps-dev): Bump sass from 1.70.0 to 1.71.0 (#39684)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex f8b2dc30a..6fc80fdbc 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.2.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n-        \"terser\": \"^5.27.0\",\n+        \"terser\": \"^5.27.1\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10992,9 +10992,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.27.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.0.tgz\",\n-      \"integrity\": \"sha512-bi1HRwVRskAjheeYl291n3JC4GgO/Ty4z1nVs5AAsmonJulGxpSektecnNedrwK9C7vpvVtcX3cw00VSLt7U2A==\",\n+      \"version\": \"5.27.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.1.tgz\",\n+      \"integrity\": \"sha512-29wAr6UU/oQpnTw5HoadwjUZnFQXGdOfj0LjZ4sVxzqwHh/QVkvr7m8y9WoR4iN3FRitVduTc6KdjcW38Npsug==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19530,9 +19530,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.27.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.0.tgz\",\n-      \"integrity\": \"sha512-bi1HRwVRskAjheeYl291n3JC4GgO/Ty4z1nVs5AAsmonJulGxpSektecnNedrwK9C7vpvVtcX3cw00VSLt7U2A==\",\n+      \"version\": \"5.27.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.1.tgz\",\n+      \"integrity\": \"sha512-29wAr6UU/oQpnTw5HoadwjUZnFQXGdOfj0LjZ4sVxzqwHh/QVkvr7m8y9WoR4iN3FRitVduTc6KdjcW38Npsug==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 24c729293..d7777e354 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.2.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n-    \"terser\": \"^5.27.0\",\n+    \"terser\": \"^5.27.1\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.27.0 to 5.27.1 (#39682)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0f6c9809d..f8b2dc30a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.13.1\",\n         \"nodemon\": \"^3.0.3\",\n         \"npm-run-all2\": \"^6.1.2\",\n-        \"postcss\": \"^8.4.34\",\n+        \"postcss\": \"^8.4.35\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.9.6\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -8771,9 +8771,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.34\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.34.tgz\",\n-      \"integrity\": \"sha512-4eLTO36woPSocqZ1zIrFD2K1v6wH7pY1uBh0JIM2KKfrVtGvPFiAku6aNOP0W1Wr9qwnaCsF0Z+CrVnryB2A8Q==\",\n+      \"version\": \"8.4.35\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.35.tgz\",\n+      \"integrity\": \"sha512-u5U8qYpBCpN13BsiEB0CbR1Hhh4Gc0zLFuedrHJKMctHCHAGrMdG0PRM/KErzAL3CU6/eckEtmHNB3x6e3c0vA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17977,9 +17977,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.34\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.34.tgz\",\n-      \"integrity\": \"sha512-4eLTO36woPSocqZ1zIrFD2K1v6wH7pY1uBh0JIM2KKfrVtGvPFiAku6aNOP0W1Wr9qwnaCsF0Z+CrVnryB2A8Q==\",\n+      \"version\": \"8.4.35\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.35.tgz\",\n+      \"integrity\": \"sha512-u5U8qYpBCpN13BsiEB0CbR1Hhh4Gc0zLFuedrHJKMctHCHAGrMdG0PRM/KErzAL3CU6/eckEtmHNB3x6e3c0vA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.7\",\ndiff --git a/package.json b/package.json\nindex 0b8b7d58e..24c729293 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.13.1\",\n     \"nodemon\": \"^3.0.3\",\n     \"npm-run-all2\": \"^6.1.2\",\n-    \"postcss\": \"^8.4.34\",\n+    \"postcss\": \"^8.4.35\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.9.6\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.34 to 8.4.35 (#39673)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 933d9d9b8..83c6565b3 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -36,7 +36,7 @@\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^3.0.1\",\n-        \"eslint-plugin-unicorn\": \"^51.0.0\",\n+        \"eslint-plugin-unicorn\": \"^51.0.1\",\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n@@ -4997,9 +4997,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-unicorn\": {\n-      \"version\": \"51.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.0.tgz\",\n-      \"integrity\": \"sha512-104L+VrZQ0RlyTYQPmF0ofoN1/rot1U/BoCSUDTTiPgumzA/QUzDwUqbR4Q0laOYXi5sYI2HDrJQ/b5PlJteCA==\",\n+      \"version\": \"51.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.1.tgz\",\n+      \"integrity\": \"sha512-MuR/+9VuB0fydoI0nIn2RDA5WISRn4AsJyNSaNKLVwie9/ONvQhxOBbkfSICBPnzKrB77Fh6CZZXjgTt/4Latw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-validator-identifier\": \"^7.22.20\",\n@@ -15357,9 +15357,9 @@\n       }\n     },\n     \"eslint-plugin-unicorn\": {\n-      \"version\": \"51.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.0.tgz\",\n-      \"integrity\": \"sha512-104L+VrZQ0RlyTYQPmF0ofoN1/rot1U/BoCSUDTTiPgumzA/QUzDwUqbR4Q0laOYXi5sYI2HDrJQ/b5PlJteCA==\",\n+      \"version\": \"51.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.1.tgz\",\n+      \"integrity\": \"sha512-MuR/+9VuB0fydoI0nIn2RDA5WISRn4AsJyNSaNKLVwie9/ONvQhxOBbkfSICBPnzKrB77Fh6CZZXjgTt/4Latw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/helper-validator-identifier\": \"^7.22.20\",\ndiff --git a/package.json b/package.json\nindex db1bbecf8..026cc9af4 100644\n--- a/package.json\n+++ b/package.json\n@@ -120,7 +120,7 @@\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^3.0.1\",\n-    \"eslint-plugin-unicorn\": \"^51.0.0\",\n+    \"eslint-plugin-unicorn\": \"^51.0.1\",\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-unicorn from 51.0.0 to 51.0.1 (#39676)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/release-notes.yml b/.github/workflows/release-notes.yml\nindex f620dd31d..813956af2 100644\n--- a/.github/workflows/release-notes.yml\n+++ b/.github/workflows/release-notes.yml\n@@ -18,6 +18,6 @@ jobs:\n     runs-on: ubuntu-latest\n     if: github.repository == 'twbs/bootstrap'\n     steps:\n-      - uses: release-drafter/release-drafter@v5\n+      - uses: release-drafter/release-drafter@v6\n         env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",
    "output": "build(deps): Bump release-drafter/release-drafter from 5 to 6 (#39653)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 74d758a25..62262e116 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -36,7 +36,7 @@\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^3.0.1\",\n-        \"eslint-plugin-unicorn\": \"^50.0.1\",\n+        \"eslint-plugin-unicorn\": \"^51.0.0\",\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n@@ -4954,9 +4954,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-unicorn\": {\n-      \"version\": \"50.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-50.0.1.tgz\",\n-      \"integrity\": \"sha512-KxenCZxqSYW0GWHH18okDlOQcpezcitm5aOSz6EnobyJ6BIByiPDviQRjJIUAjG/tMN11958MxaQ+qCoU6lfDA==\",\n+      \"version\": \"51.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.0.tgz\",\n+      \"integrity\": \"sha512-104L+VrZQ0RlyTYQPmF0ofoN1/rot1U/BoCSUDTTiPgumzA/QUzDwUqbR4Q0laOYXi5sYI2HDrJQ/b5PlJteCA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-validator-identifier\": \"^7.22.20\",\n@@ -15225,9 +15225,9 @@\n       }\n     },\n     \"eslint-plugin-unicorn\": {\n-      \"version\": \"50.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-50.0.1.tgz\",\n-      \"integrity\": \"sha512-KxenCZxqSYW0GWHH18okDlOQcpezcitm5aOSz6EnobyJ6BIByiPDviQRjJIUAjG/tMN11958MxaQ+qCoU6lfDA==\",\n+      \"version\": \"51.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.0.tgz\",\n+      \"integrity\": \"sha512-104L+VrZQ0RlyTYQPmF0ofoN1/rot1U/BoCSUDTTiPgumzA/QUzDwUqbR4Q0laOYXi5sYI2HDrJQ/b5PlJteCA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/helper-validator-identifier\": \"^7.22.20\",\ndiff --git a/package.json b/package.json\nindex 9db79bf0f..c590fe35b 100644\n--- a/package.json\n+++ b/package.json\n@@ -120,7 +120,7 @@\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^3.0.1\",\n-    \"eslint-plugin-unicorn\": \"^50.0.1\",\n+    \"eslint-plugin-unicorn\": \"^51.0.0\",\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-unicorn from 50.0.1 to 51.0.0 (#39650)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex cb5d70369..74d758a25 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.3\",\n         \"npm-run-all2\": \"^6.1.2\",\n-        \"postcss\": \"^8.4.33\",\n+        \"postcss\": \"^8.4.34\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.9.6\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -8655,9 +8655,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.33\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.33.tgz\",\n-      \"integrity\": \"sha512-Kkpbhhdjw2qQs2O2DGX+8m5OVqEcbB9HRBvuYM9pgrjEFUg30A9LmXNlTAUj4S9kgtGyrMbTzVjH7E+s5Re2yg==\",\n+      \"version\": \"8.4.34\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.34.tgz\",\n+      \"integrity\": \"sha512-4eLTO36woPSocqZ1zIrFD2K1v6wH7pY1uBh0JIM2KKfrVtGvPFiAku6aNOP0W1Wr9qwnaCsF0Z+CrVnryB2A8Q==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17794,9 +17794,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.33\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.33.tgz\",\n-      \"integrity\": \"sha512-Kkpbhhdjw2qQs2O2DGX+8m5OVqEcbB9HRBvuYM9pgrjEFUg30A9LmXNlTAUj4S9kgtGyrMbTzVjH7E+s5Re2yg==\",\n+      \"version\": \"8.4.34\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.34.tgz\",\n+      \"integrity\": \"sha512-4eLTO36woPSocqZ1zIrFD2K1v6wH7pY1uBh0JIM2KKfrVtGvPFiAku6aNOP0W1Wr9qwnaCsF0Z+CrVnryB2A8Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.7\",\ndiff --git a/package.json b/package.json\nindex 56602e4c5..9db79bf0f 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.3\",\n     \"npm-run-all2\": \"^6.1.2\",\n-    \"postcss\": \"^8.4.33\",\n+    \"postcss\": \"^8.4.34\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.9.6\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.33 to 8.4.34 (#39652)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/shortcodes/example.html b/site/layouts/shortcodes/example.html\nindex a162db521..5b398e681 100644\n--- a/site/layouts/shortcodes/example.html\n+++ b/site/layouts/shortcodes/example.html\n@@ -13,23 +13,23 @@\n {{- $id := .Get \"id\" -}}\n {{- $class := .Get \"class\" -}}\n {{- $lang := .Get \"lang\" | default \"html\" -}}\n-{{- $stackblitz_add_js := .Get \"stackblitz_add_js\" | default false -}}\n {{- $show_markup := .Get \"show_markup\" | default true -}}\n {{- $show_preview := .Get \"show_preview\" | default true -}}\n-{{- $input := .Inner -}}\n+{{- $stackblitz_add_js := .Get \"stackblitz_add_js\" | default false -}}\n+\n {{- $content := .Inner -}}\n \n <div class=\"bd-example-snippet bd-code-snippet\">\n-  {{- if eq $show_preview true -}}\n+  {{- if eq $show_preview true }}\n   <div{{ with $id }} id=\"{{ . }}\"{{ end }} class=\"bd-example m-0 border-0{{ with $class }} {{ . }}{{ end }}\">\n-    {{- $input -}}\n+    {{ $content }}\n   </div>\n-  {{- end -}}\n+  {{- end }}\n \n   {{- if eq $show_markup true -}}\n     {{- if eq $show_preview true -}}\n       <div class=\"d-flex align-items-center highlight-toolbar ps-3 pe-2 py-1 border-0 border-top border-bottom\">\n-        <small class=\"font-monospace text-body-secondary text-uppercase\">{{- $lang -}}</small>\n+        <small class=\"font-monospace text-body-secondary text-uppercase\">{{ $lang }}</small>\n         <div class=\"d-flex ms-auto\">\n           <button type=\"button\" class=\"btn-edit text-nowrap\"{{ with $stackblitz_add_js }} data-sb-js-snippet=\"{{ $stackblitz_add_js }}\"{{ end }} title=\"Try it on StackBlitz\">\n             <svg class=\"bi\" aria-hidden=\"true\"><use xlink:href=\"#lightning-charge-fill\"/></svg>\n@@ -45,5 +45,5 @@\n     {{- $content = replaceRE `<img class=\"bd-placeholder-img(?:-lg)?(?: *?bd-placeholder-img-lg)? ?(.*?)\".*?>` `<img src=\"...\" class=\"$1\" alt=\"...\">` $content -}}\n     {{- $content = replaceRE ` (class=\" *?\")` \"\" $content -}}\n     {{- highlight (trim $content \"\\n\") $lang \"\" -}}\n-  {{- end -}}\n+  {{- end }}\n </div>",
    "output": "docs: clean up example.html (#39528)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4fb68dd2f..80860f924 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.118.1\",\n+        \"hugo-bin\": \"^0.119.0\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6260,9 +6260,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.118.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.1.tgz\",\n-      \"integrity\": \"sha512-WIS4kLNySb5u2+iwk//N7ClLUCksmyjvqdkGQTFc5v7Bqjpn1yLcIIBWwxU3R4SBc2Lr772/auxlzzsRffGbVA==\",\n+      \"version\": \"0.119.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.119.0.tgz\",\n+      \"integrity\": \"sha512-RnjlxHKdOjo7i7yRX/001t53142tC9NTa5JVrnPCTpX2kNQQCz5XdI/WWX7emf0dNkxipj55Z58EsA2ft9W16g==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16081,9 +16081,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.118.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.1.tgz\",\n-      \"integrity\": \"sha512-WIS4kLNySb5u2+iwk//N7ClLUCksmyjvqdkGQTFc5v7Bqjpn1yLcIIBWwxU3R4SBc2Lr772/auxlzzsRffGbVA==\",\n+      \"version\": \"0.119.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.119.0.tgz\",\n+      \"integrity\": \"sha512-RnjlxHKdOjo7i7yRX/001t53142tC9NTa5JVrnPCTpX2kNQQCz5XdI/WWX7emf0dNkxipj55Z58EsA2ft9W16g==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^12.0.0\",\ndiff --git a/package.json b/package.json\nindex edea1df68..43c1a4915 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.118.1\",\n+    \"hugo-bin\": \"^0.119.0\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.118.1 to 0.119.0 (#39631)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 29cd42746..4fb68dd2f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.23.4\",\n+        \"@babel/cli\": \"^7.23.9\",\n         \"@babel/core\": \"^7.23.7\",\n         \"@babel/preset-env\": \"^7.23.9\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -102,9 +102,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.23.4\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.4.tgz\",\n-      \"integrity\": \"sha512-j3luA9xGKCXVyCa5R7lJvOMM+Kc2JEnAEIgz2ggtjQ/j5YUVgfsg/WsG95bbsgq7YLHuiCOzMnoSasuY16qiCw==\",\n+      \"version\": \"7.23.9\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.9.tgz\",\n+      \"integrity\": \"sha512-vB1UXmGDNEhcf1jNAHKT9IlYk1R+hehVTLFlCLHBi8gfuHQGP6uRjgXVYU0EVlI/qwAWpstqkBdf2aez3/z/5Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -11735,9 +11735,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.23.4\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.4.tgz\",\n-      \"integrity\": \"sha512-j3luA9xGKCXVyCa5R7lJvOMM+Kc2JEnAEIgz2ggtjQ/j5YUVgfsg/WsG95bbsgq7YLHuiCOzMnoSasuY16qiCw==\",\n+      \"version\": \"7.23.9\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.9.tgz\",\n+      \"integrity\": \"sha512-vB1UXmGDNEhcf1jNAHKT9IlYk1R+hehVTLFlCLHBi8gfuHQGP6uRjgXVYU0EVlI/qwAWpstqkBdf2aez3/z/5Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex 9908227f7..edea1df68 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.23.4\",\n+    \"@babel/cli\": \"^7.23.9\",\n     \"@babel/core\": \"^7.23.7\",\n     \"@babel/preset-env\": \"^7.23.9\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.23.4 to 7.23.9 (#39628)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3535fcadc..c2142dbf5 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.1.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^13.0.0\",\n-        \"terser\": \"^5.26.0\",\n+        \"terser\": \"^5.27.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11002,9 +11002,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.26.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n-      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n+      \"version\": \"5.27.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.0.tgz\",\n+      \"integrity\": \"sha512-bi1HRwVRskAjheeYl291n3JC4GgO/Ty4z1nVs5AAsmonJulGxpSektecnNedrwK9C7vpvVtcX3cw00VSLt7U2A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19569,9 +19569,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.26.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n-      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n+      \"version\": \"5.27.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.27.0.tgz\",\n+      \"integrity\": \"sha512-bi1HRwVRskAjheeYl291n3JC4GgO/Ty4z1nVs5AAsmonJulGxpSektecnNedrwK9C7vpvVtcX3cw00VSLt7U2A==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 8d8d883de..db13243a2 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.1.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^13.0.0\",\n-    \"terser\": \"^5.26.0\",\n+    \"terser\": \"^5.27.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.26.0 to 5.27.0 (#39600)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 97af4ba3b..3535fcadc 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^4.9.4\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.69.7\",\n+        \"sass\": \"^1.70.0\",\n         \"sass-true\": \"^7.0.1\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.1.0\",\n@@ -9808,9 +9808,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.69.7\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.7.tgz\",\n-      \"integrity\": \"sha512-rzj2soDeZ8wtE2egyLXgOOHQvaC2iosZrkF6v3EUG+tBwEvhqUCzm0VP3k9gHF9LXbSrRhT5SksoI56Iw8NPnQ==\",\n+      \"version\": \"1.70.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.70.0.tgz\",\n+      \"integrity\": \"sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18689,9 +18689,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.69.7\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.7.tgz\",\n-      \"integrity\": \"sha512-rzj2soDeZ8wtE2egyLXgOOHQvaC2iosZrkF6v3EUG+tBwEvhqUCzm0VP3k9gHF9LXbSrRhT5SksoI56Iw8NPnQ==\",\n+      \"version\": \"1.70.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.70.0.tgz\",\n+      \"integrity\": \"sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 32adcf96d..8d8d883de 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^4.9.4\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.69.7\",\n+    \"sass\": \"^1.70.0\",\n     \"sass-true\": \"^7.0.1\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.1.0\",",
    "output": "build(deps-dev): Bump sass from 1.69.7 to 1.70.0 (#39599)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 28169fd0f..97af4ba3b 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -54,7 +54,7 @@\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.12.1\",\n-        \"nodemon\": \"^3.0.2\",\n+        \"nodemon\": \"^3.0.3\",\n         \"npm-run-all2\": \"^6.1.1\",\n         \"postcss\": \"^8.4.33\",\n         \"postcss-cli\": \"^11.0.0\",\n@@ -7986,9 +7986,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nodemon\": {\n-      \"version\": \"3.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.2.tgz\",\n-      \"integrity\": \"sha512-9qIN2LNTrEzpOPBaWHTm4Asy1LxXLSickZStAQ4IZe7zsoIpD/A7LWxhZV3t4Zu352uBcqVnRsDXSMR2Sc3lTA==\",\n+      \"version\": \"3.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.3.tgz\",\n+      \"integrity\": \"sha512-7jH/NXbFPxVaMwmBCC2B9F/V6X1VkEdNgx3iu9jji8WxWcvhMWkmhNWhI5077zknOnZnBzba9hZP6bCPJLSReQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \"^3.5.2\",\n@@ -17459,9 +17459,9 @@\n       \"dev\": true\n     },\n     \"nodemon\": {\n-      \"version\": \"3.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.2.tgz\",\n-      \"integrity\": \"sha512-9qIN2LNTrEzpOPBaWHTm4Asy1LxXLSickZStAQ4IZe7zsoIpD/A7LWxhZV3t4Zu352uBcqVnRsDXSMR2Sc3lTA==\",\n+      \"version\": \"3.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.3.tgz\",\n+      \"integrity\": \"sha512-7jH/NXbFPxVaMwmBCC2B9F/V6X1VkEdNgx3iu9jji8WxWcvhMWkmhNWhI5077zknOnZnBzba9hZP6bCPJLSReQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \"^3.5.2\",\ndiff --git a/package.json b/package.json\nindex d174be59d..32adcf96d 100644\n--- a/package.json\n+++ b/package.json\n@@ -138,7 +138,7 @@\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.12.1\",\n-    \"nodemon\": \"^3.0.2\",\n+    \"nodemon\": \"^3.0.3\",\n     \"npm-run-all2\": \"^6.1.1\",\n     \"postcss\": \"^8.4.33\",\n     \"postcss-cli\": \"^11.0.0\",",
    "output": "build(deps-dev): Bump nodemon from 3.0.2 to 3.0.3 (#39602)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/content/reboot.md b/site/content/docs/5.3/content/reboot.md\nindex ef2bd13bc..1400e8c55 100644\n--- a/site/content/docs/5.3/content/reboot.md\n+++ b/site/content/docs/5.3/content/reboot.md\n@@ -64,7 +64,7 @@ $font-family-sans-serif:\n   // Android\n   Roboto,\n   // older macOS and iOS\n-  \"Helvetica Neue\"\n+  \"Helvetica Neue\",\n   // Linux\n   \"Noto Sans\",\n   \"Liberation Sans\",",
    "output": "docs: add missing comma in native font stack code source in Content > Reboot (#39617)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 016c376f1..d839f7681 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -397,7 +397,7 @@ Want more information? [Read the v5.1.0 blog post.](https://blog.getbootstrap.co\n \n - <span class=\"badge text-bg-danger\">Breaking</span> Media query mixins parameters have changed for a more logical approach.\n   - `media-breakpoint-down()` uses the breakpoint itself instead of the next breakpoint (e.g., `media-breakpoint-down(lg)` instead of `media-breakpoint-down(md)` targets viewports smaller than `lg`).\n-  - Similarly, the second parameter in `media-breakpoint-between()` also uses the breakpoint itself instead of the next breakpoint (e.g., `media-between(sm, lg)` instead of `media-breakpoint-between(sm, md)` targets viewports between `sm` and `lg`).\n+  - Similarly, the second parameter in `media-breakpoint-between()` also uses the breakpoint itself instead of the next breakpoint (e.g., `media-breakpoint-between(sm, lg)` instead of `media-breakpoint-between(sm, md)` targets viewports between `sm` and `lg`).\n \n - <span class=\"badge text-bg-danger\">Breaking</span> Removed print styles and `$enable-print-styles` variable. Print display classes are still around. [See #28339](https://github.com/twbs/bootstrap/pull/28339).\n ",
    "output": "docs: fix 'media-breakpoint-between' typo in migration guide (#39604)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d915465d8..28169fd0f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.118.0\",\n+        \"hugo-bin\": \"^0.118.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6281,9 +6281,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.118.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.0.tgz\",\n-      \"integrity\": \"sha512-YVmmJIhoN9wJtHOR+FfVP2OFDymJF1Nop2MKSFmIKqOSu9B7ZfAn+yVCwernWNelepacjSYSoAebt+vFSsF5+g==\",\n+      \"version\": \"0.118.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.1.tgz\",\n+      \"integrity\": \"sha512-WIS4kLNySb5u2+iwk//N7ClLUCksmyjvqdkGQTFc5v7Bqjpn1yLcIIBWwxU3R4SBc2Lr772/auxlzzsRffGbVA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16215,9 +16215,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.118.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.0.tgz\",\n-      \"integrity\": \"sha512-YVmmJIhoN9wJtHOR+FfVP2OFDymJF1Nop2MKSFmIKqOSu9B7ZfAn+yVCwernWNelepacjSYSoAebt+vFSsF5+g==\",\n+      \"version\": \"0.118.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.118.1.tgz\",\n+      \"integrity\": \"sha512-WIS4kLNySb5u2+iwk//N7ClLUCksmyjvqdkGQTFc5v7Bqjpn1yLcIIBWwxU3R4SBc2Lr772/auxlzzsRffGbVA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^12.0.0\",\ndiff --git a/package.json b/package.json\nindex 7da6403aa..d174be59d 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.118.0\",\n+    \"hugo-bin\": \"^0.118.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.118.0 to 0.118.1 (#39576)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d1951d083..a4a8aa9a4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.2\",\n         \"npm-run-all2\": \"^6.1.1\",\n-        \"postcss\": \"^8.4.32\",\n+        \"postcss\": \"^8.4.33\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.9.4\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -8748,9 +8748,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.32\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.32.tgz\",\n-      \"integrity\": \"sha512-D/kj5JNu6oo2EIy+XL/26JEDTlIbB8hw85G8StOE6L74RQAVVP5rej6wxCNqyMbR4RkPfqvezVbPw81Ngd6Kcw==\",\n+      \"version\": \"8.4.33\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.33.tgz\",\n+      \"integrity\": \"sha512-Kkpbhhdjw2qQs2O2DGX+8m5OVqEcbB9HRBvuYM9pgrjEFUg30A9LmXNlTAUj4S9kgtGyrMbTzVjH7E+s5Re2yg==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -18029,9 +18029,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.32\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.32.tgz\",\n-      \"integrity\": \"sha512-D/kj5JNu6oo2EIy+XL/26JEDTlIbB8hw85G8StOE6L74RQAVVP5rej6wxCNqyMbR4RkPfqvezVbPw81Ngd6Kcw==\",\n+      \"version\": \"8.4.33\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.33.tgz\",\n+      \"integrity\": \"sha512-Kkpbhhdjw2qQs2O2DGX+8m5OVqEcbB9HRBvuYM9pgrjEFUg30A9LmXNlTAUj4S9kgtGyrMbTzVjH7E+s5Re2yg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.7\",\ndiff --git a/package.json b/package.json\nindex f559b630e..1d5c8a590 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.2\",\n     \"npm-run-all2\": \"^6.1.1\",\n-    \"postcss\": \"^8.4.32\",\n+    \"postcss\": \"^8.4.33\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.9.4\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.32 to 8.4.33 (#39574)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 9a9d76335..f984123a0 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^4.9.1\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.69.5\",\n+        \"sass\": \"^1.69.7\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.1.0\",\n@@ -9838,9 +9838,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.69.5\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.5.tgz\",\n-      \"integrity\": \"sha512-qg2+UCJibLr2LCVOt3OlPhr/dqVHWOa9XtZf2OjbLs/T4VPSJ00udtgJxH3neXZm+QqX8B+3cU7RaLqp1iVfcQ==\",\n+      \"version\": \"1.69.7\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.7.tgz\",\n+      \"integrity\": \"sha512-rzj2soDeZ8wtE2egyLXgOOHQvaC2iosZrkF6v3EUG+tBwEvhqUCzm0VP3k9gHF9LXbSrRhT5SksoI56Iw8NPnQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18754,9 +18754,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.69.5\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.5.tgz\",\n-      \"integrity\": \"sha512-qg2+UCJibLr2LCVOt3OlPhr/dqVHWOa9XtZf2OjbLs/T4VPSJ00udtgJxH3neXZm+QqX8B+3cU7RaLqp1iVfcQ==\",\n+      \"version\": \"1.69.7\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.7.tgz\",\n+      \"integrity\": \"sha512-rzj2soDeZ8wtE2egyLXgOOHQvaC2iosZrkF6v3EUG+tBwEvhqUCzm0VP3k9gHF9LXbSrRhT5SksoI56Iw8NPnQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex e44d1026c..1296cbb33 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^4.9.1\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.69.5\",\n+    \"sass\": \"^1.69.7\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.1.0\",",
    "output": "build(deps-dev): Bump sass from 1.69.5 to 1.69.7 (#39571)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0c19bf371..9a9d76335 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -5641,9 +5641,9 @@\n       \"dev\": true\n     },\n     \"node_modules/follow-redirects\": {\n-      \"version\": \"1.15.3\",\n-      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.3.tgz\",\n-      \"integrity\": \"sha512-1VzOtuEM8pC9SFU1E+8KfTjZyMztRsgEfwQl44z8A25uy13jSzTj6dyK2Df52iV0vgHCfBwLhDWevLn95w5v6Q==\",\n+      \"version\": \"1.15.4\",\n+      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz\",\n+      \"integrity\": \"sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15800,9 +15800,9 @@\n       \"dev\": true\n     },\n     \"follow-redirects\": {\n-      \"version\": \"1.15.3\",\n-      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.3.tgz\",\n-      \"integrity\": \"sha512-1VzOtuEM8pC9SFU1E+8KfTjZyMztRsgEfwQl44z8A25uy13jSzTj6dyK2Df52iV0vgHCfBwLhDWevLn95w5v6Q==\",\n+      \"version\": \"1.15.4\",\n+      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.4.tgz\",\n+      \"integrity\": \"sha512-Cr4D/5wlrb0z9dgERpUL3LrmPKVDsETIJhaCMeDfuFYcqa5bldGV6wBsAN6X/vxlXQtFBMrXdXxdL8CbDTGniw==\",\n       \"dev\": true\n     },\n     \"for-each\": {",
    "output": "build(deps-dev): Bump follow-redirects from 1.15.3 to 1.15.4 (#39570)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex f14d51c9f..1b672aa30 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -46,6 +46,7 @@ jobs:\n \n       - name: Run Coveralls\n         uses: coverallsapp/github-action@v2\n+        if: ${{ !github.event.repository.fork }}\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"",
    "output": "ci: stop running coveralls in forks (#39096)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/alerts.md b/site/content/docs/5.3/components/alerts.md\nindex 9eb64dfe3..6103898bc 100644\n--- a/site/content/docs/5.3/components/alerts.md\n+++ b/site/content/docs/5.3/components/alerts.md\n@@ -162,13 +162,11 @@ As part of Bootstrap's evolving CSS variables approach, alerts now use local CSS\n \n {{< deprecated-in \"5.3.0\" >}}\n \n-Used in combination with `$theme-colors` to create contextual modifier classes for our alerts.\n-\n {{< scss-docs name=\"alert-variant-mixin\" file=\"scss/mixins/_alert.scss\" >}}\n \n ### Sass loops\n \n-Loop that generates the modifier classes with the `alert-variant()` mixin.\n+Loop that generates the modifier classes with an overriding of CSS variables.\n \n {{< scss-docs name=\"alert-modifiers\" file=\"scss/_alert.scss\" >}}\n \ndiff --git a/site/content/docs/5.3/components/list-group.md b/site/content/docs/5.3/components/list-group.md\nindex 8603071fc..7f7e1457c 100644\n--- a/site/content/docs/5.3/components/list-group.md\n+++ b/site/content/docs/5.3/components/list-group.md\n@@ -321,8 +321,6 @@ As part of Bootstrap's evolving CSS variables approach, list groups now use loca\n \n {{< deprecated-in \"5.3.0\" >}}\n \n-Used in combination with `$theme-colors` to generate the [contextual variant classes](#variants) for `.list-group-item`s.\n-\n {{< scss-docs name=\"list-group-mixin\" file=\"scss/mixins/_list-group.scss\" >}}\n \n ### Sass loops\ndiff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 1c98ae15c..016c376f1 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -152,13 +152,13 @@ Learn more by reading the new [color modes documentation]({{< docsref \"/customiz\n \n - Alert variants are now styled via CSS variables.\n \n-- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `.alert-variant()` mixin is now deprecated. We now [use a Sass loop]({{< docsref \"/components/alerts#sass-loops\" >}}) directly to modify the component's default CSS variables for each variant.\n+- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `alert-variant()` mixin is now deprecated. We now [use a Sass loop]({{< docsref \"/components/alerts#sass-loops\" >}}) directly to modify the component's default CSS variables for each variant.\n \n #### List group\n \n - List group item variants are now styled via CSS variables.\n \n-- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `.list-group-variant()` mixin is now deprecated. We now [use a Sass loop]({{< docsref \"/components/list-group#sass-loops\" >}}) directly to modify the component's default CSS variables for each variant.\n+- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `list-group-item-variant()` mixin is now deprecated. We now [use a Sass loop]({{< docsref \"/components/list-group#sass-loops\" >}}) directly to modify the component's default CSS variables for each variant.\n \n #### Dropdowns\n ",
    "output": "docs: update desc of deprecated Sass mixins in alerts and list groups (#39537)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/get-started.html b/site/layouts/partials/home/get-started.html\nindex ac377a700..ad645111e 100644\n--- a/site/layouts/partials/home/get-started.html\n+++ b/site/layouts/partials/home/get-started.html\n@@ -41,15 +41,15 @@\n     <h4 class=\"fw-semibold\">Read our getting started guides</h4>\n     <p>Get a jump on including Bootstrap's source files in a new project with our official guides.</p>\n     <div class=\"d-flex flex-wrap align-items-center justify-content-center gap-4 mt-4\">\n-      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/webpack\">\n+      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/webpack/\">\n         <img class=\"d-block mb-2\" src=\"/docs/{{ .Site.Params.docs_version }}/assets/img/webpack.svg\" alt=\"\" width=\"72\" height=\"72\" loading=\"lazy\">\n         <span class=\"text-body-secondary\">Webpack</span>\n       </a>\n-      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/parcel\">\n+      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/parcel/\">\n         <img class=\"d-block mb-2\" src=\"/docs/{{ .Site.Params.docs_version }}/assets/img/parcel.png\" alt=\"\" width=\"72\" height=\"72\" loading=\"lazy\">\n         <span class=\"text-body-secondary\">Parcel</span>\n       </a>\n-      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/vite\">\n+      <a class=\"d-flex flex-column align-items-center text-decoration-none animate-img\" href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/vite/\">\n         <img class=\"d-block mb-2\" src=\"/docs/{{ .Site.Params.docs_version }}/assets/img/vite.svg\" alt=\"\" width=\"72\" height=\"72\" loading=\"lazy\">\n         <span class=\"text-body-secondary\">Vite</span>\n       </a>",
    "output": "docs: update homepage links to prevent HTTP redirect (#39539)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/background.md b/site/content/docs/5.3/utilities/background.md\nindex 8f1ca5dca..1239261b4 100644\n--- a/site/content/docs/5.3/utilities/background.md\n+++ b/site/content/docs/5.3/utilities/background.md\n@@ -25,9 +25,8 @@ Background utilities like `.bg-*` that generated from our original `$theme-color\n <div class=\"p-3 mb-2 bg-{{ .name }}-subtle text-{{ .name }}-emphasis\">.bg-{{ .name }}-subtle</div>\n {{- end -}}\n {{< /colors.inline >}}\n-<p class=\"p-3 mb-2 bg-body-secondary\">.bg-body-secondary</p>\n-<p class=\"p-3 mb-2 bg-body-tertiary\">.bg-body-tertiary</p>\n-\n+<div class=\"p-3 mb-2 bg-body-secondary\">.bg-body-secondary</div>\n+<div class=\"p-3 mb-2 bg-body-tertiary\">.bg-body-tertiary</div>\n <div class=\"p-3 mb-2 bg-body text-body\">.bg-body</div>\n <div class=\"p-3 mb-2 bg-black text-white\">.bg-black</div>\n <div class=\"p-3 mb-2 bg-white text-dark\">.bg-white</div>",
    "output": "docs: use consistent HTML elements in Utilities > Background page (#39519)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml\nindex 6d5f77897..dd7f6e7ef 100644\n--- a/.github/workflows/codeql.yml\n+++ b/.github/workflows/codeql.yml\n@@ -29,16 +29,16 @@ jobs:\n           persist-credentials: false\n \n       - name: Initialize CodeQL\n-        uses: github/codeql-action/init@v2\n+        uses: github/codeql-action/init@v3\n         with:\n           config-file: ./.github/codeql/codeql-config.yml\n           languages: \"javascript\"\n           queries: +security-and-quality\n \n       - name: Autobuild\n-        uses: github/codeql-action/autobuild@v2\n+        uses: github/codeql-action/autobuild@v3\n \n       - name: Perform CodeQL Analysis\n-        uses: github/codeql-action/analyze@v2\n+        uses: github/codeql-action/analyze@v3\n         with:\n           category: \"/language:javascript\"",
    "output": "build(deps): Bump github/codeql-action from 2 to 3 (#39502)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 872cf1dff..a53c233cc 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 331932e6b..99ba06063 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 0bb6327ed..52e93e2b2 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 5fae7c1e7..082220563 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 96dfc50d2..f14d51c9f 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 2c48332fe..213f9ec65 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex c0a63f3ab..493cc35fd 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -9,7 +9,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 18\n+  NODE: 20\n \n permissions:\n   contents: read",
    "output": "ci: switch to Node.js 20 (#39501)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a4e209a9e..a2eb6a77a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.116.4\",\n+        \"hugo-bin\": \"^0.117.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6047,9 +6047,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.116.4\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.4.tgz\",\n-      \"integrity\": \"sha512-MzTu7T2D88gadlADyCknACJFJXwr2KpzeJrez9RSu5rr0TMiWNJ5esaqnzoBqnptB/SU+qZNnPQ4Qe26sJf+mw==\",\n+      \"version\": \"0.117.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.117.1.tgz\",\n+      \"integrity\": \"sha512-2nOR0nsvuKMiWxAgCCMzLpggDCUt7EPfYqXA/I66LosLS0WU0Irj3gUPpTvi+cRxbFUZSzaNeiQyszQD8b5wag==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15869,9 +15869,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.116.4\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.4.tgz\",\n-      \"integrity\": \"sha512-MzTu7T2D88gadlADyCknACJFJXwr2KpzeJrez9RSu5rr0TMiWNJ5esaqnzoBqnptB/SU+qZNnPQ4Qe26sJf+mw==\",\n+      \"version\": \"0.117.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.117.1.tgz\",\n+      \"integrity\": \"sha512-2nOR0nsvuKMiWxAgCCMzLpggDCUt7EPfYqXA/I66LosLS0WU0Irj3gUPpTvi+cRxbFUZSzaNeiQyszQD8b5wag==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 5a4c64ab1..48792a80d 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.116.4\",\n+    \"hugo-bin\": \"^0.117.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.116.4 to 0.117.1 (#39491)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2658428af..a4e209a9e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.11.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^12.0.0\",\n-        \"terser\": \"^5.24.0\",\n+        \"terser\": \"^5.26.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10815,9 +10815,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.24.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.24.0.tgz\",\n-      \"integrity\": \"sha512-ZpGR4Hy3+wBEzVEnHvstMvqpD/nABNelQn/z2r0fjVWGQsN3bpOLzQlqDxmb4CDZnXq5lpjnQ+mHQLAOpfM5iw==\",\n+      \"version\": \"5.26.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n+      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19289,9 +19289,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.24.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.24.0.tgz\",\n-      \"integrity\": \"sha512-ZpGR4Hy3+wBEzVEnHvstMvqpD/nABNelQn/z2r0fjVWGQsN3bpOLzQlqDxmb4CDZnXq5lpjnQ+mHQLAOpfM5iw==\",\n+      \"version\": \"5.26.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.26.0.tgz\",\n+      \"integrity\": \"sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 1ca875e1f..5a4c64ab1 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.11.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^12.0.0\",\n-    \"terser\": \"^5.24.0\",\n+    \"terser\": \"^5.26.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.24.0 to 5.26.0 (#39489)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/sass.md b/site/content/docs/5.3/customize/sass.md\nindex 231bfa9d6..a2b2bb26c 100644\n--- a/site/content/docs/5.3/customize/sass.md\n+++ b/site/content/docs/5.3/customize/sass.md\n@@ -244,6 +244,8 @@ Next to the [Sass maps]({{< docsref \"/customize/color#color-sass-maps\" >}}) we h\n \n You can lighten or darken colors with Bootstrap's `tint-color()` and `shade-color()` functions. These functions will mix colors with black or white, unlike Sass' native `lighten()` and `darken()` functions which will change the lightness by a fixed amount, which often doesn't lead to the desired effect.\n \n+`shift-color()` combines these two functions by shading the color if the weight is positive and tinting the color if the weight is negative.\n+\n {{< scss-docs name=\"color-functions\" file=\"scss/_functions.scss\" >}}\n \n In practice, you'd call the function and pass in the color and weight parameters.\n@@ -256,6 +258,11 @@ In practice, you'd call the function and pass in the color and weight parameters\n .custom-element-2 {\n   color: shade-color($danger, 30%);\n }\n+\n+.custom-element-3 {\n+  color: shift-color($success, 40%);\n+  background-color: shift-color($success, -60%);\n+}\n ```\n \n ### Color contrast",
    "output": "docs: add `shift-color()` usage example in sass customization page (#39435)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/card.md b/site/content/docs/5.3/components/card.md\nindex 6138c3d92..c504fef61 100644\n--- a/site/content/docs/5.3/components/card.md\n+++ b/site/content/docs/5.3/components/card.md\n@@ -63,7 +63,7 @@ Subtitles are used by adding a `.card-subtitle` to a `<h*>` tag. If the `.card-t\n \n ### Images\n \n-`.card-img-top` places an image to the top of the card. With `.card-text`, text can be added to the card. Text within `.card-text` can also be styled with the standard HTML tags.\n+`.card-img-top` and `.card-img-bottom` respectively set the top and bottom corners rounded to match the card's borders. With `.card-text`, text can be added to the card. Text within `.card-text` can also be styled with the standard HTML tags.\n \n {{< example >}}\n <div class=\"card\" style=\"width: 18rem;\">",
    "output": "docs: enhance `.card-img-*` description (#39458)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 37fdd9ac8..a25b30c4b 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.2\",\n         \"npm-run-all2\": \"^6.1.1\",\n-        \"postcss\": \"^8.4.31\",\n+        \"postcss\": \"^8.4.32\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.29.3\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -7863,9 +7863,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nanoid\": {\n-      \"version\": \"3.3.6\",\n-      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.6.tgz\",\n-      \"integrity\": \"sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==\",\n+      \"version\": \"3.3.7\",\n+      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz\",\n+      \"integrity\": \"sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -8633,9 +8633,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.31\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\n-      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\n+      \"version\": \"8.4.32\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.32.tgz\",\n+      \"integrity\": \"sha512-D/kj5JNu6oo2EIy+XL/26JEDTlIbB8hw85G8StOE6L74RQAVVP5rej6wxCNqyMbR4RkPfqvezVbPw81Ngd6Kcw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -8652,7 +8652,7 @@\n         }\n       ],\n       \"dependencies\": {\n-        \"nanoid\": \"^3.3.6\",\n+        \"nanoid\": \"^3.3.7\",\n         \"picocolors\": \"^1.0.0\",\n         \"source-map-js\": \"^1.0.2\"\n       },\n@@ -17203,9 +17203,9 @@\n       \"dev\": true\n     },\n     \"nanoid\": {\n-      \"version\": \"3.3.6\",\n-      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.6.tgz\",\n-      \"integrity\": \"sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==\",\n+      \"version\": \"3.3.7\",\n+      \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz\",\n+      \"integrity\": \"sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==\",\n       \"dev\": true\n     },\n     \"natural-compare\": {\n@@ -17725,12 +17725,12 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.31\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\n-      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\n+      \"version\": \"8.4.32\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.32.tgz\",\n+      \"integrity\": \"sha512-D/kj5JNu6oo2EIy+XL/26JEDTlIbB8hw85G8StOE6L74RQAVVP5rej6wxCNqyMbR4RkPfqvezVbPw81Ngd6Kcw==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"nanoid\": \"^3.3.6\",\n+        \"nanoid\": \"^3.3.7\",\n         \"picocolors\": \"^1.0.0\",\n         \"source-map-js\": \"^1.0.2\"\n       }\ndiff --git a/package.json b/package.json\nindex 15d90714e..f9439d454 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.2\",\n     \"npm-run-all2\": \"^6.1.1\",\n-    \"postcss\": \"^8.4.31\",\n+    \"postcss\": \"^8.4.32\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.29.3\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.31 to 8.4.32 (#39468)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c169d08f3..5ff20ff97 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.23.0\",\n+        \"@babel/cli\": \"^7.23.4\",\n         \"@babel/core\": \"^7.23.3\",\n         \"@babel/preset-env\": \"^7.23.3\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -96,9 +96,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.23.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.0.tgz\",\n-      \"integrity\": \"sha512-17E1oSkGk2IwNILM4jtfAvgjt+ohmpfBky8aLerUfYZhiPNg7ca+CRCxZn8QDxwNhV/upsc2VHBCqGFIR+iBfA==\",\n+      \"version\": \"7.23.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.4.tgz\",\n+      \"integrity\": \"sha512-j3luA9xGKCXVyCa5R7lJvOMM+Kc2JEnAEIgz2ggtjQ/j5YUVgfsg/WsG95bbsgq7YLHuiCOzMnoSasuY16qiCw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -11641,9 +11641,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.23.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.0.tgz\",\n-      \"integrity\": \"sha512-17E1oSkGk2IwNILM4jtfAvgjt+ohmpfBky8aLerUfYZhiPNg7ca+CRCxZn8QDxwNhV/upsc2VHBCqGFIR+iBfA==\",\n+      \"version\": \"7.23.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.4.tgz\",\n+      \"integrity\": \"sha512-j3luA9xGKCXVyCa5R7lJvOMM+Kc2JEnAEIgz2ggtjQ/j5YUVgfsg/WsG95bbsgq7YLHuiCOzMnoSasuY16qiCw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex 66037c339..566aad391 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.23.0\",\n+    \"@babel/cli\": \"^7.23.4\",\n     \"@babel/core\": \"^7.23.3\",\n     \"@babel/preset-env\": \"^7.23.3\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.23.0 to 7.23.4 (#39443)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex 7c4a29615..c671fde11 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -28,7 +28,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run cspell\n-        uses: streetsidesoftware/cspell-action@v4\n+        uses: streetsidesoftware/cspell-action@v5\n         with:\n           config: \".cspell.json\"\n           files: \"**/*.md\"",
    "output": "build(deps): Bump streetsidesoftware/cspell-action from 4 to 5 (#39403)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/vite.md b/site/content/docs/5.3/getting-started/vite.md\nindex 9c2be9f11..98bbe7b87 100644\n--- a/site/content/docs/5.3/getting-started/vite.md\n+++ b/site/content/docs/5.3/getting-started/vite.md\n@@ -78,10 +78,10 @@ With dependencies installed and our project folder ready for us to start coding,\n \n    <!-- eslint-skip -->\n    ```js\n-   const path = require('path')\n+   import { resolve } from 'path'\n \n    export default {\n-     root: path.resolve(__dirname, 'src'),\n+     root: resolve(__dirname, 'src'),\n      build: {\n        outDir: '../dist'\n      },",
    "output": "docs: change vite config path import in vite guide (#39418)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex cceb34087..c4c6aea82 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.116.3\",\n+        \"hugo-bin\": \"^0.116.4\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6031,9 +6031,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.116.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.3.tgz\",\n-      \"integrity\": \"sha512-FgibDoYLJ0W7z81FA3sqC1XLds/fOzH8nreEo+1gxXGguewuYFk6k7X3FlbiADVWMCkZiY4J4rZfrHovlZbr7g==\",\n+      \"version\": \"0.116.4\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.4.tgz\",\n+      \"integrity\": \"sha512-MzTu7T2D88gadlADyCknACJFJXwr2KpzeJrez9RSu5rr0TMiWNJ5esaqnzoBqnptB/SU+qZNnPQ4Qe26sJf+mw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15852,9 +15852,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.116.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.3.tgz\",\n-      \"integrity\": \"sha512-FgibDoYLJ0W7z81FA3sqC1XLds/fOzH8nreEo+1gxXGguewuYFk6k7X3FlbiADVWMCkZiY4J4rZfrHovlZbr7g==\",\n+      \"version\": \"0.116.4\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.4.tgz\",\n+      \"integrity\": \"sha512-MzTu7T2D88gadlADyCknACJFJXwr2KpzeJrez9RSu5rr0TMiWNJ5esaqnzoBqnptB/SU+qZNnPQ4Qe26sJf+mw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 17f8ef000..5ba02699e 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.116.3\",\n+    \"hugo-bin\": \"^0.116.4\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.116.3 to 0.116.4 (#39401)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/sass.md b/site/content/docs/5.3/customize/sass.md\nindex ceadf3a98..231bfa9d6 100644\n--- a/site/content/docs/5.3/customize/sass.md\n+++ b/site/content/docs/5.3/customize/sass.md\n@@ -338,18 +338,18 @@ Our `scss/mixins/` directory has a ton of mixins that power parts of Bootstrap a\n \n ### Color schemes\n \n-A shorthand mixin for the `prefers-color-scheme` media query is available with support for `light`, `dark`, and custom color schemes. See [the color modes documentation]({{< docsref \"/customize/color-modes\" >}}) for information on our color mode mixin.\n+A shorthand mixin for the `prefers-color-scheme` media query is available with support for `light` and `dark` color schemes. See [the color modes documentation]({{< docsref \"/customize/color-modes\" >}}) for information on our color mode mixin.\n \n {{< scss-docs name=\"mixin-color-scheme\" file=\"scss/mixins/_color-scheme.scss\" >}}\n \n ```scss\n .custom-element {\n-  @include color-scheme(dark) {\n-    // Insert dark mode styles here\n+  @include color-scheme(light) {\n+    // Insert light mode styles here\n   }\n \n-  @include color-scheme(custom-named-scheme) {\n-    // Insert custom color scheme styles here\n+  @include color-scheme(dark) {\n+    // Insert dark mode styles here\n   }\n }\n ```",
    "output": "docs: fix color schemes description in Sass customization (#39417)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/modal.md b/site/content/docs/5.3/components/modal.md\nindex ba2a51a6e..3ca7cc4d2 100644\n--- a/site/content/docs/5.3/components/modal.md\n+++ b/site/content/docs/5.3/components/modal.md\n@@ -218,7 +218,7 @@ When modals become too long for the user's viewport or device, they scroll indep\n   </button>\n </div>\n \n-You can also create a scrollable modal that allows scroll the modal body by adding `.modal-dialog-scrollable` to `.modal-dialog`.\n+You can also create a scrollable modal that allows scrolling the modal body by adding `.modal-dialog-scrollable` to `.modal-dialog`.\n \n <div class=\"modal fade\" id=\"exampleModalScrollable\" tabindex=\"-1\" aria-labelledby=\"exampleModalScrollableTitle\" aria-hidden=\"true\">\n   <div class=\"modal-dialog modal-dialog-scrollable\">",
    "output": "docs: fix sentence in 'Scrolling long content' modal section (#39378)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 365c2cee1..972288262 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -23,7 +23,7 @@\n         \"@babel/core\": \"^7.23.2\",\n         \"@babel/preset-env\": \"^7.23.2\",\n         \"@popperjs/core\": \"^2.11.8\",\n-        \"@rollup/plugin-babel\": \"^6.0.3\",\n+        \"@rollup/plugin-babel\": \"^6.0.4\",\n         \"@rollup/plugin-commonjs\": \"^25.0.4\",\n         \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n         \"@rollup/plugin-replace\": \"^5.0.5\",\n@@ -2105,9 +2105,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-babel\": {\n-      \"version\": \"6.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.3.tgz\",\n-      \"integrity\": \"sha512-fKImZKppa1A/gX73eg4JGo+8kQr/q1HBQaCGKECZ0v4YBBv3lFqi14+7xyApECzvkLTHCifx+7ntcrvtBIRcpg==\",\n+      \"version\": \"6.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.4.tgz\",\n+      \"integrity\": \"sha512-YF7Y52kFdFT/xVSuVdjkV5ZdX/3YtmX0QulG+x0taQOtJdHYzVU61aSSkAgVJ7NOv6qPkIYiJSgSWWN/DM5sGw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-module-imports\": \"^7.18.6\",\n@@ -2119,7 +2119,7 @@\n       \"peerDependencies\": {\n         \"@babel/core\": \"^7.0.0\",\n         \"@types/babel__core\": \"^7.1.9\",\n-        \"rollup\": \"^1.20.0||^2.0.0||^3.0.0\"\n+        \"rollup\": \"^1.20.0||^2.0.0||^3.0.0||^4.0.0\"\n       },\n       \"peerDependenciesMeta\": {\n         \"@types/babel__core\": {\n@@ -12975,9 +12975,9 @@\n       \"dev\": true\n     },\n     \"@rollup/plugin-babel\": {\n-      \"version\": \"6.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.3.tgz\",\n-      \"integrity\": \"sha512-fKImZKppa1A/gX73eg4JGo+8kQr/q1HBQaCGKECZ0v4YBBv3lFqi14+7xyApECzvkLTHCifx+7ntcrvtBIRcpg==\",\n+      \"version\": \"6.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-6.0.4.tgz\",\n+      \"integrity\": \"sha512-YF7Y52kFdFT/xVSuVdjkV5ZdX/3YtmX0QulG+x0taQOtJdHYzVU61aSSkAgVJ7NOv6qPkIYiJSgSWWN/DM5sGw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/helper-module-imports\": \"^7.18.6\",\ndiff --git a/package.json b/package.json\nindex 92ed52909..03df661e6 100644\n--- a/package.json\n+++ b/package.json\n@@ -107,7 +107,7 @@\n     \"@babel/core\": \"^7.23.2\",\n     \"@babel/preset-env\": \"^7.23.2\",\n     \"@popperjs/core\": \"^2.11.8\",\n-    \"@rollup/plugin-babel\": \"^6.0.3\",\n+    \"@rollup/plugin-babel\": \"^6.0.4\",\n     \"@rollup/plugin-commonjs\": \"^25.0.4\",\n     \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n     \"@rollup/plugin-replace\": \"^5.0.5\",",
    "output": "build(deps-dev): Bump @rollup/plugin-babel from 6.0.3 to 6.0.4 (#39360)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex bf0121b91..dda6c2e7c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.11.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-        \"terser\": \"^5.20.0\",\n+        \"terser\": \"^5.24.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10790,9 +10790,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.20.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.20.0.tgz\",\n-      \"integrity\": \"sha512-e56ETryaQDyebBwJIWYB2TT6f2EZ0fL0sW/JRXNMN26zZdKi2u/E/5my5lG6jNxym6qsrVXfFRmOdV42zlAgLQ==\",\n+      \"version\": \"5.24.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.24.0.tgz\",\n+      \"integrity\": \"sha512-ZpGR4Hy3+wBEzVEnHvstMvqpD/nABNelQn/z2r0fjVWGQsN3bpOLzQlqDxmb4CDZnXq5lpjnQ+mHQLAOpfM5iw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19250,9 +19250,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.20.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.20.0.tgz\",\n-      \"integrity\": \"sha512-e56ETryaQDyebBwJIWYB2TT6f2EZ0fL0sW/JRXNMN26zZdKi2u/E/5my5lG6jNxym6qsrVXfFRmOdV42zlAgLQ==\",\n+      \"version\": \"5.24.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.24.0.tgz\",\n+      \"integrity\": \"sha512-ZpGR4Hy3+wBEzVEnHvstMvqpD/nABNelQn/z2r0fjVWGQsN3bpOLzQlqDxmb4CDZnXq5lpjnQ+mHQLAOpfM5iw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 9c745a8c9..964199145 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.11.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-    \"terser\": \"^5.20.0\",\n+    \"terser\": \"^5.24.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.20.0 to 5.24.0 (#39354)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3cced2c50..bf0121b91 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.29.3\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.68.0\",\n+        \"sass\": \"^1.69.5\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.11.0\",\n@@ -9734,9 +9734,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.68.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.68.0.tgz\",\n-      \"integrity\": \"sha512-Lmj9lM/fef0nQswm1J2HJcEsBUba4wgNx2fea6yJHODREoMFnwRpZydBnX/RjyXw2REIwdkbqE4hrTo4qfDBUA==\",\n+      \"version\": \"1.69.5\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.5.tgz\",\n+      \"integrity\": \"sha512-qg2+UCJibLr2LCVOt3OlPhr/dqVHWOa9XtZf2OjbLs/T4VPSJ00udtgJxH3neXZm+QqX8B+3cU7RaLqp1iVfcQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18443,9 +18443,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.68.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.68.0.tgz\",\n-      \"integrity\": \"sha512-Lmj9lM/fef0nQswm1J2HJcEsBUba4wgNx2fea6yJHODREoMFnwRpZydBnX/RjyXw2REIwdkbqE4hrTo4qfDBUA==\",\n+      \"version\": \"1.69.5\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.69.5.tgz\",\n+      \"integrity\": \"sha512-qg2+UCJibLr2LCVOt3OlPhr/dqVHWOa9XtZf2OjbLs/T4VPSJ00udtgJxH3neXZm+QqX8B+3cU7RaLqp1iVfcQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 142f66bf3..9c745a8c9 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.29.3\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.68.0\",\n+    \"sass\": \"^1.69.5\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.11.0\",",
    "output": "build(deps-dev): Bump sass from 1.68.0 to 1.69.5 (#39357)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 670351b85..3cced2c50 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.114.2\",\n+        \"hugo-bin\": \"^0.116.3\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6036,9 +6036,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.114.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.114.2.tgz\",\n-      \"integrity\": \"sha512-a7F8wArDACHm10cQnpDe9kljNc3zcsy5uK3myD5TTVU5QZ+75ZYi0IcP9YmQNDg57jos9p0ggOCu510SueH1yw==\",\n+      \"version\": \"0.116.3\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.3.tgz\",\n+      \"integrity\": \"sha512-FgibDoYLJ0W7z81FA3sqC1XLds/fOzH8nreEo+1gxXGguewuYFk6k7X3FlbiADVWMCkZiY4J4rZfrHovlZbr7g==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15835,9 +15835,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.114.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.114.2.tgz\",\n-      \"integrity\": \"sha512-a7F8wArDACHm10cQnpDe9kljNc3zcsy5uK3myD5TTVU5QZ+75ZYi0IcP9YmQNDg57jos9p0ggOCu510SueH1yw==\",\n+      \"version\": \"0.116.3\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.116.3.tgz\",\n+      \"integrity\": \"sha512-FgibDoYLJ0W7z81FA3sqC1XLds/fOzH8nreEo+1gxXGguewuYFk6k7X3FlbiADVWMCkZiY4J4rZfrHovlZbr7g==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 7a117af61..142f66bf3 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.114.2\",\n+    \"hugo-bin\": \"^0.116.3\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.114.2 to 0.116.3 (#39355)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2c6a77894..670351b85 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -25,7 +25,7 @@\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n         \"@rollup/plugin-commonjs\": \"^25.0.4\",\n-        \"@rollup/plugin-node-resolve\": \"^15.2.1\",\n+        \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n         \"@rollup/plugin-replace\": \"^5.0.5\",\n         \"autoprefixer\": \"^10.4.16\",\n         \"bundlewatch\": \"^0.3.3\",\n@@ -2196,9 +2196,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.2.1\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.1.tgz\",\n-      \"integrity\": \"sha512-nsbUg588+GDSu8/NS8T4UAshO6xeaOfINNuXeVHcKV02LJtoRaM1SiOacClw4kws1SFiNhdLGxlbMY9ga/zs/w==\",\n+      \"version\": \"15.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.3.tgz\",\n+      \"integrity\": \"sha512-j/lym8nf5E21LwBT4Df1VD6hRO2L2iwUeUmP7litikRsVp1H6NWx20NEp0Y7su+7XGc476GnXXc4kFeZNGmaSQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -2212,7 +2212,7 @@\n         \"node\": \">=14.0.0\"\n       },\n       \"peerDependencies\": {\n-        \"rollup\": \"^2.78.0||^3.0.0\"\n+        \"rollup\": \"^2.78.0||^3.0.0||^4.0.0\"\n       },\n       \"peerDependenciesMeta\": {\n         \"rollup\": {\n@@ -13017,9 +13017,9 @@\n       }\n     },\n     \"@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.2.1\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.1.tgz\",\n-      \"integrity\": \"sha512-nsbUg588+GDSu8/NS8T4UAshO6xeaOfINNuXeVHcKV02LJtoRaM1SiOacClw4kws1SFiNhdLGxlbMY9ga/zs/w==\",\n+      \"version\": \"15.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.3.tgz\",\n+      \"integrity\": \"sha512-j/lym8nf5E21LwBT4Df1VD6hRO2L2iwUeUmP7litikRsVp1H6NWx20NEp0Y7su+7XGc476GnXXc4kFeZNGmaSQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 71f325905..7a117af61 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n     \"@rollup/plugin-commonjs\": \"^25.0.4\",\n-    \"@rollup/plugin-node-resolve\": \"^15.2.1\",\n+    \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n     \"@rollup/plugin-replace\": \"^5.0.5\",\n     \"autoprefixer\": \"^10.4.16\",\n     \"bundlewatch\": \"^0.3.3\",",
    "output": "build(deps-dev): Bump @rollup/plugin-node-resolve from 15.2.1 to 15.2.3 (#39356)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex 3e7902e39..7c4a29615 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -28,7 +28,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run cspell\n-        uses: streetsidesoftware/cspell-action@v3\n+        uses: streetsidesoftware/cspell-action@v4\n         with:\n           config: \".cspell.json\"\n           files: \"**/*.md\"",
    "output": "build(deps): Bump streetsidesoftware/cspell-action from 3 to 4 (#39331)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 8d8cb1c34..872cf1dff 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -27,7 +27,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n           cache: npm\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 7f58b245f..331932e6b 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -25,7 +25,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n           cache: npm\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex d859c45eb..0bb6327ed 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -25,7 +25,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n           cache: npm\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 278b099c1..5fae7c1e7 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -25,7 +25,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n           cache: npm\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex e123e982f..96dfc50d2 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -30,7 +30,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: ${{ env.NODE }}\n           cache: npm\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 7c88ddc96..2c48332fe 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -25,7 +25,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n           cache: npm\ndiff --git a/.github/workflows/node-sass.yml b/.github/workflows/node-sass.yml\nindex 51ea6bff6..c0a63f3ab 100644\n--- a/.github/workflows/node-sass.yml\n+++ b/.github/workflows/node-sass.yml\n@@ -25,7 +25,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v3\n+        uses: actions/setup-node@v4\n         with:\n           node-version: \"${{ env.NODE }}\"\n ",
    "output": "build(deps): Bump actions/setup-node from 3 to 4 (#39330)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 97287bb1e..67b806b01 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -55,7 +55,7 @@\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.1\",\n-        \"npm-run-all2\": \"^6.0.6\",\n+        \"npm-run-all2\": \"^6.1.1\",\n         \"postcss\": \"^8.4.31\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.29.3\",\n@@ -8003,9 +8003,9 @@\n       }\n     },\n     \"node_modules/npm-run-all2\": {\n-      \"version\": \"6.0.6\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.0.6.tgz\",\n-      \"integrity\": \"sha512-Ba31DnJj3aqJ5freRdVIoBuRdGjHDt0Sfc7tduR2wYDbtcxsFlga6Sw2pE5Tn3+kdVttVwqzFlmozcT540wDxw==\",\n+      \"version\": \"6.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.1.1.tgz\",\n+      \"integrity\": \"sha512-lWLbkPZ5BSdXtN8lR+0rc8caKoPdymycpZksyDEC9MOBvfdwTXZ0uVhb7bMcGeXv2/BKtfQuo6Zn3zfc8rxNXA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"ansi-styles\": \"^6.2.1\",\n@@ -8018,6 +8018,7 @@\n       },\n       \"bin\": {\n         \"npm-run-all\": \"bin/npm-run-all/index.js\",\n+        \"npm-run-all2\": \"bin/npm-run-all/index.js\",\n         \"run-p\": \"bin/run-p/index.js\",\n         \"run-s\": \"bin/run-s/index.js\"\n       },\n@@ -17204,9 +17205,9 @@\n       \"dev\": true\n     },\n     \"npm-run-all2\": {\n-      \"version\": \"6.0.6\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.0.6.tgz\",\n-      \"integrity\": \"sha512-Ba31DnJj3aqJ5freRdVIoBuRdGjHDt0Sfc7tduR2wYDbtcxsFlga6Sw2pE5Tn3+kdVttVwqzFlmozcT540wDxw==\",\n+      \"version\": \"6.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.1.1.tgz\",\n+      \"integrity\": \"sha512-lWLbkPZ5BSdXtN8lR+0rc8caKoPdymycpZksyDEC9MOBvfdwTXZ0uVhb7bMcGeXv2/BKtfQuo6Zn3zfc8rxNXA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"ansi-styles\": \"^6.2.1\",\ndiff --git a/package.json b/package.json\nindex 2d415c0a0..d04d34ddc 100644\n--- a/package.json\n+++ b/package.json\n@@ -139,7 +139,7 @@\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.1\",\n-    \"npm-run-all2\": \"^6.0.6\",\n+    \"npm-run-all2\": \"^6.1.1\",\n     \"postcss\": \"^8.4.31\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.29.3\",",
    "output": "build(deps-dev): Bump npm-run-all2 from 6.0.6 to 6.1.1 (#39309)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/content/tables.md b/site/content/docs/5.3/content/tables.md\nindex b75b233e1..3d3583c37 100644\n--- a/site/content/docs/5.3/content/tables.md\n+++ b/site/content/docs/5.3/content/tables.md\n@@ -549,7 +549,7 @@ Similar to tables and dark tables, use the modifier classes `.table-light` or `.\n \n <div class=\"bd-example\">\n <table class=\"table\">\n-  <thead class=\"table-light\">\n+  <thead>\n     <tr>\n       <th scope=\"col\">#</th>\n       <th scope=\"col\">First</th>",
    "output": "docs: drop `.table-light` from table foot example (#39320)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/background.md b/site/content/docs/5.3/utilities/background.md\nindex c17ed8470..8f1ca5dca 100644\n--- a/site/content/docs/5.3/utilities/background.md\n+++ b/site/content/docs/5.3/utilities/background.md\n@@ -22,7 +22,7 @@ Background utilities like `.bg-*` that generated from our original `$theme-color\n {{< colors.inline >}}\n {{- range (index $.Site.Data \"theme-colors\") }}\n <div class=\"p-3 mb-2 bg-{{ .name }}{{ if .contrast_color }} text-{{ .contrast_color }}{{ else }} text-white{{ end }}\">.bg-{{ .name }}</div>\n-<div class=\"p-3 mb-2 bg-{{ .name }}-subtle text-emphasis-{{ .name }}\">.bg-{{ .name }}-subtle</div>\n+<div class=\"p-3 mb-2 bg-{{ .name }}-subtle text-{{ .name }}-emphasis\">.bg-{{ .name }}-subtle</div>\n {{- end -}}\n {{< /colors.inline >}}\n <p class=\"p-3 mb-2 bg-body-secondary\">.bg-body-secondary</p>",
    "output": "docs: fix emphasis text utilities usage in Utilities > Background (#39293)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 8e8748e86..702f88f3c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.1\",\n         \"npm-run-all2\": \"^6.0.6\",\n-        \"postcss\": \"^8.4.30\",\n+        \"postcss\": \"^8.4.31\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.29.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8579,9 +8579,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.30\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.30.tgz\",\n-      \"integrity\": \"sha512-7ZEao1g4kd68l97aWG/etQKPKq07us0ieSZ2TnFDk11i0ZfDW2AwKHYU8qv4MZKqN2fdBfg+7q0ES06UA73C1g==\",\n+      \"version\": \"8.4.31\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\n+      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17593,9 +17593,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.30\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.30.tgz\",\n-      \"integrity\": \"sha512-7ZEao1g4kd68l97aWG/etQKPKq07us0ieSZ2TnFDk11i0ZfDW2AwKHYU8qv4MZKqN2fdBfg+7q0ES06UA73C1g==\",\n+      \"version\": \"8.4.31\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz\",\n+      \"integrity\": \"sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.6\",\ndiff --git a/package.json b/package.json\nindex abbbe662d..3b113dbbd 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.1\",\n     \"npm-run-all2\": \"^6.0.6\",\n-    \"postcss\": \"^8.4.30\",\n+    \"postcss\": \"^8.4.31\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.29.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.30 to 8.4.31 (#39278)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_component-examples.scss b/site/assets/scss/_component-examples.scss\nindex 1d8caed66..fde8b7f41 100644\n--- a/site/assets/scss/_component-examples.scss\n+++ b/site/assets/scss/_component-examples.scss\n@@ -379,6 +379,10 @@\n   }\n }\n \n+.bd-example-snippet .highlight pre {\n+  margin-right: 0;\n+}\n+\n .highlight-toolbar {\n   background-color: var(--bd-pre-bg);\n ",
    "output": "docs: fix unnecessary right-margin for example code blocks (#39246)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 9fe70858e..8e8748e86 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.6\",\n         \"postcss\": \"^8.4.30\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.29.1\",\n+        \"rollup\": \"^3.29.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n         \"sass\": \"^1.68.0\",\n@@ -9549,9 +9549,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.29.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.29.1.tgz\",\n-      \"integrity\": \"sha512-c+ebvQz0VIH4KhhCpDsI+Bik0eT8ZFEVZEYw0cGMVqIP8zc+gnwl7iXCamTw7vzv2MeuZFZfdx5JJIq+ehzDlg==\",\n+      \"version\": \"3.29.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.29.3.tgz\",\n+      \"integrity\": \"sha512-T7du6Hum8jOkSWetjRgbwpM6Sy0nECYrYRSmZjayFcOddtKJWU4d17AC3HNUk7HRuqy4p+G7aEZclSHytqUmEg==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -18261,9 +18261,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.29.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.29.1.tgz\",\n-      \"integrity\": \"sha512-c+ebvQz0VIH4KhhCpDsI+Bik0eT8ZFEVZEYw0cGMVqIP8zc+gnwl7iXCamTw7vzv2MeuZFZfdx5JJIq+ehzDlg==\",\n+      \"version\": \"3.29.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.29.3.tgz\",\n+      \"integrity\": \"sha512-T7du6Hum8jOkSWetjRgbwpM6Sy0nECYrYRSmZjayFcOddtKJWU4d17AC3HNUk7HRuqy4p+G7aEZclSHytqUmEg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 4840789fd..abbbe662d 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.6\",\n     \"postcss\": \"^8.4.30\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.29.1\",\n+    \"rollup\": \"^3.29.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n     \"sass\": \"^1.68.0\",",
    "output": "build(deps-dev): Bump rollup from 3.29.1 to 3.29.3 (#39243)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b926ca099..9fe70858e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.29.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.66.1\",\n+        \"sass\": \"^1.68.0\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.10.3\",\n@@ -9682,9 +9682,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.66.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.66.1.tgz\",\n-      \"integrity\": \"sha512-50c+zTsZOJVgFfTgwwEzkjA3/QACgdNsKueWPyAR0mRINIvLAStVQBbPg14iuqEQ74NPDbXzJARJ/O4SI1zftA==\",\n+      \"version\": \"1.68.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.68.0.tgz\",\n+      \"integrity\": \"sha512-Lmj9lM/fef0nQswm1J2HJcEsBUba4wgNx2fea6yJHODREoMFnwRpZydBnX/RjyXw2REIwdkbqE4hrTo4qfDBUA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18336,9 +18336,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.66.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.66.1.tgz\",\n-      \"integrity\": \"sha512-50c+zTsZOJVgFfTgwwEzkjA3/QACgdNsKueWPyAR0mRINIvLAStVQBbPg14iuqEQ74NPDbXzJARJ/O4SI1zftA==\",\n+      \"version\": \"1.68.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.68.0.tgz\",\n+      \"integrity\": \"sha512-Lmj9lM/fef0nQswm1J2HJcEsBUba4wgNx2fea6yJHODREoMFnwRpZydBnX/RjyXw2REIwdkbqE4hrTo4qfDBUA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex a2e8ba224..4840789fd 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.29.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.66.1\",\n+    \"sass\": \"^1.68.0\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.10.3\",",
    "output": "build(deps-dev): Bump sass from 1.66.1 to 1.68.0 (#39242)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 44f624b02..b926ca099 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.10.3\",\n         \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-        \"terser\": \"^5.19.4\",\n+        \"terser\": \"^5.20.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10726,9 +10726,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.19.4\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.4.tgz\",\n-      \"integrity\": \"sha512-6p1DjHeuluwxDXcuT9VR8p64klWJKo1ILiy19s6C9+0Bh2+NWTX6nD9EPppiER4ICkHDVB1RkVpin/YW2nQn/g==\",\n+      \"version\": \"5.20.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.20.0.tgz\",\n+      \"integrity\": \"sha512-e56ETryaQDyebBwJIWYB2TT6f2EZ0fL0sW/JRXNMN26zZdKi2u/E/5my5lG6jNxym6qsrVXfFRmOdV42zlAgLQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -19134,9 +19134,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.19.4\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.4.tgz\",\n-      \"integrity\": \"sha512-6p1DjHeuluwxDXcuT9VR8p64klWJKo1ILiy19s6C9+0Bh2+NWTX6nD9EPppiER4ICkHDVB1RkVpin/YW2nQn/g==\",\n+      \"version\": \"5.20.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.20.0.tgz\",\n+      \"integrity\": \"sha512-e56ETryaQDyebBwJIWYB2TT6f2EZ0fL0sW/JRXNMN26zZdKi2u/E/5my5lG6jNxym6qsrVXfFRmOdV42zlAgLQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 7ff43b051..a2e8ba224 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.10.3\",\n     \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-    \"terser\": \"^5.19.4\",\n+    \"terser\": \"^5.20.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.19.4 to 5.20.0 (#39240)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3ed5e0bdb..44f624b02 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -60,7 +60,7 @@\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.29.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n-        \"rtlcss\": \"^4.1.0\",\n+        \"rtlcss\": \"^4.1.1\",\n         \"sass\": \"^1.66.1\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n@@ -9583,9 +9583,9 @@\n       }\n     },\n     \"node_modules/rtlcss\": {\n-      \"version\": \"4.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.1.0.tgz\",\n-      \"integrity\": \"sha512-W+N4hh0nVqVrrn3mRkHakxpB+c9cQ4CRT67O39kgA+1DjyhrdsqyCqIuHXyvWaXn4/835n+oX3fYJCi4+G/06A==\",\n+      \"version\": \"4.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.1.1.tgz\",\n+      \"integrity\": \"sha512-/oVHgBtnPNcggP2aVXQjSy6N1mMAfHg4GSag0QtZBlD5bdDgAHwr4pydqJGd+SUCu9260+Pjqbjwtvu7EMH1KQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"escalade\": \"^3.1.1\",\n@@ -18280,9 +18280,9 @@\n       }\n     },\n     \"rtlcss\": {\n-      \"version\": \"4.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.1.0.tgz\",\n-      \"integrity\": \"sha512-W+N4hh0nVqVrrn3mRkHakxpB+c9cQ4CRT67O39kgA+1DjyhrdsqyCqIuHXyvWaXn4/835n+oX3fYJCi4+G/06A==\",\n+      \"version\": \"4.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.1.1.tgz\",\n+      \"integrity\": \"sha512-/oVHgBtnPNcggP2aVXQjSy6N1mMAfHg4GSag0QtZBlD5bdDgAHwr4pydqJGd+SUCu9260+Pjqbjwtvu7EMH1KQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"escalade\": \"^3.1.1\",\ndiff --git a/package.json b/package.json\nindex fb98b260f..7ff43b051 100644\n--- a/package.json\n+++ b/package.json\n@@ -144,7 +144,7 @@\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.29.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n-    \"rtlcss\": \"^4.1.0\",\n+    \"rtlcss\": \"^4.1.1\",\n     \"sass\": \"^1.66.1\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",",
    "output": "build(deps-dev): Bump rtlcss from 4.1.0 to 4.1.1 (#39209)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 976489c98..3ed5e0bdb 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.12.1\",\n         \"nodemon\": \"^3.0.1\",\n         \"npm-run-all2\": \"^6.0.6\",\n-        \"postcss\": \"^8.4.29\",\n+        \"postcss\": \"^8.4.30\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.29.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8579,9 +8579,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.29\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.29.tgz\",\n-      \"integrity\": \"sha512-cbI+jaqIeu/VGqXEarWkRCCffhjgXc0qjBtXpqJhTBohMUjUQnbBr0xqX3vEKudc4iviTewcJo5ajcec5+wdJw==\",\n+      \"version\": \"8.4.30\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.30.tgz\",\n+      \"integrity\": \"sha512-7ZEao1g4kd68l97aWG/etQKPKq07us0ieSZ2TnFDk11i0ZfDW2AwKHYU8qv4MZKqN2fdBfg+7q0ES06UA73C1g==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17593,9 +17593,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.29\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.29.tgz\",\n-      \"integrity\": \"sha512-cbI+jaqIeu/VGqXEarWkRCCffhjgXc0qjBtXpqJhTBohMUjUQnbBr0xqX3vEKudc4iviTewcJo5ajcec5+wdJw==\",\n+      \"version\": \"8.4.30\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.30.tgz\",\n+      \"integrity\": \"sha512-7ZEao1g4kd68l97aWG/etQKPKq07us0ieSZ2TnFDk11i0ZfDW2AwKHYU8qv4MZKqN2fdBfg+7q0ES06UA73C1g==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.6\",\ndiff --git a/package.json b/package.json\nindex b5a4039b1..fb98b260f 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.12.1\",\n     \"nodemon\": \"^3.0.1\",\n     \"npm-run-all2\": \"^6.0.6\",\n-    \"postcss\": \"^8.4.29\",\n+    \"postcss\": \"^8.4.30\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.29.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.29 to 8.4.30 (#39207)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/_default/examples.html b/site/layouts/_default/examples.html\nindex 11759a2be..6301acf76 100644\n--- a/site/layouts/_default/examples.html\n+++ b/site/layouts/_default/examples.html\n@@ -89,9 +89,14 @@\n         --bs-btn-active-bg: #5a23c8;\n         --bs-btn-active-border-color: #5a23c8;\n       }\n+\n       .bd-mode-toggle {\n         z-index: 1500;\n       }\n+\n+      .bd-mode-toggle .dropdown-menu .active .bi {\n+        display: block !important;\n+      }\n     </style>\n \n     {{ range .Page.Params.extra_css }}",
    "output": "fix: make theme selector tick icon visible when active in examples layout (#39177)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex c08d4cbad..6ef0f7d71 100644\n--- a/README.md\n+++ b/README.md\n@@ -177,7 +177,8 @@ Get updates on Bootstrap's development and chat with the project maintainers and\n \n - Follow [@getbootstrap on Twitter](https://twitter.com/getbootstrap).\n - Read and subscribe to [The Official Bootstrap Blog](https://blog.getbootstrap.com/).\n-- Ask and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).\n+- Ask questions and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).\n+- Discuss, ask questions, and more on [the community Discord](https://discord.gg/bZUvakRU3M) or [Bootstrap subreddit](https://reddit.com/r/bootstrap).\n - Chat with fellow Bootstrappers in IRC. On the `irc.libera.chat` server, in the `#bootstrap` channel.\n - Implementation help may be found at Stack Overflow (tagged [`bootstrap-5`](https://stackoverflow.com/questions/tagged/bootstrap-5)).\n - Developers should use the keyword `bootstrap` on packages which modify or add to the functionality of Bootstrap when distributing through [npm](https://www.npmjs.com/browse/keyword/bootstrap) or similar delivery mechanisms for maximum discoverability.\ndiff --git a/site/content/docs/5.3/getting-started/introduction.md b/site/content/docs/5.3/getting-started/introduction.md\nindex 22d08c8f7..538d31924 100644\n--- a/site/content/docs/5.3/getting-started/introduction.md\n+++ b/site/content/docs/5.3/getting-started/introduction.md\n@@ -146,7 +146,8 @@ For improved cross-browser rendering, we use [Reboot]({{< docsref \"/content/rebo\n Stay up-to-date on the development of Bootstrap and reach out to the community with these helpful resources.\n \n - Read and subscribe to [The Official Bootstrap Blog]({{< param blog >}}).\n-- Ask and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).\n+- Ask questions and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).\n+- Discuss, ask questions, and more on [the community Discord](https://discord.gg/bZUvakRU3M) or [Bootstrap subreddit](https://reddit.com/r/bootstrap).\n - Chat with fellow Bootstrappers in IRC. On the `irc.libera.chat` server, in the `#bootstrap` channel.\n - Implementation help may be found at Stack Overflow (tagged [`bootstrap-5`](https://stackoverflow.com/questions/tagged/bootstrap-5)).\n - Developers should use the keyword `bootstrap` on packages that modify or add to the functionality of Bootstrap when distributing through [npm](https://www.npmjs.com/search?q=keywords:bootstrap) or similar delivery mechanisms for maximum discoverability.",
    "output": "docs: add Discord (community) and Bootstrap subreddit links (#38873)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/download.md b/site/content/docs/5.3/getting-started/download.md\nindex a1b8bfd9a..9c20c6bb2 100644\n--- a/site/content/docs/5.3/getting-started/download.md\n+++ b/site/content/docs/5.3/getting-started/download.md\n@@ -50,6 +50,14 @@ If you're using our compiled JavaScript and prefer to include Popper separately,\n <script src=\"{{< param \"cdn.js\" >}}\" integrity=\"{{< param \"cdn.js_hash\" >}}\" crossorigin=\"anonymous\"></script>\n ```\n \n+### Alternative CDNs\n+\n+We recommend [jsDelivr](https://www.jsdelivr.com/) and use it ourselves in our documentation. However, in some cases\u2014like in some specific countries or environments\u2014you may need to use other CDN providers like [cdnjs](https://cdnjs.com/) or [unpkg](https://unpkg.com/).\n+\n+You'll find the same files on these CDN providers, albeit with different URLs. When changing the URLs, you'll also need to update the `integrity` attribute. Tools like [SRI Hash Generator](https://www.srihash.org/) can help you generate the correct values.\n+\n+With cdnjs, you can [use this direct Bootstrap package link](https://cdnjs.com/libraries/bootstrap) to copy and paste ready-to-use HTML snippets for each dist file from any version of Bootstrap.\n+\n ## Package managers\n \n Pull in Bootstrap's **source files** into nearly any project with some of the most popular package managers. No matter the package manager, Bootstrap will **require a [Sass compiler]({{< docsref \"/getting-started/contribute#sass\" >}}) and [Autoprefixer](https://github.com/postcss/autoprefixer)** for a setup that matches our official compiled versions.",
    "output": "docs: add alternative CDNs section in Getting Started > Download (#39145)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 05368d9c5..e083f29fc 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.113.0\",\n+        \"hugo-bin\": \"^0.114.2\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -5993,9 +5993,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.113.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.113.0.tgz\",\n-      \"integrity\": \"sha512-LivqvBvXU/sAydUTH4eMMdsvrUEcJvwJHyWyZX+PfXPyvkCVTUekJcJ0Pg+oYBZrg/nyriyB/xfBFi6JlgTGpg==\",\n+      \"version\": \"0.114.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.114.2.tgz\",\n+      \"integrity\": \"sha512-a7F8wArDACHm10cQnpDe9kljNc3zcsy5uK3myD5TTVU5QZ+75ZYi0IcP9YmQNDg57jos9p0ggOCu510SueH1yw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15686,9 +15686,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.113.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.113.0.tgz\",\n-      \"integrity\": \"sha512-LivqvBvXU/sAydUTH4eMMdsvrUEcJvwJHyWyZX+PfXPyvkCVTUekJcJ0Pg+oYBZrg/nyriyB/xfBFi6JlgTGpg==\",\n+      \"version\": \"0.114.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.114.2.tgz\",\n+      \"integrity\": \"sha512-a7F8wArDACHm10cQnpDe9kljNc3zcsy5uK3myD5TTVU5QZ+75ZYi0IcP9YmQNDg57jos9p0ggOCu510SueH1yw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 7bc9c389f..cfc36feed 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.113.0\",\n+    \"hugo-bin\": \"^0.114.2\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.113.0 to 0.114.2 (#39147)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex 11788e3cc..4c4a65556 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -28,7 +28,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run cspell\n-        uses: streetsidesoftware/cspell-action@v2\n+        uses: streetsidesoftware/cspell-action@v3\n         with:\n           config: \".cspell.json\"\n           files: \"**/*.md\"",
    "output": "build(deps): Bump streetsidesoftware/cspell-action from 2 to 3 (#39088)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex dfd90f162..05368d9c5 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -25,7 +25,7 @@\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n         \"@rollup/plugin-commonjs\": \"^25.0.4\",\n-        \"@rollup/plugin-node-resolve\": \"^15.2.0\",\n+        \"@rollup/plugin-node-resolve\": \"^15.2.1\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.15\",\n         \"bundlewatch\": \"^0.3.3\",\n@@ -2196,9 +2196,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.0.tgz\",\n-      \"integrity\": \"sha512-mKur03xNGT8O9ODO6FtT43ITGqHWZbKPdVJHZb+iV9QYcdlhUUB0wgknvA4KCUmC5oHJF6O2W1EgmyOQyVUI4Q==\",\n+      \"version\": \"15.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.1.tgz\",\n+      \"integrity\": \"sha512-nsbUg588+GDSu8/NS8T4UAshO6xeaOfINNuXeVHcKV02LJtoRaM1SiOacClw4kws1SFiNhdLGxlbMY9ga/zs/w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12899,9 +12899,9 @@\n       }\n     },\n     \"@rollup/plugin-node-resolve\": {\n-      \"version\": \"15.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.0.tgz\",\n-      \"integrity\": \"sha512-mKur03xNGT8O9ODO6FtT43ITGqHWZbKPdVJHZb+iV9QYcdlhUUB0wgknvA4KCUmC5oHJF6O2W1EgmyOQyVUI4Q==\",\n+      \"version\": \"15.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-15.2.1.tgz\",\n+      \"integrity\": \"sha512-nsbUg588+GDSu8/NS8T4UAshO6xeaOfINNuXeVHcKV02LJtoRaM1SiOacClw4kws1SFiNhdLGxlbMY9ga/zs/w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex b7f6868f0..7bc9c389f 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n     \"@rollup/plugin-commonjs\": \"^25.0.4\",\n-    \"@rollup/plugin-node-resolve\": \"^15.2.0\",\n+    \"@rollup/plugin-node-resolve\": \"^15.2.1\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.15\",\n     \"bundlewatch\": \"^0.3.3\",",
    "output": "build(deps-dev): Bump @rollup/plugin-node-resolve from 15.2.0 to 15.2.1 (#39090)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 9bf26e4d6..dfd90f162 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.6\",\n         \"postcss\": \"^8.4.28\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.28.0\",\n+        \"rollup\": \"^3.28.1\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.66.1\",\n@@ -9512,9 +9512,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.28.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.0.tgz\",\n-      \"integrity\": \"sha512-d7zhvo1OUY2SXSM6pfNjgD5+d0Nz87CUp4mt8l/GgVP3oBsPwzNvSzyu1me6BSG9JIgWNTVcafIXBIyM8yQ3yw==\",\n+      \"version\": \"3.28.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.1.tgz\",\n+      \"integrity\": \"sha512-R9OMQmIHJm9znrU3m3cpE8uhN0fGdXiawME7aZIpQqvpS/85+Vt1Hq1/yVIcYfOmaQiHjvXkQAoJukvLpau6Yw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -18185,9 +18185,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.28.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.0.tgz\",\n-      \"integrity\": \"sha512-d7zhvo1OUY2SXSM6pfNjgD5+d0Nz87CUp4mt8l/GgVP3oBsPwzNvSzyu1me6BSG9JIgWNTVcafIXBIyM8yQ3yw==\",\n+      \"version\": \"3.28.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.1.tgz\",\n+      \"integrity\": \"sha512-R9OMQmIHJm9znrU3m3cpE8uhN0fGdXiawME7aZIpQqvpS/85+Vt1Hq1/yVIcYfOmaQiHjvXkQAoJukvLpau6Yw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 3378e7e29..b7f6868f0 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.6\",\n     \"postcss\": \"^8.4.28\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.28.0\",\n+    \"rollup\": \"^3.28.1\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.66.1\",",
    "output": "build(deps-dev): Bump rollup from 3.28.0 to 3.28.1 (#39089)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e1ee91c63..3b9c7de4b 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.6\",\n         \"postcss\": \"^8.4.27\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.27.2\",\n+        \"rollup\": \"^3.28.0\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.65.1\",\n@@ -9521,9 +9521,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.27.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.2.tgz\",\n-      \"integrity\": \"sha512-YGwmHf7h2oUHkVBT248x0yt6vZkYQ3/rvE5iQuVBh3WO8GcJ6BNeOkpoX1yMHIiBm18EMLjBPIoUDkhgnyxGOQ==\",\n+      \"version\": \"3.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.0.tgz\",\n+      \"integrity\": \"sha512-d7zhvo1OUY2SXSM6pfNjgD5+d0Nz87CUp4mt8l/GgVP3oBsPwzNvSzyu1me6BSG9JIgWNTVcafIXBIyM8yQ3yw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -18202,9 +18202,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.27.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.2.tgz\",\n-      \"integrity\": \"sha512-YGwmHf7h2oUHkVBT248x0yt6vZkYQ3/rvE5iQuVBh3WO8GcJ6BNeOkpoX1yMHIiBm18EMLjBPIoUDkhgnyxGOQ==\",\n+      \"version\": \"3.28.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.28.0.tgz\",\n+      \"integrity\": \"sha512-d7zhvo1OUY2SXSM6pfNjgD5+d0Nz87CUp4mt8l/GgVP3oBsPwzNvSzyu1me6BSG9JIgWNTVcafIXBIyM8yQ3yw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex ef19c0a3f..713a4a6be 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.6\",\n     \"postcss\": \"^8.4.27\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.27.2\",\n+    \"rollup\": \"^3.28.0\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.65.1\",",
    "output": "build(deps-dev): Bump rollup from 3.27.2 to 3.28.0 (#39056)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 08b8b1d8b..e1ee91c63 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.22.10\",\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^25.0.3\",\n+        \"@rollup/plugin-commonjs\": \"^25.0.4\",\n         \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.15\",\n@@ -2137,9 +2137,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.3.tgz\",\n-      \"integrity\": \"sha512-uBdtWr/H3BVcgm97MUdq2oJmqBR23ny1hOrWe2PKo9FTbjsGqg32jfasJUKYAI5ouqacjRnj65mBB/S79F+GQA==\",\n+      \"version\": \"25.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.4.tgz\",\n+      \"integrity\": \"sha512-L92Vz9WUZXDnlQQl3EwbypJR4+DM2EbsO+/KOcEkP4Mc6Ct453EeDB2uH9lgRwj4w5yflgNpq9pHOiY8aoUXBQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12860,9 +12860,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.3.tgz\",\n-      \"integrity\": \"sha512-uBdtWr/H3BVcgm97MUdq2oJmqBR23ny1hOrWe2PKo9FTbjsGqg32jfasJUKYAI5ouqacjRnj65mBB/S79F+GQA==\",\n+      \"version\": \"25.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.4.tgz\",\n+      \"integrity\": \"sha512-L92Vz9WUZXDnlQQl3EwbypJR4+DM2EbsO+/KOcEkP4Mc6Ct453EeDB2uH9lgRwj4w5yflgNpq9pHOiY8aoUXBQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 48f01e9ae..ef19c0a3f 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/preset-env\": \"^7.22.10\",\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^25.0.3\",\n+    \"@rollup/plugin-commonjs\": \"^25.0.4\",\n     \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.15\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 25.0.3 to 25.0.4 (#39055)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/calibreapp-image-actions.yml b/.github/workflows/calibreapp-image-actions.yml\nindex 21df1f626..97081deb6 100644\n--- a/.github/workflows/calibreapp-image-actions.yml\n+++ b/.github/workflows/calibreapp-image-actions.yml\n@@ -8,12 +8,18 @@ on:\n       - '**.png'\n       - '**.webp'\n \n+permissions:\n+  contents: read\n+\n jobs:\n   build:\n     # Only run on Pull Requests within the same repository, and not from forks.\n     if: github.event.pull_request.head.repo.full_name == github.repository\n     name: calibreapp/image-actions\n     runs-on: ubuntu-latest\n+    permissions:\n+      # allow calibreapp/image-actions to update PRs\n+      pull-requests: write\n     steps:\n       - name: Checkout Repo\n         uses: actions/checkout@v3",
    "output": "ci: update permissions for calibreapp-image-actions.yml (#39021)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex bb46a49e7..0a32cd647 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.27.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n-        \"sass\": \"^1.64.2\",\n+        \"sass\": \"^1.65.1\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.10.2\",\n@@ -9650,9 +9650,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.64.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.64.2.tgz\",\n-      \"integrity\": \"sha512-TnDlfc+CRnUAgLO9D8cQLFu/GIjJIzJCGkE7o4ekIGQOH7T3GetiRR/PsTWJUHhkzcSPrARkPI+gNWn5alCzDg==\",\n+      \"version\": \"1.65.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.65.1.tgz\",\n+      \"integrity\": \"sha512-9DINwtHmA41SEd36eVPQ9BJKpn7eKDQmUHmpI0y5Zv2Rcorrh0zS+cFrt050hdNbmmCNKTW3hV5mWfuegNRsEA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -18273,9 +18273,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.64.2\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.64.2.tgz\",\n-      \"integrity\": \"sha512-TnDlfc+CRnUAgLO9D8cQLFu/GIjJIzJCGkE7o4ekIGQOH7T3GetiRR/PsTWJUHhkzcSPrARkPI+gNWn5alCzDg==\",\n+      \"version\": \"1.65.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.65.1.tgz\",\n+      \"integrity\": \"sha512-9DINwtHmA41SEd36eVPQ9BJKpn7eKDQmUHmpI0y5Zv2Rcorrh0zS+cFrt050hdNbmmCNKTW3hV5mWfuegNRsEA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 5f03a6d76..3e6a05bfd 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.27.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n-    \"sass\": \"^1.64.2\",\n+    \"sass\": \"^1.65.1\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.10.2\",",
    "output": "build(deps-dev): Bump sass from 1.64.2 to 1.65.1 (#39058)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 95c4b9b76..4bca9970d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.22.9\",\n+        \"@babel/cli\": \"^7.22.10\",\n         \"@babel/core\": \"^7.22.10\",\n         \"@babel/preset-env\": \"^7.22.9\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -96,9 +96,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.22.9\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.9.tgz\",\n-      \"integrity\": \"sha512-nb2O7AThqRo7/E53EGiuAkMaRbb7J5Qp3RvN+dmua1U+kydm0oznkhqbTEG15yk26G/C3yL6OdZjzgl+DMXVVA==\",\n+      \"version\": \"7.22.10\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.10.tgz\",\n+      \"integrity\": \"sha512-rM9ZMmaII630zGvtMtQ3P4GyHs28CHLYE9apLG7L8TgaSqcfoIGrlLSLsh4Q8kDTdZQQEXZm1M0nQtOvU/2heg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -11497,9 +11497,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.22.9\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.9.tgz\",\n-      \"integrity\": \"sha512-nb2O7AThqRo7/E53EGiuAkMaRbb7J5Qp3RvN+dmua1U+kydm0oznkhqbTEG15yk26G/C3yL6OdZjzgl+DMXVVA==\",\n+      \"version\": \"7.22.10\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.10.tgz\",\n+      \"integrity\": \"sha512-rM9ZMmaII630zGvtMtQ3P4GyHs28CHLYE9apLG7L8TgaSqcfoIGrlLSLsh4Q8kDTdZQQEXZm1M0nQtOvU/2heg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex 202afb580..d84457a6b 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.22.9\",\n+    \"@babel/cli\": \"^7.22.10\",\n     \"@babel/core\": \"^7.22.10\",\n     \"@babel/preset-env\": \"^7.22.9\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.22.9 to 7.22.10 (#39015)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex f91064ee1..95c4b9b76 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.112.1\",\n+        \"hugo-bin\": \"^0.113.0\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -6011,9 +6011,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.112.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.112.1.tgz\",\n-      \"integrity\": \"sha512-Iguqted2G4zE5ZCH3onkhp9jPxZqxjbnQXxoYgo4RdVQhvRD16E3AzzUfbEiQM9yDM+fKhHCr2ajl9t8JTw/pA==\",\n+      \"version\": \"0.113.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.113.0.tgz\",\n+      \"integrity\": \"sha512-LivqvBvXU/sAydUTH4eMMdsvrUEcJvwJHyWyZX+PfXPyvkCVTUekJcJ0Pg+oYBZrg/nyriyB/xfBFi6JlgTGpg==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15721,9 +15721,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.112.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.112.1.tgz\",\n-      \"integrity\": \"sha512-Iguqted2G4zE5ZCH3onkhp9jPxZqxjbnQXxoYgo4RdVQhvRD16E3AzzUfbEiQM9yDM+fKhHCr2ajl9t8JTw/pA==\",\n+      \"version\": \"0.113.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.113.0.tgz\",\n+      \"integrity\": \"sha512-LivqvBvXU/sAydUTH4eMMdsvrUEcJvwJHyWyZX+PfXPyvkCVTUekJcJ0Pg+oYBZrg/nyriyB/xfBFi6JlgTGpg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 5e83453ac..202afb580 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.112.1\",\n+    \"hugo-bin\": \"^0.113.0\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.112.1 to 0.113.0 (#39014)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 24f2cd645..9507271ce 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.6\",\n         \"postcss\": \"^8.4.27\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.27.0\",\n+        \"rollup\": \"^3.27.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.64.2\",\n@@ -9499,9 +9499,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.27.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.0.tgz\",\n-      \"integrity\": \"sha512-aOltLCrYZ0FhJDm7fCqwTjIUEVjWjcydKBV/Zeid6Mn8BWgDCUBBWT5beM5ieForYNo/1ZHuGJdka26kvQ3Gzg==\",\n+      \"version\": \"3.27.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.2.tgz\",\n+      \"integrity\": \"sha512-YGwmHf7h2oUHkVBT248x0yt6vZkYQ3/rvE5iQuVBh3WO8GcJ6BNeOkpoX1yMHIiBm18EMLjBPIoUDkhgnyxGOQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -18190,9 +18190,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.27.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.0.tgz\",\n-      \"integrity\": \"sha512-aOltLCrYZ0FhJDm7fCqwTjIUEVjWjcydKBV/Zeid6Mn8BWgDCUBBWT5beM5ieForYNo/1ZHuGJdka26kvQ3Gzg==\",\n+      \"version\": \"3.27.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.27.2.tgz\",\n+      \"integrity\": \"sha512-YGwmHf7h2oUHkVBT248x0yt6vZkYQ3/rvE5iQuVBh3WO8GcJ6BNeOkpoX1yMHIiBm18EMLjBPIoUDkhgnyxGOQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 9eb4c6006..348812211 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.6\",\n     \"postcss\": \"^8.4.27\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.27.0\",\n+    \"rollup\": \"^3.27.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.64.2\",",
    "output": "build(deps-dev): Bump rollup from 3.27.0 to 3.27.2 (#39011)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/javascript.md b/site/content/docs/5.3/getting-started/javascript.md\nindex 80c222fcd..afa4ccd81 100644\n--- a/site/content/docs/5.3/getting-started/javascript.md\n+++ b/site/content/docs/5.3/getting-started/javascript.md\n@@ -22,7 +22,8 @@ A better alternative for those using this type of frameworks is to use a framewo\n   {{< callout >}}\n   **Try it yourself!** Download the source code and working demo for using Bootstrap with React, Next.js, and React Bootstrap from the [twbs/examples repository](https://github.com/twbs/examples/tree/main/react-nextjs). You can also [open the example in StackBlitz](https://stackblitz.com/github/twbs/examples/tree/main/react-nextjs?file=src%2Fpages%2Findex.tsx).\n   {{< /callout >}}\n-- Vue: [BootstrapVue](https://bootstrap-vue.org/) (currently only supports Vue 2 and Bootstrap 4)\n+- Vue: [BootstrapVue](https://bootstrap-vue.org/) (Bootstrap 4)\n+- Vue 3: [BootstrapVueNext](https://bootstrap-vue-next.github.io/bootstrap-vue-next/) (Bootstrap 5, currently in alpha)\n - Angular: [ng-bootstrap](https://ng-bootstrap.github.io/)\n \n ## Using Bootstrap as a module",
    "output": "docs: add BootstrapVueNext to docs (#38970)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/popovers.md b/site/content/docs/5.3/components/popovers.md\nindex 0a2138db9..685d2c3c6 100644\n--- a/site/content/docs/5.3/components/popovers.md\n+++ b/site/content/docs/5.3/components/popovers.md\n@@ -198,7 +198,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn`, and `allowList` opt\n | `sanitize` | boolean | `true` | Enable or disable the sanitization. If activated `'template'`, `'content'` and `'title'` options will be sanitized. |\n | `sanitizeFn` | null, function | `null` | Here you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization. |\n | `selector` | string, false | `false` | If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to also apply popovers to dynamically added DOM elements (`jQuery.on` support). See [this issue]({{< param repo >}}/issues/4215) and [an informative example](https://codepen.io/Johann-S/pen/djJYPb). **Note**: `title` attribute must not be used as a selector. |\n-| `template` | string | `'<div class=\"popover\" role=\"popover\"><div class=\"popover-arrow\"></div><div class=\"popover-inner\"></div></div>'` | Base HTML to use when creating the popover. The popover's `title` will be injected into the `.popover-inner`. `.popover-arrow` will become the popover's arrow. The outermost wrapper element should have the `.popover` class and `role=\"popover\"`. |\n+| `template` | string | `'<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><div class=\"popover-inner\"></div></div>'` | Base HTML to use when creating the popover. The popover's `title` will be injected into the `.popover-inner`. `.popover-arrow` will become the popover's arrow. The outermost wrapper element should have the `.popover` class and `role=\"tooltip\"`. |\n | `title` | string, element, function | `''` | The popover title. If a function is given, it will be called with its `this` reference set to the element that the popover is attached to. |\n | `trigger` | string | `'hover focus'` | How popover is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. `'manual'` indicates that the popover will be triggered programmatically via the `.popover('show')`, `.popover('hide')` and `.popover('toggle')` methods; this value cannot be combined with any other trigger. `'hover'` on its own will result in popovers that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present. |\n {{< /bs-table >}}",
    "output": "docs: Fix popover template role error (#38978)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/float.md b/site/content/docs/5.3/utilities/float.md\nindex 9a47a256a..9e3a11f0c 100644\n--- a/site/content/docs/5.3/utilities/float.md\n+++ b/site/content/docs/5.3/utilities/float.md\n@@ -23,10 +23,11 @@ Use the [clearfix helper]({{< docsref \"/helpers/clearfix\" >}}) on a parent eleme\n Responsive variations also exist for each `float` value.\n \n {{< example >}}\n-<div class=\"float-sm-start\">Float start on viewports sized SM (small) or wider</div><br>\n-<div class=\"float-md-start\">Float start on viewports sized MD (medium) or wider</div><br>\n-<div class=\"float-lg-start\">Float start on viewports sized LG (large) or wider</div><br>\n-<div class=\"float-xl-start\">Float start on viewports sized XL (extra-large) or wider</div><br>\n+<div class=\"float-sm-end\">Float end on viewports sized SM (small) or wider</div><br>\n+<div class=\"float-md-end\">Float end on viewports sized MD (medium) or wider</div><br>\n+<div class=\"float-lg-end\">Float end on viewports sized LG (large) or wider</div><br>\n+<div class=\"float-xl-end\">Float end on viewports sized XL (extra large) or wider</div><br>\n+<div class=\"float-xxl-end\">Float end on viewports sized XXL (extra extra large) or wider</div><br>\n {{< /example >}}\n \n Here are all the support classes:",
    "output": "docs: Update float responsive examples"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/masthead.html b/site/layouts/partials/home/masthead.html\nindex 76cd01005..4916e6136 100644\n--- a/site/layouts/partials/home/masthead.html\n+++ b/site/layouts/partials/home/masthead.html\n@@ -24,8 +24,6 @@\n         <span class=\"px-1\">&middot;</span>\n         <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/download/\" class=\"link-secondary\">Download</a>\n         <span class=\"px-1\">&middot;</span>\n-        <a href=\"https://getbootstrap.com/docs/4.6/getting-started/introduction/\" class=\"link-secondary text-nowrap\">v4.6.x docs</a>\n-        <span class=\"px-1\">&middot;</span>\n         <a href=\"/docs/versions/\" class=\"link-secondary text-nowrap\">All releases</a>\n       </p>\n       {{ partial \"ads\" . }}",
    "output": "docs: remove v4 reference in homepage"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ec33da5d8..f11e26150 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.6\",\n         \"postcss\": \"^8.4.26\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.26.2\",\n+        \"rollup\": \"^3.26.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.63.6\",\n@@ -9393,9 +9393,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.26.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.2.tgz\",\n-      \"integrity\": \"sha512-6umBIGVz93er97pMgQO08LuH3m6PUb3jlDUUGFsNJB6VgTCUaDFpupf5JfU30529m/UKOgmiX+uY6Sx8cOYpLA==\",\n+      \"version\": \"3.26.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.3.tgz\",\n+      \"integrity\": \"sha512-7Tin0C8l86TkpcMtXvQu6saWH93nhG3dGQ1/+l5V2TDMceTxO7kDiK6GzbfLWNNxqJXm591PcEZUozZm51ogwQ==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17946,9 +17946,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.26.2\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.2.tgz\",\n-      \"integrity\": \"sha512-6umBIGVz93er97pMgQO08LuH3m6PUb3jlDUUGFsNJB6VgTCUaDFpupf5JfU30529m/UKOgmiX+uY6Sx8cOYpLA==\",\n+      \"version\": \"3.26.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.3.tgz\",\n+      \"integrity\": \"sha512-7Tin0C8l86TkpcMtXvQu6saWH93nhG3dGQ1/+l5V2TDMceTxO7kDiK6GzbfLWNNxqJXm591PcEZUozZm51ogwQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex c48b59a7f..64dada86c 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.6\",\n     \"postcss\": \"^8.4.26\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.26.2\",\n+    \"rollup\": \"^3.26.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.63.6\",",
    "output": "build(deps-dev): Bump rollup from 3.26.2 to 3.26.3 (#38931)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 31134be16..c513376e4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.111.2\",\n+        \"hugo-bin\": \"^0.111.3\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -5970,9 +5970,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.111.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.2.tgz\",\n-      \"integrity\": \"sha512-L7URwx4E3Plp+3xi+kD9fl/XfNj9pKDWtrTqoQvW65oKi5upyTdmto7iEmF6b7MYlskb0XaIv//yJBmqpz3g5A==\",\n+      \"version\": \"0.111.3\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.3.tgz\",\n+      \"integrity\": \"sha512-8F9ToASAN7uHoscHBqlXfGIoDT9XPAZQYzB3LIny+2shw6njTQ51RHb/h5T7g7E6+3oFlBgIP3zcZIeo3pOwiA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15521,9 +15521,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.111.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.2.tgz\",\n-      \"integrity\": \"sha512-L7URwx4E3Plp+3xi+kD9fl/XfNj9pKDWtrTqoQvW65oKi5upyTdmto7iEmF6b7MYlskb0XaIv//yJBmqpz3g5A==\",\n+      \"version\": \"0.111.3\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.3.tgz\",\n+      \"integrity\": \"sha512-8F9ToASAN7uHoscHBqlXfGIoDT9XPAZQYzB3LIny+2shw6njTQ51RHb/h5T7g7E6+3oFlBgIP3zcZIeo3pOwiA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex 31a72ff2f..4dee89633 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.111.2\",\n+    \"hugo-bin\": \"^0.111.3\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.111.2 to 0.111.3 (#38929)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ac51461dc..31134be16 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.10.6\",\n         \"nodemon\": \"^3.0.1\",\n         \"npm-run-all2\": \"^6.0.6\",\n-        \"postcss\": \"^8.4.25\",\n+        \"postcss\": \"^8.4.26\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.26.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8430,9 +8430,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.25\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.25.tgz\",\n-      \"integrity\": \"sha512-7taJ/8t2av0Z+sQEvNzCkpDynl0tX3uJMCODi6nT3PfASC7dYCWV9aQ+uiCf+KBD4SEFcu+GvJdGdwzQ6OSjCw==\",\n+      \"version\": \"8.4.26\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.26.tgz\",\n+      \"integrity\": \"sha512-jrXHFF8iTloAenySjM/ob3gSj7pCu0Ji49hnjqzsgSRa50hkWCKD0HQ+gMNJkW38jBI68MpAAg7ZWwHwX8NMMw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -17281,9 +17281,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.25\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.25.tgz\",\n-      \"integrity\": \"sha512-7taJ/8t2av0Z+sQEvNzCkpDynl0tX3uJMCODi6nT3PfASC7dYCWV9aQ+uiCf+KBD4SEFcu+GvJdGdwzQ6OSjCw==\",\n+      \"version\": \"8.4.26\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.26.tgz\",\n+      \"integrity\": \"sha512-jrXHFF8iTloAenySjM/ob3gSj7pCu0Ji49hnjqzsgSRa50hkWCKD0HQ+gMNJkW38jBI68MpAAg7ZWwHwX8NMMw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.6\",\ndiff --git a/package.json b/package.json\nindex fb4aa635c..31a72ff2f 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.10.6\",\n     \"nodemon\": \"^3.0.1\",\n     \"npm-run-all2\": \"^6.0.6\",\n-    \"postcss\": \"^8.4.25\",\n+    \"postcss\": \"^8.4.26\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.26.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.25 to 8.4.26 (#38927)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex dc6c705e5..ac51461dc 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.22.6\",\n+        \"@babel/cli\": \"^7.22.9\",\n         \"@babel/core\": \"^7.22.8\",\n         \"@babel/preset-env\": \"^7.22.9\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -96,9 +96,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.22.6\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.6.tgz\",\n-      \"integrity\": \"sha512-Be3/RfEDmkMRGT1+ru5nTkfcvWz5jDOYg1V9rXqTz2u9Qt96O1ryboGvxVBp7wOnYWDB8DNHIWb6DThrpudfOw==\",\n+      \"version\": \"7.22.9\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.9.tgz\",\n+      \"integrity\": \"sha512-nb2O7AThqRo7/E53EGiuAkMaRbb7J5Qp3RvN+dmua1U+kydm0oznkhqbTEG15yk26G/C3yL6OdZjzgl+DMXVVA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -11317,9 +11317,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.22.6\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.6.tgz\",\n-      \"integrity\": \"sha512-Be3/RfEDmkMRGT1+ru5nTkfcvWz5jDOYg1V9rXqTz2u9Qt96O1ryboGvxVBp7wOnYWDB8DNHIWb6DThrpudfOw==\",\n+      \"version\": \"7.22.9\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.9.tgz\",\n+      \"integrity\": \"sha512-nb2O7AThqRo7/E53EGiuAkMaRbb7J5Qp3RvN+dmua1U+kydm0oznkhqbTEG15yk26G/C3yL6OdZjzgl+DMXVVA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex 04313e549..fb4aa635c 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.22.6\",\n+    \"@babel/cli\": \"^7.22.9\",\n     \"@babel/core\": \"^7.22.8\",\n     \"@babel/preset-env\": \"^7.22.9\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.22.6 to 7.22.9 (#38922)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 953f93782..fc9cac261 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.10.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-        \"terser\": \"^5.19.0\",\n+        \"terser\": \"^5.19.1\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10566,9 +10566,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.19.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.0.tgz\",\n-      \"integrity\": \"sha512-JpcpGOQLOXm2jsomozdMDpd5f8ZHh1rR48OFgWUH3QsyZcfPgv2qDCYbcDEAYNd4OZRj2bWYKpwdll/udZCk/Q==\",\n+      \"version\": \"5.19.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.1.tgz\",\n+      \"integrity\": \"sha512-27hxBUVdV6GoNg1pKQ7Z5cbR6V9txPVyBA+FQw3BaZ1Wuzvztce5p156DaP0NVZNrMZZ+6iG9Syf7WgMNKDg2Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -18821,9 +18821,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.19.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.0.tgz\",\n-      \"integrity\": \"sha512-JpcpGOQLOXm2jsomozdMDpd5f8ZHh1rR48OFgWUH3QsyZcfPgv2qDCYbcDEAYNd4OZRj2bWYKpwdll/udZCk/Q==\",\n+      \"version\": \"5.19.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.1.tgz\",\n+      \"integrity\": \"sha512-27hxBUVdV6GoNg1pKQ7Z5cbR6V9txPVyBA+FQw3BaZ1Wuzvztce5p156DaP0NVZNrMZZ+6iG9Syf7WgMNKDg2Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex ac70899eb..a8d87cfc7 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.10.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-    \"terser\": \"^5.19.0\",\n+    \"terser\": \"^5.19.1\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.19.0 to 5.19.1 (#38921)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4c5fae3e9..953f93782 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.22.7\",\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^25.0.2\",\n+        \"@rollup/plugin-commonjs\": \"^25.0.3\",\n         \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.14\",\n@@ -2162,9 +2162,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.2.tgz\",\n-      \"integrity\": \"sha512-NGTwaJxIO0klMs+WSFFtBP7b9TdTJ3K76HZkewT8/+yHzMiUGVQgaPtLQxNVYIgT5F7lxkEyVID+yS3K7bhCow==\",\n+      \"version\": \"25.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.3.tgz\",\n+      \"integrity\": \"sha512-uBdtWr/H3BVcgm97MUdq2oJmqBR23ny1hOrWe2PKo9FTbjsGqg32jfasJUKYAI5ouqacjRnj65mBB/S79F+GQA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12719,9 +12719,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.2.tgz\",\n-      \"integrity\": \"sha512-NGTwaJxIO0klMs+WSFFtBP7b9TdTJ3K76HZkewT8/+yHzMiUGVQgaPtLQxNVYIgT5F7lxkEyVID+yS3K7bhCow==\",\n+      \"version\": \"25.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.3.tgz\",\n+      \"integrity\": \"sha512-uBdtWr/H3BVcgm97MUdq2oJmqBR23ny1hOrWe2PKo9FTbjsGqg32jfasJUKYAI5ouqacjRnj65mBB/S79F+GQA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 5480815cb..ac70899eb 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/preset-env\": \"^7.22.7\",\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^25.0.2\",\n+    \"@rollup/plugin-commonjs\": \"^25.0.3\",\n     \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.14\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 25.0.2 to 25.0.3 (#38923)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2c5c9113a..4c5fae3e9 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -31,7 +31,7 @@\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.2\",\n         \"cross-env\": \"^7.0.3\",\n-        \"eslint\": \"^8.44.0\",\n+        \"eslint\": \"^8.45.0\",\n         \"eslint-config-xo\": \"^0.43.1\",\n         \"eslint-plugin-html\": \"^7.1.0\",\n         \"eslint-plugin-import\": \"^2.27.5\",\n@@ -4472,9 +4472,9 @@\n       }\n     },\n     \"node_modules/eslint\": {\n-      \"version\": \"8.44.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.44.0.tgz\",\n-      \"integrity\": \"sha512-0wpHoUbDUHgNCyvFB5aXLiQVfK9B0at6gUvzy83k4kAsQ/u769TQDX6iKC+aO4upIHO9WSaA3QoXYQDHbNwf1A==\",\n+      \"version\": \"8.45.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.45.0.tgz\",\n+      \"integrity\": \"sha512-pd8KSxiQpdYRfYa9Wufvdoct3ZPQQuVuU5O6scNgMuOMYuxvH0IGaYK0wUFjo4UYYQQCUndlXiMbnxopwvvTiw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@eslint-community/eslint-utils\": \"^4.2.0\",\n@@ -4502,7 +4502,6 @@\n         \"globals\": \"^13.19.0\",\n         \"graphemer\": \"^1.4.0\",\n         \"ignore\": \"^5.2.0\",\n-        \"import-fresh\": \"^3.0.0\",\n         \"imurmurhash\": \"^0.1.4\",\n         \"is-glob\": \"^4.0.0\",\n         \"is-path-inside\": \"^3.0.3\",\n@@ -4514,7 +4513,6 @@\n         \"natural-compare\": \"^1.4.0\",\n         \"optionator\": \"^0.9.3\",\n         \"strip-ansi\": \"^6.0.1\",\n-        \"strip-json-comments\": \"^3.1.0\",\n         \"text-table\": \"^0.2.0\"\n       },\n       \"bin\": {\n@@ -14423,9 +14421,9 @@\n       \"dev\": true\n     },\n     \"eslint\": {\n-      \"version\": \"8.44.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.44.0.tgz\",\n-      \"integrity\": \"sha512-0wpHoUbDUHgNCyvFB5aXLiQVfK9B0at6gUvzy83k4kAsQ/u769TQDX6iKC+aO4upIHO9WSaA3QoXYQDHbNwf1A==\",\n+      \"version\": \"8.45.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.45.0.tgz\",\n+      \"integrity\": \"sha512-pd8KSxiQpdYRfYa9Wufvdoct3ZPQQuVuU5O6scNgMuOMYuxvH0IGaYK0wUFjo4UYYQQCUndlXiMbnxopwvvTiw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@eslint-community/eslint-utils\": \"^4.2.0\",\n@@ -14453,7 +14451,6 @@\n         \"globals\": \"^13.19.0\",\n         \"graphemer\": \"^1.4.0\",\n         \"ignore\": \"^5.2.0\",\n-        \"import-fresh\": \"^3.0.0\",\n         \"imurmurhash\": \"^0.1.4\",\n         \"is-glob\": \"^4.0.0\",\n         \"is-path-inside\": \"^3.0.3\",\n@@ -14465,7 +14462,6 @@\n         \"natural-compare\": \"^1.4.0\",\n         \"optionator\": \"^0.9.3\",\n         \"strip-ansi\": \"^6.0.1\",\n-        \"strip-json-comments\": \"^3.1.0\",\n         \"text-table\": \"^0.2.0\"\n       },\n       \"dependencies\": {\ndiff --git a/package.json b/package.json\nindex d4fce0cd1..5480815cb 100644\n--- a/package.json\n+++ b/package.json\n@@ -115,7 +115,7 @@\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.2\",\n     \"cross-env\": \"^7.0.3\",\n-    \"eslint\": \"^8.44.0\",\n+    \"eslint\": \"^8.45.0\",\n     \"eslint-config-xo\": \"^0.43.1\",\n     \"eslint-plugin-html\": \"^7.1.0\",\n     \"eslint-plugin-import\": \"^2.27.5\",",
    "output": "build(deps-dev): Bump eslint from 8.44.0 to 8.45.0 (#38919)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/examples/carousel-rtl/index.html b/site/content/docs/5.3/examples/carousel-rtl/index.html\nindex fbbe7dca9..37d844e6f 100644\n--- a/site/content/docs/5.3/examples/carousel-rtl/index.html\n+++ b/site/content/docs/5.3/examples/carousel-rtl/index.html\n@@ -36,7 +36,7 @@ extra_css:\n \n <main>\n \n-  <div id=\"myCarousel\" class=\"carousel slide mb-6\" data-bs-ride=\"carousel\" data-bs-theme=\"light\">\n+  <div id=\"myCarousel\" class=\"carousel slide mb-6\" data-bs-ride=\"carousel\">\n     <div class=\"carousel-indicators\">\n       <button type=\"button\" data-bs-target=\"#myCarousel\" data-bs-slide-to=\"0\" class=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\n       <button type=\"button\" data-bs-target=\"#myCarousel\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\ndiff --git a/site/content/docs/5.3/examples/carousel/index.html b/site/content/docs/5.3/examples/carousel/index.html\nindex 87150efb0..c76fec220 100644\n--- a/site/content/docs/5.3/examples/carousel/index.html\n+++ b/site/content/docs/5.3/examples/carousel/index.html\n@@ -35,7 +35,7 @@ extra_css:\n \n <main>\n \n-  <div id=\"myCarousel\" class=\"carousel slide mb-6\" data-bs-ride=\"carousel\" data-bs-theme=\"light\">\n+  <div id=\"myCarousel\" class=\"carousel slide mb-6\" data-bs-ride=\"carousel\">\n     <div class=\"carousel-indicators\">\n       <button type=\"button\" data-bs-target=\"#myCarousel\" data-bs-slide-to=\"0\" class=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\n       <button type=\"button\" data-bs-target=\"#myCarousel\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>",
    "output": "docs: fix carousel carousel colors of carousel examples in dark mode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/footer.html b/site/layouts/partials/footer.html\nindex 819c6256d..421b70ec8 100644\n--- a/site/layouts/partials/footer.html\n+++ b/site/layouts/partials/footer.html\n@@ -21,7 +21,7 @@\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.icons }}\">Icons</a></li>\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.themes }}\">Themes</a></li>\n           <li class=\"mb-2\"><a href=\"{{ .Site.Params.blog }}\">Blog</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.swag }}\">Swag Store</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.swag }}\" target=\"_blank\" rel=\"noopener\">Swag Store</a></li>\n         </ul>\n       </div>\n       <div class=\"col-6 col-lg-2 mb-3\">\n@@ -37,21 +37,21 @@\n       <div class=\"col-6 col-lg-2 mb-3\">\n         <h5>Projects</h5>\n         <ul class=\"list-unstyled\">\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap\">Bootstrap 5</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/tree/v4-dev\">Bootstrap 4</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/icons\">Icons</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/rfs\">RFS</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/examples/\">Examples repo</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap\" target=\"_blank\" rel=\"noopener\">Bootstrap 5</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/tree/v4-dev\" target=\"_blank\" rel=\"noopener\">Bootstrap 4</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/icons\" target=\"_blank\" rel=\"noopener\">Icons</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/rfs\" target=\"_blank\" rel=\"noopener\">RFS</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/examples/\" target=\"_blank\" rel=\"noopener\">Examples repo</a></li>\n         </ul>\n       </div>\n       <div class=\"col-6 col-lg-2 mb-3\">\n         <h5>Community</h5>\n         <ul class=\"list-unstyled\">\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/issues\">Issues</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/discussions\">Discussions</a></li>\n-          <li class=\"mb-2\"><a href=\"https://github.com/sponsors/twbs\">Corporate sponsors</a></li>\n-          <li class=\"mb-2\"><a href=\"{{ .Site.Params.opencollective }}\">Open Collective</a></li>\n-          <li class=\"mb-2\"><a href=\"https://stackoverflow.com/questions/tagged/bootstrap-5\">Stack Overflow</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/issues\" target=\"_blank\" rel=\"noopener\">Issues</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.github_org }}/bootstrap/discussions\" target=\"_blank\" rel=\"noopener\">Discussions</a></li>\n+          <li class=\"mb-2\"><a href=\"https://github.com/sponsors/twbs\" target=\"_blank\" rel=\"noopener\">Corporate sponsors</a></li>\n+          <li class=\"mb-2\"><a href=\"{{ .Site.Params.opencollective }}\" target=\"_blank\" rel=\"noopener\">Open Collective</a></li>\n+          <li class=\"mb-2\"><a href=\"https://stackoverflow.com/questions/tagged/bootstrap-5\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a></li>\n         </ul>\n       </div>\n     </div>",
    "output": "docs: add blank target and noopener rel to footer external links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex afb9f7143..a251b0696 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.10.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-        \"terser\": \"^5.18.2\",\n+        \"terser\": \"^5.19.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10542,9 +10542,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.18.2\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.2.tgz\",\n-      \"integrity\": \"sha512-Ah19JS86ypbJzTzvUCX7KOsEIhDaRONungA4aYBjEP3JZRf4ocuDzTg4QWZnPn9DEMiMYGJPiSOy7aykoCc70w==\",\n+      \"version\": \"5.19.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.0.tgz\",\n+      \"integrity\": \"sha512-JpcpGOQLOXm2jsomozdMDpd5f8ZHh1rR48OFgWUH3QsyZcfPgv2qDCYbcDEAYNd4OZRj2bWYKpwdll/udZCk/Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -18758,9 +18758,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.18.2\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.2.tgz\",\n-      \"integrity\": \"sha512-Ah19JS86ypbJzTzvUCX7KOsEIhDaRONungA4aYBjEP3JZRf4ocuDzTg4QWZnPn9DEMiMYGJPiSOy7aykoCc70w==\",\n+      \"version\": \"5.19.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.19.0.tgz\",\n+      \"integrity\": \"sha512-JpcpGOQLOXm2jsomozdMDpd5f8ZHh1rR48OFgWUH3QsyZcfPgv2qDCYbcDEAYNd4OZRj2bWYKpwdll/udZCk/Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 8adabed20..d4fce0cd1 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.10.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^11.0.1\",\n-    \"terser\": \"^5.18.2\",\n+    \"terser\": \"^5.19.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.18.2 to 5.19.0 (#38901)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 08e0fead0..207347c9a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -53,7 +53,7 @@\n         \"karma-jasmine\": \"^5.1.0\",\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n-        \"lockfile-lint\": \"^4.10.5\",\n+        \"lockfile-lint\": \"^4.10.6\",\n         \"nodemon\": \"^2.0.22\",\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.25\",\n@@ -7108,9 +7108,9 @@\n       }\n     },\n     \"node_modules/lockfile-lint\": {\n-      \"version\": \"4.10.5\",\n-      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.10.5.tgz\",\n-      \"integrity\": \"sha512-OMl5eKlTI14JYXDYC3yT+54C6gszU45emNA+1EUK2i54GKrP8aXqReSqdpZt0Rwa2Dy+mIpoaD+oUuW05HRtcA==\",\n+      \"version\": \"4.10.6\",\n+      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.10.6.tgz\",\n+      \"integrity\": \"sha512-DDE09SZRW/DPTukxSbe2KEaWMuIJbu4hMMNxXsLqkalC0jVA42IKz5IaVqgmrYZqPYjfTFFCVxroDcZ+J03PqA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"cosmiconfig\": \"^7.0.1\",\n@@ -16048,9 +16048,9 @@\n       }\n     },\n     \"lockfile-lint\": {\n-      \"version\": \"4.10.5\",\n-      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.10.5.tgz\",\n-      \"integrity\": \"sha512-OMl5eKlTI14JYXDYC3yT+54C6gszU45emNA+1EUK2i54GKrP8aXqReSqdpZt0Rwa2Dy+mIpoaD+oUuW05HRtcA==\",\n+      \"version\": \"4.10.6\",\n+      \"resolved\": \"https://registry.npmjs.org/lockfile-lint/-/lockfile-lint-4.10.6.tgz\",\n+      \"integrity\": \"sha512-DDE09SZRW/DPTukxSbe2KEaWMuIJbu4hMMNxXsLqkalC0jVA42IKz5IaVqgmrYZqPYjfTFFCVxroDcZ+J03PqA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"cosmiconfig\": \"^7.0.1\",\ndiff --git a/package.json b/package.json\nindex bc72bd57a..2b842d12b 100644\n--- a/package.json\n+++ b/package.json\n@@ -137,7 +137,7 @@\n     \"karma-jasmine\": \"^5.1.0\",\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n-    \"lockfile-lint\": \"^4.10.5\",\n+    \"lockfile-lint\": \"^4.10.6\",\n     \"nodemon\": \"^2.0.22\",\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.25\",",
    "output": "build(deps-dev): Bump lockfile-lint from 4.10.5 to 4.10.6 (#38896)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 9e597cb26..08e0fead0 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.111.1\",\n+        \"hugo-bin\": \"^0.111.2\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -5927,9 +5927,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.111.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.1.tgz\",\n-      \"integrity\": \"sha512-MYAOA3suJPQKMwgFPTdWzOGl2kOYrU2bW7Z/RjpXSxXeorLeRfTv34QOcl1fg2y9AXNCaCNeldZelgUwNwfNZQ==\",\n+      \"version\": \"0.111.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.2.tgz\",\n+      \"integrity\": \"sha512-L7URwx4E3Plp+3xi+kD9fl/XfNj9pKDWtrTqoQvW65oKi5upyTdmto7iEmF6b7MYlskb0XaIv//yJBmqpz3g5A==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -15188,9 +15188,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.111.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.1.tgz\",\n-      \"integrity\": \"sha512-MYAOA3suJPQKMwgFPTdWzOGl2kOYrU2bW7Z/RjpXSxXeorLeRfTv34QOcl1fg2y9AXNCaCNeldZelgUwNwfNZQ==\",\n+      \"version\": \"0.111.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.2.tgz\",\n+      \"integrity\": \"sha512-L7URwx4E3Plp+3xi+kD9fl/XfNj9pKDWtrTqoQvW65oKi5upyTdmto7iEmF6b7MYlskb0XaIv//yJBmqpz3g5A==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\ndiff --git a/package.json b/package.json\nindex e66a2568e..bc72bd57a 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.111.1\",\n+    \"hugo-bin\": \"^0.111.2\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.111.1 to 0.111.2 (#38895)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 5a7d71862..9e597cb26 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.25\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.25.3\",\n+        \"rollup\": \"^3.26.2\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.63.6\",\n@@ -9130,9 +9130,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.25.3\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.3.tgz\",\n-      \"integrity\": \"sha512-ZT279hx8gszBj9uy5FfhoG4bZx8c+0A1sbqtr7Q3KNWIizpTdDEPZbV2xcbvHsnFp4MavCQYZyzApJ+virB8Yw==\",\n+      \"version\": \"3.26.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.2.tgz\",\n+      \"integrity\": \"sha512-6umBIGVz93er97pMgQO08LuH3m6PUb3jlDUUGFsNJB6VgTCUaDFpupf5JfU30529m/UKOgmiX+uY6Sx8cOYpLA==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17452,9 +17452,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.25.3\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.3.tgz\",\n-      \"integrity\": \"sha512-ZT279hx8gszBj9uy5FfhoG4bZx8c+0A1sbqtr7Q3KNWIizpTdDEPZbV2xcbvHsnFp4MavCQYZyzApJ+virB8Yw==\",\n+      \"version\": \"3.26.2\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.26.2.tgz\",\n+      \"integrity\": \"sha512-6umBIGVz93er97pMgQO08LuH3m6PUb3jlDUUGFsNJB6VgTCUaDFpupf5JfU30529m/UKOgmiX+uY6Sx8cOYpLA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex a42026c1a..e66a2568e 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.25\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.25.3\",\n+    \"rollup\": \"^3.26.2\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.63.6\",",
    "output": "build(deps-dev): Bump rollup from 3.25.3 to 3.26.2 (#38892)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 375d66ce3..5a7d71862 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.22.5\",\n+        \"@babel/cli\": \"^7.22.6\",\n         \"@babel/core\": \"^7.22.5\",\n         \"@babel/preset-env\": \"^7.22.5\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -96,9 +96,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.22.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.5.tgz\",\n-      \"integrity\": \"sha512-N5d7MjzwsQ2wppwjhrsicVDhJSqF9labEP/swYiHhio4Ca2XjEehpgPmerjnLQl7BPE59BLud0PTWGYwqFl/cQ==\",\n+      \"version\": \"7.22.6\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.6.tgz\",\n+      \"integrity\": \"sha512-Be3/RfEDmkMRGT1+ru5nTkfcvWz5jDOYg1V9rXqTz2u9Qt96O1ryboGvxVBp7wOnYWDB8DNHIWb6DThrpudfOw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\n@@ -11005,9 +11005,9 @@\n       }\n     },\n     \"@babel/cli\": {\n-      \"version\": \"7.22.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.5.tgz\",\n-      \"integrity\": \"sha512-N5d7MjzwsQ2wppwjhrsicVDhJSqF9labEP/swYiHhio4Ca2XjEehpgPmerjnLQl7BPE59BLud0PTWGYwqFl/cQ==\",\n+      \"version\": \"7.22.6\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.22.6.tgz\",\n+      \"integrity\": \"sha512-Be3/RfEDmkMRGT1+ru5nTkfcvWz5jDOYg1V9rXqTz2u9Qt96O1ryboGvxVBp7wOnYWDB8DNHIWb6DThrpudfOw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.17\",\ndiff --git a/package.json b/package.json\nindex cd1b158e4..a42026c1a 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.22.5\",\n+    \"@babel/cli\": \"^7.22.6\",\n     \"@babel/core\": \"^7.22.5\",\n     \"@babel/preset-env\": \"^7.22.5\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.22.5 to 7.22.6 (#38891)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 662bd8a9f..375d66ce3 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -56,7 +56,7 @@\n         \"lockfile-lint\": \"^4.10.5\",\n         \"nodemon\": \"^2.0.22\",\n         \"npm-run-all2\": \"^6.0.5\",\n-        \"postcss\": \"^8.4.24\",\n+        \"postcss\": \"^8.4.25\",\n         \"postcss-cli\": \"^10.1.0\",\n         \"rollup\": \"^3.25.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n@@ -8288,9 +8288,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.24\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.24.tgz\",\n-      \"integrity\": \"sha512-M0RzbcI0sO/XJNucsGjvWU9ERWxb/ytp1w6dKtxTKgixdtQDq4rmx/g8W1hnaheq9jgwL/oyEdH5Bc4WwJKMqg==\",\n+      \"version\": \"8.4.25\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.25.tgz\",\n+      \"integrity\": \"sha512-7taJ/8t2av0Z+sQEvNzCkpDynl0tX3uJMCODi6nT3PfASC7dYCWV9aQ+uiCf+KBD4SEFcu+GvJdGdwzQ6OSjCw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16872,9 +16872,9 @@\n       \"dev\": true\n     },\n     \"postcss\": {\n-      \"version\": \"8.4.24\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.24.tgz\",\n-      \"integrity\": \"sha512-M0RzbcI0sO/XJNucsGjvWU9ERWxb/ytp1w6dKtxTKgixdtQDq4rmx/g8W1hnaheq9jgwL/oyEdH5Bc4WwJKMqg==\",\n+      \"version\": \"8.4.25\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.25.tgz\",\n+      \"integrity\": \"sha512-7taJ/8t2av0Z+sQEvNzCkpDynl0tX3uJMCODi6nT3PfASC7dYCWV9aQ+uiCf+KBD4SEFcu+GvJdGdwzQ6OSjCw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"nanoid\": \"^3.3.6\",\ndiff --git a/package.json b/package.json\nindex 0279161ce..cd1b158e4 100644\n--- a/package.json\n+++ b/package.json\n@@ -140,7 +140,7 @@\n     \"lockfile-lint\": \"^4.10.5\",\n     \"nodemon\": \"^2.0.22\",\n     \"npm-run-all2\": \"^6.0.5\",\n-    \"postcss\": \"^8.4.24\",\n+    \"postcss\": \"^8.4.25\",\n     \"postcss-cli\": \"^10.1.0\",\n     \"rollup\": \"^3.25.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.24 to 8.4.25 (#38890)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 401b9ac63..ab486c6a5 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -498,7 +498,7 @@ Want more information? [Read the v5.1.0 blog post.](https://blog.getbootstrap.co\n   - `.custom-control.custom-radio` is now `.form-check`.\n   - `.custom-control.custom-switch` is now `.form-check.form-switch`.\n   - `.custom-select` is now `.form-select`.\n-  - `.custom-file` and `.form-file` have been replaced by custom styles on top of `.form-control`.\n+  - `.custom-file` and `.form-control-file` have been replaced by custom styles on top of `.form-control`.\n   - `.custom-range` is now `.form-range`.\n   - Dropped native `.form-control-file` and `.form-control-range`.\n ",
    "output": "docs: Fix incorrect `.form-file` on migration guide (#38883)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0fa9972c4..0d52b9602 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -66,7 +66,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.9.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n-        \"terser\": \"^5.18.1\",\n+        \"terser\": \"^5.18.2\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -10260,9 +10260,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.18.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.1.tgz\",\n-      \"integrity\": \"sha512-j1n0Ao919h/Ai5r43VAnfV/7azUYW43GPxK7qSATzrsERfW7+y2QW9Cp9ufnRF5CQUWbnLSo7UJokSWCqg4tsQ==\",\n+      \"version\": \"5.18.2\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.2.tgz\",\n+      \"integrity\": \"sha512-Ah19JS86ypbJzTzvUCX7KOsEIhDaRONungA4aYBjEP3JZRf4ocuDzTg4QWZnPn9DEMiMYGJPiSOy7aykoCc70w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n@@ -18289,9 +18289,9 @@\n       }\n     },\n     \"terser\": {\n-      \"version\": \"5.18.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.1.tgz\",\n-      \"integrity\": \"sha512-j1n0Ao919h/Ai5r43VAnfV/7azUYW43GPxK7qSATzrsERfW7+y2QW9Cp9ufnRF5CQUWbnLSo7UJokSWCqg4tsQ==\",\n+      \"version\": \"5.18.2\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.18.2.tgz\",\n+      \"integrity\": \"sha512-Ah19JS86ypbJzTzvUCX7KOsEIhDaRONungA4aYBjEP3JZRf4ocuDzTg4QWZnPn9DEMiMYGJPiSOy7aykoCc70w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 6cddf0059..e5a04d8d2 100644\n--- a/package.json\n+++ b/package.json\n@@ -150,7 +150,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.9.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n-    \"terser\": \"^5.18.1\",\n+    \"terser\": \"^5.18.2\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.18.1 to 5.18.2 (#38863)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4a64135f4..0fa9972c4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.110.1\",\n+        \"hugo-bin\": \"^0.111.1\",\n         \"ip\": \"^2.0.0\",\n         \"jasmine\": \"^4.6.0\",\n         \"jquery\": \"^3.7.0\",\n@@ -5927,9 +5927,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.110.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.110.1.tgz\",\n-      \"integrity\": \"sha512-Yp7L0sJU1Xv6uv0zAXG1b2TGdAuu58uwJpsplOZphsFXM0av46gQeSKSo7dkGe7/NXTdnG/Uxxn+vlUsKsEJew==\",\n+      \"version\": \"0.111.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.1.tgz\",\n+      \"integrity\": \"sha512-MYAOA3suJPQKMwgFPTdWzOGl2kOYrU2bW7Z/RjpXSxXeorLeRfTv34QOcl1fg2y9AXNCaCNeldZelgUwNwfNZQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -5939,7 +5939,7 @@\n       ],\n       \"hasInstallScript\": true,\n       \"dependencies\": {\n-        \"@xhmikosr/bin-wrapper\": \"^11.0.1\",\n+        \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\n         \"pkg-conf\": \"^4.0.0\"\n       },\n       \"bin\": {\n@@ -15188,12 +15188,12 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.110.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.110.1.tgz\",\n-      \"integrity\": \"sha512-Yp7L0sJU1Xv6uv0zAXG1b2TGdAuu58uwJpsplOZphsFXM0av46gQeSKSo7dkGe7/NXTdnG/Uxxn+vlUsKsEJew==\",\n+      \"version\": \"0.111.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.111.1.tgz\",\n+      \"integrity\": \"sha512-MYAOA3suJPQKMwgFPTdWzOGl2kOYrU2bW7Z/RjpXSxXeorLeRfTv34QOcl1fg2y9AXNCaCNeldZelgUwNwfNZQ==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"@xhmikosr/bin-wrapper\": \"^11.0.1\",\n+        \"@xhmikosr/bin-wrapper\": \"^11.0.2\",\n         \"pkg-conf\": \"^4.0.0\"\n       }\n     },\ndiff --git a/package.json b/package.json\nindex a0389634f..6cddf0059 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.110.1\",\n+    \"hugo-bin\": \"^0.111.1\",\n     \"ip\": \"^2.0.0\",\n     \"jasmine\": \"^4.6.0\",\n     \"jquery\": \"^3.7.0\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.110.1 to 0.111.1 (#38860)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3ab662727..47d8af565 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"sass\": \"^1.63.6\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^15.8.0\",\n+        \"stylelint\": \"^15.9.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n         \"terser\": \"^5.18.1\",\n         \"vnu-jar\": \"23.4.11\"\n@@ -9831,9 +9831,9 @@\n       \"dev\": true\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"15.8.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.8.0.tgz\",\n-      \"integrity\": \"sha512-x9qBk84F3MEjMEUNCE7MtWmfj9G9y5XzJ0cpQeJdy2l/IoqjC8Ih0N0ytmOTnXE4Yv0J7I1cmVRQUVNSPCxTsA==\",\n+      \"version\": \"15.9.0\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.9.0.tgz\",\n+      \"integrity\": \"sha512-sXtAZi64CllWr6A+8ymDWnlIaYwuAa7XRmGnJxLQXFNnLjd3Izm4HAD+loKVaZ7cpK6SLxhAUX1lwPJKGCn0mg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@csstools/css-parser-algorithms\": \"^2.2.0\",\n@@ -17905,9 +17905,9 @@\n       \"dev\": true\n     },\n     \"stylelint\": {\n-      \"version\": \"15.8.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.8.0.tgz\",\n-      \"integrity\": \"sha512-x9qBk84F3MEjMEUNCE7MtWmfj9G9y5XzJ0cpQeJdy2l/IoqjC8Ih0N0ytmOTnXE4Yv0J7I1cmVRQUVNSPCxTsA==\",\n+      \"version\": \"15.9.0\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-15.9.0.tgz\",\n+      \"integrity\": \"sha512-sXtAZi64CllWr6A+8ymDWnlIaYwuAa7XRmGnJxLQXFNnLjd3Izm4HAD+loKVaZ7cpK6SLxhAUX1lwPJKGCn0mg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@csstools/css-parser-algorithms\": \"^2.2.0\",\ndiff --git a/package.json b/package.json\nindex a1cc7a185..0c3b36a5f 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"sass\": \"^1.63.6\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^15.8.0\",\n+    \"stylelint\": \"^15.9.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^10.0.0\",\n     \"terser\": \"^5.18.1\",\n     \"vnu-jar\": \"23.4.11\"",
    "output": "build(deps-dev): Bump stylelint from 15.8.0 to 15.9.0 (#38836)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 229f3b64a..3ab662727 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -61,7 +61,7 @@\n         \"rollup\": \"^3.25.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n-        \"sass\": \"^1.62.1\",\n+        \"sass\": \"^1.63.6\",\n         \"sass-true\": \"^7.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^15.8.0\",\n@@ -9220,9 +9220,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.62.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.62.1.tgz\",\n-      \"integrity\": \"sha512-NHpxIzN29MXvWiuswfc1W3I0N8SXBd8UR26WntmDlRYf0bSADnwnOjsyMZ3lMezSlArD33Vs3YFhp7dWvL770A==\",\n+      \"version\": \"1.63.6\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.63.6.tgz\",\n+      \"integrity\": \"sha512-MJuxGMHzaOW7ipp+1KdELtqKbfAWbH7OLIdoSMnVe3EXPMTmxTmlaZDCTsgIpPCs3w99lLo9/zDKkOrJuT5byw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\n@@ -17436,9 +17436,9 @@\n       \"dev\": true\n     },\n     \"sass\": {\n-      \"version\": \"1.62.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.62.1.tgz\",\n-      \"integrity\": \"sha512-NHpxIzN29MXvWiuswfc1W3I0N8SXBd8UR26WntmDlRYf0bSADnwnOjsyMZ3lMezSlArD33Vs3YFhp7dWvL770A==\",\n+      \"version\": \"1.63.6\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.63.6.tgz\",\n+      \"integrity\": \"sha512-MJuxGMHzaOW7ipp+1KdELtqKbfAWbH7OLIdoSMnVe3EXPMTmxTmlaZDCTsgIpPCs3w99lLo9/zDKkOrJuT5byw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 86339fd75..a1cc7a185 100644\n--- a/package.json\n+++ b/package.json\n@@ -145,7 +145,7 @@\n     \"rollup\": \"^3.25.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n-    \"sass\": \"^1.62.1\",\n+    \"sass\": \"^1.63.6\",\n     \"sass-true\": \"^7.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^15.8.0\",",
    "output": "build(deps-dev): Bump sass from 1.62.1 to 1.63.6 (#38835)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 9a0b3bf14..229f3b64a 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -24,7 +24,7 @@\n         \"@babel/preset-env\": \"^7.22.5\",\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.3\",\n-        \"@rollup/plugin-commonjs\": \"^25.0.0\",\n+        \"@rollup/plugin-commonjs\": \"^25.0.2\",\n         \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n         \"@rollup/plugin-replace\": \"^5.0.2\",\n         \"autoprefixer\": \"^10.4.14\",\n@@ -2139,9 +2139,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.0.tgz\",\n-      \"integrity\": \"sha512-hoho2Kay9TZrLu0bnDsTTCaj4Npa+THk9snajP/XDNb9a9mmjTjh52EQM9sKl3HD1LsnihX7js+eA2sd2uKAhw==\",\n+      \"version\": \"25.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.2.tgz\",\n+      \"integrity\": \"sha512-NGTwaJxIO0klMs+WSFFtBP7b9TdTJ3K76HZkewT8/+yHzMiUGVQgaPtLQxNVYIgT5F7lxkEyVID+yS3K7bhCow==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\n@@ -12330,9 +12330,9 @@\n       }\n     },\n     \"@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.0.tgz\",\n-      \"integrity\": \"sha512-hoho2Kay9TZrLu0bnDsTTCaj4Npa+THk9snajP/XDNb9a9mmjTjh52EQM9sKl3HD1LsnihX7js+eA2sd2uKAhw==\",\n+      \"version\": \"25.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.2.tgz\",\n+      \"integrity\": \"sha512-NGTwaJxIO0klMs+WSFFtBP7b9TdTJ3K76HZkewT8/+yHzMiUGVQgaPtLQxNVYIgT5F7lxkEyVID+yS3K7bhCow==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 26249d974..86339fd75 100644\n--- a/package.json\n+++ b/package.json\n@@ -108,7 +108,7 @@\n     \"@babel/preset-env\": \"^7.22.5\",\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.3\",\n-    \"@rollup/plugin-commonjs\": \"^25.0.0\",\n+    \"@rollup/plugin-commonjs\": \"^25.0.2\",\n     \"@rollup/plugin-node-resolve\": \"^15.1.0\",\n     \"@rollup/plugin-replace\": \"^5.0.2\",\n     \"autoprefixer\": \"^10.4.14\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 25.0.0 to 25.0.2 (#38834)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 7817721d9..9a0b3bf14 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"npm-run-all2\": \"^6.0.5\",\n         \"postcss\": \"^8.4.24\",\n         \"postcss-cli\": \"^10.1.0\",\n-        \"rollup\": \"^3.25.1\",\n+        \"rollup\": \"^3.25.3\",\n         \"rollup-plugin-istanbul\": \"^4.0.0\",\n         \"rtlcss\": \"^4.1.0\",\n         \"sass\": \"^1.62.1\",\n@@ -9096,9 +9096,9 @@\n       }\n     },\n     \"node_modules/rollup\": {\n-      \"version\": \"3.25.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.1.tgz\",\n-      \"integrity\": \"sha512-tywOR+rwIt5m2ZAWSe5AIJcTat8vGlnPFAv15ycCrw33t6iFsXZ6mzHVFh2psSjxQPmI+xgzMZZizUAukBI4aQ==\",\n+      \"version\": \"3.25.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.3.tgz\",\n+      \"integrity\": \"sha512-ZT279hx8gszBj9uy5FfhoG4bZx8c+0A1sbqtr7Q3KNWIizpTdDEPZbV2xcbvHsnFp4MavCQYZyzApJ+virB8Yw==\",\n       \"dev\": true,\n       \"bin\": {\n         \"rollup\": \"dist/bin/rollup\"\n@@ -17364,9 +17364,9 @@\n       }\n     },\n     \"rollup\": {\n-      \"version\": \"3.25.1\",\n-      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.1.tgz\",\n-      \"integrity\": \"sha512-tywOR+rwIt5m2ZAWSe5AIJcTat8vGlnPFAv15ycCrw33t6iFsXZ6mzHVFh2psSjxQPmI+xgzMZZizUAukBI4aQ==\",\n+      \"version\": \"3.25.3\",\n+      \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-3.25.3.tgz\",\n+      \"integrity\": \"sha512-ZT279hx8gszBj9uy5FfhoG4bZx8c+0A1sbqtr7Q3KNWIizpTdDEPZbV2xcbvHsnFp4MavCQYZyzApJ+virB8Yw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"fsevents\": \"~2.3.2\"\ndiff --git a/package.json b/package.json\nindex 0027d2d6a..26249d974 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"npm-run-all2\": \"^6.0.5\",\n     \"postcss\": \"^8.4.24\",\n     \"postcss-cli\": \"^10.1.0\",\n-    \"rollup\": \"^3.25.1\",\n+    \"rollup\": \"^3.25.3\",\n     \"rollup-plugin-istanbul\": \"^4.0.0\",\n     \"rtlcss\": \"^4.1.0\",\n     \"sass\": \"^1.62.1\",",
    "output": "build(deps-dev): Bump rollup from 3.25.1 to 3.25.3 (#38833)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/navbar.md b/site/content/docs/5.3/components/navbar.md\nindex 4b46eb095..a17e52c33 100644\n--- a/site/content/docs/5.3/components/navbar.md\n+++ b/site/content/docs/5.3/components/navbar.md\n@@ -32,7 +32,7 @@ Navbars come with built-in support for a handful of sub-components. Choose from\n - Flex and spacing utilities for any form controls and actions.\n - `.navbar-text` for adding vertically centered strings of text.\n - `.collapse.navbar-collapse` for grouping and hiding navbar contents by a parent breakpoint.\n-- Add an optional `.navbar-scroll` to set a `max-height` and [scroll expanded navbar content](#scrolling).\n+- Add an optional `.navbar-nav-scroll` to set a `max-height` and [scroll expanded navbar content](#scrolling).\n \n Here's an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the `lg` (large) breakpoint.\n ",
    "output": "docs: replace non-existing `.navbar-scroll` by `.navbar-nav-scroll` in Navbar page (#41308)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 178b9151d..07f178689 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -77,7 +77,7 @@ If you're migrating from our previous alpha release of v5.3.0, please review the\n \n - Added new `.border-black` utility to match our `.text-black` and `.bg-black` utilities.\n \n-- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> Deprecated the `.text-muted` utility and `$text-muted` Sass variable. It's been replaced by `.text-body-secondary` and `$body-secondary-color`.\n+- <span class=\"badge text-warning-emphasis bg-warning-subtle\">Deprecated</span> The `.text-muted` utility and `$text-muted` Sass variable have been deprecated and replaced with `.text-body-secondary` and `$body-secondary-color`.\n \n ### Docs\n ",
    "output": "docs: Align deprecated message with existing migration guide format (#41299)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/sass.md b/site/content/docs/5.3/customize/sass.md\nindex b585aecbb..37d134d8d 100644\n--- a/site/content/docs/5.3/customize/sass.md\n+++ b/site/content/docs/5.3/customize/sass.md\n@@ -89,7 +89,7 @@ With that setup in place, you can begin to modify any of the Sass variables and\n \n ## Compiling\n \n-In order to use your custom Sass code as CSS in the browser, you need a Sass compiler. Sass ships as a CLI package, but you can also compile it with other build tools like [Gulp](https://gulpjs.com/) or [Webpack](https://webpack.js.org/), or with a GUI applications. Some IDEs also have Sass compilers built in or as downloadable extensions.\n+In order to use your custom Sass code as CSS in the browser, you need a Sass compiler. Sass ships as a CLI package, but you can also compile it with other build tools like [Gulp](https://gulpjs.com/) or [Webpack](https://webpack.js.org/), or with GUI applications. Some IDEs also have Sass compilers built in or as downloadable extensions.\n \n We like to use the CLI to compile our Sass, but you can use whichever method you prefer. From the command line, run the following:\n ",
    "output": "docs: fix typo in Customize > Sass page (#41281)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 781867f4e..178b9151d 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -736,3 +736,5 @@ Want more information? [Read the v5.1.0 blog post.](https://blog.getbootstrap.co\n - The default value for the `fallbackPlacements` is changed to `['top', 'right', 'bottom', 'left']` for better placement of Popper elements. **Applies to dropdowns, popovers, and tooltips.**\n \n - Removed underscore from public static methods like `_getInstance()` \u2192 `getInstance()`.\n+\n+- Removed `util.js`, with its functionality now integrated into individual plugins. If you previously included `util.js` manually, you can safely remove it, as it is no longer needed. Each plugin now contains only the utilities it requires, enhancing modularity and reducing dependencies.",
    "output": "docs: mention removal of `util.js` in migration guide (#41187)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/modal.md b/site/content/docs/5.3/components/modal.md\nindex 9f42f5aba..25b7f3a3a 100644\n--- a/site/content/docs/5.3/components/modal.md\n+++ b/site/content/docs/5.3/components/modal.md\n@@ -856,7 +856,7 @@ Bootstrap's modal class exposes a few events for hooking into modal functionalit\n {{< bs-table >}}\n | Event | Description |\n | --- | --- |\n-| `hide.bs.modal` | This event is fired immediately when the `hide` instance method has been called. |\n+| `hide.bs.modal` | This event is fired immediately when the `hide` instance method has been called. Can be prevented by calling `event.preventDefault()`. See [JavaScript events documentation]({{< docsref \"/getting-started/javascript#events\" >}}) for more details on event prevention. |\n | `hidden.bs.modal` | This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete). |\n | `hidePrevented.bs.modal` | This event is fired when the modal is shown, its backdrop is `static` and a click outside of the modal is performed. The event is also fired when the escape key is pressed and the `keyboard` option is set to `false`. |\n | `show.bs.modal` | This event fires immediately when the `show` instance method is called. If caused by a click, the clicked element is available as the `relatedTarget` property of the event. |",
    "output": "docs: clarify `hide.bs.modal` event behavior and add prevention details (#38411)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/partials/code-examples.js b/site/assets/js/partials/code-examples.js\nindex 87791a759..1e86df9f9 100644\n--- a/site/assets/js/partials/code-examples.js\n+++ b/site/assets/js/partials/code-examples.js\n@@ -63,6 +63,11 @@ export default () => {\n     const namespace = 'http://www.w3.org/1999/xlink'\n     const originalXhref = iconFirstChild.getAttributeNS(namespace, 'href')\n     const originalTitle = event.trigger.title\n+    const isCheckIconVisible = originalXhref === '#check2'\n+\n+    if (isCheckIconVisible) {\n+      return\n+    }\n \n     tooltipBtn.setContent({ '.tooltip-inner': 'Copied!' })\n     event.trigger.addEventListener('hidden.bs.tooltip', () => {",
    "output": "docs: fix clipboard icon visibility issue after multiple clicks (#40917)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/layout/css-grid.md b/site/content/docs/5.3/layout/css-grid.md\nindex c79c4ce0f..b119b6716 100644\n--- a/site/content/docs/5.3/layout/css-grid.md\n+++ b/site/content/docs/5.3/layout/css-grid.md\n@@ -149,7 +149,7 @@ Similar to our default grid system, our CSS Grid allows for easy nesting of `.gr\n In practice this allows for more complex and custom layouts when compared to our default grid system.\n \n {{< example class=\"bd-example-cssgrid\" >}}\n-<div class=\"grid text-center\" style=\"--bs-columns: 3;\">\n+<div class=\"grid text-center overflow-x-auto\" style=\"--bs-columns: 3;\">\n   <div>\n     First auto-column\n     <div class=\"grid\">",
    "output": "docs: add `.overflow-x-auto` to CSS Grid nesting example at small breakpoints (#40928)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/rtl.md b/site/content/docs/5.3/getting-started/rtl.md\nindex bf4f617e9..efdd9e843 100644\n--- a/site/content/docs/5.3/getting-started/rtl.md\n+++ b/site/content/docs/5.3/getting-started/rtl.md\n@@ -175,7 +175,7 @@ Do you want to automate this process and address several edge cases involving bo\n \n 1. It is recommended that you add the `dir` attribute to the `html` element. This way, the entire page will be affected when you change the direction. Also, make sure you add the `lang` attribute accordingly.\n 2. Having a single bundle with both directions will increase the size of the final stylesheet (on average, by 20%-30%): consider some [optimization]({{< docsref \"/customize/optimize\" >}}).\n-3. Take into account that PostCSS RTLCSS is not compatible with `/* rtl:remove */` directives because it doesn't remove any CSS rule. You should replace your `/* rtl:remove */`, `/* rtl:begin:remove */` and `/* rtl:end:remove */` directives with `/* rtl:ignore */`, `/* rtl:begin:ignore */` and `/* rtl:end:ignore */` directives respectively. These directives will ignore the rule and will not create an RTL counterpart (same result as the `remove` ones in RTLCSS).\n+3. Take into account that PostCSS RTLCSS is not compatible with `/* rtl:remove */` directives because it doesn't remove any CSS rule. You should replace your `/* rtl:remove */`, `/* rtl:begin:remove */` and `/* rtl:end:remove */` directives with `/* rtl:freeze */`, `/* rtl:begin:freeze */` and `/* rtl:end:freeze */` directives respectively. These directives will prefix the targeted rules or declarations with the current direction but will not create an RTL counterpart (same result as the `remove` ones in RTLCSS).\n {{< /callout >}}\n \n ## The breadcrumb case",
    "output": "docs: mention `rtl:freeze` instead of `rtl:ignore` with PostCSS RTLCSS (#41098)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/download.md b/site/content/docs/5.3/getting-started/download.md\nindex 2d0d62762..e15cb9860 100644\n--- a/site/content/docs/5.3/getting-started/download.md\n+++ b/site/content/docs/5.3/getting-started/download.md\n@@ -100,6 +100,17 @@ Install Bootstrap in your Node.js powered apps with [the yarn package](https://y\n yarn add bootstrap@{{< param \"current_version\" >}}\n ```\n \n+{{< callout warning >}}\n+**Yarn 2+ (aka Yarn Berry) doesn't support the `node_modules` directory by default**: using our [Sass & JS example](https://github.com/twbs/examples/tree/main/sass-js) needs some adjustments:\n+\n+```sh\n+yarn config set nodeLinker node-modules # Use the node_modules linker\n+touch yarn.lock # Create an empty yarn.lock file\n+yarn install # Install the dependencies\n+yarn start # Start the project\n+```\n+{{< /callout >}}\n+\n ### RubyGems\n \n Install Bootstrap in your Ruby apps using [Bundler](https://bundler.io/) (**recommended**) and [RubyGems](https://rubygems.org/) by adding the following line to your [`Gemfile`](https://bundler.io/guides/gemfile.html):",
    "output": "docs: add warning callout for Yarn Berry for Bootstrap examples compat (#41036)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/dropdowns.md b/site/content/docs/5.3/components/dropdowns.md\nindex b9e22e44a..2f2696bf5 100644\n--- a/site/content/docs/5.3/components/dropdowns.md\n+++ b/site/content/docs/5.3/components/dropdowns.md\n@@ -8,7 +8,7 @@ toc: true\n \n ## Overview\n \n-Dropdowns are toggleable, contextual overlays for displaying lists of links and more. They're made interactive with the included Bootstrap dropdown JavaScript plugin. They're toggled by clicking, not by hovering; this is [an intentional design decision](https://markdotto.com/2012/02/27/bootstrap-explained-dropdowns/).\n+Dropdowns are toggleable, contextual overlays for displaying lists of links and more. They're made interactive with the included Bootstrap dropdown JavaScript plugin. They're toggled by clicking, not by hovering; this is [an intentional design decision](https://markdotto.com/blog/bootstrap-explained-dropdowns/).\n \n Dropdowns are built on a third party library, [Popper](https://popper.js.org/docs/v2/), which provides dynamic positioning and viewport detection. Be sure to include [popper.min.js]({{< param \"cdn.popper\" >}}) before Bootstrap's JavaScript or use `bootstrap.bundle.min.js` / `bootstrap.bundle.js` which contains Popper. Popper isn't used to position dropdowns in navbars though as dynamic positioning isn't required.\n ",
    "output": "docs: Fix broken link in dropdowns documentation (#41052)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/migration.md b/site/content/docs/5.3/migration.md\nindex 9fbe4a377..781867f4e 100644\n--- a/site/content/docs/5.3/migration.md\n+++ b/site/content/docs/5.3/migration.md\n@@ -445,7 +445,7 @@ Want more information? [Read the v5.1.0 blog post.](https://blog.getbootstrap.co\n \n - Columns no longer have `position: relative` applied, so you may have to add `.position-relative` to some elements to restore that behavior.\n \n-- <span class=\"badge text-bg-danger\">Breaking</span> Dropped several `.order-*` classes that often went unused. We now only provide `.order-1` to `.order-5` out of the box.\n+- <span class=\"badge text-bg-danger\">Breaking</span> Dropped several `.order-*` classes that often went unused. We now only provide `.order-0` to `.order-5` out of the box.\n \n - <span class=\"badge text-bg-danger\">Breaking</span> Dropped the `.media` component as it can be easily replicated with utilities. [See #28265](https://github.com/twbs/bootstrap/pull/28265) and the [flex utilities page for an example]({{< docsref \"/utilities/flex#media-object\" >}}).\n ",
    "output": "docs: fix `.order` values in the migration guide (#41030)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/api.md b/site/content/docs/5.3/utilities/api.md\nindex ec9e59331..c7c53d116 100644\n--- a/site/content/docs/5.3/utilities/api.md\n+++ b/site/content/docs/5.3/utilities/api.md\n@@ -452,7 +452,8 @@ You can enable responsive classes for an existing set of utilities that are not\n @import \"bootstrap/scss/utilities\";\n \n $utilities: map-merge(\n-  $utilities, (\n+  $utilities,\n+  (\n     \"border\": map-merge(\n       map-get($utilities, \"border\"),\n       ( responsive: true ),\n@@ -508,7 +509,8 @@ Missing v4 utilities, or used to another naming convention? The utilities API ca\n @import \"bootstrap/scss/utilities\";\n \n $utilities: map-merge(\n-  $utilities, (\n+  $utilities,\n+  (\n     \"margin-start\": map-merge(\n       map-get($utilities, \"margin-start\"),\n       ( class: ml ),\n@@ -574,13 +576,11 @@ $utilities: map-merge(\n   (\n     // Remove the `width` utility\n     \"width\": null,\n-\n     // Make an existing utility responsive\n     \"border\": map-merge(\n       map-get($utilities, \"border\"),\n       ( responsive: true ),\n     ),\n-\n     // Add new utilities\n     \"cursor\": (\n       property: cursor,",
    "output": "docs: correct example formatting in 'Utilities > API' for linting compliance (#40973)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_navbar.scss b/site/assets/scss/_navbar.scss\nindex 2b598bf67..341b5dd13 100644\n--- a/site/assets/scss/_navbar.scss\n+++ b/site/assets/scss/_navbar.scss\n@@ -3,6 +3,10 @@\n   background-color: transparent;\n   box-shadow: 0 .5rem 1rem rgba($black, .15), inset 0 -1px 0 rgba($white, .15);\n \n+  @media (forced-colors) {\n+    background-color: Canvas;\n+  }\n+\n   &::after {\n     position: absolute;\n     inset: 0;",
    "output": "docs: fix transparent navbar in Windows high contrast mode (#40911)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/javascript.md b/site/content/docs/5.3/getting-started/javascript.md\nindex 47f7341c3..893cb8c37 100644\n--- a/site/content/docs/5.3/getting-started/javascript.md\n+++ b/site/content/docs/5.3/getting-started/javascript.md\n@@ -24,7 +24,7 @@ A better alternative for those using this type of frameworks is to use a framewo\n   {{< /callout >}}\n - Vue: [BootstrapVue](https://bootstrap-vue.org/) (Bootstrap 4)\n - Vue 3: [BootstrapVueNext](https://bootstrap-vue-next.github.io/bootstrap-vue-next/) (Bootstrap 5, currently in alpha)\n-- Angular: [ng-bootstrap](https://ng-bootstrap.github.io/)\n+- Angular: [ng-bootstrap](https://ng-bootstrap.github.io/) or [ngx-bootstrap](https://valor-software.com/ngx-bootstrap)\n \n ## Using Bootstrap as a module\n ",
    "output": "docs: add ngx-bootstrap to JavaScript frameworks list (#40932)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/display.md b/site/content/docs/5.3/utilities/display.md\nindex 41541b96f..72a4f10ef 100644\n--- a/site/content/docs/5.3/utilities/display.md\n+++ b/site/content/docs/5.3/utilities/display.md\n@@ -55,7 +55,7 @@ For faster mobile-friendly development, use responsive display classes for showi\n \n To hide elements simply use the `.d-none` class or one of the `.d-{sm,md,lg,xl,xxl}-none` classes for any responsive screen variation.\n \n-To show an element only on a given interval of screen sizes you can combine one `.d-*-none` class with a `.d-*-*` class, for example `.d-none .d-md-block .d-xl-none .d-xxl-none` will hide the element for all screen sizes except on medium and large devices.\n+To show an element only on a given interval of screen sizes you can combine one `.d-*-none` class with a `.d-*-*` class, for example `.d-none .d-md-block .d-xl-none` will hide the element for all screen sizes except on medium and large devices.\n \n {{< bs-table >}}\n | Screen size | Class |",
    "output": "docs: fix example hiding element except on medium and large devices in 'Utilities > Display > Hiding elements' (#40951)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_masthead.scss b/site/assets/scss/_masthead.scss\nindex d74d1ec24..3ea7ff232 100644\n--- a/site/assets/scss/_masthead.scss\n+++ b/site/assets/scss/_masthead.scss\n@@ -86,7 +86,7 @@\n   padding: 1rem;\n   color: rgba(var(--bg-rgb), 1);\n   background-color: rgba(var(--bg-rgb), .1);\n-  background-blend-mode: multiple;\n+  background-blend-mode: multiply;\n   @include border-radius(1rem);\n   mix-blend-mode: darken;\n ",
    "output": "docs: fix `background-blend-mode` CSS value (#40931)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/spacing.md b/site/content/docs/5.3/utilities/spacing.md\nindex 2562b8d43..3aa9a8e33 100644\n--- a/site/content/docs/5.3/utilities/spacing.md\n+++ b/site/content/docs/5.3/utilities/spacing.md\n@@ -103,11 +103,11 @@ The syntax is nearly the same as the default, positive margin utilities, but wit\n When using `display: grid` or `display: flex`, you can make use of `gap` utilities on the parent element. This can save on having to add margin utilities to individual children of a grid or flex container. Gap utilities are responsive by default, and are generated via our utilities API, based on the `$spacers` Sass map.\n \n {{< example class=\"bd-example-cssgrid\" >}}\n-<div class=\"grid gap-3\">\n-  <div class=\"p-2 g-col-6\">Grid item 1</div>\n-  <div class=\"p-2 g-col-6\">Grid item 2</div>\n-  <div class=\"p-2 g-col-6\">Grid item 3</div>\n-  <div class=\"p-2 g-col-6\">Grid item 4</div>\n+<div style=\"grid-template-columns: 1fr 1fr;\" class=\"d-grid gap-3\">\n+  <div class=\"p-2\">Grid item 1</div>\n+  <div class=\"p-2\">Grid item 2</div>\n+  <div class=\"p-2\">Grid item 3</div>\n+  <div class=\"p-2\">Grid item 4</div>\n </div>\n {{< /example >}}\n \n@@ -118,11 +118,11 @@ Support includes responsive options for all of Bootstrap's grid breakpoints, as\n `row-gap` sets the vertical space between children items in the specified container.\n \n {{< example class=\"bd-example-cssgrid\" >}}\n-<div class=\"grid gap-0 row-gap-3\">\n-  <div class=\"p-2 g-col-6\">Grid item 1</div>\n-  <div class=\"p-2 g-col-6\">Grid item 2</div>\n-  <div class=\"p-2 g-col-6\">Grid item 3</div>\n-  <div class=\"p-2 g-col-6\">Grid item 4</div>\n+<div style=\"grid-template-columns: 1fr 1fr;\" class=\"d-grid gap-0 row-gap-3\">\n+  <div class=\"p-2\">Grid item 1</div>\n+  <div class=\"p-2\">Grid item 2</div>\n+  <div class=\"p-2\">Grid item 3</div>\n+  <div class=\"p-2\">Grid item 4</div>\n </div>\n {{< /example >}}\n \n@@ -131,11 +131,11 @@ Support includes responsive options for all of Bootstrap's grid breakpoints, as\n `column-gap` sets the horizontal space between children items in the specified container.\n \n {{< example class=\"bd-example-cssgrid\" >}}\n-<div class=\"grid gap-0 column-gap-3\">\n-  <div class=\"p-2 g-col-6\">Grid item 1</div>\n-  <div class=\"p-2 g-col-6\">Grid item 2</div>\n-  <div class=\"p-2 g-col-6\">Grid item 3</div>\n-  <div class=\"p-2 g-col-6\">Grid item 4</div>\n+<div style=\"grid-template-columns: 1fr 1fr;\" class=\"d-grid gap-0 column-gap-3\">\n+  <div class=\"p-2\">Grid item 1</div>\n+  <div class=\"p-2\">Grid item 2</div>\n+  <div class=\"p-2\">Grid item 3</div>\n+  <div class=\"p-2\">Grid item 4</div>\n </div>\n {{< /example >}}\n ",
    "output": "docs: replace `.grid` by `.d-grid` in 'Utilities > Spacing' gap section (#40790)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/layout/columns.md b/site/content/docs/5.3/layout/columns.md\nindex e6f525563..dc7f72768 100644\n--- a/site/content/docs/5.3/layout/columns.md\n+++ b/site/content/docs/5.3/layout/columns.md\n@@ -203,7 +203,7 @@ You may also apply this break at specific breakpoints with our [responsive displ\n \n ### Order classes\n \n-Use `.order-` classes for controlling the **visual order** of your content. These classes are responsive, so you can set the `order` by breakpoint (e.g., `.order-1.order-md-2`). Includes support for `1` through `5` across all six grid tiers. If you need more `.order-*` classes, you can modify the default number via Sass variable.\n+Use `.order-` classes for controlling the **visual order** of your content. These classes are responsive, so you can set the `order` by breakpoint (e.g., `.order-1.order-md-2`). Includes support for `1` through `5` across all six grid tiers.\n \n {{< example class=\"bd-example-row\" >}}\n <div class=\"container text-center\">\n@@ -239,6 +239,28 @@ There are also responsive `.order-first` and `.order-last` classes that change t\n </div>\n {{< /example >}}\n \n+If you need more `.order-*` classes, you can add new ones by modifying our `$utilities` Sass map. [Read our Sass maps and loops docs]({{< docsref \"/customize/sass#maps-and-loops\" >}}) or [our Modify utilities docs]({{< docsref \"/utilities/api#modify-utilities\" >}}) for details.\n+\n+```scss\n+$utilities: map-merge(\n+  $utilities,\n+  (\n+    \"order\": map-merge(\n+      map-get($utilities, \"order\"),\n+      (\n+        values: map-merge(\n+          map-get(map-get($utilities, \"order\"), \"values\"),\n+          (\n+            6: 6, // Add a new `.order-{breakpoint}-6` utility\n+            last: 7 // Change the `.order-{breakpoint}-last` utility to use the next number\n+          )\n+        ),\n+      ),\n+    ),\n+  )\n+);\n+```\n+\n ### Offsetting columns\n \n You can offset grid columns in two ways: our responsive `.offset-` grid classes and our [margin utilities]({{< docsref \"/utilities/spacing\" >}}). Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.",
    "output": "docs: precise how to add new `.order-*` classes in 'Layout > Columns' (#40821)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/get-started.html b/site/layouts/partials/home/get-started.html\nindex 394ba1b4b..0a0646a7a 100644\n--- a/site/layouts/partials/home/get-started.html\n+++ b/site/layouts/partials/home/get-started.html\n@@ -6,7 +6,7 @@\n   <p class=\"lead fw-normal\">\n     Jump right into building with Bootstrap\u2014use the CDN, install it via package manager, or download the source code.\n   </p>\n-  <p class=\"d-flex justify-content-md-start justify-content-md-center lead fw-normal\">\n+  <p class=\"d-flex justify-content-md-center lead fw-normal\">\n     <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/download/\" class=\"icon-link icon-link-hover fw-semibold ps-md-4\">\n       Read installation docs\n       <svg class=\"bi\" aria-hidden=\"true\"><use xlink:href=\"#arrow-right\"></use></svg>",
    "output": "docs: remove unused class in the homepage (#40900)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/examples/main.html b/site/layouts/partials/examples/main.html\nindex 3dbb640a7..636cd7e2e 100644\n--- a/site/layouts/partials/examples/main.html\n+++ b/site/layouts/partials/examples/main.html\n@@ -18,7 +18,7 @@\n           <svg class=\"bi fs-5 flex-shrink-0 mt-1\" aria-hidden=\"true\"><use xlink:href=\"#box-seam\"></use></svg>\n           <div>\n             <h3 class=\"h5 mb-1\">\n-              <a class=\"d-block link-offset-1\" href=\"{{ urls.JoinPath $.Site.Params.github_org $example.url }}\" target=\"_blank\" rel=\"noopener\">\n+              <a class=\"d-block link-offset-1\" href=\"{{ urls.JoinPath $.Site.Params.github_org $example.url }}\" target=\"_blank\" rel=\"noopener\" id=\"starter-{{ $i }}\">\n                 {{ $example.name }}\n               </a>\n             </h3>\n@@ -26,9 +26,9 @@\n             <p>\n               {{- $indexPath := default \"index.html\" $example.indexPath -}}\n               {{- $stackBlitzUrl := printf \"%s%s%s\" (urls.JoinPath \"https://stackblitz.com/github/twbs\" $example.url) \"?file=\" ($indexPath | urlquery) }}\n-              <a class=\"icon-link small link-secondary link-offset-1\" href=\"{{ $stackBlitzUrl }}\" target=\"_blank\" rel=\"noopener\">\n+              <a class=\"icon-link small link-secondary link-offset-1\" href=\"{{ $stackBlitzUrl }}\" target=\"_blank\" rel=\"noopener\" aria-labelledby=\"edit-{{ $i }} starter-{{ $i }}\">\n                 <svg class=\"bi flex-shrink-0\" aria-hidden=\"true\"><use xlink:href=\"#lightning-charge-fill\"></use></svg>\n-                Edit in StackBlitz\n+                <span id=\"edit-{{ $i }}\">Edit in StackBlitz</span>\n               </a>\n             </p>\n           </div>",
    "output": "docs: Make \"Edit in Stackblitz\" links explicit in 'Examples' page (#40766)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/about/translations.md b/site/content/docs/5.3/about/translations.md\nindex 5e2ae30c5..17763d9a6 100644\n--- a/site/content/docs/5.3/about/translations.md\n+++ b/site/content/docs/5.3/about/translations.md\n@@ -10,7 +10,7 @@ Community members have translated Bootstrap's documentation into various languag\n {{< translations.inline >}}\n <ul>\n {{ range .Site.Data.translations -}}\n-  <li><a href=\"{{ .url }}\" hreflang=\"{{ .code }}\">{{ .description }} ({{ .name }})</a></li>\n+  <li><a href=\"{{ .url }}\" hreflang=\"{{ .code }}\" lang=\"{{ .code }}\">{{ .description }} ({{ .name }})</a></li>\n {{ end -}}\n </ul>\n {{< /translations.inline >}}",
    "output": "docs: Indicate links in foreign language in Translations page (#40767)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/options.md b/site/content/docs/5.3/customize/options.md\nindex e35cb8285..e2da964cd 100644\n--- a/site/content/docs/5.3/customize/options.md\n+++ b/site/content/docs/5.3/customize/options.md\n@@ -20,7 +20,7 @@ You can find and customize these variables for key global options in Bootstrap's\n | `$enable-transitions`          | `true` (default) or `false`        | Enables predefined `transition`s on various components. |\n | `$enable-reduced-motion`       | `true` (default) or `false`        | Enables the [`prefers-reduced-motion` media query]({{< docsref \"/getting-started/accessibility#reduced-motion\" >}}), which suppresses certain animations/transitions based on the users' browser/operating system preferences. |\n | `$enable-grid-classes`         | `true` (default) or `false`        | Enables the generation of CSS classes for the grid system (e.g. `.row`, `.col-md-1`, etc.). |\n-| `$enable-css-grid`             | `true` or `false` (default)        | Enables the experimental CSS Grid system (e.g. `.grid`, `.g-col-md-1`, etc.). |\n+| `$enable-cssgrid`              | `true` or `false` (default)        | Enables the experimental CSS Grid system (e.g. `.grid`, `.g-col-md-1`, etc.). |\n | `$enable-container-classes`    | `true` (default) or `false`        | Enables the generation of CSS classes for layout containers. (New in v5.2.0) |\n | `$enable-caret`                | `true` (default) or `false`        | Enables pseudo element caret on `.dropdown-toggle`. |\n | `$enable-button-pointers`      | `true` (default) or `false`        | Add \"hand\" cursor to non-disabled button elements. |",
    "output": "docs: fix `$enable-css-grid` \u2192 `$enable-cssgrid` in 'Customize > Options' (#40818)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e90bf4eea..4174c15a1 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.8.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^15.0.0\",\n-        \"terser\": \"^5.31.6\",\n+        \"terser\": \"^5.34.1\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -12015,9 +12015,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.31.6\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.6.tgz\",\n-      \"integrity\": \"sha512-PQ4DAriWzKj+qgehQ7LK5bQqCFNMmlhjR2PFFLuqGCpuCAauxemVBWwWOxo3UIwWQx8+Pr61Df++r76wDmkQBg==\",\n+      \"version\": \"5.34.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.34.1.tgz\",\n+      \"integrity\": \"sha512-FsJZ7iZLd/BXkz+4xrRTGJ26o/6VTjQytUk8b8OxkwcD2I+79VPJlz7qss1+zE7h8GNIScFqXcDyJ/KqBYZFVA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex eb7bf155b..d87f415ec 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.8.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^15.0.0\",\n-    \"terser\": \"^5.31.6\",\n+    \"terser\": \"^5.34.1\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.31.6 to 5.34.1 (#40883)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 073a99f9d..e90bf4eea 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n-        \"npm-run-all2\": \"^6.2.2\",\n+        \"npm-run-all2\": \"^6.2.3\",\n         \"postcss\": \"^8.4.45\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.23.0\",\n@@ -9175,11 +9175,10 @@\n       }\n     },\n     \"node_modules/npm-run-all2\": {\n-      \"version\": \"6.2.2\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.2.2.tgz\",\n-      \"integrity\": \"sha512-Q+alQAGIW7ZhKcxLt8GcSi3h3ryheD6xnmXahkMRVM5LYmajcUrSITm8h+OPC9RYWMV2GR0Q1ntTUCfxaNoOJw==\",\n+      \"version\": \"6.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.2.3.tgz\",\n+      \"integrity\": \"sha512-5RsxC7jEc/RjxOYBVdEfrJf5FsJ0pHA7jr2/OxrThXknajETCTYjigOCG3iaGjdYIKEQlDuCG0ir0T1HTva8pg==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"ansi-styles\": \"^6.2.1\",\n         \"cross-spawn\": \"^7.0.3\",\ndiff --git a/package.json b/package.json\nindex a4476ff9c..eb7bf155b 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n-    \"npm-run-all2\": \"^6.2.2\",\n+    \"npm-run-all2\": \"^6.2.3\",\n     \"postcss\": \"^8.4.45\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.23.0\",",
    "output": "build(deps-dev): Bump npm-run-all2 from 6.2.2 to 6.2.3 (#40842)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4dd65cb55..073a99f9d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.2\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.130.1\",\n+        \"hugo-bin\": \"^0.132.0\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.2.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -7172,9 +7172,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.130.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.130.1.tgz\",\n-      \"integrity\": \"sha512-0+GwMlYkTdmH2INIWPeoKf+Rx/+RbTCZNPhcdPwm4a+WJeuvGjOLOmK3grAk5vC2u4OwxfOhgD3zRU7wHVYxlw==\",\n+      \"version\": \"0.132.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.132.0.tgz\",\n+      \"integrity\": \"sha512-P8Bjl2ussOFzDJVppZfjxuyRegklKnlz2ILeFUszwkq9aDab8il0IJgr6pNxI0bbPIbLcoV64FmStyB1vXsynQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex f710eb392..a4476ff9c 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.2\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.130.1\",\n+    \"hugo-bin\": \"^0.132.0\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.2.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.130.1 to 0.132.0 (#40882)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b43d3cd42..01e965af1 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -3980,11 +3980,10 @@\n       \"license\": \"MIT\"\n     },\n     \"node_modules/body-parser\": {\n-      \"version\": \"1.20.2\",\n-      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz\",\n-      \"integrity\": \"sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==\",\n+      \"version\": \"1.20.3\",\n+      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz\",\n+      \"integrity\": \"sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"bytes\": \"3.1.2\",\n         \"content-type\": \"~1.0.5\",\n@@ -3994,7 +3993,7 @@\n         \"http-errors\": \"2.0.0\",\n         \"iconv-lite\": \"0.4.24\",\n         \"on-finished\": \"2.4.1\",\n-        \"qs\": \"6.11.0\",\n+        \"qs\": \"6.13.0\",\n         \"raw-body\": \"2.5.2\",\n         \"type-is\": \"~1.6.18\",\n         \"unpipe\": \"1.0.0\"\n@@ -10112,13 +10111,12 @@\n       }\n     },\n     \"node_modules/qs\": {\n-      \"version\": \"6.11.0\",\n-      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.11.0.tgz\",\n-      \"integrity\": \"sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==\",\n+      \"version\": \"6.13.0\",\n+      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.13.0.tgz\",\n+      \"integrity\": \"sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==\",\n       \"dev\": true,\n-      \"license\": \"BSD-3-Clause\",\n       \"dependencies\": {\n-        \"side-channel\": \"^1.0.4\"\n+        \"side-channel\": \"^1.0.6\"\n       },\n       \"engines\": {\n         \"node\": \">=0.6\"",
    "output": "build(deps): Bump body-parser in the npm_and_yarn group (#40862)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/tooltips.md b/site/content/docs/5.3/components/tooltips.md\nindex 57bd73f20..64ded72a4 100644\n--- a/site/content/docs/5.3/components/tooltips.md\n+++ b/site/content/docs/5.3/components/tooltips.md\n@@ -111,7 +111,7 @@ And with custom HTML added:\n With an SVG:\n \n <div class=\"bd-example tooltip-demo\">\n-  <a href=\"#\" class=\"d-inline-block\" data-bs-toggle=\"tooltip\" data-bs-title=\"Default tooltip\">\n+  <a href=\"#\" class=\"d-inline-block\" data-bs-toggle=\"tooltip\" data-bs-title=\"Default tooltip\" aria-label=\"Hover or focus to see default tooltip\">\n     <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 100 100\">\n       <rect width=\"100%\" height=\"100%\" fill=\"#563d7c\"/>\n       <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"#007bff\"/>",
    "output": "docs: add missing `aria-label` to SVG with tooltip (#40808)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/modal.md b/site/content/docs/5.3/components/modal.md\nindex e00931e81..9f42f5aba 100644\n--- a/site/content/docs/5.3/components/modal.md\n+++ b/site/content/docs/5.3/components/modal.md\n@@ -201,7 +201,7 @@ When modals become too long for the user's viewport or device, they scroll indep\n         <h1 class=\"modal-title fs-5\" id=\"exampleModalLongTitle\">Modal title</h1>\n         <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n       </div>\n-      <div class=\"modal-body\" style=\"min-height: 1500px\">\n+      <div class=\"modal-body\" style=\"min-height: 100vh\">\n         <p>This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text in the modal, we use an inline style to set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.</p>\n       </div>\n       <div class=\"modal-footer\">",
    "output": "docs: update `min-height` inline style for modal with long content (#40870)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/helpers/stacks.md b/site/content/docs/5.3/helpers/stacks.md\nindex f85a7533e..84922a54c 100644\n--- a/site/content/docs/5.3/helpers/stacks.md\n+++ b/site/content/docs/5.3/helpers/stacks.md\n@@ -11,7 +11,7 @@ added:\n Stacks offer a shortcut for applying a number of flexbox properties to quickly and easily create layouts in Bootstrap. All credit for the concept and implementation goes to the open source [Pylon project](https://almonk.github.io/pylon/).\n \n {{< callout warning >}}\n-**Heads up!** Support for gap utilities with flexbox was recently added to Safari, so consider verifying your intended browser support. Grid layout should have no issues. [Read more](https://caniuse.com/flexbox-gap).\n+**Heads up!** Support for gap utilities with flexbox isn't available in Safari prior to 14.5, so consider verifying your intended browser support. Grid layout should have no issues. [Read more](https://caniuse.com/flexbox-gap).\n {{< /callout >}}\n \n ## Vertical",
    "output": "docs: update notice on Safari flexbox gap support in 'Helpers > Stacks' (#40844)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 1aade44f7..b43d3cd42 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -59,7 +59,7 @@\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n         \"npm-run-all2\": \"^6.2.2\",\n-        \"postcss\": \"^8.4.44\",\n+        \"postcss\": \"^8.4.45\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.21.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -9725,9 +9725,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.44\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.44.tgz\",\n-      \"integrity\": \"sha512-Aweb9unOEpQ3ezu4Q00DPvvM2ZTUitJdNKeP/+uQgr1IBIqu574IaZoURId7BKtWMREwzKa9OgzPzezWGPWFQw==\",\n+      \"version\": \"8.4.45\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.45.tgz\",\n+      \"integrity\": \"sha512-7KTLTdzdZZYscUc65XmjFiB73vBhBfbPztCYdUNvlaso9PrzjzcmjqBPR0lNGkcVlcO4BjiO5rK/qNz+XAen1Q==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 961068918..91e3bc01a 100644\n--- a/package.json\n+++ b/package.json\n@@ -143,7 +143,7 @@\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n     \"npm-run-all2\": \"^6.2.2\",\n-    \"postcss\": \"^8.4.44\",\n+    \"postcss\": \"^8.4.45\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.21.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.44 to 8.4.45 (#40806)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/customize/options.md b/site/content/docs/5.3/customize/options.md\nindex b5c4fc392..e35cb8285 100644\n--- a/site/content/docs/5.3/customize/options.md\n+++ b/site/content/docs/5.3/customize/options.md\n@@ -20,6 +20,7 @@ You can find and customize these variables for key global options in Bootstrap's\n | `$enable-transitions`          | `true` (default) or `false`        | Enables predefined `transition`s on various components. |\n | `$enable-reduced-motion`       | `true` (default) or `false`        | Enables the [`prefers-reduced-motion` media query]({{< docsref \"/getting-started/accessibility#reduced-motion\" >}}), which suppresses certain animations/transitions based on the users' browser/operating system preferences. |\n | `$enable-grid-classes`         | `true` (default) or `false`        | Enables the generation of CSS classes for the grid system (e.g. `.row`, `.col-md-1`, etc.). |\n+| `$enable-css-grid`             | `true` or `false` (default)        | Enables the experimental CSS Grid system (e.g. `.grid`, `.g-col-md-1`, etc.). |\n | `$enable-container-classes`    | `true` (default) or `false`        | Enables the generation of CSS classes for layout containers. (New in v5.2.0) |\n | `$enable-caret`                | `true` (default) or `false`        | Enables pseudo element caret on `.dropdown-toggle`. |\n | `$enable-button-pointers`      | `true` (default) or `false`        | Add \"hand\" cursor to non-disabled button elements. |",
    "output": "docs: add missing `$enable-css-grid` in 'Customize > Options' (#40797)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 83365c437..1aade44f7 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -59,7 +59,7 @@\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n         \"npm-run-all2\": \"^6.2.2\",\n-        \"postcss\": \"^8.4.41\",\n+        \"postcss\": \"^8.4.44\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.21.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -9725,9 +9725,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.41\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.41.tgz\",\n-      \"integrity\": \"sha512-TesUflQ0WKZqAvg52PWL6kHgLKP6xB6heTOdoYM0Wt2UHyxNa4K25EZZMgKns3BH1RLVbZCREPpLY0rhnNoHVQ==\",\n+      \"version\": \"8.4.44\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.44.tgz\",\n+      \"integrity\": \"sha512-Aweb9unOEpQ3ezu4Q00DPvvM2ZTUitJdNKeP/+uQgr1IBIqu574IaZoURId7BKtWMREwzKa9OgzPzezWGPWFQw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 939522df1..961068918 100644\n--- a/package.json\n+++ b/package.json\n@@ -143,7 +143,7 @@\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n     \"npm-run-all2\": \"^6.2.2\",\n-    \"postcss\": \"^8.4.41\",\n+    \"postcss\": \"^8.4.44\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.21.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.41 to 8.4.44 (#40784)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/about/overview.md b/site/content/docs/5.3/about/overview.md\nindex 6ddfde0a8..9a357e2dc 100644\n--- a/site/content/docs/5.3/about/overview.md\n+++ b/site/content/docs/5.3/about/overview.md\n@@ -1,6 +1,6 @@\n ---\n layout: docs\n-title: About\n+title: About Bootstrap\n description: Learn more about the team maintaining Bootstrap, how and why the project started, and how to get involved.\n group: about\n aliases:",
    "output": "docs: clarify the title on the 'About > Overview' page (#40762)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 5fabc26c2..83365c437 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.24.8\",\n+        \"@babel/cli\": \"^7.25.6\",\n         \"@babel/core\": \"^7.25.2\",\n         \"@babel/preset-env\": \"^7.25.4\",\n         \"@docsearch/js\": \"^3.6.1\",\n@@ -310,11 +310,10 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.24.8\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.8.tgz\",\n-      \"integrity\": \"sha512-isdp+G6DpRyKc+3Gqxy2rjzgF7Zj9K0mzLNnxz+E/fgeag8qT3vVulX4gY9dGO1q0y+0lUv6V3a+uhUzMzrwXg==\",\n+      \"version\": \"7.25.6\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.25.6.tgz\",\n+      \"integrity\": \"sha512-Z+Doemr4VtvSD2SNHTrkiFZ1LX+JI6tyRXAAOb4N9khIuPyoEPmTPJarPm8ljJV1D6bnMQjyHMWTT9NeKbQuXA==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.25\",\n         \"commander\": \"^6.2.0\",\n@@ -333,7 +332,7 @@\n       },\n       \"optionalDependencies\": {\n         \"@nicolo-ribaudo/chokidar-2\": \"2.1.8-no-fsevents.3\",\n-        \"chokidar\": \"^3.4.0\"\n+        \"chokidar\": \"^3.6.0\"\n       },\n       \"peerDependencies\": {\n         \"@babel/core\": \"^7.0.0-0\"\ndiff --git a/package.json b/package.json\nindex a5adca60a..939522df1 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.24.8\",\n+    \"@babel/cli\": \"^7.25.6\",\n     \"@babel/core\": \"^7.25.2\",\n     \"@babel/preset-env\": \"^7.25.4\",\n     \"@docsearch/js\": \"^3.6.1\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.24.8 to 7.25.6 (#40788)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b14f3b806..5fabc26c2 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -63,7 +63,7 @@\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.21.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n-        \"rtlcss\": \"^4.2.0\",\n+        \"rtlcss\": \"^4.3.0\",\n         \"sass\": \"^1.77.8\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n@@ -10697,11 +10697,10 @@\n       }\n     },\n     \"node_modules/rtlcss\": {\n-      \"version\": \"4.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.2.0.tgz\",\n-      \"integrity\": \"sha512-AV+V3oOVvCrqyH5Q/6RuT1IDH1Xy5kJTkEWTWZPN5rdQ3HCFOd8SrbC7c6N5Y8bPpCfZSR6yYbUATXslvfvu5g==\",\n+      \"version\": \"4.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/rtlcss/-/rtlcss-4.3.0.tgz\",\n+      \"integrity\": \"sha512-FI+pHEn7Wc4NqKXMXFM+VAYKEj/mRIcW4h24YVwVtyjI+EqGrLc2Hx/Ny0lrZ21cBWU2goLy36eqMcNj3AQJig==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"escalade\": \"^3.1.1\",\n         \"picocolors\": \"^1.0.0\",\ndiff --git a/package.json b/package.json\nindex fed88c601..a5adca60a 100644\n--- a/package.json\n+++ b/package.json\n@@ -147,7 +147,7 @@\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.21.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n-    \"rtlcss\": \"^4.2.0\",\n+    \"rtlcss\": \"^4.3.0\",\n     \"sass\": \"^1.77.8\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",",
    "output": "build(deps-dev): Bump rtlcss from 4.2.0 to 4.3.0 (#40782)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c2586c7f3..ce29ac4c3 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.2\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.129.1\",\n+        \"hugo-bin\": \"^0.130.1\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.2.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -7181,9 +7181,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.129.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.129.1.tgz\",\n-      \"integrity\": \"sha512-xA94x62Dy1NZIKyClKwbIaAjOTubrJh0+fooPX8+BANS7Gt+aL3My7kdt+fHeTHyVMfMgIExmeWmmm7FeXh6xA==\",\n+      \"version\": \"0.130.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.130.1.tgz\",\n+      \"integrity\": \"sha512-0+GwMlYkTdmH2INIWPeoKf+Rx/+RbTCZNPhcdPwm4a+WJeuvGjOLOmK3grAk5vC2u4OwxfOhgD3zRU7wHVYxlw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 989cb82aa..b9d915f9a 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.2\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.129.1\",\n+    \"hugo-bin\": \"^0.130.1\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.2.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.129.1 to 0.130.1 (#40774)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3df7ae5c7..827786259 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.2\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.127.0\",\n+        \"hugo-bin\": \"^0.129.1\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.2.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -7192,9 +7192,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.127.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.127.0.tgz\",\n-      \"integrity\": \"sha512-tCp/MzBZAuWOMQo0YUU6dp6KpmcQsM2iFpsIMPtjlPbS1gSVVjgoIM/7zT8qVENDEWT4psa00N3gGobIjSMReg==\",\n+      \"version\": \"0.129.1\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.129.1.tgz\",\n+      \"integrity\": \"sha512-xA94x62Dy1NZIKyClKwbIaAjOTubrJh0+fooPX8+BANS7Gt+aL3My7kdt+fHeTHyVMfMgIExmeWmmm7FeXh6xA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -7203,7 +7203,6 @@\n         }\n       ],\n       \"hasInstallScript\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"@xhmikosr/bin-wrapper\": \"^13.0.5\",\n         \"package-config\": \"^5.0.0\"\ndiff --git a/package.json b/package.json\nindex 34a85fa7d..b84fc56c1 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.2\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.127.0\",\n+    \"hugo-bin\": \"^0.129.1\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.2.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.127.0 to 0.129.1 (#40723)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 79d521e70..3df7ae5c7 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.8.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-        \"terser\": \"^5.31.3\",\n+        \"terser\": \"^5.31.6\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -12047,11 +12047,10 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.31.3\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.3.tgz\",\n-      \"integrity\": \"sha512-pAfYn3NIZLyZpa83ZKigvj6Rn9c/vd5KfYGX7cN1mnzqgDcxWvrU5ZtAfIKhEXz9nRecw4z3LXkjaq96/qZqAA==\",\n+      \"version\": \"5.31.6\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.6.tgz\",\n+      \"integrity\": \"sha512-PQ4DAriWzKj+qgehQ7LK5bQqCFNMmlhjR2PFFLuqGCpuCAauxemVBWwWOxo3UIwWQx8+Pr61Df++r76wDmkQBg==\",\n       \"dev\": true,\n-      \"license\": \"BSD-2-Clause\",\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\n         \"acorn\": \"^8.8.2\",\ndiff --git a/package.json b/package.json\nindex ce896cd3a..34a85fa7d 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.8.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-    \"terser\": \"^5.31.3\",\n+    \"terser\": \"^5.31.6\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.31.3 to 5.31.6 (#40721)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c5b966b88..79d521e70 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -21,7 +21,7 @@\n       \"devDependencies\": {\n         \"@babel/cli\": \"^7.24.8\",\n         \"@babel/core\": \"^7.25.2\",\n-        \"@babel/preset-env\": \"^7.25.2\",\n+        \"@babel/preset-env\": \"^7.25.3\",\n         \"@docsearch/js\": \"^3.6.1\",\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.4\",\n@@ -732,14 +732,13 @@\n       }\n     },\n     \"node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key\": {\n-      \"version\": \"7.25.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.0.tgz\",\n-      \"integrity\": \"sha512-dG0aApncVQwAUJa8tP1VHTnmU67BeIQvKafd3raEx315H54FfkZSz3B/TT+33ZQAjatGJA79gZqTtqL5QZUKXw==\",\n+      \"version\": \"7.25.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.3.tgz\",\n+      \"integrity\": \"sha512-wUrcsxZg6rqBXG05HG1FPYgsP6EvwF4WpBbxIpWIIYnH8wG0gzx3yZY3dtEHas4sTAOGkbTsc9EGPxwff8lRoA==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"@babel/helper-plugin-utils\": \"^7.24.8\",\n-        \"@babel/traverse\": \"^7.25.0\"\n+        \"@babel/traverse\": \"^7.25.3\"\n       },\n       \"engines\": {\n         \"node\": \">=6.9.0\"\n@@ -1915,16 +1914,16 @@\n       }\n     },\n     \"node_modules/@babel/preset-env\": {\n-      \"version\": \"7.25.2\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.25.2.tgz\",\n-      \"integrity\": \"sha512-Y2Vkwy3ITW4id9c6KXshVV/x5yCGK7VdJmKkzOzNsDZMojRKfSA/033rRbLqlRozmhRXCejxWHLSJOg/wUHfzw==\",\n+      \"version\": \"7.25.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.25.3.tgz\",\n+      \"integrity\": \"sha512-QsYW7UeAaXvLPX9tdVliMJE7MD7M6MLYVTovRTIwhoYQVFHR1rM4wO8wqAezYi3/BpSD+NzVCZ69R6smWiIi8g==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/compat-data\": \"^7.25.2\",\n         \"@babel/helper-compilation-targets\": \"^7.25.2\",\n         \"@babel/helper-plugin-utils\": \"^7.24.8\",\n         \"@babel/helper-validator-option\": \"^7.24.8\",\n-        \"@babel/plugin-bugfix-firefox-class-in-computed-class-key\": \"^7.25.0\",\n+        \"@babel/plugin-bugfix-firefox-class-in-computed-class-key\": \"^7.25.3\",\n         \"@babel/plugin-bugfix-safari-class-field-initializer-scope\": \"^7.25.0\",\n         \"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\": \"^7.25.0\",\n         \"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\": \"^7.24.7\",\ndiff --git a/package.json b/package.json\nindex 69830d5dc..ce896cd3a 100644\n--- a/package.json\n+++ b/package.json\n@@ -105,7 +105,7 @@\n   \"devDependencies\": {\n     \"@babel/cli\": \"^7.24.8\",\n     \"@babel/core\": \"^7.25.2\",\n-    \"@babel/preset-env\": \"^7.25.2\",\n+    \"@babel/preset-env\": \"^7.25.3\",\n     \"@docsearch/js\": \"^3.6.1\",\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.4\",",
    "output": "build(deps-dev): Bump @babel/preset-env from 7.25.2 to 7.25.3 (#40722)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ad81b9e79..c5b966b88 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -59,7 +59,7 @@\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n         \"npm-run-all2\": \"^6.2.2\",\n-        \"postcss\": \"^8.4.40\",\n+        \"postcss\": \"^8.4.41\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.20.0\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -9743,9 +9743,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.40\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.40.tgz\",\n-      \"integrity\": \"sha512-YF2kKIUzAofPMpfH6hOi2cGnv/HrUlfucspc7pDyvv7kGdqXrfj8SCl/t8owkEgKEuu8ZcRjSOxFxVLqwChZ2Q==\",\n+      \"version\": \"8.4.41\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.41.tgz\",\n+      \"integrity\": \"sha512-TesUflQ0WKZqAvg52PWL6kHgLKP6xB6heTOdoYM0Wt2UHyxNa4K25EZZMgKns3BH1RLVbZCREPpLY0rhnNoHVQ==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -9761,7 +9761,6 @@\n           \"url\": \"https://github.com/sponsors/ai\"\n         }\n       ],\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"nanoid\": \"^3.3.7\",\n         \"picocolors\": \"^1.0.1\",\ndiff --git a/package.json b/package.json\nindex 19d05fd5c..69830d5dc 100644\n--- a/package.json\n+++ b/package.json\n@@ -143,7 +143,7 @@\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n     \"npm-run-all2\": \"^6.2.2\",\n-    \"postcss\": \"^8.4.40\",\n+    \"postcss\": \"^8.4.41\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.20.0\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.40 to 8.4.41 (#40720)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2ca5a392b..b322efa88 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -67,7 +67,7 @@\n         \"sass\": \"^1.77.8\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^16.7.0\",\n+        \"stylelint\": \"^16.8.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n         \"terser\": \"^5.31.3\",\n         \"vnu-jar\": \"23.4.11\"\n@@ -11607,9 +11607,9 @@\n       \"license\": \"ISC\"\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"16.7.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-16.7.0.tgz\",\n-      \"integrity\": \"sha512-Q1ATiXlz+wYr37a7TGsfvqYn2nSR3T/isw3IWlZQzFzCNoACHuGBb6xBplZXz56/uDRJHIygxjh7jbV/8isewA==\",\n+      \"version\": \"16.8.1\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-16.8.1.tgz\",\n+      \"integrity\": \"sha512-O8aDyfdODSDNz/B3gW2HQ+8kv8pfhSu7ZR7xskQ93+vI6FhKKGUJMQ03Ydu+w3OvXXE0/u4hWU4hCPNOyld+OA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -11621,7 +11621,6 @@\n           \"url\": \"https://github.com/sponsors/stylelint\"\n         }\n       ],\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"@csstools/css-parser-algorithms\": \"^2.7.1\",\n         \"@csstools/css-tokenizer\": \"^2.4.1\",\n@@ -11633,7 +11632,7 @@\n         \"cosmiconfig\": \"^9.0.0\",\n         \"css-functions-list\": \"^3.2.2\",\n         \"css-tree\": \"^2.3.1\",\n-        \"debug\": \"^4.3.5\",\n+        \"debug\": \"^4.3.6\",\n         \"fast-glob\": \"^3.3.2\",\n         \"fastest-levenshtein\": \"^1.0.16\",\n         \"file-entry-cache\": \"^9.0.0\",\n@@ -11650,10 +11649,10 @@\n         \"micromatch\": \"^4.0.7\",\n         \"normalize-path\": \"^3.0.0\",\n         \"picocolors\": \"^1.0.1\",\n-        \"postcss\": \"^8.4.39\",\n-        \"postcss-resolve-nested-selector\": \"^0.1.1\",\n+        \"postcss\": \"^8.4.40\",\n+        \"postcss-resolve-nested-selector\": \"^0.1.4\",\n         \"postcss-safe-parser\": \"^7.0.0\",\n-        \"postcss-selector-parser\": \"^6.1.0\",\n+        \"postcss-selector-parser\": \"^6.1.1\",\n         \"postcss-value-parser\": \"^4.2.0\",\n         \"resolve-from\": \"^5.0.0\",\n         \"string-width\": \"^4.2.3\",\ndiff --git a/package.json b/package.json\nindex 2089345cc..12e19e619 100644\n--- a/package.json\n+++ b/package.json\n@@ -151,7 +151,7 @@\n     \"sass\": \"^1.77.8\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^16.7.0\",\n+    \"stylelint\": \"^16.8.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n     \"terser\": \"^5.31.3\",\n     \"vnu-jar\": \"23.4.11\"",
    "output": "build(deps-dev): Bump stylelint from 16.7.0 to 16.8.1 (#40698)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/dropdowns.md b/site/content/docs/5.3/components/dropdowns.md\nindex 78a6043c2..b9e22e44a 100644\n--- a/site/content/docs/5.3/components/dropdowns.md\n+++ b/site/content/docs/5.3/components/dropdowns.md\n@@ -126,7 +126,7 @@ The best part is you can do this with any button variant, too:\n <!-- Example single danger button -->\n <div class=\"btn-group\">\n   <button type=\"button\" class=\"btn btn-danger dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n-    Action\n+    Danger\n   </button>\n   <ul class=\"dropdown-menu\">\n     <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\n@@ -228,7 +228,7 @@ We use this extra class to reduce the horizontal `padding` on either side of the\n ```html\n <!-- Example split danger button -->\n <div class=\"btn-group\">\n-  <button type=\"button\" class=\"btn btn-danger\">Action</button>\n+  <button type=\"button\" class=\"btn btn-danger\">Danger</button>\n   <button type=\"button\" class=\"btn btn-danger dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n     <span class=\"visually-hidden\">Toggle Dropdown</span>\n   </button>",
    "output": "docs: change wording of single/split danger buttons (#40689)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/get-started.html b/site/layouts/partials/home/get-started.html\nindex a4abb2eda..394ba1b4b 100644\n--- a/site/layouts/partials/home/get-started.html\n+++ b/site/layouts/partials/home/get-started.html\n@@ -16,7 +16,7 @@\n \n <section class=\"row g-3 g-md-5 mb-5 pb-5 justify-content-center\">\n   <div class=\"col-lg-6 py-lg-4 pe-lg-5\">\n-    <svg class=\"bi mb-2 fs-2 text-body-secondary\"><use xlink:href=\"#box-seam\"></use></svg>\n+    <svg class=\"bi mb-2 fs-2 text-body-secondary\" aria-hidden=\"true\"><use xlink:href=\"#box-seam\"></use></svg>\n     <h3 class=\"fw-semibold\">Install via package manager</h3>\n     <p class=\"pe-lg-5\">\n       Install Bootstrap\u2019s source Sass and JavaScript files via npm, RubyGems, Composer, or Meteor. Package managed installs don\u2019t include documentation or our full build scripts. You can also <a href=\"https://github.com/twbs/examples/\">use any demo from our Examples repo</a> to quickly jumpstart Bootstrap projects.\n@@ -28,7 +28,7 @@\n     </p>\n   </div>\n   <div class=\"col-lg-6 py-lg-4 ps-lg-5 border-lg-start\">\n-    <svg class=\"bi mb-2 fs-2 text-body-secondary\"><use xlink:href=\"#globe2\"></use></svg>\n+    <svg class=\"bi mb-2 fs-2 text-body-secondary\" aria-hidden=\"true\"><use xlink:href=\"#globe2\"></use></svg>\n     <h3 class=\"fw-semibold\">Include via CDN</h3>\n     <p class=\"pe-lg-5\">\n       When you only need to include Bootstrap\u2019s compiled CSS or JS, you can use <a href=\"https://www.jsdelivr.com/package/npm/bootstrap\">jsDelivr</a>. See it in action with our simple <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/introduction/#quick-start\">quick start</a>, or <a href=\"/docs/{{ .Site.Params.docs_version }}/examples/\">browse the examples</a> to jumpstart your next project. You can also choose to include Popper and our JS <a href=\"/docs/{{ .Site.Params.docs_version }}/getting-started/introduction/#separate\">separately</a>.",
    "output": "docs: add `aria-hidden=\"true\"` to decorative SVGs (#40691)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex bfbfad2cd..84b9cb047 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -47,7 +47,7 @@\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.2.0\",\n         \"jquery\": \"^3.7.1\",\n-        \"karma\": \"^6.4.3\",\n+        \"karma\": \"^6.4.4\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n         \"karma-chrome-launcher\": \"^3.2.0\",\n         \"karma-coverage-istanbul-reporter\": \"^3.0.3\",\n@@ -8334,11 +8334,10 @@\n       \"dev\": true\n     },\n     \"node_modules/karma\": {\n-      \"version\": \"6.4.3\",\n-      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.3.tgz\",\n-      \"integrity\": \"sha512-LuucC/RE92tJ8mlCwqEoRWXP38UMAqpnq98vktmS9SznSoUPPUJQbc91dHcxcunROvfQjdORVA/YFviH+Xci9Q==\",\n+      \"version\": \"6.4.4\",\n+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.4.tgz\",\n+      \"integrity\": \"sha512-LrtUxbdvt1gOpo3gxG+VAJlJAEMhbWlM4YrFQgql98FwF7+K8K12LYO4hnDdUkNjeztYrOXEMqgTajSWgmtI/w==\",\n       \"dev\": true,\n-      \"license\": \"MIT\",\n       \"dependencies\": {\n         \"@colors/colors\": \"1.5.0\",\n         \"body-parser\": \"^1.19.0\",\ndiff --git a/package.json b/package.json\nindex a7c5658b1..24a5ade96 100644\n--- a/package.json\n+++ b/package.json\n@@ -131,7 +131,7 @@\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.2.0\",\n     \"jquery\": \"^3.7.1\",\n-    \"karma\": \"^6.4.3\",\n+    \"karma\": \"^6.4.4\",\n     \"karma-browserstack-launcher\": \"1.4.0\",\n     \"karma-chrome-launcher\": \"^3.2.0\",\n     \"karma-coverage-istanbul-reporter\": \"^3.0.3\",",
    "output": "build(deps-dev): Bump karma from 6.4.3 to 6.4.4 (#40680)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 5f92cadc4..190288086 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.24.7\",\n+        \"@babel/cli\": \"^7.24.8\",\n         \"@babel/core\": \"^7.24.7\",\n         \"@babel/preset-env\": \"^7.24.7\",\n         \"@docsearch/js\": \"^3.6.0\",\n@@ -289,9 +289,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.24.7\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.7.tgz\",\n-      \"integrity\": \"sha512-8dfPprJgV4O14WTx+AQyEA+opgUKPrsIXX/MdL50J1n06EQJ6m1T+CdsJe0qEC0B/Xl85i+Un5KVAxd/PACX9A==\",\n+      \"version\": \"7.24.8\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.8.tgz\",\n+      \"integrity\": \"sha512-isdp+G6DpRyKc+3Gqxy2rjzgF7Zj9K0mzLNnxz+E/fgeag8qT3vVulX4gY9dGO1q0y+0lUv6V3a+uhUzMzrwXg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.25\",\ndiff --git a/package.json b/package.json\nindex 5c3398bee..2712b0777 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.24.7\",\n+    \"@babel/cli\": \"^7.24.8\",\n     \"@babel/core\": \"^7.24.7\",\n     \"@babel/preset-env\": \"^7.24.7\",\n     \"@docsearch/js\": \"^3.6.0\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.24.7 to 7.24.8 (#40633)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex db2348d3f..5f92cadc4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -38,7 +38,7 @@\n         \"eslint-config-xo\": \"^0.45.0\",\n         \"eslint-plugin-html\": \"^8.1.1\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n-        \"eslint-plugin-markdown\": \"^5.0.0\",\n+        \"eslint-plugin-markdown\": \"^5.1.0\",\n         \"eslint-plugin-unicorn\": \"^54.0.0\",\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n@@ -5416,9 +5416,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-markdown\": {\n-      \"version\": \"5.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-markdown/-/eslint-plugin-markdown-5.0.0.tgz\",\n-      \"integrity\": \"sha512-kY2u9yDhzvfZ0kmRTsvgm3mTnvZgTSGIIPeHg3yesSx4R5CTCnITUjCPhzCD1MUhNcqHU5Tr6lzx+02EclVPbw==\",\n+      \"version\": \"5.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-markdown/-/eslint-plugin-markdown-5.1.0.tgz\",\n+      \"integrity\": \"sha512-SJeyKko1K6GwI0AN6xeCDToXDkfKZfXcexA6B+O2Wr2btUS9GrC+YgwSyVli5DJnctUHjFXcQ2cqTaAmVoLi2A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"mdast-util-from-markdown\": \"^0.8.5\"\ndiff --git a/package.json b/package.json\nindex 60b7028a4..5c3398bee 100644\n--- a/package.json\n+++ b/package.json\n@@ -122,7 +122,7 @@\n     \"eslint-config-xo\": \"^0.45.0\",\n     \"eslint-plugin-html\": \"^8.1.1\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n-    \"eslint-plugin-markdown\": \"^5.0.0\",\n+    \"eslint-plugin-markdown\": \"^5.1.0\",\n     \"eslint-plugin-unicorn\": \"^54.0.0\",\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-markdown from 5.0.0 to 5.1.0 (#40634)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b47a00920..db2348d3f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.6.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-        \"terser\": \"^5.31.1\",\n+        \"terser\": \"^5.31.2\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11371,9 +11371,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.31.1\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.1.tgz\",\n-      \"integrity\": \"sha512-37upzU1+viGvuFtBo9NPufCb9dwM0+l9hMxYyWfBA+fbwrPqNJAhbZ6W47bBFnZHKHTUBnMvi87434qq+qnxOg==\",\n+      \"version\": \"5.31.2\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.2.tgz\",\n+      \"integrity\": \"sha512-LGyRZVFm/QElZHy/CPr/O4eNZOZIzsrQ92y4v9UJe/pFJjypje2yI3C2FmPtvUEnhadlSbmG2nXtdcjHOjCfxw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 3e5370402..60b7028a4 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.6.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-    \"terser\": \"^5.31.1\",\n+    \"terser\": \"^5.31.2\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.31.1 to 5.31.2 (#40632)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 85ab1a3ef..b47a00920 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.18.1\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.77.6\",\n+        \"sass\": \"^1.77.8\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.6.1\",\n@@ -10219,9 +10219,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.77.6\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.77.6.tgz\",\n-      \"integrity\": \"sha512-ByXE1oLD79GVq9Ht1PeHWCPMPB8XHpBuz1r85oByKHjZY6qV6rWnQovQzXJXuQ/XyE1Oj3iPk3lo28uzaRA2/Q==\",\n+      \"version\": \"1.77.8\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.77.8.tgz\",\n+      \"integrity\": \"sha512-4UHg6prsrycW20fqLGPShtEvo/WyHRVRHwOP4DzkUrObWoWI05QBSfzU71TVB7PFaL104TwNaHpjlWXAZbQiNQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 045dcf8cb..3e5370402 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.18.1\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.77.6\",\n+    \"sass\": \"^1.77.8\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.6.1\",",
    "output": "build(deps-dev): Bump sass from 1.77.6 to 1.77.8 (#40635)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d29fa47fe..e3b05ef04 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n-        \"npm-run-all2\": \"^6.2.0\",\n+        \"npm-run-all2\": \"^6.2.2\",\n         \"postcss\": \"^8.4.39\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.18.0\",\n@@ -8710,9 +8710,9 @@\n       }\n     },\n     \"node_modules/npm-run-all2\": {\n-      \"version\": \"6.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.2.0.tgz\",\n-      \"integrity\": \"sha512-wA7yVIkthe6qJBfiJ2g6aweaaRlw72itsFGF6HuwCHKwtwAx/4BY1vVpk6bw6lS8RLMsexoasOkd0aYOmsFG7Q==\",\n+      \"version\": \"6.2.2\",\n+      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.2.2.tgz\",\n+      \"integrity\": \"sha512-Q+alQAGIW7ZhKcxLt8GcSi3h3ryheD6xnmXahkMRVM5LYmajcUrSITm8h+OPC9RYWMV2GR0Q1ntTUCfxaNoOJw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"ansi-styles\": \"^6.2.1\",\n@@ -8730,7 +8730,7 @@\n         \"run-s\": \"bin/run-s/index.js\"\n       },\n       \"engines\": {\n-        \"node\": \"^14.18.0 || >=16.0.0\",\n+        \"node\": \"^14.18.0 || ^16.13.0 || >=18.0.0\",\n         \"npm\": \">= 8\"\n       }\n     },\ndiff --git a/package.json b/package.json\nindex 7d6881718..b91b9ea7e 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n-    \"npm-run-all2\": \"^6.2.0\",\n+    \"npm-run-all2\": \"^6.2.2\",\n     \"postcss\": \"^8.4.39\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.18.0\",",
    "output": "build(deps-dev): Bump npm-run-all2 from 6.2.0 to 6.2.2 (#40616)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex a1085af46..d29fa47fe 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.125.0\",\n+        \"hugo-bin\": \"^0.125.2\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6795,9 +6795,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.125.0\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.125.0.tgz\",\n-      \"integrity\": \"sha512-cTvHzQdK04KrBaW3jPdd/JAQXCOdXT1GiPHaMxe0YtLTVCV0ElgxkvXn6eQJUDl4QqM8+IlsFg/b2ofz6XS//A==\",\n+      \"version\": \"0.125.2\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.125.2.tgz\",\n+      \"integrity\": \"sha512-JNjhuoGFBwJo6qDOeYUiXSoD7rPbwY36wyHJaqbRe9APNY1nPGO1Yy/Ut7rLcriKTBWKPZrh5Hz+9PzGnLV5Lw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 8f6372aa0..7d6881718 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.125.0\",\n+    \"hugo-bin\": \"^0.125.2\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.125.0 to 0.125.2 (#40615)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3a8f20d88..a1085af46 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -28,7 +28,7 @@\n         \"@rollup/plugin-commonjs\": \"^26.0.1\",\n         \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n         \"@rollup/plugin-replace\": \"^5.0.7\",\n-        \"@stackblitz/sdk\": \"^1.10.0\",\n+        \"@stackblitz/sdk\": \"^1.11.0\",\n         \"autoprefixer\": \"^10.4.19\",\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.3\",\n@@ -2931,9 +2931,9 @@\n       \"dev\": true\n     },\n     \"node_modules/@stackblitz/sdk\": {\n-      \"version\": \"1.10.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@stackblitz/sdk/-/sdk-1.10.0.tgz\",\n-      \"integrity\": \"sha512-IcvE9Xifo2c4/f+yNqjFM/OW5VTBPLed3TxsQ+n8n81Py358IqD5w0IYfFgV5gbDjp2g5H5YK2/Shls/kQNTWQ==\",\n+      \"version\": \"1.11.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@stackblitz/sdk/-/sdk-1.11.0.tgz\",\n+      \"integrity\": \"sha512-DFQGANNkEZRzFk1/rDP6TcFdM82ycHE+zfl9C/M/jXlH68jiqHWHFMQURLELoD8koxvu/eW5uhg94NSAZlYrUQ==\",\n       \"dev\": true\n     },\n     \"node_modules/@stylistic/stylelint-config\": {\ndiff --git a/package.json b/package.json\nindex 82b4f3460..8f6372aa0 100644\n--- a/package.json\n+++ b/package.json\n@@ -112,7 +112,7 @@\n     \"@rollup/plugin-commonjs\": \"^26.0.1\",\n     \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n     \"@rollup/plugin-replace\": \"^5.0.7\",\n-    \"@stackblitz/sdk\": \"^1.10.0\",\n+    \"@stackblitz/sdk\": \"^1.11.0\",\n     \"autoprefixer\": \"^10.4.19\",\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.3\",",
    "output": "build(deps-dev): Bump @stackblitz/sdk from 1.10.0 to 1.11.0 (#40618)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 6ac7c4669..3a8f20d88 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.6.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-        \"terser\": \"^5.31.0\",\n+        \"terser\": \"^5.31.1\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11371,9 +11371,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.31.0\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.0.tgz\",\n-      \"integrity\": \"sha512-Q1JFAoUKE5IMfI4Z/lkE/E6+SwgzO+x4tq4v1AyBLRj8VSYvRO6A/rQrPg1yud4g0En9EKI1TvFRF2tQFcoUkg==\",\n+      \"version\": \"5.31.1\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.1.tgz\",\n+      \"integrity\": \"sha512-37upzU1+viGvuFtBo9NPufCb9dwM0+l9hMxYyWfBA+fbwrPqNJAhbZ6W47bBFnZHKHTUBnMvi87434qq+qnxOg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex 4082f40aa..82b4f3460 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.6.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.2.0\",\n-    \"terser\": \"^5.31.0\",\n+    \"terser\": \"^5.31.1\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.31.0 to 5.31.1 (#40601)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex b460f2dbb..4f81d1184 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -59,7 +59,7 @@\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n         \"npm-run-all2\": \"^6.2.0\",\n-        \"postcss\": \"^8.4.38\",\n+        \"postcss\": \"^8.4.39\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.18.0\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n@@ -9181,9 +9181,9 @@\n       }\n     },\n     \"node_modules/postcss\": {\n-      \"version\": \"8.4.38\",\n-      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.38.tgz\",\n-      \"integrity\": \"sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==\",\n+      \"version\": \"8.4.39\",\n+      \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.39.tgz\",\n+      \"integrity\": \"sha512-0vzE+lAiG7hZl1/9I8yzKLx3aR9Xbof3fBHKunvMfOCYAtMhrsnccJY2iTURb9EZd5+pLuiNV9/c/GZJOHsgIw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -9201,7 +9201,7 @@\n       ],\n       \"dependencies\": {\n         \"nanoid\": \"^3.3.7\",\n-        \"picocolors\": \"^1.0.0\",\n+        \"picocolors\": \"^1.0.1\",\n         \"source-map-js\": \"^1.2.0\"\n       },\n       \"engines\": {\ndiff --git a/package.json b/package.json\nindex 6aded4e93..54198068c 100644\n--- a/package.json\n+++ b/package.json\n@@ -143,7 +143,7 @@\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n     \"npm-run-all2\": \"^6.2.0\",\n-    \"postcss\": \"^8.4.38\",\n+    \"postcss\": \"^8.4.39\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.18.0\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump postcss from 8.4.38 to 8.4.39 (#40602)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ecbea346c..b460f2dbb 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -58,7 +58,7 @@\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.14.0\",\n         \"nodemon\": \"^3.1.4\",\n-        \"npm-run-all2\": \"^6.1.2\",\n+        \"npm-run-all2\": \"^6.2.0\",\n         \"postcss\": \"^8.4.38\",\n         \"postcss-cli\": \"^11.0.0\",\n         \"rollup\": \"^4.18.0\",\n@@ -8685,9 +8685,9 @@\n       }\n     },\n     \"node_modules/npm-run-all2\": {\n-      \"version\": \"6.1.2\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.1.2.tgz\",\n-      \"integrity\": \"sha512-WwwnS8Ft+RpXve6T2EIEVpFLSqN+ORHRvgNk3H9N62SZXjmzKoRhMFg3I17TK3oMaAEr+XFbRirWS2Fn3BCPSg==\",\n+      \"version\": \"6.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/npm-run-all2/-/npm-run-all2-6.2.0.tgz\",\n+      \"integrity\": \"sha512-wA7yVIkthe6qJBfiJ2g6aweaaRlw72itsFGF6HuwCHKwtwAx/4BY1vVpk6bw6lS8RLMsexoasOkd0aYOmsFG7Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"ansi-styles\": \"^6.2.1\",\ndiff --git a/package.json b/package.json\nindex 6cb5911e5..6aded4e93 100644\n--- a/package.json\n+++ b/package.json\n@@ -142,7 +142,7 @@\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.14.0\",\n     \"nodemon\": \"^3.1.4\",\n-    \"npm-run-all2\": \"^6.1.2\",\n+    \"npm-run-all2\": \"^6.2.0\",\n     \"postcss\": \"^8.4.38\",\n     \"postcss-cli\": \"^11.0.0\",\n     \"rollup\": \"^4.18.0\",",
    "output": "build(deps-dev): Bump npm-run-all2 from 6.1.2 to 6.2.0 (#40600)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e729feb59..ecbea346c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -57,7 +57,7 @@\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.14.0\",\n-        \"nodemon\": \"^3.1.3\",\n+        \"nodemon\": \"^3.1.4\",\n         \"npm-run-all2\": \"^6.1.2\",\n         \"postcss\": \"^8.4.38\",\n         \"postcss-cli\": \"^11.0.0\",\n@@ -8549,9 +8549,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nodemon\": {\n-      \"version\": \"3.1.3\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.3.tgz\",\n-      \"integrity\": \"sha512-m4Vqs+APdKzDFpuaL9F9EVOF85+h070FnkHVEoU4+rmT6Vw0bmNl7s61VEkY/cJkL7RCv1p4urnUDUMrS5rk2w==\",\n+      \"version\": \"3.1.4\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.4.tgz\",\n+      \"integrity\": \"sha512-wjPBbFhtpJwmIeY2yP7QF+UKzPfltVGtfce1g/bB15/8vCGZj8uxD62b/b9M9/WVgme0NZudpownKN+c0plXlQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \"^3.5.2\",\ndiff --git a/package.json b/package.json\nindex d898e36a3..6cb5911e5 100644\n--- a/package.json\n+++ b/package.json\n@@ -141,7 +141,7 @@\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.14.0\",\n-    \"nodemon\": \"^3.1.3\",\n+    \"nodemon\": \"^3.1.4\",\n     \"npm-run-all2\": \"^6.1.2\",\n     \"postcss\": \"^8.4.38\",\n     \"postcss-cli\": \"^11.0.0\",",
    "output": "build(deps-dev): Bump nodemon from 3.1.3 to 3.1.4 (#40598)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0c5d654cf..e729feb59 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.123.3\",\n+        \"hugo-bin\": \"^0.125.0\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6770,9 +6770,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.123.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.123.3.tgz\",\n-      \"integrity\": \"sha512-30lebZNVnrpDo5HV5RbCHZ3WhYXsrvUJ0EyJkoYXMd8SHs2HZuc3s0O7RY7aP+pkC9SX3ahU9rNsB9bcKuSw1g==\",\n+      \"version\": \"0.125.0\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.125.0.tgz\",\n+      \"integrity\": \"sha512-cTvHzQdK04KrBaW3jPdd/JAQXCOdXT1GiPHaMxe0YtLTVCV0ElgxkvXn6eQJUDl4QqM8+IlsFg/b2ofz6XS//A==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 37dafe418..d898e36a3 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.123.3\",\n+    \"hugo-bin\": \"^0.125.0\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.123.3 to 0.125.0 (#40599)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 04355cc2f..0c5d654cf 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.18.0\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.77.4\",\n+        \"sass\": \"^1.77.6\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.6.1\",\n@@ -10188,9 +10188,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.77.4\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.77.4.tgz\",\n-      \"integrity\": \"sha512-vcF3Ckow6g939GMA4PeU7b2K/9FALXk2KF9J87txdHzXbUF9XRQRwSxcAs/fGaTnJeBFd7UoV22j3lzMLdM0Pw==\",\n+      \"version\": \"1.77.6\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.77.6.tgz\",\n+      \"integrity\": \"sha512-ByXE1oLD79GVq9Ht1PeHWCPMPB8XHpBuz1r85oByKHjZY6qV6rWnQovQzXJXuQ/XyE1Oj3iPk3lo28uzaRA2/Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex b6c10d00d..37dafe418 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.18.0\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.77.4\",\n+    \"sass\": \"^1.77.6\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.6.1\",",
    "output": "build(deps-dev): Bump sass from 1.77.4 to 1.77.6 (#40597)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex bd121538f..7536bdd0e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -27,7 +27,7 @@\n         \"@rollup/plugin-babel\": \"^6.0.4\",\n         \"@rollup/plugin-commonjs\": \"^25.0.8\",\n         \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n-        \"@rollup/plugin-replace\": \"^5.0.5\",\n+        \"@rollup/plugin-replace\": \"^5.0.7\",\n         \"@stackblitz/sdk\": \"^1.10.0\",\n         \"autoprefixer\": \"^10.4.19\",\n         \"bundlewatch\": \"^0.3.3\",\n@@ -2619,9 +2619,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-replace\": {\n-      \"version\": \"5.0.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-5.0.5.tgz\",\n-      \"integrity\": \"sha512-rYO4fOi8lMaTg/z5Jb+hKnrHHVn8j2lwkqwyS4kTRhKyWOLf2wST2sWXr4WzWiTcoHTp2sTjqUbqIj2E39slKQ==\",\n+      \"version\": \"5.0.7\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-5.0.7.tgz\",\n+      \"integrity\": \"sha512-PqxSfuorkHz/SPpyngLyg5GCEkOcee9M1bkxiVDr41Pd61mqP1PLOoDPbpl44SB2mQGKwV/In74gqQmGITOhEQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex a596cfdf5..8c6c14b6e 100644\n--- a/package.json\n+++ b/package.json\n@@ -111,7 +111,7 @@\n     \"@rollup/plugin-babel\": \"^6.0.4\",\n     \"@rollup/plugin-commonjs\": \"^25.0.8\",\n     \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n-    \"@rollup/plugin-replace\": \"^5.0.5\",\n+    \"@rollup/plugin-replace\": \"^5.0.7\",\n     \"@stackblitz/sdk\": \"^1.10.0\",\n     \"autoprefixer\": \"^10.4.19\",\n     \"bundlewatch\": \"^0.3.3\",",
    "output": "build(deps-dev): Bump @rollup/plugin-replace from 5.0.5 to 5.0.7 (#40595)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex dad2b0abe..f16d34e81 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -20,7 +20,7 @@\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n         \"@babel/cli\": \"^7.24.7\",\n-        \"@babel/core\": \"^7.24.5\",\n+        \"@babel/core\": \"^7.24.7\",\n         \"@babel/preset-env\": \"^7.24.7\",\n         \"@docsearch/js\": \"^3.6.0\",\n         \"@popperjs/core\": \"^2.11.8\",\n@@ -340,21 +340,21 @@\n       }\n     },\n     \"node_modules/@babel/core\": {\n-      \"version\": \"7.24.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/core/-/core-7.24.5.tgz\",\n-      \"integrity\": \"sha512-tVQRucExLQ02Boi4vdPp49svNGcfL2GhdTCT9aldhXgCJVAI21EtRfBettiuLUwce/7r6bFdgs6JFkcdTiFttA==\",\n+      \"version\": \"7.24.7\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/core/-/core-7.24.7.tgz\",\n+      \"integrity\": \"sha512-nykK+LEK86ahTkX/3TgauT0ikKoNCfKHEaZYTUVupJdTLzGNvrblu4u6fa7DhZONAltdf8e662t/abY8idrd/g==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@ampproject/remapping\": \"^2.2.0\",\n-        \"@babel/code-frame\": \"^7.24.2\",\n-        \"@babel/generator\": \"^7.24.5\",\n-        \"@babel/helper-compilation-targets\": \"^7.23.6\",\n-        \"@babel/helper-module-transforms\": \"^7.24.5\",\n-        \"@babel/helpers\": \"^7.24.5\",\n-        \"@babel/parser\": \"^7.24.5\",\n-        \"@babel/template\": \"^7.24.0\",\n-        \"@babel/traverse\": \"^7.24.5\",\n-        \"@babel/types\": \"^7.24.5\",\n+        \"@babel/code-frame\": \"^7.24.7\",\n+        \"@babel/generator\": \"^7.24.7\",\n+        \"@babel/helper-compilation-targets\": \"^7.24.7\",\n+        \"@babel/helper-module-transforms\": \"^7.24.7\",\n+        \"@babel/helpers\": \"^7.24.7\",\n+        \"@babel/parser\": \"^7.24.7\",\n+        \"@babel/template\": \"^7.24.7\",\n+        \"@babel/traverse\": \"^7.24.7\",\n+        \"@babel/types\": \"^7.24.7\",\n         \"convert-source-map\": \"^2.0.0\",\n         \"debug\": \"^4.1.0\",\n         \"gensync\": \"^1.0.0-beta.2\",\n@@ -699,14 +699,13 @@\n       }\n     },\n     \"node_modules/@babel/helpers\": {\n-      \"version\": \"7.24.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/helpers/-/helpers-7.24.5.tgz\",\n-      \"integrity\": \"sha512-CiQmBMMpMQHwM5m01YnrM6imUG1ebgYJ+fAIW4FZe6m4qHTPaRHti+R8cggAwkdz4oXhtO4/K9JWlh+8hIfR2Q==\",\n+      \"version\": \"7.24.7\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/helpers/-/helpers-7.24.7.tgz\",\n+      \"integrity\": \"sha512-NlmJJtvcw72yRJRcnCmGvSi+3jDEg8qFu3z0AFoymmzLx5ERVWyzd9kVXr7Th9/8yIJi2Zc6av4Tqz3wFs8QWg==\",\n       \"dev\": true,\n       \"dependencies\": {\n-        \"@babel/template\": \"^7.24.0\",\n-        \"@babel/traverse\": \"^7.24.5\",\n-        \"@babel/types\": \"^7.24.5\"\n+        \"@babel/template\": \"^7.24.7\",\n+        \"@babel/types\": \"^7.24.7\"\n       },\n       \"engines\": {\n         \"node\": \">=6.9.0\"\ndiff --git a/package.json b/package.json\nindex 7345b62b6..4ca650003 100644\n--- a/package.json\n+++ b/package.json\n@@ -104,7 +104,7 @@\n   },\n   \"devDependencies\": {\n     \"@babel/cli\": \"^7.24.7\",\n-    \"@babel/core\": \"^7.24.5\",\n+    \"@babel/core\": \"^7.24.7\",\n     \"@babel/preset-env\": \"^7.24.7\",\n     \"@docsearch/js\": \"^3.6.0\",\n     \"@popperjs/core\": \"^2.11.8\",",
    "output": "build(deps-dev): Bump @babel/core from 7.24.5 to 7.24.7 (#40548)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 598b5c40e..f5daa99ba 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -4971,9 +4971,9 @@\n       }\n     },\n     \"node_modules/engine.io\": {\n-      \"version\": \"6.5.4\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.5.4.tgz\",\n-      \"integrity\": \"sha512-KdVSDKhVKyOi+r5uEabrDLZw2qXStVvCsEB/LN3mw4WFi6Gx50jTyuxYVCwAAC0U46FdnzP/ScKRBTXb/NiEOg==\",\n+      \"version\": \"6.5.5\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-6.5.5.tgz\",\n+      \"integrity\": \"sha512-C5Pn8Wk+1vKBoHghJODM63yk8MvrO9EWZUfkAt5HAqIgPE4/8FF0PEGHXtEd40l223+cE5ABWuPzm38PHFXfMA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@types/cookie\": \"^0.4.1\",\n@@ -4985,7 +4985,7 @@\n         \"cors\": \"~2.8.5\",\n         \"debug\": \"~4.3.1\",\n         \"engine.io-parser\": \"~5.2.1\",\n-        \"ws\": \"~8.11.0\"\n+        \"ws\": \"~8.17.1\"\n       },\n       \"engines\": {\n         \"node\": \">=10.2.0\"\n@@ -10488,13 +10488,13 @@\n       }\n     },\n     \"node_modules/socket.io-adapter\": {\n-      \"version\": \"2.5.4\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.4.tgz\",\n-      \"integrity\": \"sha512-wDNHGXGewWAjQPt3pyeYBtpWSq9cLE5UW1ZUPL/2eGK9jtse/FpXib7epSTsz0Q0m+6sg6Y4KtcFTlah1bdOVg==\",\n+      \"version\": \"2.5.5\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz\",\n+      \"integrity\": \"sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"debug\": \"~4.3.4\",\n-        \"ws\": \"~8.11.0\"\n+        \"ws\": \"~8.17.1\"\n       }\n     },\n     \"node_modules/socket.io-parser\": {\n@@ -12068,16 +12068,16 @@\n       }\n     },\n     \"node_modules/ws\": {\n-      \"version\": \"8.11.0\",\n-      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.11.0.tgz\",\n-      \"integrity\": \"sha512-HPG3wQd9sNQoT9xHyNCXoDUa+Xw/VevmY9FoHyQ+g+rrMn4j6FB4np7Z0OhdTgjx6MgQLK7jwSy1YecU1+4Asg==\",\n+      \"version\": \"8.17.1\",\n+      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-8.17.1.tgz\",\n+      \"integrity\": \"sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==\",\n       \"dev\": true,\n       \"engines\": {\n         \"node\": \">=10.0.0\"\n       },\n       \"peerDependencies\": {\n         \"bufferutil\": \"^4.0.1\",\n-        \"utf-8-validate\": \"^5.0.2\"\n+        \"utf-8-validate\": \">=5.0.2\"\n       },\n       \"peerDependenciesMeta\": {\n         \"bufferutil\": {",
    "output": "build(deps): Bump the npm_and_yarn group with 3 updates (#40594)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 7fd4a711f..598b5c40e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.24.5\",\n+        \"@babel/cli\": \"^7.24.7\",\n         \"@babel/core\": \"^7.24.5\",\n         \"@babel/preset-env\": \"^7.24.5\",\n         \"@docsearch/js\": \"^3.6.0\",\n@@ -289,13 +289,13 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.24.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.5.tgz\",\n-      \"integrity\": \"sha512-2qg1mYtJRsOOWF6IUwLP5jI42P8Cc0hQ5TmnjLrik/4DKouO8dFJN80HEz81VmVeUs97yuuf3vQ/9j7Elrcjlg==\",\n+      \"version\": \"7.24.7\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.7.tgz\",\n+      \"integrity\": \"sha512-8dfPprJgV4O14WTx+AQyEA+opgUKPrsIXX/MdL50J1n06EQJ6m1T+CdsJe0qEC0B/Xl85i+Un5KVAxd/PACX9A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.25\",\n-        \"commander\": \"^4.0.1\",\n+        \"commander\": \"^6.2.0\",\n         \"convert-source-map\": \"^2.0.0\",\n         \"fs-readdir-recursive\": \"^1.1.0\",\n         \"glob\": \"^7.2.0\",\n@@ -4326,9 +4326,9 @@\n       \"dev\": true\n     },\n     \"node_modules/commander\": {\n-      \"version\": \"4.1.1\",\n-      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-4.1.1.tgz\",\n-      \"integrity\": \"sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==\",\n+      \"version\": \"6.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-6.2.1.tgz\",\n+      \"integrity\": \"sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==\",\n       \"dev\": true,\n       \"engines\": {\n         \"node\": \">= 6\"\n@@ -10196,15 +10196,6 @@\n         \"seek-table\": \"bin/seek-bzip-table\"\n       }\n     },\n-    \"node_modules/seek-bzip/node_modules/commander\": {\n-      \"version\": \"6.2.1\",\n-      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-6.2.1.tgz\",\n-      \"integrity\": \"sha512-U7VdrJFnJgo4xjrHpTzu0yrHPGImdsmD95ZlgYSEajAn2JKzDhDTPG9kBTefmObL2w/ngeZnilk+OV9CG3d7UA==\",\n-      \"dev\": true,\n-      \"engines\": {\n-        \"node\": \">= 6\"\n-      }\n-    },\n     \"node_modules/select\": {\n       \"version\": \"1.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/select/-/select-1.1.2.tgz\",\ndiff --git a/package.json b/package.json\nindex 15bb9724e..b512ae132 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.24.5\",\n+    \"@babel/cli\": \"^7.24.7\",\n     \"@babel/core\": \"^7.24.5\",\n     \"@babel/preset-env\": \"^7.24.5\",\n     \"@docsearch/js\": \"^3.6.0\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.24.5 to 7.24.7 (#40545)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ad5b6a087..7fd4a711f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -28,7 +28,7 @@\n         \"@rollup/plugin-commonjs\": \"^25.0.8\",\n         \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n         \"@rollup/plugin-replace\": \"^5.0.5\",\n-        \"@stackblitz/sdk\": \"^1.9.0\",\n+        \"@stackblitz/sdk\": \"^1.10.0\",\n         \"autoprefixer\": \"^10.4.19\",\n         \"bundlewatch\": \"^0.3.3\",\n         \"clean-css-cli\": \"^5.6.3\",\n@@ -2898,9 +2898,9 @@\n       \"dev\": true\n     },\n     \"node_modules/@stackblitz/sdk\": {\n-      \"version\": \"1.9.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@stackblitz/sdk/-/sdk-1.9.0.tgz\",\n-      \"integrity\": \"sha512-3m6C7f8pnR5KXys/Hqx2x6ylnpqOak6HtnZI6T5keEO0yT+E4Spkw37VEbdwuC+2oxmjdgq6YZEgiKX7hM1GmQ==\",\n+      \"version\": \"1.10.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@stackblitz/sdk/-/sdk-1.10.0.tgz\",\n+      \"integrity\": \"sha512-IcvE9Xifo2c4/f+yNqjFM/OW5VTBPLed3TxsQ+n8n81Py358IqD5w0IYfFgV5gbDjp2g5H5YK2/Shls/kQNTWQ==\",\n       \"dev\": true\n     },\n     \"node_modules/@stylistic/stylelint-config\": {\ndiff --git a/package.json b/package.json\nindex 2664a0a8f..15bb9724e 100644\n--- a/package.json\n+++ b/package.json\n@@ -112,7 +112,7 @@\n     \"@rollup/plugin-commonjs\": \"^25.0.8\",\n     \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n     \"@rollup/plugin-replace\": \"^5.0.5\",\n-    \"@stackblitz/sdk\": \"^1.9.0\",\n+    \"@stackblitz/sdk\": \"^1.10.0\",\n     \"autoprefixer\": \"^10.4.19\",\n     \"bundlewatch\": \"^0.3.3\",\n     \"clean-css-cli\": \"^5.6.3\",",
    "output": "build(deps-dev): Bump @stackblitz/sdk from 1.9.0 to 1.10.0 (#40546)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/alerts.md b/site/content/docs/5.3/components/alerts.md\nindex deea8f2e9..8e3d99f53 100644\n--- a/site/content/docs/5.3/components/alerts.md\n+++ b/site/content/docs/5.3/components/alerts.md\n@@ -72,7 +72,7 @@ Similarly, you can use [flexbox utilities]({{< docsref \"/utilities/flex\" >}}) an\n \n {{< example >}}\n <div class=\"alert alert-primary d-flex align-items-center\" role=\"alert\">\n-  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"bi bi-exclamation-triangle-fill flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Warning:\">\n+  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"bi flex-shrink-0 me-2\" viewBox=\"0 0 16 16\" role=\"img\" aria-label=\"Warning:\">\n     <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n   </svg>\n   <div>",
    "output": "docs: drop unused `.bi-exclamation-triangle-fill` class"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 04d83ca9e..ad5b6a087 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -35,7 +35,7 @@\n         \"clipboard\": \"^2.0.11\",\n         \"cross-env\": \"^7.0.3\",\n         \"eslint\": \"^8.57.0\",\n-        \"eslint-config-xo\": \"^0.44.0\",\n+        \"eslint-config-xo\": \"^0.45.0\",\n         \"eslint-plugin-html\": \"^8.1.1\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^5.0.0\",\n@@ -5264,9 +5264,9 @@\n       }\n     },\n     \"node_modules/eslint-config-xo\": {\n-      \"version\": \"0.44.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-config-xo/-/eslint-config-xo-0.44.0.tgz\",\n-      \"integrity\": \"sha512-YG4gdaor0mJJi8UBeRJqDPO42MedTWYMaUyucF5bhm2pi/HS98JIxfFQmTLuyj6hGpQlAazNfyVnn7JuDn+Sew==\",\n+      \"version\": \"0.45.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-config-xo/-/eslint-config-xo-0.45.0.tgz\",\n+      \"integrity\": \"sha512-T30F2S2HKKmr/RoHopKE7wMUMWrsLMab1qFl2WyFJjETbD+l7p4hSQWpTVGW7TEbSKG1QBekwf6Jn9ZDPA6thA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"confusing-browser-globals\": \"1.0.11\"\ndiff --git a/package.json b/package.json\nindex c32c9c112..2664a0a8f 100644\n--- a/package.json\n+++ b/package.json\n@@ -119,7 +119,7 @@\n     \"clipboard\": \"^2.0.11\",\n     \"cross-env\": \"^7.0.3\",\n     \"eslint\": \"^8.57.0\",\n-    \"eslint-config-xo\": \"^0.44.0\",\n+    \"eslint-config-xo\": \"^0.45.0\",\n     \"eslint-plugin-html\": \"^8.1.1\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^5.0.0\",",
    "output": "build(deps-dev): Bump eslint-config-xo from 0.44.0 to 0.45.0 (#39967)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 286a4f5d5..04d83ca9e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -57,7 +57,7 @@\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.13.2\",\n-        \"nodemon\": \"^3.1.0\",\n+        \"nodemon\": \"^3.1.3\",\n         \"npm-run-all2\": \"^6.1.2\",\n         \"postcss\": \"^8.4.38\",\n         \"postcss-cli\": \"^11.0.0\",\n@@ -8507,9 +8507,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nodemon\": {\n-      \"version\": \"3.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.0.tgz\",\n-      \"integrity\": \"sha512-xqlktYlDMCepBJd43ZQhjWwMw2obW/JRvkrLxq5RCNcuDDX1DbcPT+qT1IlIIdf+DhnWs90JpTMe+Y5KxOchvA==\",\n+      \"version\": \"3.1.3\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.3.tgz\",\n+      \"integrity\": \"sha512-m4Vqs+APdKzDFpuaL9F9EVOF85+h070FnkHVEoU4+rmT6Vw0bmNl7s61VEkY/cJkL7RCv1p4urnUDUMrS5rk2w==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \"^3.5.2\",\ndiff --git a/package.json b/package.json\nindex 5da60b059..c32c9c112 100644\n--- a/package.json\n+++ b/package.json\n@@ -141,7 +141,7 @@\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.13.2\",\n-    \"nodemon\": \"^3.1.0\",\n+    \"nodemon\": \"^3.1.3\",\n     \"npm-run-all2\": \"^6.1.2\",\n     \"postcss\": \"^8.4.38\",\n     \"postcss-cli\": \"^11.0.0\",",
    "output": "build(deps-dev): Bump nodemon from 3.1.0 to 3.1.3 (#40530)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c71bc6a0d..e228b0dc4 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -25,7 +25,7 @@\n         \"@docsearch/js\": \"^3.6.0\",\n         \"@popperjs/core\": \"^2.11.8\",\n         \"@rollup/plugin-babel\": \"^6.0.4\",\n-        \"@rollup/plugin-commonjs\": \"^25.0.7\",\n+        \"@rollup/plugin-commonjs\": \"^25.0.8\",\n         \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n         \"@rollup/plugin-replace\": \"^5.0.5\",\n         \"@stackblitz/sdk\": \"^1.9.0\",\n@@ -2521,9 +2521,9 @@\n       }\n     },\n     \"node_modules/@rollup/plugin-commonjs\": {\n-      \"version\": \"25.0.7\",\n-      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.7.tgz\",\n-      \"integrity\": \"sha512-nEvcR+LRjEjsaSsc4x3XZfCCvZIaSMenZu/OiwOKGN2UhQpAYI7ru7czFvyWbErlpoGjnSX3D5Ch5FcMA3kRWQ==\",\n+      \"version\": \"25.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-25.0.8.tgz\",\n+      \"integrity\": \"sha512-ZEZWTK5n6Qde0to4vS9Mr5x/0UZoqCxPVR9KRUjU4kA2sO7GEUn1fop0DAwpO6z0Nw/kJON9bDmSxdWxO/TT1A==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@rollup/pluginutils\": \"^5.0.1\",\ndiff --git a/package.json b/package.json\nindex 19f44e838..1f5f00762 100644\n--- a/package.json\n+++ b/package.json\n@@ -109,7 +109,7 @@\n     \"@docsearch/js\": \"^3.6.0\",\n     \"@popperjs/core\": \"^2.11.8\",\n     \"@rollup/plugin-babel\": \"^6.0.4\",\n-    \"@rollup/plugin-commonjs\": \"^25.0.7\",\n+    \"@rollup/plugin-commonjs\": \"^25.0.8\",\n     \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n     \"@rollup/plugin-replace\": \"^5.0.5\",\n     \"@stackblitz/sdk\": \"^1.9.0\",",
    "output": "build(deps-dev): Bump @rollup/plugin-commonjs from 25.0.7 to 25.0.8 (#40527)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 88f12902c..c71bc6a0d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -38,7 +38,7 @@\n         \"eslint-config-xo\": \"^0.44.0\",\n         \"eslint-plugin-html\": \"^8.1.1\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n-        \"eslint-plugin-markdown\": \"^4.0.1\",\n+        \"eslint-plugin-markdown\": \"^5.0.0\",\n         \"eslint-plugin-unicorn\": \"^52.0.0\",\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n@@ -5392,9 +5392,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-markdown\": {\n-      \"version\": \"4.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-markdown/-/eslint-plugin-markdown-4.0.1.tgz\",\n-      \"integrity\": \"sha512-5/MnGvYU0i8MbHH5cg8S+Vl3DL+bqRNYshk1xUO86DilNBaxtTkhH+5FD0/yO03AmlI6+lfNFdk2yOw72EPzpA==\",\n+      \"version\": \"5.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-markdown/-/eslint-plugin-markdown-5.0.0.tgz\",\n+      \"integrity\": \"sha512-kY2u9yDhzvfZ0kmRTsvgm3mTnvZgTSGIIPeHg3yesSx4R5CTCnITUjCPhzCD1MUhNcqHU5Tr6lzx+02EclVPbw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"mdast-util-from-markdown\": \"^0.8.5\"\ndiff --git a/package.json b/package.json\nindex 1fac1f247..19f44e838 100644\n--- a/package.json\n+++ b/package.json\n@@ -122,7 +122,7 @@\n     \"eslint-config-xo\": \"^0.44.0\",\n     \"eslint-plugin-html\": \"^8.1.1\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n-    \"eslint-plugin-markdown\": \"^4.0.1\",\n+    \"eslint-plugin-markdown\": \"^5.0.0\",\n     \"eslint-plugin-unicorn\": \"^52.0.0\",\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-markdown from 4.0.1 to 5.0.0 (#39964)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 19172fc24..88f12902c 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.17.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.76.0\",\n+        \"sass\": \"^1.77.4\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.6.1\",\n@@ -10146,9 +10146,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.76.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.76.0.tgz\",\n-      \"integrity\": \"sha512-nc3LeqvF2FNW5xGF1zxZifdW3ffIz5aBb7I7tSvOoNu7z1RQ6pFt9MBuiPtjgaI62YWrM/txjWlOCFiGtf2xpw==\",\n+      \"version\": \"1.77.4\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.77.4.tgz\",\n+      \"integrity\": \"sha512-vcF3Ckow6g939GMA4PeU7b2K/9FALXk2KF9J87txdHzXbUF9XRQRwSxcAs/fGaTnJeBFd7UoV22j3lzMLdM0Pw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex e7c8d662b..1fac1f247 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.17.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.76.0\",\n+    \"sass\": \"^1.77.4\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.6.1\",",
    "output": "build(deps-dev): Bump sass from 1.76.0 to 1.77.4 (#40519)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/introduction.md b/site/content/docs/5.3/getting-started/introduction.md\nindex b76b2d47d..96318ebce 100644\n--- a/site/content/docs/5.3/getting-started/introduction.md\n+++ b/site/content/docs/5.3/getting-started/introduction.md\n@@ -32,7 +32,7 @@ Get started by including Bootstrap's production-ready CSS and JavaScript via CDN\n    </html>\n    ```\n \n-2. **Include Bootstrap's CSS and JS.** Place the `<link>` tag in the `<head>` for our CSS, and the `<script>` tag for our JavaScript bundle (including Popper for positioning dropdowns, poppers, and tooltips) before the closing `</body>`. Learn more about our [CDN links](#cdn-links).\n+2. **Include Bootstrap's CSS and JS.** Place the `<link>` tag in the `<head>` for our CSS, and the `<script>` tag for our JavaScript bundle (including Popper for positioning dropdowns, popovers, and tooltips) before the closing `</body>`. Learn more about our [CDN links](#cdn-links).\n \n    ```html\n    <!doctype html>",
    "output": "docs: fix typo in the getting started introduction (#40522)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/icons.yml b/site/data/icons.yml\nindex 7258ecab6..ee5b8004c 100644\n--- a/site/data/icons.yml\n+++ b/site/data/icons.yml\n@@ -18,7 +18,7 @@ more:\n   - name: Dripicons\n     website: http://demo.amitjakhu.com/dripicons/\n   - name: Ikons\n-    website: http://ikons.piotrkwiatkowski.co.uk/\n+    website: https://ikons.piotrkwiatkowski.co.uk/\n   - name: Icons8\n     website: https://icons8.com/\n   - name: icofont",
    "output": "docs: use HTTPS link to IKONS website (#40507)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/components/navbar.md b/site/content/docs/5.3/components/navbar.md\nindex ab6c2305c..4b46eb095 100644\n--- a/site/content/docs/5.3/components/navbar.md\n+++ b/site/content/docs/5.3/components/navbar.md\n@@ -428,7 +428,7 @@ Navbar themes are easier than ever thanks to Bootstrap's combination of Sass and\n   <!-- Navbar content -->\n </nav>\n \n-<nav class=\"navbar\" style=\"background-color: #e3f2fd;\">\n+<nav class=\"navbar\" style=\"background-color: #e3f2fd;\" data-bs-theme=\"light\">\n   <!-- Navbar content -->\n </nav>\n ```",
    "output": "docs: add missing `data-bs-theme=\"light\"` in navbars color schemes markup (#40504)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/getting-started/introduction.md b/site/content/docs/5.3/getting-started/introduction.md\nindex b0f7dabc5..b76b2d47d 100644\n--- a/site/content/docs/5.3/getting-started/introduction.md\n+++ b/site/content/docs/5.3/getting-started/introduction.md\n@@ -83,6 +83,7 @@ You can also use the CDN to fetch any of our [additional builds listed in the Co\n \n Curious which components explicitly require our JavaScript and Popper? If you're at all unsure about the general page structure, keep reading for an example page template.\n \n+- Accordions for extending our Collapse plugin\n - Alerts for dismissing\n - Buttons for toggling states and checkbox/radio functionality\n - Carousel for all slide behaviors, controls, and indicators",
    "output": "docs: add Accordion component in the JS components section (#39980)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/404.md b/site/content/404.md\nindex 14634b216..08359be3e 100644\n--- a/site/content/404.md\n+++ b/site/content/404.md\n@@ -5,7 +5,7 @@ description: \"\"\n url: /404.html\n robots: noindex,follow\n sitemap:\n-  exclude: true\n+  disable: true\n ---\n \n <div class=\"text-center py-5\">\ndiff --git a/site/content/docs/5.3/_index.html b/site/content/docs/5.3/_index.html\nindex 1e1800699..f182bde37 100644\n--- a/site/content/docs/5.3/_index.html\n+++ b/site/content/docs/5.3/_index.html\n@@ -1,6 +1,6 @@\n ---\n layout: redirect\n sitemap:\n-  exclude: true\n+  disable: true\n redirect: \"/docs/5.3/getting-started/introduction/\"\n ---\ndiff --git a/site/content/docs/5.3/docsref.md b/site/content/docs/5.3/docsref.md\nindex 3f36dd278..5a16470c5 100644\n--- a/site/content/docs/5.3/docsref.md\n+++ b/site/content/docs/5.3/docsref.md\n@@ -6,7 +6,7 @@ aliases: \"/docsref/\"\n toc: true\n robots: noindex,follow\n sitemap:\n-  exclude: true\n+  disable: true\n ---\n \n ## Buttons\ndiff --git a/site/content/docs/_index.html b/site/content/docs/_index.html\nindex 1e1800699..f182bde37 100644\n--- a/site/content/docs/_index.html\n+++ b/site/content/docs/_index.html\n@@ -1,6 +1,6 @@\n ---\n layout: redirect\n sitemap:\n-  exclude: true\n+  disable: true\n redirect: \"/docs/5.3/getting-started/introduction/\"\n ---\ndiff --git a/site/layouts/sitemap.xml b/site/layouts/sitemap.xml\ndeleted file mode 100644\nindex 9c626df18..000000000\n--- a/site/layouts/sitemap.xml\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-{{ printf \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>\" | safeHTML }}\n-<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n-  {{- range where .Data.Pages \"Params.sitemap.exclude\" \"ne\" true -}}{{ if .Permalink }}\n-  <url>\n-    <loc>{{ .Permalink }}</loc>{{ if not .Lastmod.IsZero }}\n-    <lastmod>{{ safeHTML (.Lastmod.Format \"2006-01-02T15:04:05-07:00\") }}</lastmod>{{ end }}{{ with .Sitemap.ChangeFreq }}\n-    <changefreq>{{ . }}</changefreq>{{ end }}{{ if ge .Sitemap.Priority 0.0 }}\n-    <priority>{{ .Sitemap.Priority }}</priority>{{ end }}{{ if .IsTranslated }}{{ range .Translations }}\n-    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.LanguageCode }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n-    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.LanguageCode }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n-  </url>{{ end }}{{ end }}\n-</urlset>",
    "output": "docs: migrate to the built-in sitemap template (#39951)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 10cfb5b25..c63d87f33 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.4.0\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-        \"terser\": \"^5.30.4\",\n+        \"terser\": \"^5.31.0\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11450,9 +11450,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.30.4\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.30.4.tgz\",\n-      \"integrity\": \"sha512-xRdd0v64a8mFK9bnsKVdoNP9GQIKUAaJPTaqEQDL4w/J8WaW4sWXXoMZ+6SimPkfT5bElreXf8m9HnmPc3E1BQ==\",\n+      \"version\": \"5.31.0\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.31.0.tgz\",\n+      \"integrity\": \"sha512-Q1JFAoUKE5IMfI4Z/lkE/E6+SwgzO+x4tq4v1AyBLRj8VSYvRO6A/rQrPg1yud4g0En9EKI1TvFRF2tQFcoUkg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex d89526835..8fede3b03 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.4.0\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-    \"terser\": \"^5.30.4\",\n+    \"terser\": \"^5.31.0\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.30.4 to 5.31.0 (#39939)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 66bde3859..10cfb5b25 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.122.3\",\n+        \"hugo-bin\": \"^0.122.5\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6755,9 +6755,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.122.3\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.122.3.tgz\",\n-      \"integrity\": \"sha512-t3is8dMTLhAQFwdZxCgMydF2Fd7+6SUPCGoIzsZnQ1ZqdGGSQUA1spga9MIwwMVbTjfG0wZ6efYLxyqqjPviDA==\",\n+      \"version\": \"0.122.5\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.122.5.tgz\",\n+      \"integrity\": \"sha512-Iuua9s1aGQb8kWeAjklfryEPLF/4jsSbRHehRe3vyS3Mgb7iuZjKI9p8yn6ha5LatVJREHn4qznZ2D5IPGSCUA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 87eff3da6..d89526835 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.122.3\",\n+    \"hugo-bin\": \"^0.122.5\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.122.3 to 0.122.5 (#39949)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 389a28a6d..66bde3859 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.17.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.75.0\",\n+        \"sass\": \"^1.76.0\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.4.0\",\n@@ -10266,9 +10266,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.75.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.75.0.tgz\",\n-      \"integrity\": \"sha512-ShMYi3WkrDWxExyxSZPst4/okE9ts46xZmJDSawJQrnte7M1V9fScVB+uNXOVKRBt0PggHOwoZcn8mYX4trnBw==\",\n+      \"version\": \"1.76.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.76.0.tgz\",\n+      \"integrity\": \"sha512-nc3LeqvF2FNW5xGF1zxZifdW3ffIz5aBb7I7tSvOoNu7z1RQ6pFt9MBuiPtjgaI62YWrM/txjWlOCFiGtf2xpw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 045dc3b8d..87eff3da6 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.17.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.75.0\",\n+    \"sass\": \"^1.76.0\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.4.0\",",
    "output": "build(deps-dev): Bump sass from 1.75.0 to 1.76.0 (#39942)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 969fb2aa9..c934c2704 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.24.1\",\n+        \"@babel/cli\": \"^7.24.5\",\n         \"@babel/core\": \"^7.24.4\",\n         \"@babel/preset-env\": \"^7.24.4\",\n         \"@docsearch/js\": \"^3.6.0\",\n@@ -279,9 +279,9 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.24.1\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.1.tgz\",\n-      \"integrity\": \"sha512-HbmrtxyFUr34LwAlV9jS+sSIjUp4FpdtIMGwgufY3AsxrIfsh/HxlMTywsONAZsU0RMYbZtbZFpUCrSGs7o0EA==\",\n+      \"version\": \"7.24.5\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.5.tgz\",\n+      \"integrity\": \"sha512-2qg1mYtJRsOOWF6IUwLP5jI42P8Cc0hQ5TmnjLrik/4DKouO8dFJN80HEz81VmVeUs97yuuf3vQ/9j7Elrcjlg==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/trace-mapping\": \"^0.3.25\",\ndiff --git a/package.json b/package.json\nindex eba703296..2452000eb 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.24.1\",\n+    \"@babel/cli\": \"^7.24.5\",\n     \"@babel/core\": \"^7.24.4\",\n     \"@babel/preset-env\": \"^7.24.4\",\n     \"@docsearch/js\": \"^3.6.0\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.24.1 to 7.24.5 (#39938)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex dec46566f..4114956e5 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -43,7 +43,7 @@\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.121.1\",\n+        \"hugo-bin\": \"^0.122.3\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6755,9 +6755,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.121.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.121.1.tgz\",\n-      \"integrity\": \"sha512-q+6vnm1lYT9T8oCY32RtZGTmfNvl5oXbJjh1gpBDigdE9/4sdQesRP/JgYtiXag3dkUvpkXxRZmfgZA1adGC3g==\",\n+      \"version\": \"0.122.3\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.122.3.tgz\",\n+      \"integrity\": \"sha512-t3is8dMTLhAQFwdZxCgMydF2Fd7+6SUPCGoIzsZnQ1ZqdGGSQUA1spga9MIwwMVbTjfG0wZ6efYLxyqqjPviDA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\ndiff --git a/package.json b/package.json\nindex 87683ad2d..1efdcef7e 100644\n--- a/package.json\n+++ b/package.json\n@@ -127,7 +127,7 @@\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.121.1\",\n+    \"hugo-bin\": \"^0.122.3\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.121.1 to 0.122.3 (#39921)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex d043d01e7..dec46566f 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -36,7 +36,7 @@\n         \"cross-env\": \"^7.0.3\",\n         \"eslint\": \"^8.57.0\",\n         \"eslint-config-xo\": \"^0.44.0\",\n-        \"eslint-plugin-html\": \"^8.1.0\",\n+        \"eslint-plugin-html\": \"^8.1.1\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^4.0.1\",\n         \"eslint-plugin-unicorn\": \"^52.0.0\",\n@@ -5347,9 +5347,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-html\": {\n-      \"version\": \"8.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-8.1.0.tgz\",\n-      \"integrity\": \"sha512-5bRZQwxZew2Yo9Fa8diz2C9RmzIw9Gs4yzmmjUcpuzhdLW8aVcDtYzEHhNNdt01Z0m4AzSJNuY63RXvzStvDgA==\",\n+      \"version\": \"8.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-8.1.1.tgz\",\n+      \"integrity\": \"sha512-6qmlJsc40D2m3Dn9oEH+0PAOkJhxVu0f5sVItqpCE0YWgYnyP4xCjBc3UWTHaJcY9ARkWOLIIuXLq0ndRnQOHw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"htmlparser2\": \"^9.1.0\"\ndiff --git a/package.json b/package.json\nindex 38fee4c57..87683ad2d 100644\n--- a/package.json\n+++ b/package.json\n@@ -120,7 +120,7 @@\n     \"cross-env\": \"^7.0.3\",\n     \"eslint\": \"^8.57.0\",\n     \"eslint-config-xo\": \"^0.44.0\",\n-    \"eslint-plugin-html\": \"^8.1.0\",\n+    \"eslint-plugin-html\": \"^8.1.1\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^4.0.1\",\n     \"eslint-plugin-unicorn\": \"^52.0.0\",",
    "output": "build(deps-dev): Bump eslint-plugin-html from 8.1.0 to 8.1.1 (#39922)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex c946049b2..d043d01e7 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.3.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-        \"terser\": \"^5.30.3\",\n+        \"terser\": \"^5.30.4\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11450,9 +11450,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.30.3\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.30.3.tgz\",\n-      \"integrity\": \"sha512-STdUgOUx8rLbMGO9IOwHLpCqolkDITFFQSMYYwKE1N2lY6MVSaeoi10z/EhWxRc6ybqoVmKSkhKYH/XUpl7vSA==\",\n+      \"version\": \"5.30.4\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.30.4.tgz\",\n+      \"integrity\": \"sha512-xRdd0v64a8mFK9bnsKVdoNP9GQIKUAaJPTaqEQDL4w/J8WaW4sWXXoMZ+6SimPkfT5bElreXf8m9HnmPc3E1BQ==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex a37dacd83..38fee4c57 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.3.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-    \"terser\": \"^5.30.3\",\n+    \"terser\": \"^5.30.4\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.30.3 to 5.30.4 (#39919)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 258255771..e99f6cc62 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.14.3\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.74.1\",\n+        \"sass\": \"^1.75.0\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.3.1\",\n@@ -10266,9 +10266,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.74.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.74.1.tgz\",\n-      \"integrity\": \"sha512-w0Z9p/rWZWelb88ISOLyvqTWGmtmu2QJICqDBGyNnfG4OUnPX9BBjjYIXUpXCMOOg5MQWNpqzt876la1fsTvUA==\",\n+      \"version\": \"1.75.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.75.0.tgz\",\n+      \"integrity\": \"sha512-ShMYi3WkrDWxExyxSZPst4/okE9ts46xZmJDSawJQrnte7M1V9fScVB+uNXOVKRBt0PggHOwoZcn8mYX4trnBw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 58929900a..f54d9e49a 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.14.3\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.74.1\",\n+    \"sass\": \"^1.75.0\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.3.1\",",
    "output": "build(deps-dev): Bump sass from 1.74.1 to 1.75.0 (#39904)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 2594dd666..61dedcc2d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -36,7 +36,7 @@\n         \"cross-env\": \"^7.0.3\",\n         \"eslint\": \"^8.57.0\",\n         \"eslint-config-xo\": \"^0.44.0\",\n-        \"eslint-plugin-html\": \"^8.0.0\",\n+        \"eslint-plugin-html\": \"^8.1.0\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^4.0.1\",\n         \"eslint-plugin-unicorn\": \"^52.0.0\",\n@@ -5334,9 +5334,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-html\": {\n-      \"version\": \"8.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-8.0.0.tgz\",\n-      \"integrity\": \"sha512-NINLBAXM3mLa3k5Ezr/kNLHAJJwbot6lS7Ro+SUftDw4cA51KMmcDuCf98GP6Q6kTVPY1hIggzskxAdxfUPXSA==\",\n+      \"version\": \"8.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-8.1.0.tgz\",\n+      \"integrity\": \"sha512-5bRZQwxZew2Yo9Fa8diz2C9RmzIw9Gs4yzmmjUcpuzhdLW8aVcDtYzEHhNNdt01Z0m4AzSJNuY63RXvzStvDgA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"htmlparser2\": \"^9.1.0\"\ndiff --git a/package.json b/package.json\nindex 63dd3ac2b..6a92b7fb6 100644\n--- a/package.json\n+++ b/package.json\n@@ -120,7 +120,7 @@\n     \"cross-env\": \"^7.0.3\",\n     \"eslint\": \"^8.57.0\",\n     \"eslint-config-xo\": \"^0.44.0\",\n-    \"eslint-plugin-html\": \"^8.0.0\",\n+    \"eslint-plugin-html\": \"^8.1.0\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^4.0.1\",\n     \"eslint-plugin-unicorn\": \"^52.0.0\",",
    "output": "build(deps-dev): Bump eslint-plugin-html from 8.0.0 to 8.1.0 (#39902)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.bundlewatch.config.json b/.bundlewatch.config.json\nindex bb0a5a85a..6f680664c 100644\n--- a/.bundlewatch.config.json\n+++ b/.bundlewatch.config.json\n@@ -38,7 +38,7 @@\n     },\n     {\n       \"path\": \"./dist/js/bootstrap.bundle.min.js\",\n-      \"maxSize\": \"23.25 kB\"\n+      \"maxSize\": \"23.5 kB\"\n     },\n     {\n       \"path\": \"./dist/js/bootstrap.esm.js\",\ndiff --git a/package-lock.json b/package-lock.json\nindex a1e620926..d97025930 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -69,7 +69,7 @@\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.3.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-        \"terser\": \"^5.29.2\",\n+        \"terser\": \"^5.30.3\",\n         \"vnu-jar\": \"23.4.11\"\n       },\n       \"peerDependencies\": {\n@@ -11419,9 +11419,9 @@\n       }\n     },\n     \"node_modules/terser\": {\n-      \"version\": \"5.29.2\",\n-      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.29.2.tgz\",\n-      \"integrity\": \"sha512-ZiGkhUBIM+7LwkNjXYJq8svgkd+QK3UUr0wJqY4MieaezBSAIPgbSPZyIx0idM6XWK5CMzSWa8MJIzmRcB8Caw==\",\n+      \"version\": \"5.30.3\",\n+      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.30.3.tgz\",\n+      \"integrity\": \"sha512-STdUgOUx8rLbMGO9IOwHLpCqolkDITFFQSMYYwKE1N2lY6MVSaeoi10z/EhWxRc6ybqoVmKSkhKYH/XUpl7vSA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@jridgewell/source-map\": \"^0.3.3\",\ndiff --git a/package.json b/package.json\nindex f4f061929..3299d384c 100644\n--- a/package.json\n+++ b/package.json\n@@ -153,7 +153,7 @@\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.3.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.1.0\",\n-    \"terser\": \"^5.29.2\",\n+    \"terser\": \"^5.30.3\",\n     \"vnu-jar\": \"23.4.11\"\n   },\n   \"files\": [",
    "output": "build(deps-dev): Bump terser from 5.29.2 to 5.30.3 (#39886)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 7d6b6b8a8..a1e620926 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -64,7 +64,7 @@\n         \"rollup\": \"^4.13.2\",\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n-        \"sass\": \"^1.72.0\",\n+        \"sass\": \"^1.74.1\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.3.1\",\n@@ -10235,9 +10235,9 @@\n       \"dev\": true\n     },\n     \"node_modules/sass\": {\n-      \"version\": \"1.72.0\",\n-      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.72.0.tgz\",\n-      \"integrity\": \"sha512-Gpczt3WA56Ly0Mn8Sl21Vj94s1axi9hDIzDFn9Ph9x3C3p4nNyvsqJoQyVXKou6cBlfFWEgRW4rT8Tb4i3XnVA==\",\n+      \"version\": \"1.74.1\",\n+      \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.74.1.tgz\",\n+      \"integrity\": \"sha512-w0Z9p/rWZWelb88ISOLyvqTWGmtmu2QJICqDBGyNnfG4OUnPX9BBjjYIXUpXCMOOg5MQWNpqzt876la1fsTvUA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \">=3.0.0 <4.0.0\",\ndiff --git a/package.json b/package.json\nindex 361ac0c04..f4f061929 100644\n--- a/package.json\n+++ b/package.json\n@@ -148,7 +148,7 @@\n     \"rollup\": \"^4.13.2\",\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n-    \"sass\": \"^1.72.0\",\n+    \"sass\": \"^1.74.1\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.3.1\",",
    "output": "build(deps-dev): Bump sass from 1.72.0 to 1.74.1 (#39884)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.eslintrc.json b/.eslintrc.json\nindex b4262cf6e..d6fbffae0 100644\n--- a/.eslintrc.json\n+++ b/.eslintrc.json\n@@ -85,6 +85,7 @@\n     \"strict\": \"error\",\n     \"unicorn/explicit-length-check\": \"off\",\n     \"unicorn/filename-case\": \"off\",\n+    \"unicorn/no-anonymous-default-export\": \"off\",\n     \"unicorn/no-array-callback-reference\": \"off\",\n     \"unicorn/no-array-method-this-argument\": \"off\",\n     \"unicorn/no-null\": \"off\",\ndiff --git a/package-lock.json b/package-lock.json\nindex 6a205d221..7d6b6b8a8 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -39,7 +39,7 @@\n         \"eslint-plugin-html\": \"^8.0.0\",\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^4.0.1\",\n-        \"eslint-plugin-unicorn\": \"^51.0.1\",\n+        \"eslint-plugin-unicorn\": \"^52.0.0\",\n         \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n@@ -5396,9 +5396,9 @@\n       }\n     },\n     \"node_modules/eslint-plugin-unicorn\": {\n-      \"version\": \"51.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-51.0.1.tgz\",\n-      \"integrity\": \"sha512-MuR/+9VuB0fydoI0nIn2RDA5WISRn4AsJyNSaNKLVwie9/ONvQhxOBbkfSICBPnzKrB77Fh6CZZXjgTt/4Latw==\",\n+      \"version\": \"52.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-unicorn/-/eslint-plugin-unicorn-52.0.0.tgz\",\n+      \"integrity\": \"sha512-1Yzm7/m+0R4djH0tjDjfVei/ju2w3AzUGjG6q8JnuNIL5xIwsflyCooW5sfBvQp2pMYQFSWWCFONsjCax1EHng==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@babel/helper-validator-identifier\": \"^7.22.20\",\ndiff --git a/package.json b/package.json\nindex 614c6e369..361ac0c04 100644\n--- a/package.json\n+++ b/package.json\n@@ -123,7 +123,7 @@\n     \"eslint-plugin-html\": \"^8.0.0\",\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^4.0.1\",\n-    \"eslint-plugin-unicorn\": \"^51.0.1\",\n+    \"eslint-plugin-unicorn\": \"^52.0.0\",\n     \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",",
    "output": "build(deps-dev): Bump eslint-plugin-unicorn from 51.0.1 to 52.0.0 (#39883)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex ebbce6a94..a23d58cd1 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"eslint-plugin-import\": \"^2.29.1\",\n         \"eslint-plugin-markdown\": \"^4.0.1\",\n         \"eslint-plugin-unicorn\": \"^51.0.1\",\n-        \"find-unused-sass-variables\": \"^5.0.0\",\n+        \"find-unused-sass-variables\": \"^6.0.0\",\n         \"globby\": \"^14.0.1\",\n         \"hammer-simulator\": \"0.0.1\",\n         \"hugo-bin\": \"^0.121.1\",\n@@ -5953,17 +5953,17 @@\n       }\n     },\n     \"node_modules/find-unused-sass-variables\": {\n-      \"version\": \"5.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-5.0.0.tgz\",\n-      \"integrity\": \"sha512-hN4GJEiHRfJBuct5j/oG6coNHrmHY+qAuh2hScUhZvA+sSbgWETvYW6fZKEZW7vyT/QY5FTEyHn6vZhZoKzxmA==\",\n+      \"version\": \"6.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/find-unused-sass-variables/-/find-unused-sass-variables-6.0.0.tgz\",\n+      \"integrity\": \"sha512-qV2/G0gbmbYz1uPHlsCIYbqULg3obUfiAxR38SKu+W3w5m17Z2Jrra/5WBjz5m5ul9ig+6Ct6cPVRzcGTyw9rg==\",\n       \"dev\": true,\n       \"dependencies\": {\n-        \"commander\": \"^10.0.1\",\n+        \"commander\": \"^12.0.0\",\n         \"escape-string-regexp\": \"^5.0.0\",\n         \"glob\": \"^7.2.3\",\n         \"picocolors\": \"^1.0.0\",\n-        \"postcss\": \"^8.4.23\",\n-        \"postcss-scss\": \"^4.0.6\",\n+        \"postcss\": \"^8.4.38\",\n+        \"postcss-scss\": \"^4.0.9\",\n         \"strip-bom\": \"^5.0.0\"\n       },\n       \"bin\": {\n@@ -5971,19 +5971,19 @@\n         \"fusv\": \"bin/cli.js\"\n       },\n       \"engines\": {\n-        \"node\": \"^14.14.0 || >=16.0.0\"\n+        \"node\": \">=18\"\n       },\n       \"funding\": {\n         \"url\": \"https://github.com/sponsors/XhmikosR\"\n       }\n     },\n     \"node_modules/find-unused-sass-variables/node_modules/commander\": {\n-      \"version\": \"10.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-10.0.1.tgz\",\n-      \"integrity\": \"sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==\",\n+      \"version\": \"12.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.0.0.tgz\",\n+      \"integrity\": \"sha512-MwVNWlYjDTtOjX5PiD7o5pK0UrFU/OYgcJfjjK4RaHZETNtjJqrZa9Y9ds88+A+f+d5lv+561eZ+yCKoS3gbAA==\",\n       \"dev\": true,\n       \"engines\": {\n-        \"node\": \">=14\"\n+        \"node\": \">=18\"\n       }\n     },\n     \"node_modules/find-unused-sass-variables/node_modules/escape-string-regexp\": {\ndiff --git a/package.json b/package.json\nindex e07c2e277..11316e004 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"eslint-plugin-import\": \"^2.29.1\",\n     \"eslint-plugin-markdown\": \"^4.0.1\",\n     \"eslint-plugin-unicorn\": \"^51.0.1\",\n-    \"find-unused-sass-variables\": \"^5.0.0\",\n+    \"find-unused-sass-variables\": \"^6.0.0\",\n     \"globby\": \"^14.0.1\",\n     \"hammer-simulator\": \"0.0.1\",\n     \"hugo-bin\": \"^0.121.1\",",
    "output": "build(deps-dev): Bump find-unused-sass-variables from 5.0.0 to 6.0.0 (#39858)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 27f8cbc93..ebbce6a94 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -67,7 +67,7 @@\n         \"sass\": \"^1.72.0\",\n         \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n-        \"stylelint\": \"^16.3.0\",\n+        \"stylelint\": \"^16.3.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n         \"terser\": \"^5.29.2\",\n         \"vnu-jar\": \"23.4.11\"\n@@ -10975,9 +10975,9 @@\n       \"dev\": true\n     },\n     \"node_modules/stylelint\": {\n-      \"version\": \"16.3.0\",\n-      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-16.3.0.tgz\",\n-      \"integrity\": \"sha512-hqC6xNTbQ5HRGQXfIW4HwXcx09raIFz4W4XFbraeqWqYRVVY/ibYvI0dsu0ORMQY8re2bpDdCAeIa2cm+QJ4Sw==\",\n+      \"version\": \"16.3.1\",\n+      \"resolved\": \"https://registry.npmjs.org/stylelint/-/stylelint-16.3.1.tgz\",\n+      \"integrity\": \"sha512-/JOwQnBvxEKOT2RtNgGpBVXnCSMBgKOL2k7w0K52htwCyJls4+cHvc4YZgXlVoAZS9QJd2DgYAiRnja96pTgxw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@csstools/css-parser-algorithms\": \"^2.6.1\",\ndiff --git a/package.json b/package.json\nindex 5c994255d..e07c2e277 100644\n--- a/package.json\n+++ b/package.json\n@@ -151,7 +151,7 @@\n     \"sass\": \"^1.72.0\",\n     \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n-    \"stylelint\": \"^16.3.0\",\n+    \"stylelint\": \"^16.3.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n     \"terser\": \"^5.29.2\",\n     \"vnu-jar\": \"23.4.11\"",
    "output": "build(deps-dev): Bump stylelint from 16.3.0 to 16.3.1 (#39857)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/404.md b/site/content/404.md\nindex de003f149..14634b216 100644\n--- a/site/content/404.md\n+++ b/site/content/404.md\n@@ -4,7 +4,8 @@ layout: 404\n description: \"\"\n url: /404.html\n robots: noindex,follow\n-sitemap_exclude: true\n+sitemap:\n+  exclude: true\n ---\n \n <div class=\"text-center py-5\">\ndiff --git a/site/content/docs/5.3/_index.html b/site/content/docs/5.3/_index.html\nindex b04e391bc..1e1800699 100644\n--- a/site/content/docs/5.3/_index.html\n+++ b/site/content/docs/5.3/_index.html\n@@ -1,5 +1,6 @@\n ---\n layout: redirect\n-sitemap_exclude: true\n+sitemap:\n+  exclude: true\n redirect: \"/docs/5.3/getting-started/introduction/\"\n ---\ndiff --git a/site/content/docs/5.3/docsref.md b/site/content/docs/5.3/docsref.md\nindex 6b811f47d..3f36dd278 100644\n--- a/site/content/docs/5.3/docsref.md\n+++ b/site/content/docs/5.3/docsref.md\n@@ -5,7 +5,8 @@ description: Examples of Bootstrap's documentation-specific components and style\n aliases: \"/docsref/\"\n toc: true\n robots: noindex,follow\n-sitemap_exclude: true\n+sitemap:\n+  exclude: true\n ---\n \n ## Buttons\ndiff --git a/site/content/docs/_index.html b/site/content/docs/_index.html\nindex b04e391bc..1e1800699 100644\n--- a/site/content/docs/_index.html\n+++ b/site/content/docs/_index.html\n@@ -1,5 +1,6 @@\n ---\n layout: redirect\n-sitemap_exclude: true\n+sitemap:\n+  exclude: true\n redirect: \"/docs/5.3/getting-started/introduction/\"\n ---\ndiff --git a/site/layouts/sitemap.xml b/site/layouts/sitemap.xml\nindex 869f1cbe8..9c626df18 100644\n--- a/site/layouts/sitemap.xml\n+++ b/site/layouts/sitemap.xml\n@@ -1,12 +1,12 @@\n {{ printf \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?>\" | safeHTML }}\n <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n-  {{- range .Data.Pages -}}{{ if and .Permalink (ne .Params.sitemap_exclude true) }}\n+  {{- range where .Data.Pages \"Params.sitemap.exclude\" \"ne\" true -}}{{ if .Permalink }}\n   <url>\n     <loc>{{ .Permalink }}</loc>{{ if not .Lastmod.IsZero }}\n     <lastmod>{{ safeHTML (.Lastmod.Format \"2006-01-02T15:04:05-07:00\") }}</lastmod>{{ end }}{{ with .Sitemap.ChangeFreq }}\n     <changefreq>{{ . }}</changefreq>{{ end }}{{ if ge .Sitemap.Priority 0.0 }}\n     <priority>{{ .Sitemap.Priority }}</priority>{{ end }}{{ if .IsTranslated }}{{ range .Translations }}\n-    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.Lang }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n-    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.Lang }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n+    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.LanguageCode }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n+    <xhtml:link rel=\"alternate\" hreflang=\"{{ .Language.LanguageCode }}\" href=\"{{ .Permalink }}\"/>{{ end }}\n   </url>{{ end }}{{ end }}\n </urlset>",
    "output": "docs: update sitemap template (#39819)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/versions.md b/site/content/docs/versions.md\nindex c420de2a1..a61388391 100644\n--- a/site/content/docs/versions.md\n+++ b/site/content/docs/versions.md\n@@ -13,7 +13,7 @@ description: An appendix of hosted documentation for nearly every release of Boo\n     {{- range $i, $version := $versions }}\n       {{- $len := len $versions -}}\n       {{ if (eq $i 0) }}<div class=\"list-group\">{{ end }}\n-        <a class=\"list-group-item list-group-item-action py-2 text-primary{{ if (eq $version $.Site.Params.docs_version) }} d-flex justify-content-between align-items-center{{ end }}\" href=\"{{ $release.baseurl }}/{{ $version }}/\">\n+        <a class=\"list-group-item list-group-item-action py-2 text-primary{{ if (eq $version $.Site.Params.docs_version) }} d-flex justify-content-between align-items-center{{ end }}\" href=\"{{ urls.JoinPath $release.baseurl $version \"/\" }}\">\n           {{ $version }}\n           {{ if (eq $version $.Site.Params.docs_version) -}}\n           <span class=\"badge text-bg-primary\">Latest</span>\ndiff --git a/site/layouts/partials/docs-sidebar.html b/site/layouts/partials/docs-sidebar.html\nindex 891a47306..51e7bac4f 100644\n--- a/site/layouts/partials/docs-sidebar.html\n+++ b/site/layouts/partials/docs-sidebar.html\n@@ -36,7 +36,8 @@\n     {{- else }}\n       <li class=\"bd-links-span-all mt-1 mb-3 mx-4 border-top\"></li>\n       <li class=\"bd-links-span-all\">\n-        <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/\" class=\"bd-links-link d-inline-block rounded small {{ if $is_active_group }} active{{ end }}\"{{ if $is_active_group }} aria-current=\"page\"{{ end }}>\n+        {{- $href := urls.JoinPath \"/docs\" $.Site.Params.docs_version $group_slug \"/\" }}\n+        <a href=\"{{ $href }}\" class=\"bd-links-link d-inline-block rounded small{{ if $is_active_group }} active{{ end }}\"{{ if $is_active_group }} aria-current=\"page\"{{ end }}>\n           {{ $group.title }}\n         </a>\n       </li>",
    "output": "docs: use `urls.JoinPath` in more places (#39778)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 1b8ebdd51..a8a02c80e 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -19,7 +19,7 @@\n       ],\n       \"license\": \"MIT\",\n       \"devDependencies\": {\n-        \"@babel/cli\": \"^7.23.9\",\n+        \"@babel/cli\": \"^7.24.1\",\n         \"@babel/core\": \"^7.24.1\",\n         \"@babel/preset-env\": \"^7.24.0\",\n         \"@docsearch/js\": \"^3.6.0\",\n@@ -279,12 +279,12 @@\n       }\n     },\n     \"node_modules/@babel/cli\": {\n-      \"version\": \"7.23.9\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.23.9.tgz\",\n-      \"integrity\": \"sha512-vB1UXmGDNEhcf1jNAHKT9IlYk1R+hehVTLFlCLHBi8gfuHQGP6uRjgXVYU0EVlI/qwAWpstqkBdf2aez3/z/5Q==\",\n+      \"version\": \"7.24.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/cli/-/cli-7.24.1.tgz\",\n+      \"integrity\": \"sha512-HbmrtxyFUr34LwAlV9jS+sSIjUp4FpdtIMGwgufY3AsxrIfsh/HxlMTywsONAZsU0RMYbZtbZFpUCrSGs7o0EA==\",\n       \"dev\": true,\n       \"dependencies\": {\n-        \"@jridgewell/trace-mapping\": \"^0.3.17\",\n+        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n         \"commander\": \"^4.0.1\",\n         \"convert-source-map\": \"^2.0.0\",\n         \"fs-readdir-recursive\": \"^1.1.0\",\ndiff --git a/package.json b/package.json\nindex 9797bb3f4..d4994307f 100644\n--- a/package.json\n+++ b/package.json\n@@ -103,7 +103,7 @@\n     \"@popperjs/core\": \"^2.11.8\"\n   },\n   \"devDependencies\": {\n-    \"@babel/cli\": \"^7.23.9\",\n+    \"@babel/cli\": \"^7.24.1\",\n     \"@babel/core\": \"^7.24.1\",\n     \"@babel/preset-env\": \"^7.24.0\",\n     \"@docsearch/js\": \"^3.6.0\",",
    "output": "build(deps-dev): Bump @babel/cli from 7.23.9 to 7.24.1 (#39803)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/hugo.yml b/hugo.yml\nindex ba23d38c0..1ff261b04 100644\n--- a/hugo.yml\n+++ b/hugo.yml\n@@ -73,6 +73,11 @@ params:\n   analytics:\n     fathom_site:        \"ITUSEYJG\"\n \n+  algolia:\n+    appId:              \"AK7KMZKZHQ\"\n+    apiKey:             \"3151f502c7b9e9dafd5e6372b691a24e\"\n+    indexName:          \"bootstrap\"\n+\n   download:\n     source:             \"https://github.com/twbs/bootstrap/archive/v5.3.3.zip\"\n     dist:               \"https://github.com/twbs/bootstrap/releases/download/v5.3.3/bootstrap-5.3.3-dist.zip\"\ndiff --git a/site/assets/js/search.js b/site/assets/js/search.js\nindex 95d920c44..48047abc8 100644\n--- a/site/assets/js/search.js\n+++ b/site/assets/js/search.js\n@@ -10,6 +10,9 @@\n  */\n \n import docsearch from '@docsearch/js'\n+// https://gohugo.io/hugo-pipes/js/#options\n+// eslint-disable-next-line import/no-unresolved\n+import { appId, apiKey, indexName } from '@params';\n \n (() => {\n   const searchElement = document.getElementById('docsearch')\n@@ -21,9 +24,9 @@ import docsearch from '@docsearch/js'\n   const siteDocsVersion = searchElement.getAttribute('data-bd-docs-version')\n \n   docsearch({\n-    apiKey: '3151f502c7b9e9dafd5e6372b691a24e',\n-    indexName: 'bootstrap',\n-    appId: 'AK7KMZKZHQ',\n+    apiKey,\n+    indexName,\n+    appId,\n     container: searchElement,\n     searchParameters: {\n       facetFilters: [`version:${siteDocsVersion}`]\ndiff --git a/site/layouts/partials/header.html b/site/layouts/partials/header.html\nindex 3f259ac5e..66bdf2fb1 100644\n--- a/site/layouts/partials/header.html\n+++ b/site/layouts/partials/header.html\n@@ -10,7 +10,7 @@\n <link rel=\"canonical\" href=\"{{ .Permalink }}\">\n \n {{ if (ne .Page.Layout \"examples\") -}}\n-<link rel=\"preconnect\" href=\"https://ak7kmzkzhq-dsn.algolia.net\" crossorigin>\n+<link rel=\"preconnect\" href=\"https://{{ .Site.Params.algolia.appId | lower }}-dsn.algolia.net\" crossorigin>\n {{- end }}\n \n <title>{{ if .IsHome }}{{ .Site.Title | markdownify }} \u00b7 {{ .Site.Params.subtitle | markdownify }}{{ else }}{{ .Title | markdownify }} \u00b7 {{ .Site.Title | markdownify }} v{{ .Site.Params.docs_version }}{{ end }}</title>\ndiff --git a/site/layouts/partials/scripts.html b/site/layouts/partials/scripts.html\nindex 63889a9ea..e224c4b37 100644\n--- a/site/layouts/partials/scripts.html\n+++ b/site/layouts/partials/scripts.html\n@@ -15,6 +15,12 @@\n <script defer src=\"{{ $applicationJs.RelPermalink }}\"></script>\n \n {{- if (ne .Page.Layout \"examples\") -}}\n+{{- $esbuildParams := dict\n+  \"apiKey\" .Site.Params.algolia.apiKey\n+  \"appId\" .Site.Params.algolia.appId\n+  \"indexName\" .Site.Params.algolia.indexName\n+-}}\n+{{- $esbuildOptions = merge $esbuildOptions (dict \"params\" $esbuildParams) -}}\n {{- $searchJs := resources.Get \"js/search.js\" | js.Build $esbuildOptions | resources.Copy (path.Join $targetDocsJSPath \"/assets/js/search.js\") }}\n <script defer src=\"{{ $searchJs.RelPermalink }}\"></script>\n {{- end -}}",
    "output": "docs: move algolia config to hugo config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_search.scss b/site/assets/scss/_search.scss\nindex 4bd9d8072..592d65f98 100644\n--- a/site/assets/scss/_search.scss\n+++ b/site/assets/scss/_search.scss\n@@ -1,7 +1,5 @@\n // stylelint-disable selector-class-pattern\n \n-@import \"@docsearch/css/dist/style\";\n-\n :root {\n   --docsearch-primary-color: var(--bd-violet);\n   --docsearch-logo-color: var(--bd-violet);\ndiff --git a/site/assets/scss/docs.scss b/site/assets/scss/docs.scss\nindex 0eb5bdde3..af3817103 100644\n--- a/site/assets/scss/docs.scss\n+++ b/site/assets/scss/docs.scss\n@@ -36,7 +36,6 @@ $enable-cssgrid: true;\n // Load docs components\n @import \"variables\";\n @import \"navbar\";\n-@import \"search\";\n @import \"masthead\";\n @import \"ads\";\n @import \"content\";\ndiff --git a/site/assets/scss/search.scss b/site/assets/scss/search.scss\nnew file mode 100644\nindex 000000000..149b23679\n--- /dev/null\n+++ b/site/assets/scss/search.scss\n@@ -0,0 +1,14 @@\n+/*!\n+ * Bootstrap Docs (https://getbootstrap.com/)\n+ * Copyright 2024 The Bootstrap Authors\n+ * Licensed under the Creative Commons Attribution 3.0 Unported License.\n+ * For details, see https://creativecommons.org/licenses/by/3.0/.\n+ */\n+\n+@import \"../../../scss/functions\";\n+@import \"../../../scss/variables\";\n+@import \"../../../scss/mixins\";\n+@import \"variables\";\n+\n+@import \"@docsearch/css/dist/style\";\n+@import \"search\";\ndiff --git a/site/layouts/partials/stylesheet.html b/site/layouts/partials/stylesheet.html\nindex 69e75a271..9969ee44f 100644\n--- a/site/layouts/partials/stylesheet.html\n+++ b/site/layouts/partials/stylesheet.html\n@@ -9,15 +9,19 @@\n {{- end }}\n \n {{- if (ne .Page.Layout \"examples\") }}\n-{{- $targetDocsCssPath := path.Join \"/docs\" .Site.Params.docs_version \"assets/css/docs.css\" -}}\n-{{- $sassOptions := dict \"targetPath\" $targetDocsCssPath \"outputStyle\" \"expanded\" \"precision\" 6 -}}\n+{{- $sassOptions := dict \"outputStyle\" \"expanded\" \"precision\" 6 -}}\n {{- $postcssOptions := dict \"use\" \"autoprefixer\" \"noMap\" true -}}\n \n+{{- $targetDocsCssPath := path.Join \"/docs\" .Site.Params.docs_version \"assets/css/docs.css\" -}}\n+{{- $targetSearchCssPath := path.Join \"/docs\" .Site.Params.docs_version \"assets/css/search.css\" -}}\n+\n {{ if hugo.IsProduction -}}\n   {{- $sassOptions = merge $sassOptions (dict \"outputStyle\" \"compressed\") -}}\n {{- end -}}\n \n-{{- $style := resources.Get \"scss/docs.scss\" | toCSS $sassOptions | postCSS $postcssOptions }}\n+{{- $docsCss := resources.Get \"scss/docs.scss\" | toCSS (merge (dict \"targetPath\" $targetDocsCssPath) $sassOptions) | postCSS $postcssOptions -}}\n+{{- $searchCss := resources.Get \"scss/search.scss\" | toCSS (merge (dict \"targetPath\" $targetSearchCssPath) $sassOptions) | postCSS $postcssOptions -}}\n \n-<link href=\"{{ $style.RelPermalink }}\" rel=\"stylesheet\">\n+<link href=\"{{ $docsCss.RelPermalink }}\" rel=\"stylesheet\">\n+<link href=\"{{ $searchCss.RelPermalink }}\" rel=\"stylesheet\">\n {{- end }}",
    "output": "docs: move search style to its own CSS file"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/js/stackblitz.js b/site/assets/js/stackblitz.js\nindex c6f44b0f4..54eca3e21 100644\n--- a/site/assets/js/stackblitz.js\n+++ b/site/assets/js/stackblitz.js\n@@ -28,12 +28,12 @@ document.querySelectorAll('.btn-edit').forEach(btn => {\n     // Get extra classes for this example\n     const classes = Array.from(exampleEl.classList).join(' ')\n \n-    sdk.openBootstrapSnippet(htmlSnippet, jsSnippet, classes)\n+    openBootstrapSnippet(htmlSnippet, jsSnippet, classes)\n   })\n })\n \n-sdk.openBootstrapSnippet = (htmlSnippet, jsSnippet, classes) => {\n-  const markup = `<!doctype html>\n+const openBootstrapSnippet = (htmlSnippet, jsSnippet, classes) => {\n+  const indexHtml = `<!doctype html>\n <html lang=\"en\">\n   <head>\n     <meta charset=\"utf-8\">\n@@ -44,18 +44,17 @@ sdk.openBootstrapSnippet = (htmlSnippet, jsSnippet, classes) => {\n     <${'script'} src=\"${jsBundleCdn}\"></${'script'}>\n   </head>\n   <body class=\"p-3 m-0 border-0 ${classes}\">\n-\n-    <!-- Example Code -->\n-${htmlSnippet.replace(/^/gm, '    ')}\n-    <!-- End Example Code -->\n+    <!-- Example Code Start-->\n+${htmlSnippet.trimStart().replace(/^/gm, '    ').replace(/^ {4}$/gm, '').trimEnd()}\n+    <!-- Example Code End -->\n   </body>\n-</html>`\n+</html>\n+`\n \n-  const jsSnippetContent = jsSnippet ? jsSnippetFile : null\n   const project = {\n     files: {\n-      'index.html': markup,\n-      'index.js': jsSnippetContent\n+      'index.html': indexHtml,\n+      ...(jsSnippet && { 'index.js': jsSnippetFile })\n     },\n     title: 'Bootstrap Example',\n     description: `Official example from ${window.location.href}`,",
    "output": "docs: improve stackblitz.js"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 65cd648c9..56ffe1e60 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -5728,9 +5728,9 @@\n       \"dev\": true\n     },\n     \"node_modules/follow-redirects\": {\n-      \"version\": \"1.15.5\",\n-      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.5.tgz\",\n-      \"integrity\": \"sha512-vSFWUON1B+yAw1VN4xMfxgn5fTUiaOzAJCKBwIIgT/+7CuGy9+r+5gITvP62j3RmaD5Ph65UaERdOSRGUzZtgw==\",\n+      \"version\": \"1.15.6\",\n+      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz\",\n+      \"integrity\": \"sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\",\n       \"dev\": true,\n       \"funding\": [\n         {",
    "output": "build(deps-dev): Bump follow-redirects from 1.15.5 to 1.15.6 (#39792)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/5.3/utilities/text.md b/site/content/docs/5.3/utilities/text.md\nindex 68b516ac5..345b277e8 100644\n--- a/site/content/docs/5.3/utilities/text.md\n+++ b/site/content/docs/5.3/utilities/text.md\n@@ -58,7 +58,7 @@ Note that [breaking words isn't possible in Arabic](https://rtlstyling.com/posts\n \n ## Text transform\n \n-Transform text in components with text capitalization classes.\n+Transform text in components with our text capitalization classes: `text-lowercase`, `text-uppercase` or `text-capitalize`.\n \n {{< example >}}\n <p class=\"text-lowercase\">Lowercased text.</p>",
    "output": "docs: mention text transform classes (#39782)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/hugo.yml b/hugo.yml\nindex 17f8b7b68..a6de700c0 100644\n--- a/hugo.yml\n+++ b/hugo.yml\n@@ -67,6 +67,9 @@ params:\n   icons:                \"https://icons.getbootstrap.com/\"\n   swag:                 \"https://cottonbureau.com/people/bootstrap\"\n \n+  analytics:\n+    fathom_site:        \"ITUSEYJG\"\n+\n   download:\n     source:             \"https://github.com/twbs/bootstrap/archive/v5.3.3.zip\"\n     dist:               \"https://github.com/twbs/bootstrap/releases/download/v5.3.3/bootstrap-5.3.3-dist.zip\"\ndiff --git a/site/layouts/partials/analytics.html b/site/layouts/partials/analytics.html\nindex dc918246d..7bc14907b 100644\n--- a/site/layouts/partials/analytics.html\n+++ b/site/layouts/partials/analytics.html\n@@ -1 +1 @@\n-<script defer src=\"https://cdn.usefathom.com/script.js\" data-site=\"ITUSEYJG\"></script>\n+<script defer src=\"https://cdn.usefathom.com/script.js\" data-site=\"{{ .Site.Params.analytics.fathom_site }}\"></script>",
    "output": "docs: move fathom site to hugo config (#39781)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex a270067ac..f7fa824f3 100644\n--- a/README.md\n+++ b/README.md\n@@ -177,7 +177,7 @@ Get updates on Bootstrap's development and chat with the project maintainers and\n - Follow [@getbootstrap on Twitter](https://twitter.com/getbootstrap).\n - Read and subscribe to [The Official Bootstrap Blog](https://blog.getbootstrap.com/).\n - Ask questions and explore [our GitHub Discussions](https://github.com/twbs/bootstrap/discussions).\n-- Discuss, ask questions, and more on [the community Discord](https://discord.gg/bZUvakRU3M) or [Bootstrap subreddit](https://reddit.com/r/bootstrap).\n+- Discuss, ask questions, and more on [the community Discord](https://discord.gg/bZUvakRU3M) or [Bootstrap subreddit](https://www.reddit.com/r/bootstrap/).\n - Chat with fellow Bootstrappers in IRC. On the `irc.libera.chat` server, in the `#bootstrap` channel.\n - Implementation help may be found at Stack Overflow (tagged [`bootstrap-5`](https://stackoverflow.com/questions/tagged/bootstrap-5)).\n - Developers should use the keyword `bootstrap` on packages which modify or add to the functionality of Bootstrap when distributing through [npm](https://www.npmjs.com/browse/keyword/bootstrap) or similar delivery mechanisms for maximum discoverability.",
    "output": "docs: fix Reddit URL to avoid redirection (#39777)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/docs-navbar.html b/site/layouts/partials/docs-navbar.html\nindex bca4a5b37..10f3fba4c 100644\n--- a/site/layouts/partials/docs-navbar.html\n+++ b/site/layouts/partials/docs-navbar.html\n@@ -23,7 +23,7 @@\n       </button>\n     </div>\n \n-    <div class=\"offcanvas-lg offcanvas-end flex-grow-1\" tabindex=\"-1\" id=\"bdNavbar\" aria-labelledby=\"bdNavbarOffcanvasLabel\" data-bs-scroll=\"true\">\n+    <div class=\"offcanvas-lg offcanvas-end flex-grow-1\" tabindex=\"-1\" id=\"bdNavbar\" aria-labelledby=\"bdNavbarOffcanvasLabel\">\n       <div class=\"offcanvas-header px-4 pb-0\">\n         <h5 class=\"offcanvas-title text-white\" id=\"bdNavbarOffcanvasLabel\">Bootstrap</h5>\n         <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\" data-bs-target=\"#bdNavbar\"></button>",
    "output": "docs: drop `data-bs-scroll=\"true\"` from navbar (#39766)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_search.scss b/site/assets/scss/_search.scss\nindex ca1e5b060..592d65f98 100644\n--- a/site/assets/scss/_search.scss\n+++ b/site/assets/scss/_search.scss\n@@ -47,6 +47,7 @@\n   --docsearch-muted-color: var(--bs-secondary-color);\n   --docsearch-hit-shadow: none;\n \n+  position: fixed;\n   z-index: 2000; // Make sure to be over all components showcased in the documentation\n   cursor: auto; // Needed because of [role=\"button\"] in Algolia search modal. Remove once https://github.com/algolia/docsearch/issues/1370 is tackled.\n ",
    "output": "docs: fix position of search modal to avoid interface blocking at small breakpoints (#39739)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/home/masthead.html b/site/layouts/partials/home/masthead.html\nindex ef89931b3..9509c84b4 100644\n--- a/site/layouts/partials/home/masthead.html\n+++ b/site/layouts/partials/home/masthead.html\n@@ -5,7 +5,13 @@\n         <strong class=\"d-sm-inline-block p-2 me-2 mb-2 mb-lg-0 rounded-3 masthead-notice\">New in v5.3</strong>\n         <span class=\"text-body-secondary\">Color mode support, expanded color palette, and more!</span>\n       </a>\n-      <img src=\"/docs/{{ .Site.Params.docs_version }}/assets/brand/bootstrap-logo-shadow.png\" width=\"200\" height=\"165\" alt=\"Bootstrap\" class=\"d-none d-sm-block mx-auto mb-3\">\n+      <img class=\"d-none d-sm-block mx-auto mb-3\"\n+           srcset=\"/docs/{{ .Site.Params.docs_version }}/assets/brand/bootstrap-logo-shadow.png,\n+                   /docs/{{ .Site.Params.docs_version }}/assets/brand/bootstrap-logo-shadow@2x.png 2x\"\n+           src=\"/docs/{{ .Site.Params.docs_version }}/assets/brand/bootstrap-logo-shadow.png\"\n+           alt=\"Bootstrap\"\n+           width=\"200\"\n+           height=\"165\">\n       <h1 class=\"mb-3 fw-semibold lh-1\">Build fast, responsive sites with&nbsp;Bootstrap</h1>\n       <p class=\"lead mb-4\">\n         Powerful, extensible, and feature-packed frontend toolkit. Build and customize with Sass, utilize prebuilt grid system and components, and bring projects to life with powerful JavaScript plugins.\ndiff --git a/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow.png b/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow.png\nindex cdd0c8a34..84ecffdb6 100644\nBinary files a/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow.png and b/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow.png differ\ndiff --git a/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow@2x.png b/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow@2x.png\nnew file mode 100644\nindex 000000000..cdd0c8a34\nBinary files /dev/null and b/site/static/docs/5.3/assets/brand/bootstrap-logo-shadow@2x.png differ",
    "output": "docs: use a responsive image for bootstrap-logo-shadow.png (#39745)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/partials/callouts/warning-color-assistive-technologies.md b/site/layouts/partials/callouts/warning-color-assistive-technologies.md\nindex 6750517bb..075bf3609 100644\n--- a/site/layouts/partials/callouts/warning-color-assistive-technologies.md\n+++ b/site/layouts/partials/callouts/warning-color-assistive-technologies.md\n@@ -1 +1 @@\n-**Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](/docs/{{ .Site.Params.docs_version }}/getting-started/accessibility#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.\n+**Accessibility tip:** Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text with a [*sufficient* color contrast](/docs/{{ .Site.Params.docs_version }}/getting-started/accessibility/#color-contrast)) or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.\ndiff --git a/site/layouts/partials/home/components-utilities.html b/site/layouts/partials/home/components-utilities.html\nindex f945a0386..e7be8fe81 100644\n--- a/site/layouts/partials/home/components-utilities.html\n+++ b/site/layouts/partials/home/components-utilities.html\n@@ -53,7 +53,7 @@\n </ul>\n `) \"html\" \"\" }}\n       <p class=\"d-flex justify-content-start mb-md-0\">\n-        <a href=\"/docs/{{ .Site.Params.docs_version }}/examples#snippets\" class=\"icon-link icon-link-hover fw-semibold\">\n+        <a href=\"/docs/{{ .Site.Params.docs_version }}/examples/#snippets\" class=\"icon-link icon-link-hover fw-semibold\">\n           Explore customized components\n           <svg class=\"bi\"><use xlink:href=\"#arrow-right\"></use></svg>\n         </a>",
    "output": "docs: fix missing trailing slashes causing redirects"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/cspell.yml b/.github/workflows/cspell.yml\nindex c671fde11..0b942ed25 100644\n--- a/.github/workflows/cspell.yml\n+++ b/.github/workflows/cspell.yml\n@@ -28,7 +28,7 @@ jobs:\n           persist-credentials: false\n \n       - name: Run cspell\n-        uses: streetsidesoftware/cspell-action@v5\n+        uses: streetsidesoftware/cspell-action@v6\n         with:\n           config: \".cspell.json\"\n           files: \"**/*.md\"",
    "output": "build(deps): Bump streetsidesoftware/cspell-action from 5 to 6 (#39730)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 0d59eb671..c95b6093d 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -49,7 +49,7 @@\n         \"karma-chrome-launcher\": \"^3.2.0\",\n         \"karma-coverage-istanbul-reporter\": \"^3.0.3\",\n         \"karma-detect-browsers\": \"^2.3.3\",\n-        \"karma-firefox-launcher\": \"^2.1.2\",\n+        \"karma-firefox-launcher\": \"^2.1.3\",\n         \"karma-jasmine\": \"^5.1.0\",\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n@@ -7479,13 +7479,28 @@\n       }\n     },\n     \"node_modules/karma-firefox-launcher\": {\n-      \"version\": \"2.1.2\",\n-      \"resolved\": \"https://registry.npmjs.org/karma-firefox-launcher/-/karma-firefox-launcher-2.1.2.tgz\",\n-      \"integrity\": \"sha512-VV9xDQU1QIboTrjtGVD4NCfzIH7n01ZXqy/qpBhnOeGVOkG5JYPEm8kuSd7psHE6WouZaQ9Ool92g8LFweSNMA==\",\n+      \"version\": \"2.1.3\",\n+      \"resolved\": \"https://registry.npmjs.org/karma-firefox-launcher/-/karma-firefox-launcher-2.1.3.tgz\",\n+      \"integrity\": \"sha512-LMM2bseebLbYjODBOVt7TCPP9OI2vZIXCavIXhkO9m+10Uj5l7u/SKoeRmYx8FYHTVGZSpk6peX+3BMHC1WwNw==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"is-wsl\": \"^2.2.0\",\n-        \"which\": \"^2.0.1\"\n+        \"which\": \"^3.0.0\"\n+      }\n+    },\n+    \"node_modules/karma-firefox-launcher/node_modules/which\": {\n+      \"version\": \"3.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/which/-/which-3.0.1.tgz\",\n+      \"integrity\": \"sha512-XA1b62dzQzLfaEOSQFTCOd5KFf/1VSzZo7/7TUjnya6u0vGGKzU96UQBZTAThCb2j4/xjBAyii1OhRLJEivHvg==\",\n+      \"dev\": true,\n+      \"dependencies\": {\n+        \"isexe\": \"^2.0.0\"\n+      },\n+      \"bin\": {\n+        \"node-which\": \"bin/which.js\"\n+      },\n+      \"engines\": {\n+        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\n       }\n     },\n     \"node_modules/karma-jasmine\": {\n@@ -17062,13 +17077,24 @@\n       }\n     },\n     \"karma-firefox-launcher\": {\n-      \"version\": \"2.1.2\",\n-      \"resolved\": \"https://registry.npmjs.org/karma-firefox-launcher/-/karma-firefox-launcher-2.1.2.tgz\",\n-      \"integrity\": \"sha512-VV9xDQU1QIboTrjtGVD4NCfzIH7n01ZXqy/qpBhnOeGVOkG5JYPEm8kuSd7psHE6WouZaQ9Ool92g8LFweSNMA==\",\n+      \"version\": \"2.1.3\",\n+      \"resolved\": \"https://registry.npmjs.org/karma-firefox-launcher/-/karma-firefox-launcher-2.1.3.tgz\",\n+      \"integrity\": \"sha512-LMM2bseebLbYjODBOVt7TCPP9OI2vZIXCavIXhkO9m+10Uj5l7u/SKoeRmYx8FYHTVGZSpk6peX+3BMHC1WwNw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"is-wsl\": \"^2.2.0\",\n-        \"which\": \"^2.0.1\"\n+        \"which\": \"^3.0.0\"\n+      },\n+      \"dependencies\": {\n+        \"which\": {\n+          \"version\": \"3.0.1\",\n+          \"resolved\": \"https://registry.npmjs.org/which/-/which-3.0.1.tgz\",\n+          \"integrity\": \"sha512-XA1b62dzQzLfaEOSQFTCOd5KFf/1VSzZo7/7TUjnya6u0vGGKzU96UQBZTAThCb2j4/xjBAyii1OhRLJEivHvg==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"isexe\": \"^2.0.0\"\n+          }\n+        }\n       }\n     },\n     \"karma-jasmine\": {\ndiff --git a/package.json b/package.json\nindex a1f93140d..96a3d3dca 100644\n--- a/package.json\n+++ b/package.json\n@@ -133,7 +133,7 @@\n     \"karma-chrome-launcher\": \"^3.2.0\",\n     \"karma-coverage-istanbul-reporter\": \"^3.0.3\",\n     \"karma-detect-browsers\": \"^2.3.3\",\n-    \"karma-firefox-launcher\": \"^2.1.2\",\n+    \"karma-firefox-launcher\": \"^2.1.3\",\n     \"karma-jasmine\": \"^5.1.0\",\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",",
    "output": "build(deps-dev): Bump karma-firefox-launcher from 2.1.2 to 2.1.3 (#39736)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 4ff55a6df..767a64df0 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -44,7 +44,7 @@\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n-        \"karma\": \"^6.4.2\",\n+        \"karma\": \"^6.4.3\",\n         \"karma-browserstack-launcher\": \"1.4.0\",\n         \"karma-chrome-launcher\": \"^3.2.0\",\n         \"karma-coverage-istanbul-reporter\": \"^3.0.3\",\n@@ -7369,9 +7369,9 @@\n       \"dev\": true\n     },\n     \"node_modules/karma\": {\n-      \"version\": \"6.4.2\",\n-      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.2.tgz\",\n-      \"integrity\": \"sha512-C6SU/53LB31BEgRg+omznBEMY4SjHU3ricV6zBcAe1EeILKkeScr+fZXtaI5WyDbkVowJxxAI6h73NcFPmXolQ==\",\n+      \"version\": \"6.4.3\",\n+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.3.tgz\",\n+      \"integrity\": \"sha512-LuucC/RE92tJ8mlCwqEoRWXP38UMAqpnq98vktmS9SznSoUPPUJQbc91dHcxcunROvfQjdORVA/YFviH+Xci9Q==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"@colors/colors\": \"1.5.0\",\n@@ -7393,7 +7393,7 @@\n         \"qjobs\": \"^1.2.0\",\n         \"range-parser\": \"^1.2.1\",\n         \"rimraf\": \"^3.0.2\",\n-        \"socket.io\": \"^4.4.1\",\n+        \"socket.io\": \"^4.7.2\",\n         \"source-map\": \"^0.6.1\",\n         \"tmp\": \"^0.2.1\",\n         \"ua-parser-js\": \"^0.7.30\",\n@@ -16966,9 +16966,9 @@\n       \"dev\": true\n     },\n     \"karma\": {\n-      \"version\": \"6.4.2\",\n-      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.2.tgz\",\n-      \"integrity\": \"sha512-C6SU/53LB31BEgRg+omznBEMY4SjHU3ricV6zBcAe1EeILKkeScr+fZXtaI5WyDbkVowJxxAI6h73NcFPmXolQ==\",\n+      \"version\": \"6.4.3\",\n+      \"resolved\": \"https://registry.npmjs.org/karma/-/karma-6.4.3.tgz\",\n+      \"integrity\": \"sha512-LuucC/RE92tJ8mlCwqEoRWXP38UMAqpnq98vktmS9SznSoUPPUJQbc91dHcxcunROvfQjdORVA/YFviH+Xci9Q==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@colors/colors\": \"1.5.0\",\n@@ -16990,7 +16990,7 @@\n         \"qjobs\": \"^1.2.0\",\n         \"range-parser\": \"^1.2.1\",\n         \"rimraf\": \"^3.0.2\",\n-        \"socket.io\": \"^4.4.1\",\n+        \"socket.io\": \"^4.7.2\",\n         \"source-map\": \"^0.6.1\",\n         \"tmp\": \"^0.2.1\",\n         \"ua-parser-js\": \"^0.7.30\",\ndiff --git a/package.json b/package.json\nindex a65d3b275..147c4124c 100644\n--- a/package.json\n+++ b/package.json\n@@ -128,7 +128,7 @@\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",\n-    \"karma\": \"^6.4.2\",\n+    \"karma\": \"^6.4.3\",\n     \"karma-browserstack-launcher\": \"1.4.0\",\n     \"karma-chrome-launcher\": \"^3.2.0\",\n     \"karma-coverage-istanbul-reporter\": \"^3.0.3\",",
    "output": "build(deps-dev): Bump karma from 6.4.2 to 6.4.3 (#39733)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 5c1620f79..5e9f06c83 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.120.4\",\n+        \"hugo-bin\": \"^0.120.7\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6316,9 +6316,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.120.4\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.4.tgz\",\n-      \"integrity\": \"sha512-XmyGkto8OXSdd/iqgKZ4soLilqK5sYEbHEK1qVMCYS3qnQ6Ed0hnmkIWzMNTP9ghHAGkiyLle3SwlMoiLh/XDA==\",\n+      \"version\": \"0.120.7\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.7.tgz\",\n+      \"integrity\": \"sha512-xx0JUuHI+4PY3P+EIwsYexU2NSKBQKxbcPPba9lTR9gI52EU59TcXaDjtLaXK9OPufm1TZzaWE2qncxQq/DnIw==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16220,9 +16220,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.120.4\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.4.tgz\",\n-      \"integrity\": \"sha512-XmyGkto8OXSdd/iqgKZ4soLilqK5sYEbHEK1qVMCYS3qnQ6Ed0hnmkIWzMNTP9ghHAGkiyLle3SwlMoiLh/XDA==\",\n+      \"version\": \"0.120.7\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.7.tgz\",\n+      \"integrity\": \"sha512-xx0JUuHI+4PY3P+EIwsYexU2NSKBQKxbcPPba9lTR9gI52EU59TcXaDjtLaXK9OPufm1TZzaWE2qncxQq/DnIw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^12.0.0\",\ndiff --git a/package.json b/package.json\nindex c8bc6ae1d..1f940e5cd 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.120.4\",\n+    \"hugo-bin\": \"^0.120.7\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.120.4 to 0.120.7 (#39731)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 3a9e67cce..5c1620f79 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -62,7 +62,7 @@\n         \"rollup-plugin-istanbul\": \"^5.0.0\",\n         \"rtlcss\": \"^4.1.1\",\n         \"sass\": \"^1.71.1\",\n-        \"sass-true\": \"^7.0.1\",\n+        \"sass-true\": \"^8.0.0\",\n         \"shelljs\": \"^0.8.5\",\n         \"stylelint\": \"^16.2.1\",\n         \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",\n@@ -9812,20 +9812,17 @@\n       }\n     },\n     \"node_modules/sass-true\": {\n-      \"version\": \"7.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass-true/-/sass-true-7.0.1.tgz\",\n-      \"integrity\": \"sha512-7qt24tkX45b3Cs/U5e6+OiHHoorCISzrDACQLtPV8cHDZc//++KMUFSJisXhoVfwuWEVJugzImQITI1GfzoTFQ==\",\n+      \"version\": \"8.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass-true/-/sass-true-8.0.0.tgz\",\n+      \"integrity\": \"sha512-bk6m12BFxjRWnu0DHfqmsF36Eoxg3grLlLM4PhcgN6Znd9DvK2xVGJtWQ05u5RqEos3JaIX50MMN+gsAYUnEDA==\",\n       \"dev\": true,\n       \"dependencies\": {\n-        \"@adobe/css-tools\": \"^4.3.2\",\n+        \"@adobe/css-tools\": \"^4.3.3\",\n         \"jest-diff\": \"^29.7.0\",\n         \"lodash\": \"^4.17.21\"\n       },\n       \"engines\": {\n-        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\n-      },\n-      \"peerDependencies\": {\n-        \"sass\": \">=1.45.0\"\n+        \"node\": \">=18\"\n       }\n     },\n     \"node_modules/seek-bzip\": {\n@@ -18661,12 +18658,12 @@\n       }\n     },\n     \"sass-true\": {\n-      \"version\": \"7.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/sass-true/-/sass-true-7.0.1.tgz\",\n-      \"integrity\": \"sha512-7qt24tkX45b3Cs/U5e6+OiHHoorCISzrDACQLtPV8cHDZc//++KMUFSJisXhoVfwuWEVJugzImQITI1GfzoTFQ==\",\n+      \"version\": \"8.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/sass-true/-/sass-true-8.0.0.tgz\",\n+      \"integrity\": \"sha512-bk6m12BFxjRWnu0DHfqmsF36Eoxg3grLlLM4PhcgN6Znd9DvK2xVGJtWQ05u5RqEos3JaIX50MMN+gsAYUnEDA==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"@adobe/css-tools\": \"^4.3.2\",\n+        \"@adobe/css-tools\": \"^4.3.3\",\n         \"jest-diff\": \"^29.7.0\",\n         \"lodash\": \"^4.17.21\"\n       }\ndiff --git a/package.json b/package.json\nindex 18ad06781..c8bc6ae1d 100644\n--- a/package.json\n+++ b/package.json\n@@ -146,7 +146,7 @@\n     \"rollup-plugin-istanbul\": \"^5.0.0\",\n     \"rtlcss\": \"^4.1.1\",\n     \"sass\": \"^1.71.1\",\n-    \"sass-true\": \"^7.0.1\",\n+    \"sass-true\": \"^8.0.0\",\n     \"shelljs\": \"^0.8.5\",\n     \"stylelint\": \"^16.2.1\",\n     \"stylelint-config-twbs-bootstrap\": \"^14.0.0\",",
    "output": "build(deps-dev): Bump sass-true from 7.0.1 to 8.0.0 (#39714)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex e1f845c27..91a32cb19 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -54,7 +54,7 @@\n         \"karma-jasmine-html-reporter\": \"^2.1.0\",\n         \"karma-rollup-preprocessor\": \"7.0.7\",\n         \"lockfile-lint\": \"^4.13.2\",\n-        \"nodemon\": \"^3.0.3\",\n+        \"nodemon\": \"^3.1.0\",\n         \"npm-run-all2\": \"^6.1.2\",\n         \"postcss\": \"^8.4.35\",\n         \"postcss-cli\": \"^11.0.0\",\n@@ -8062,9 +8062,9 @@\n       \"dev\": true\n     },\n     \"node_modules/nodemon\": {\n-      \"version\": \"3.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.3.tgz\",\n-      \"integrity\": \"sha512-7jH/NXbFPxVaMwmBCC2B9F/V6X1VkEdNgx3iu9jji8WxWcvhMWkmhNWhI5077zknOnZnBzba9hZP6bCPJLSReQ==\",\n+      \"version\": \"3.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.0.tgz\",\n+      \"integrity\": \"sha512-xqlktYlDMCepBJd43ZQhjWwMw2obW/JRvkrLxq5RCNcuDDX1DbcPT+qT1IlIIdf+DhnWs90JpTMe+Y5KxOchvA==\",\n       \"dev\": true,\n       \"dependencies\": {\n         \"chokidar\": \"^3.5.2\",\n@@ -17490,9 +17490,9 @@\n       \"dev\": true\n     },\n     \"nodemon\": {\n-      \"version\": \"3.0.3\",\n-      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.0.3.tgz\",\n-      \"integrity\": \"sha512-7jH/NXbFPxVaMwmBCC2B9F/V6X1VkEdNgx3iu9jji8WxWcvhMWkmhNWhI5077zknOnZnBzba9hZP6bCPJLSReQ==\",\n+      \"version\": \"3.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.0.tgz\",\n+      \"integrity\": \"sha512-xqlktYlDMCepBJd43ZQhjWwMw2obW/JRvkrLxq5RCNcuDDX1DbcPT+qT1IlIIdf+DhnWs90JpTMe+Y5KxOchvA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chokidar\": \"^3.5.2\",\ndiff --git a/package.json b/package.json\nindex 5c9f92e67..c69f66242 100644\n--- a/package.json\n+++ b/package.json\n@@ -138,7 +138,7 @@\n     \"karma-jasmine-html-reporter\": \"^2.1.0\",\n     \"karma-rollup-preprocessor\": \"7.0.7\",\n     \"lockfile-lint\": \"^4.13.2\",\n-    \"nodemon\": \"^3.0.3\",\n+    \"nodemon\": \"^3.1.0\",\n     \"npm-run-all2\": \"^6.1.2\",\n     \"postcss\": \"^8.4.35\",\n     \"postcss-cli\": \"^11.0.0\",",
    "output": "build(deps-dev): Bump nodemon from 3.0.3 to 3.1.0 (#39713)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package-lock.json b/package-lock.json\nindex 83b5b8a14..e1f845c27 100644\n--- a/package-lock.json\n+++ b/package-lock.json\n@@ -40,7 +40,7 @@\n         \"find-unused-sass-variables\": \"^5.0.0\",\n         \"globby\": \"^11.1.0\",\n         \"hammer-simulator\": \"0.0.1\",\n-        \"hugo-bin\": \"^0.120.2\",\n+        \"hugo-bin\": \"^0.120.4\",\n         \"ip\": \"^2.0.1\",\n         \"jasmine\": \"^5.1.0\",\n         \"jquery\": \"^3.7.1\",\n@@ -6316,9 +6316,9 @@\n       }\n     },\n     \"node_modules/hugo-bin\": {\n-      \"version\": \"0.120.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.2.tgz\",\n-      \"integrity\": \"sha512-I2Xc84CLtDKh8jBQym8J1PdwuF0wKBbcQzNoqdjMNnae0RhkWOWOm3tV2CsQX9a1eWsRvBt1QoCLeNw8v0C0Ig==\",\n+      \"version\": \"0.120.4\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.4.tgz\",\n+      \"integrity\": \"sha512-XmyGkto8OXSdd/iqgKZ4soLilqK5sYEbHEK1qVMCYS3qnQ6Ed0hnmkIWzMNTP9ghHAGkiyLle3SwlMoiLh/XDA==\",\n       \"dev\": true,\n       \"funding\": [\n         {\n@@ -16223,9 +16223,9 @@\n       }\n     },\n     \"hugo-bin\": {\n-      \"version\": \"0.120.2\",\n-      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.2.tgz\",\n-      \"integrity\": \"sha512-I2Xc84CLtDKh8jBQym8J1PdwuF0wKBbcQzNoqdjMNnae0RhkWOWOm3tV2CsQX9a1eWsRvBt1QoCLeNw8v0C0Ig==\",\n+      \"version\": \"0.120.4\",\n+      \"resolved\": \"https://registry.npmjs.org/hugo-bin/-/hugo-bin-0.120.4.tgz\",\n+      \"integrity\": \"sha512-XmyGkto8OXSdd/iqgKZ4soLilqK5sYEbHEK1qVMCYS3qnQ6Ed0hnmkIWzMNTP9ghHAGkiyLle3SwlMoiLh/XDA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@xhmikosr/bin-wrapper\": \"^12.0.0\",\ndiff --git a/package.json b/package.json\nindex 4b9e87e4d..5c9f92e67 100644\n--- a/package.json\n+++ b/package.json\n@@ -124,7 +124,7 @@\n     \"find-unused-sass-variables\": \"^5.0.0\",\n     \"globby\": \"^11.1.0\",\n     \"hammer-simulator\": \"0.0.1\",\n-    \"hugo-bin\": \"^0.120.2\",\n+    \"hugo-bin\": \"^0.120.4\",\n     \"ip\": \"^2.0.1\",\n     \"jasmine\": \"^5.1.0\",\n     \"jquery\": \"^3.7.1\",",
    "output": "build(deps-dev): Bump hugo-bin from 0.120.2 to 0.120.4 (#39715)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_visually-hidden.scss b/scss/mixins/_visually-hidden.scss\nindex 388916ccf..9dd0ad33b 100644\n--- a/scss/mixins/_visually-hidden.scss\n+++ b/scss/mixins/_visually-hidden.scss\n@@ -19,6 +19,11 @@\n   &:not(caption) {\n     position: absolute !important;\n   }\n+\n+  // Fix to prevent overflowing children to become focusable\n+  * {\n+    overflow: hidden !important;\n+  }\n }\n \n // Use to only display content when it's focused, or one of its child elements is focused",
    "output": "fix(visually-hidden): prevent overflowing children to become focusable"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/forms/_form-check.scss b/scss/forms/_form-check.scss\nindex 6321b4100..a52a2e7c8 100644\n--- a/scss/forms/_form-check.scss\n+++ b/scss/forms/_form-check.scss\n@@ -90,6 +90,7 @@\n   &[disabled],\n   &:disabled {\n     ~ .form-check-label {\n+      cursor: default;\n       opacity: $form-check-label-disabled-opacity;\n     }\n   }",
    "output": "fix(forms): .form-check-label cursor for disabled input"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_accordion.scss b/scss/_accordion.scss\nindex fc62ceb88..9dac7ec00 100644\n--- a/scss/_accordion.scss\n+++ b/scss/_accordion.scss\n@@ -64,7 +64,7 @@\n   &:first-of-type {\n     @include border-top-radius($accordion-border-radius);\n \n-    .accordion-button {\n+    > * > .accordion-button {\n       @include border-top-radius($accordion-inner-border-radius);\n     }\n   }\n@@ -77,7 +77,7 @@\n   &:last-of-type {\n     @include border-bottom-radius($accordion-border-radius);\n \n-    .accordion-button {\n+    > * > .accordion-button {\n       &.collapsed {\n         @include border-bottom-radius($accordion-inner-border-radius);\n       }",
    "output": "fix(accordion): nested items radii"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_tables.scss b/scss/_tables.scss\nindex 601d86cc9..6abf53bd1 100644\n--- a/scss/_tables.scss\n+++ b/scss/_tables.scss\n@@ -25,7 +25,10 @@\n   // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).\n   // Another advantage is that this generates less code and makes the selector less specific making it easier to override.\n   // stylelint-disable-next-line selector-max-universal\n-  > :not(caption) > * > * {\n+  > tr > *,\n+  > thead > tr > *,\n+  > tbody > tr > *,\n+  > tfoot > tr > * {\n     padding: $table-cell-padding-y $table-cell-padding-x;\n     background-color: var(--#{$prefix}table-bg);\n     border-bottom-width: $table-border-width;\n@@ -60,7 +63,10 @@\n \n .table-sm {\n   // stylelint-disable-next-line selector-max-universal\n-  > :not(caption) > * > * {\n+  > tr > *,\n+  > thead > tr > *,\n+  > tbody > tr > *,\n+  > tfoot > tr > * {\n     padding: $table-cell-padding-y-sm $table-cell-padding-x-sm;\n   }\n }\n@@ -76,7 +82,10 @@\n // to the `td`s or `th`s\n \n .table-bordered {\n-  > :not(caption) > * {\n+  > tr,\n+  > thead > tr,\n+  > tbody > tr,\n+  > tfoot > tr {\n     border-width: $table-border-width 0;\n \n     // stylelint-disable-next-line selector-max-universal\n@@ -88,7 +97,10 @@\n \n .table-borderless {\n   // stylelint-disable-next-line selector-max-universal\n-  > :not(caption) > * > * {\n+  > tr > *,\n+  > thead > tr > *,\n+  > tbody > tr > *,\n+  > tfoot > tr > * {\n     border-bottom-width: 0;\n   }\n ",
    "output": "fix(tables): support simpler table structure"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_navbar.scss b/site/assets/scss/_navbar.scss\nindex 2b598bf67..fe2a869c6 100644\n--- a/site/assets/scss/_navbar.scss\n+++ b/site/assets/scss/_navbar.scss\n@@ -57,6 +57,10 @@\n       color: $white;\n     }\n \n+    &:focus-visible {\n+      outline: auto;\n+    }\n+\n     &.active {\n       font-weight: 600;\n       color: $white;",
    "output": "docs: add focus visible outline to navbar's nav links and toggler"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/examples.yml b/site/data/examples.yml\nindex 99d34752b..8a69fbbca 100644\n--- a/site/data/examples.yml\n+++ b/site/data/examples.yml\n@@ -102,8 +102,6 @@\n       description: \"Multiple examples of grid layouts with all four tiers, nesting, and more.\"\n     - name: Cheatsheet\n       description: \"Kitchen sink of Bootstrap components.\"\n-    - name: Cheatsheet RTL\n-      description: \"Kitchen sink of Bootstrap components, RTL.\"\n \n - category: Navbars\n   description: \"Taking the default navbar component and showing how it can be moved, placed, and extended.\"\n@@ -122,7 +120,7 @@\n       description: \"Turn your expandable navbar into a sliding offcanvas menu (doesn't use our offcanvas component).\"\n \n - category: RTL\n-  description: \"See Bootstrap's RTL version in action with these modified Custom Components examples.\"\n+  description: \"See Bootstrap's RTL version in action with these modified examples from various categories.\"\n   examples:\n     - name: Album RTL\n       description: \"Simple one-page template for photo galleries, portfolios, and more.\"\n@@ -134,6 +132,8 @@\n       description: \"Magazine like blog template with header, navigation, featured content.\"\n     - name: Dashboard RTL\n       description: \"Basic admin dashboard shell with fixed sidebar and navbar.\"\n+    - name: Cheatsheet RTL\n+      description: \"Kitchen sink of Bootstrap components, RTL.\"\n \n - category: Integrations\n   description: \"Integrations with external libraries.\"",
    "output": "docs: move Cheatsheet RTL example to the RTL category"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/footer.html b/docs/_includes/footer.html\nindex 028d5722a..de9af4fc6 100644\n--- a/docs/_includes/footer.html\n+++ b/docs/_includes/footer.html\n@@ -51,6 +51,3 @@\n     {% endfor %}\n   {% endif %}\n {% endif %}\n-\n-<!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->\n-<script src=\"{{ site.baseurl }}/assets/js/ie10-viewport-bug-workaround.js\"></script>\ndiff --git a/docs/_includes/header.html b/docs/_includes/header.html\nindex 7446ba886..8b0e175d1 100644\n--- a/docs/_includes/header.html\n+++ b/docs/_includes/header.html\n@@ -39,7 +39,6 @@\n <link href=\"{{ site.baseurl }}/assets/css/docs.css\" rel=\"stylesheet\">\n {% endif %}\n <!--[if lt IE 9]><script src=\"{{ site.baseurl }}/assets/js/ie8-responsive-file-warning.js\"></script><![endif]-->\n-<script src=\"{{ site.baseurl }}/assets/js/ie-emulation-modes-warning.js\"></script>\n \n <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n <!--[if lt IE 9]>\ndiff --git a/grunt/configBridge.json b/grunt/configBridge.json\nindex 146b2b5ec..8e035b5a5 100644\n--- a/grunt/configBridge.json\n+++ b/grunt/configBridge.json\n@@ -15,7 +15,9 @@\n       \"../assets/js/vendor/clipboard.min.js\",\n       \"../assets/js/vendor/anchor.min.js\",\n       \"../assets/js/src/application.js\",\n-      \"../assets/js/src/search.js\"\n+      \"../assets/js/src/search.js\",\n+      \"../assets/js/ie10-viewport-bug-workaround.js\",\n+      \"../assets/js/ie-emulation-modes-warning.js\"\n     ]\n   },\n   \"config\": {",
    "output": "docs: Concat the IE files with the rest."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/tab.js b/js/tab.js\nindex 990c25be5..4f9ad9ff9 100644\n--- a/js/tab.js\n+++ b/js/tab.js\n@@ -48,7 +48,7 @@\n \n     if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n \n-    var $target = $(selector)\n+    var $target = $(document).find(selector)\n \n     this.activate($this.closest('li'), $ul)\n     this.activate($target, $target.parent(), function () {",
    "output": "fix(tab): remove xss"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/components/navs.html b/docs/_includes/components/navs.html\nindex cb1bc01bf..7e7f357ea 100644\n--- a/docs/_includes/components/navs.html\n+++ b/docs/_includes/components/navs.html\n@@ -67,7 +67,7 @@\n   <p><strong class=\"text-danger\">Justified navbar nav links are currently not supported.</strong></p>\n   <div class=\"bs-callout bs-callout-warning\" id=\"callout-navs-justified-safari\">\n     <h4>Safari and responsive justified navs</h4>\n-    <p>As of v8.0, Safari exhibits a bug in which resizing your browser horizontally causes rendering errors in the justified nav that are cleared upon refreshing. This bug is also shown in the <a href=\"../examples/justified-nav/\">justified nav example</a>.</p>\n+    <p>As of v9.1.2, Safari exhibits a bug in which resizing your browser horizontally causes rendering errors in the justified nav that are cleared upon refreshing. This bug is also shown in the <a href=\"../examples/justified-nav/\">justified nav example</a>.</p>\n   </div>\n   <div class=\"bs-example\" data-example-id=\"simple-nav-justified\">\n     <ul class=\"nav nav-tabs nav-justified\">\ndiff --git a/docs/examples/justified-nav/index.html b/docs/examples/justified-nav/index.html\nindex 49ad07aab..f228900a8 100644\n--- a/docs/examples/justified-nav/index.html\n+++ b/docs/examples/justified-nav/index.html\n@@ -62,7 +62,7 @@\n       <div class=\"row\">\n         <div class=\"col-lg-4\">\n           <h2>Safari bug warning!</h2>\n-          <p class=\"text-danger\">As of v8.0, Safari exhibits a bug in which resizing your browser horizontally causes rendering errors in the justified nav that are cleared upon refreshing.</p>\n+          <p class=\"text-danger\">As of v9.1.2, Safari exhibits a bug in which resizing your browser horizontally causes rendering errors in the justified nav that are cleared upon refreshing.</p>\n           <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>\n           <p><a class=\"btn btn-primary\" href=\"#\" role=\"button\">View details &raquo;</a></p>\n         </div>",
    "output": "docs: Update Safari versions affected by #9774"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/getting-started/browser-device-support.html b/docs/_includes/getting-started/browser-device-support.html\nindex 833c863ca..8a3a155ee 100644\n--- a/docs/_includes/getting-started/browser-device-support.html\n+++ b/docs/_includes/getting-started/browser-device-support.html\n@@ -196,7 +196,7 @@ if (navigator.userAgent.match(/IEMobile\\/10\\.0/)) {\n   <p>Page zooming inevitably presents rendering artifacts in some components, both in Bootstrap and the rest of the web. Depending on the issue, we may be able to fix it (search first and then open an issue if need be). However, we tend to ignore these as they often have no direct solution other than hacky workarounds.</p>\n \n   <h2 id=\"support-sticky-hover-mobile\">Sticky <code>:hover</code>/<code>:focus</code> on mobile</h2>\n-  <p>Even though real hovering isn't possible on most touchscreens, most mobile browsers emulate hovering support and make <code>:hover</code> \"sticky\". In other words, <code>:hover</code> styles start applying after tapping an element and only stop applying after the user taps some other element. This can cause Bootstrap's <code>:hover</code> states to become unwantedly \"stuck\" on such browsers. Some mobile browsers also make <code>:focus</code> similarly sticky. There is currently no simple workaround for these issues other than removing such styles entirely.</p>\n+  <p>Even though real hovering isn't possible on most touchscreens, most mobile browsers emulate hovering support and make <code>:hover</code> \"sticky\". In other words, <code>:hover</code> styles start applying after tapping an element and only stop applying after the user taps some other element. This can cause Bootstrap's <code>:hover</code> states to become undesirably \"stuck\" on such browsers. Some mobile browsers also make <code>:focus</code> similarly sticky. There is currently no simple workaround for these issues other than removing such styles entirely.</p>\n \n   <h2 id=\"support-printing\">Printing</h2>\n   <p>Even in some modern browsers, printing can be quirky.</p>",
    "output": "docs: unwantedly -> undesirably, as the validity of \"unwantedly\" is uncertain"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/header.html b/docs/_includes/header.html\nindex ec2ee2961..08da6e447 100644\n--- a/docs/_includes/header.html\n+++ b/docs/_includes/header.html\n@@ -2,7 +2,6 @@\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n <meta name=\"description\" content=\"Bootstrap, a sleek, intuitive, and powerful mobile first front-end framework for faster and easier web development.\">\n-<meta name=\"keywords\" content=\"HTML, CSS, JS, JavaScript, framework, bootstrap, front-end, frontend, web development\">\n <meta name=\"author\" content=\"Mark Otto, Jacob Thornton, and Bootstrap contributors\">\n \n <title>",
    "output": "docs: Remove <meta name=\"keywords\"> from <head>"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/js/modal.html b/docs/_includes/js/modal.html\nindex bea45b4cf..f42ed334c 100644\n--- a/docs/_includes/js/modal.html\n+++ b/docs/_includes/js/modal.html\n@@ -28,7 +28,7 @@ $('#myModal').on('shown.bs.modal', function () {\n   <p>A rendered modal with header, body, and set of actions in the footer.</p>\n   <div class=\"bs-example bs-example-modal\" data-example-id=\"static-modal\">\n     <div class=\"modal\" tabindex=\"-1\" role=\"dialog\">\n-      <div class=\"modal-dialog\">\n+      <div class=\"modal-dialog\" role=\"document\">\n         <div class=\"modal-content\">\n           <div class=\"modal-header\">\n             <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n@@ -47,7 +47,7 @@ $('#myModal').on('shown.bs.modal', function () {\n   </div><!-- /example -->\n {% highlight html %}\n <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n-  <div class=\"modal-dialog\">\n+  <div class=\"modal-dialog\" role=\"document\">\n     <div class=\"modal-content\">\n       <div class=\"modal-header\">\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n@@ -161,7 +161,7 @@ $('#myModal').on('shown.bs.modal', function () {\n <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\".bs-example-modal-lg\">Large modal</button>\n \n <div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\n-  <div class=\"modal-dialog modal-lg\">\n+  <div class=\"modal-dialog modal-lg\" role=\"document\">\n     <div class=\"modal-content\">\n       ...\n     </div>\n@@ -172,7 +172,7 @@ $('#myModal').on('shown.bs.modal', function () {\n <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\".bs-example-modal-sm\">Small modal</button>\n \n <div class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\n-  <div class=\"modal-dialog modal-sm\">\n+  <div class=\"modal-dialog modal-sm\" role=\"document\">\n     <div class=\"modal-content\">\n       ...\n     </div>\n@@ -182,7 +182,7 @@ $('#myModal').on('shown.bs.modal', function () {\n \n   <!--  Modal content for the above example -->\n   <div class=\"modal fade bs-example-modal-lg\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\n-    <div class=\"modal-dialog modal-lg\">\n+    <div class=\"modal-dialog modal-lg\" role=\"document\">\n       <div class=\"modal-content\">\n \n         <div class=\"modal-header\">\n@@ -196,7 +196,7 @@ $('#myModal').on('shown.bs.modal', function () {\n     </div><!-- /.modal-dialog -->\n   </div><!-- /.modal -->\n   <div class=\"modal fade bs-example-modal-sm\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"mySmallModalLabel\">\n-    <div class=\"modal-dialog modal-sm\">\n+    <div class=\"modal-dialog modal-sm\" role=\"document\">\n       <div class=\"modal-content\">\n \n         <div class=\"modal-header\">",
    "output": "docs: Add missing `role=\"document\"`s to `.modal-dialog`s"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/assets/css/src/docs.css b/docs/assets/css/src/docs.css\nindex a0a4dcec9..7f7f5c5d4 100644\n--- a/docs/assets/css/src/docs.css\n+++ b/docs/assets/css/src/docs.css\n@@ -1622,3 +1622,10 @@ h1[id] {\n   text-decoration: none;\n   background-color: #0269c2;\n }\n+\n+/* Nullify ill-advised printing of hrefs; see #18711 */\n+@media print {\n+  a[href]:after {\t\t\n+    content: \"\" !important;\t\t\n+  }\n+}",
    "output": "docs: disable printing of hrefs; fixes #18711"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex 6a86de120..159d8be78 100644\n--- a/README.md\n+++ b/README.md\n@@ -32,7 +32,7 @@ Several quick start options are available:\n * [Download the latest release](https://github.com/twbs/bootstrap/archive/v3.3.6.zip).\n * Clone the repo: `git clone https://github.com/twbs/bootstrap.git`.\n * Install with [Bower](http://bower.io): `bower install bootstrap`.\n-* Install with [npm](https://www.npmjs.com): `npm install bootstrap`.\n+* Install with [npm](https://www.npmjs.com): `npm install bootstrap@3`.\n * Install with [Meteor](https://www.meteor.com): `meteor add twbs:bootstrap`.\n * Install with [Composer](https://getcomposer.org): `composer require twbs/bootstrap`.\n \ndiff --git a/docs/_includes/getting-started/download.html b/docs/_includes/getting-started/download.html\nindex 1fb3aab61..7564fd3cb 100644\n--- a/docs/_includes/getting-started/download.html\n+++ b/docs/_includes/getting-started/download.html\n@@ -46,7 +46,7 @@\n \n   <h2 id=\"download-npm\">Install with npm</h2>\n   <p>You can also install Bootstrap using <a href=\"https://www.npmjs.com\">npm</a>:</p>\n-  {% highlight bash %}$ npm install bootstrap{% endhighlight %}\n+  {% highlight bash %}$ npm install bootstrap@3{% endhighlight %}\n   <p><code>require('bootstrap')</code> will load all of Bootstrap's jQuery plugins onto the jQuery object. The <code>bootstrap</code> module itself does not export anything. You can manually load Bootstrap's jQuery plugins individually by loading the <code>/js/*.js</code> files under the package's top-level directory.</p>\n   <p>Bootstrap's <code>package.json</code> contains some additional metadata under the following keys:</p>\n   <ul>",
    "output": "docs: Include major version in `npm install bootstrap` commands; refs #18520"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/Gruntfile.js b/Gruntfile.js\nindex 4b3e12283..c01f8a8ea 100644\n--- a/Gruntfile.js\n+++ b/Gruntfile.js\n@@ -512,8 +512,9 @@ module.exports = function (grunt) {\n   grunt.registerTask('docs-js', ['uglify:docsJs', 'uglify:customize']);\n   grunt.registerTask('lint-docs-js', ['jshint:assets', 'jscs:assets']);\n   grunt.registerTask('docs', ['docs-css', 'lint-docs-css', 'docs-js', 'lint-docs-js', 'clean:docs', 'copy:docs', 'build-glyphicons-data', 'build-customizer']);\n+  grunt.registerTask('docs-github', ['jekyll:github', 'htmlmin']);\n \n-  grunt.registerTask('prep-release', ['dist', 'docs', 'jekyll:github', 'htmlmin', 'compress']);\n+  grunt.registerTask('prep-release', ['dist', 'docs', 'docs-github', 'compress']);\n \n   // Task for updating the cached npm packages used by the Travis build (which are controlled by test-infra/npm-shrinkwrap.json).\n   // This task should be run and the updated file should be committed whenever Bootstrap's dependencies change.",
    "output": "grunt: Factor out new docs-github task"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/_includes/js/modal.html b/docs/_includes/js/modal.html\nindex 9798d85bb..bea45b4cf 100644\n--- a/docs/_includes/js/modal.html\n+++ b/docs/_includes/js/modal.html\n@@ -27,7 +27,7 @@ $('#myModal').on('shown.bs.modal', function () {\n   <h3>Static example</h3>\n   <p>A rendered modal with header, body, and set of actions in the footer.</p>\n   <div class=\"bs-example bs-example-modal\" data-example-id=\"static-modal\">\n-    <div class=\"modal\">\n+    <div class=\"modal\" tabindex=\"-1\" role=\"dialog\">\n       <div class=\"modal-dialog\">\n         <div class=\"modal-content\">\n           <div class=\"modal-header\">\n@@ -46,7 +46,7 @@ $('#myModal').on('shown.bs.modal', function () {\n     </div><!-- /.modal -->\n   </div><!-- /example -->\n {% highlight html %}\n-<div class=\"modal fade\">\n+<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n   <div class=\"modal-dialog\">\n     <div class=\"modal-content\">\n       <div class=\"modal-header\">\n@@ -267,7 +267,7 @@ $('#myModal').on('shown.bs.modal', function () {\n   </button>\n </div><!-- /example -->\n {% highlight html %}\n-<div class=\"modal fade\" role=\"dialog\" aria-labelledby=\"gridSystemModalLabel\">\n+<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"gridSystemModalLabel\">\n   <div class=\"modal-dialog\" role=\"document\">\n     <div class=\"modal-content\">\n       <div class=\"modal-header\">",
    "output": "docs: Add missing `tabindex=\"-1\"` & `role=\"dialog\"` to some `.modal`s"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.6/content/reboot.md b/site/content/docs/4.6/content/reboot.md\nindex 4a11eb6c9..b882c8081 100644\n--- a/site/content/docs/4.6/content/reboot.md\n+++ b/site/content/docs/4.6/content/reboot.md\n@@ -52,7 +52,7 @@ $font-family-sans-serif:\n   \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;\n ```\n \n-Note that because the font stack includes emoji fonts, many common symbol/dingbat unicode characters will be rendered as multi-colored pictographs. Their appearance will vary, depending on the style used in the browser/platform's native emoji font, and they won't be affected by any CSS `color` styles.\n+Note that because the font stack includes emoji fonts, many common symbol/dingbat Unicode characters will be rendered as multi-colored pictographs. Their appearance will vary, depending on the style used in the browser/platform's native emoji font, and they won't be affected by any CSS `color` styles.\n \n This `font-family` is applied to the `<body>` and automatically inherited globally throughout Bootstrap. To switch the global `font-family`, update `$font-family-base` and recompile Bootstrap.\n ",
    "output": "docs: Capitalize Unicode (#36735)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.6/utilities/flex.md b/site/content/docs/4.6/utilities/flex.md\nindex 5cdadb762..6b6bd66a8 100644\n--- a/site/content/docs/4.6/utilities/flex.md\n+++ b/site/content/docs/4.6/utilities/flex.md\n@@ -606,6 +606,7 @@ Responsive variations also exist for `align-content`.\n - `.align-content{{ .abbr }}-start`\n - `.align-content{{ .abbr }}-end`\n - `.align-content{{ .abbr }}-center`\n+- `.align-content{{ .abbr }}-between`\n - `.align-content{{ .abbr }}-around`\n - `.align-content{{ .abbr }}-stretch`\n {{- end -}}",
    "output": "docs: Add responsive variations for align-content-between (#35532)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 95d9b7770..8a7606aa8 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -2,6 +2,7 @@ name: BrowserStack\n \n on:\n   push:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex e2fbdd8b0..afc68d667 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/codeql.yml b/.github/workflows/codeql.yml\nindex de6626a15..2aa437417 100644\n--- a/.github/workflows/codeql.yml\n+++ b/.github/workflows/codeql.yml\n@@ -14,6 +14,7 @@ on:\n       - \"!dependabot/**\"\n   schedule:\n     - cron: \"0 2 * * 5\"\n+  workflow_dispatch:\n \n jobs:\n   analyze:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 71e6042b4..0059dc44d 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/dart-sass.yml b/.github/workflows/dart-sass.yml\nindex fab5a3aef..8f1181609 100644\n--- a/.github/workflows/dart-sass.yml\n+++ b/.github/workflows/dart-sass.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 8bdcf9671..cdb2917d9 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 1f03d8cc5..7af17ceb6 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex aef1341ed..418232a66 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -5,6 +5,7 @@ on:\n     branches-ignore:\n       - \"dependabot/**\"\n   pull_request:\n+  workflow_dispatch:\n \n env:\n   FORCE_COLOR: 2",
    "output": "ci: add `workflow_dispatch` (#35454)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_input-group.scss b/scss/_input-group.scss\nindex d72ebeaba..5acedd696 100644\n--- a/scss/_input-group.scss\n+++ b/scss/_input-group.scss\n@@ -52,12 +52,14 @@\n     align-items: center;\n \n     &:not(:last-child) .custom-file-label,\n+    &:not(:last-child) .custom-file-label::after { @include border-right-radius(0); }\n     &:not(:first-child) .custom-file-label { @include border-left-radius(0); }\n   }\n \n   &:not(.has-validation) {\n     > .form-control:not(:last-child),\n     > .custom-select:not(:last-child),\n+    > .custom-file:not(:last-child) .custom-file-label,\n     > .custom-file:not(:last-child) .custom-file-label::after {\n       @include border-right-radius(0);\n     }\n@@ -66,6 +68,7 @@\n   &.has-validation {\n     > .form-control:nth-last-child(n + 3),\n     > .custom-select:nth-last-child(n + 3),\n+    > .custom-file:nth-last-child(n + 3) .custom-file-label,\n     > .custom-file:nth-last-child(n + 3) .custom-file-label::after {\n       @include border-right-radius(0);\n     }",
    "output": "fix(input-group): custom-file with validation (#33239)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/js/src/modal.js b/js/src/modal.js\nindex 2e3017024..a23bfc1ba 100644\n--- a/js/src/modal.js\n+++ b/js/src/modal.js\n@@ -104,22 +104,22 @@ class Modal {\n       return\n     }\n \n-    if ($(this._element).hasClass(CLASS_NAME_FADE)) {\n-      this._isTransitioning = true\n-    }\n-\n     const showEvent = $.Event(EVENT_SHOW, {\n       relatedTarget\n     })\n \n     $(this._element).trigger(showEvent)\n \n-    if (this._isShown || showEvent.isDefaultPrevented()) {\n+    if (showEvent.isDefaultPrevented()) {\n       return\n     }\n \n     this._isShown = true\n \n+    if ($(this._element).hasClass(CLASS_NAME_FADE)) {\n+      this._isTransitioning = true\n+    }\n+\n     this._checkScrollbar()\n     this._setScrollbar()\n \ndiff --git a/js/tests/unit/modal.js b/js/tests/unit/modal.js\nindex a46b3d2de..f2c60684b 100644\n--- a/js/tests/unit/modal.js\n+++ b/js/tests/unit/modal.js\n@@ -102,6 +102,32 @@ $(function () {\n       .bootstrapModal('show')\n   })\n \n+  QUnit.test('should be shown after the first call to show() has been prevented while fading is enabled', function (assert) {\n+    assert.expect(2)\n+    var done = assert.async()\n+\n+    var $el = $('<div class=\"modal fade\"><div class=\"modal-dialog\" style=\"transition-duration: 20ms;\"/></div>').appendTo('#qunit-fixture')\n+\n+    var prevented = false\n+    $el\n+      .on('show.bs.modal', function (e) {\n+        if (!prevented) {\n+          e.preventDefault()\n+          prevented = true\n+\n+          setTimeout(function () {\n+            $el.bootstrapModal('show')\n+          })\n+        }\n+      })\n+      .on('shown.bs.modal', function () {\n+        assert.ok(prevented, 'show prevented')\n+        assert.ok($el.hasClass('fade'))\n+        done()\n+      })\n+      .bootstrapModal('show')\n+  })\n+\n   QUnit.test('should hide modal when hide is called', function (assert) {\n     assert.expect(3)\n     var done = assert.async()",
    "output": "fix(modal): change the order we return from show() method (#34087)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/theme-colors.yml b/site/data/theme-colors.yml\nindex bef5002ac..1876aa280 100644\n--- a/site/data/theme-colors.yml\n+++ b/site/data/theme-colors.yml\n@@ -1,7 +1,7 @@\n - name: primary\n   hex: \"#007bff\"\n - name: secondary\n-  hex: \"#868e96\"\n+  hex: \"#6c757d\"\n - name: success\n   hex: \"#28a745\"\n - name: danger",
    "output": "docs(color): wrong secondary hex code (#34159)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_forms.scss b/scss/mixins/_forms.scss\nindex a32163049..bdb7f69e0 100644\n--- a/scss/mixins/_forms.scss\n+++ b/scss/mixins/_forms.scss\n@@ -85,7 +85,7 @@\n       border-color: $color;\n \n       @if $enable-validation-icons {\n-        padding-right: $input-height-inner;\n+        padding-right: $input-height-inner !important; // stylelint-disable-line declaration-no-important\n         background-image: escape-svg($icon);\n         background-repeat: no-repeat;\n         background-position: right $input-height-inner-quarter center;\n@@ -114,7 +114,7 @@\n       border-color: $color;\n \n       @if $enable-validation-icons {\n-        padding-right: $custom-select-feedback-icon-padding-right;\n+        padding-right: $custom-select-feedback-icon-padding-right !important; // stylelint-disable-line declaration-no-important\n         background: $custom-select-background, $custom-select-bg escape-svg($icon) $custom-select-feedback-icon-position / $custom-select-feedback-icon-size no-repeat;\n       }\n ",
    "output": "fix(forms): input-group and validation icons (#32968)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex ea0a25704..a12bffcf7 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,7 +5,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   browserstack:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 9cfd8be71..16736b5cc 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   bundlewatch:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 4463d52f4..a28059d79 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   css:\ndiff --git a/.github/workflows/dart-sass.yml b/.github/workflows/dart-sass.yml\nindex 83c2f4a64..2b867d6bd 100644\n--- a/.github/workflows/dart-sass.yml\n+++ b/.github/workflows/dart-sass.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   css:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex cda6f7748..150e4d16c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   docs:\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex e7a55083d..369aaced3 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   FORCE_COLOR: 2\n-  NODE: 14.x\n+  NODE: 14\n \n jobs:\n   lint:",
    "output": "ci: change Node.js to `14` (#32796)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/docs-versions.yml b/site/data/docs-versions.yml\nindex 30c2f5ac5..2185002e1 100644\n--- a/site/data/docs-versions.yml\n+++ b/site/data/docs-versions.yml\n@@ -44,3 +44,9 @@\n     - v: \"4.3\"\n     - v: \"4.4\"\n     - v: \"4.5\"\n+\n+- group: v5.x\n+  baseurl: \"https://getbootstrap.com/docs\"\n+  description: \"Our next major release.\"\n+  versions:\n+    - v: \"5.0\"\ndiff --git a/site/layouts/partials/docs-navbar.html b/site/layouts/partials/docs-navbar.html\nindex 01bfef44b..21cb9139a 100644\n--- a/site/layouts/partials/docs-navbar.html\n+++ b/site/layouts/partials/docs-navbar.html\n@@ -37,6 +37,8 @@\n       <div class=\"dropdown-menu dropdown-menu-md-right\" aria-labelledby=\"bd-versions\">\n         <a class=\"dropdown-item active\" href=\"/docs/{{ .Site.Params.docs_version }}/\">Latest (4.5.x)</a>\n         <div class=\"dropdown-divider\"></div>\n+        <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/5.0/\">5.0.x</a>\n+        <div class=\"dropdown-divider\"></div>\n         <a class=\"dropdown-item\" href=\"https://getbootstrap.com/docs/3.4/\">v3.4.1</a>\n         <a class=\"dropdown-item\" href=\"https://getbootstrap.com/2.3.2/\">v2.3.2</a>\n         <div class=\"dropdown-divider\"></div>",
    "output": "docs: add v5.0 in versions (#32728)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 00831721d..917ccc188 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -19,7 +19,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex aafd62d4f..5ce5c9dcb 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex a75f018c5..7fb947005 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/dart-sass.yml b/.github/workflows/dart-sass.yml\nindex 5ac4371e3..689ae5818 100644\n--- a/.github/workflows/dart-sass.yml\n+++ b/.github/workflows/dart-sass.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 58b55fc7c..d2529cbfe 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n \ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 1ec0d6909..09c110fc8 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -25,7 +25,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: ${{ matrix.node }}\n \ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex e850a1f1b..30c434984 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -20,7 +20,7 @@ jobs:\n         uses: actions/checkout@v2\n \n       - name: Set up Node.js\n-        uses: actions/setup-node@v1\n+        uses: actions/setup-node@v2\n         with:\n           node-version: \"${{ env.NODE }}\"\n ",
    "output": "ci: update to actions/setup-node@v2 (#32635)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_clipboard-js.scss b/site/assets/scss/_clipboard-js.scss\nindex b8c6a9e8f..3fcb9c9c0 100644\n--- a/site/assets/scss/_clipboard-js.scss\n+++ b/site/assets/scss/_clipboard-js.scss\n@@ -29,7 +29,8 @@\n   border: 1px solid;\n   @include border-radius();\n \n-  &:hover {\n+  &:hover,\n+  &:focus {\n     color: $white;\n     background-color: $primary;\n   }",
    "output": "docs: style clipboard button on `:focus`, not just `:hover` (#32461)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/data/translations.yml b/site/data/translations.yml\nindex 3fc270cec..7373e335b 100644\n--- a/site/data/translations.yml\n+++ b/site/data/translations.yml\n@@ -27,3 +27,8 @@\n   code: ko\n   description: Bootstrap 4 \ud55c\uad6d\uc5b4 \ubb38\uc11c\n   url: https://getbootstrap.kr/\n+\n+- name: Russian\n+  code: ru\n+  description: Bootstrap 4 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c\n+  url: https://v4.getbootstrap.su/",
    "output": "docs: Add Russian translation (#32253)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex 9163f803c..0b4cfbdaa 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,6 +5,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 7765847ef..aafd62d4f 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex 065f7a937..a75f018c5 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/dart-sass.yml b/.github/workflows/dart-sass.yml\nindex 82896663c..5ac4371e3 100644\n--- a/.github/workflows/dart-sass.yml\n+++ b/.github/workflows/dart-sass.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex ac38d97ea..58b55fc7c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex d14588965..1ec0d6909 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n \n jobs:\n   run:\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex b5035c1ef..e850a1f1b 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,6 +8,7 @@ on:\n \n env:\n   CI: true\n+  FORCE_COLOR: 2\n   NODE: 14.x\n \n jobs:",
    "output": "ci: specify `FORCE_COLOR:2` (#32222)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/content/docs/4.5/components/popovers.md b/site/content/docs/4.5/components/popovers.md\nindex 90fcfb7ed..e06a81769 100644\n--- a/site/content/docs/4.5/components/popovers.md\n+++ b/site/content/docs/4.5/components/popovers.md\n@@ -227,7 +227,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn` and `whiteList` opti\n       <td>selector</td>\n       <td>string | false</td>\n       <td>false</td>\n-      <td>If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to enable dynamic HTML content to have popovers added. See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/Johann-S/pen/djJYPb\">an informative example</a>.</td>\n+      <td>If a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to enable dynamic HTML content to have popovers added. See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/team/bootstrap/pen/qBNGbYK\">an informative example</a>.</td>\n     </tr>\n     <tr>\n       <td>template</td>\ndiff --git a/site/content/docs/4.5/components/tooltips.md b/site/content/docs/4.5/components/tooltips.md\nindex 38f1ca3d7..c297eea16 100644\n--- a/site/content/docs/4.5/components/tooltips.md\n+++ b/site/content/docs/4.5/components/tooltips.md\n@@ -201,7 +201,7 @@ Note that for security reasons the `sanitize`, `sanitizeFn` and `whiteList` opti\n       <td>selector</td>\n       <td>string | false</td>\n       <td>false</td>\n-      <td>If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (<code>jQuery.on</code> support). See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/Johann-S/pen/djJYPb\">an informative example</a>.</td>\n+      <td>If a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (<code>jQuery.on</code> support). See <a href=\"{{< param repo >}}/issues/4215\">this</a> and <a href=\"https://codepen.io/team/bootstrap/pen/qBNGbYK\">an informative example</a>.</td>\n     </tr>\n     <tr>\n       <td>template</td>",
    "output": "docs: update selector CodePen example (#32202)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/content/reboot.md b/site/docs/4.5/content/reboot.md\nindex fed0a339c..83ec13aef 100644\n--- a/site/docs/4.5/content/reboot.md\n+++ b/site/docs/4.5/content/reboot.md\n@@ -45,6 +45,7 @@ $font-family-sans-serif:\n   \"Helvetica Neue\", Arial,\n   // Linux\n   \"Noto Sans\",\n+  \"Liberation Sans\",\n   // Sans serif fallback\n   sans-serif,\n   // Emoji fonts\ndiff --git a/site/docs/4.5/getting-started/theming.md b/site/docs/4.5/getting-started/theming.md\nindex bc8095792..8f4b00c37 100644\n--- a/site/docs/4.5/getting-started/theming.md\n+++ b/site/docs/4.5/getting-started/theming.md\n@@ -447,7 +447,7 @@ Here are the variables we include (note that the `:root` is required). They're l\n   --breakpoint-md: 768px;\n   --breakpoint-lg: 992px;\n   --breakpoint-xl: 1200px;\n-  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n+  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n   --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n }\n {% endhighlight %}",
    "output": "docs: mention \"Liberation Sans\" (#32083)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/browserstack.yml b/.github/workflows/browserstack.yml\nindex e6aa9422a..9163f803c 100644\n--- a/.github/workflows/browserstack.yml\n+++ b/.github/workflows/browserstack.yml\n@@ -5,7 +5,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   browserstack:\ndiff --git a/.github/workflows/bundlewatch.yml b/.github/workflows/bundlewatch.yml\nindex 6f4628027..7765847ef 100644\n--- a/.github/workflows/bundlewatch.yml\n+++ b/.github/workflows/bundlewatch.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   bundlewatch:\ndiff --git a/.github/workflows/css.yml b/.github/workflows/css.yml\nindex e16f90fa2..065f7a937 100644\n--- a/.github/workflows/css.yml\n+++ b/.github/workflows/css.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   css:\ndiff --git a/.github/workflows/dart-sass.yml b/.github/workflows/dart-sass.yml\nindex a8eff28a8..82896663c 100644\n--- a/.github/workflows/dart-sass.yml\n+++ b/.github/workflows/dart-sass.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   css:\ndiff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 932a503ae..5f2e3b962 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n   RUBY: 2.7.x\n \n jobs:\ndiff --git a/.github/workflows/js.yml b/.github/workflows/js.yml\nindex 93a7ce13b..d14588965 100644\n--- a/.github/workflows/js.yml\n+++ b/.github/workflows/js.yml\n@@ -17,7 +17,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        node: [10, 12]\n+        node: [10, 12, 14]\n \n     steps:\n       - name: Clone repository\n@@ -48,7 +48,7 @@ jobs:\n \n       - name: Run Coveralls\n         uses: coverallsapp/github-action@master\n-        if: matrix.node == 12\n+        if: matrix.node == 14\n         with:\n           github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n           path-to-lcov: \"./js/coverage/lcov.info\"\ndiff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml\nindex 7aaafc724..b5035c1ef 100644\n--- a/.github/workflows/lint.yml\n+++ b/.github/workflows/lint.yml\n@@ -8,7 +8,7 @@ on:\n \n env:\n   CI: true\n-  NODE: 12.x\n+  NODE: 14.x\n \n jobs:\n   lint:",
    "output": "ci: switch to Node.js 14. (#32003)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/components/forms.md b/site/docs/4.5/components/forms.md\nindex 22a8904b9..a3cd02618 100644\n--- a/site/docs/4.5/components/forms.md\n+++ b/site/docs/4.5/components/forms.md\n@@ -400,34 +400,31 @@ At times, you maybe need to use margin or padding utilities to create that perfe\n       <input type=\"password\" class=\"form-control\" id=\"inputPassword3\">\n     </div>\n   </div>\n-  <fieldset class=\"form-group\">\n-    <div class=\"row\">\n-      <legend class=\"col-form-label col-sm-2 pt-0\">Radios</legend>\n-      <div class=\"col-sm-10\">\n-        <div class=\"form-check\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios1\" value=\"option1\" checked>\n-          <label class=\"form-check-label\" for=\"gridRadios1\">\n-            First radio\n-          </label>\n-        </div>\n-        <div class=\"form-check\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios2\" value=\"option2\">\n-          <label class=\"form-check-label\" for=\"gridRadios2\">\n-            Second radio\n-          </label>\n-        </div>\n-        <div class=\"form-check disabled\">\n-          <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios3\" value=\"option3\" disabled>\n-          <label class=\"form-check-label\" for=\"gridRadios3\">\n-            Third disabled radio\n-          </label>\n-        </div>\n+  <fieldset class=\"form-group row\">\n+    <legend class=\"col-form-label col-sm-2 float-sm-left pt-0\">Radios</legend>\n+    <div class=\"col-sm-10\">\n+      <div class=\"form-check\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios1\" value=\"option1\" checked>\n+        <label class=\"form-check-label\" for=\"gridRadios1\">\n+          First radio\n+        </label>\n+      </div>\n+      <div class=\"form-check\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios2\" value=\"option2\">\n+        <label class=\"form-check-label\" for=\"gridRadios2\">\n+          Second radio\n+        </label>\n+      </div>\n+      <div class=\"form-check disabled\">\n+        <input class=\"form-check-input\" type=\"radio\" name=\"gridRadios\" id=\"gridRadios3\" value=\"option3\" disabled>\n+        <label class=\"form-check-label\" for=\"gridRadios3\">\n+          Third disabled radio\n+        </label>\n       </div>\n     </div>\n   </fieldset>\n   <div class=\"form-group row\">\n-    <div class=\"col-sm-2\">Checkbox</div>\n-    <div class=\"col-sm-10\">\n+    <div class=\"col-sm-10 offset-sm-2\">\n       <div class=\"form-check\">\n         <input class=\"form-check-input\" type=\"checkbox\" id=\"gridCheck1\">\n         <label class=\"form-check-label\" for=\"gridCheck1\">\n@@ -705,6 +702,7 @@ Add the `disabled` attribute to a `<fieldset>` to disable all the controls withi\n {% capture example %}\n <form>\n   <fieldset disabled>\n+    <legend>Disabled fieldset example</legend>\n     <div class=\"form-group\">\n       <label for=\"disabledTextInput\">Disabled input</label>\n       <input type=\"text\" id=\"disabledTextInput\" class=\"form-control\" placeholder=\"Disabled input\">",
    "output": "docs(forms): backport #31904"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/components/forms.md b/site/docs/4.5/components/forms.md\nindex 4a8f62947..b9fe4ca46 100644\n--- a/site/docs/4.5/components/forms.md\n+++ b/site/docs/4.5/components/forms.md\n@@ -1276,11 +1276,11 @@ $('.your-checkbox').prop('indeterminate', true)\n \n {% capture example %}\n <div class=\"custom-control custom-radio custom-control-inline\">\n-  <input type=\"radio\" id=\"customRadioInline1\" name=\"customRadioInline1\" class=\"custom-control-input\">\n+  <input type=\"radio\" id=\"customRadioInline1\" name=\"customRadioInline\" class=\"custom-control-input\">\n   <label class=\"custom-control-label\" for=\"customRadioInline1\">Toggle this custom radio</label>\n </div>\n <div class=\"custom-control custom-radio custom-control-inline\">\n-  <input type=\"radio\" id=\"customRadioInline2\" name=\"customRadioInline1\" class=\"custom-control-input\">\n+  <input type=\"radio\" id=\"customRadioInline2\" name=\"customRadioInline\" class=\"custom-control-input\">\n   <label class=\"custom-control-label\" for=\"customRadioInline2\">Or toggle this other custom radio</label>\n </div>\n {% endcapture %}",
    "output": "docs(forms): change inline custom radio name (#31936)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_includes/callout-danger-async-methods.md b/site/_includes/callout-danger-async-methods.md\nindex 083f28f23..2ca34afe0 100644\n--- a/site/_includes/callout-danger-async-methods.md\n+++ b/site/_includes/callout-danger-async-methods.md\n@@ -3,6 +3,6 @@\n \n All API methods are **asynchronous** and start a **transition**. They return to the caller as soon as the transition is started but **before it ends**. In addition, a method call on a **transitioning component will be ignored**.\n \n-[See our JavaScript documentation for more information]({{ site.baseurl }}/docs/{{ site.docs_version }}/getting-started/javascript/).\n+[See our JavaScript documentation for more information]({{ site.baseurl }}/docs/{{ site.docs_version }}/getting-started/javascript/#asynchronous-functions-and-transitions).\n {% endcapture %}\n {% include callout.html content=callout type=\"danger\" %}",
    "output": "docs: link to the Asynchronous functions section"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/assets/scss/_clipboard-js.scss b/site/docs/4.5/assets/scss/_clipboard-js.scss\nindex 760a806bb..b8c6a9e8f 100644\n--- a/site/docs/4.5/assets/scss/_clipboard-js.scss\n+++ b/site/docs/4.5/assets/scss/_clipboard-js.scss\n@@ -18,19 +18,19 @@\n \n .btn-clipboard {\n   position: absolute;\n-  top: .5rem;\n-  right: .5rem;\n+  top: .65rem;\n+  right: .65rem;\n   z-index: 10;\n   display: block;\n   padding: .25rem .5rem;\n-  @include font-size(75%);\n-  color: #818a91;\n-  background-color: transparent;\n-  border: 0;\n+  @include font-size(65%);\n+  color: $primary;\n+  background-color: $white;\n+  border: 1px solid;\n   @include border-radius();\n \n   &:hover {\n     color: $white;\n-    background-color: #027de7;\n+    background-color: $primary;\n   }\n }\ndiff --git a/site/docs/4.5/assets/scss/_component-examples.scss b/site/docs/4.5/assets/scss/_component-examples.scss\nindex 41360d6c4..a29671897 100644\n--- a/site/docs/4.5/assets/scss/_component-examples.scss\n+++ b/site/docs/4.5/assets/scss/_component-examples.scss\n@@ -366,8 +366,8 @@\n .highlight {\n   pre {\n     padding: 0;\n-    margin-top: 0;\n-    margin-bottom: 0;\n+    margin-top: .65rem;\n+    margin-bottom: .65rem;\n     background-color: transparent;\n     border: 0;\n   }",
    "output": "docs: Add top/bottom margin to highlighted code samples (#31706)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_includes/skippy.html b/site/_includes/skippy.html\nindex ec7507d53..4fb12b8bd 100644\n--- a/site/_includes/skippy.html\n+++ b/site/_includes/skippy.html\n@@ -1,3 +1,8 @@\n-<a class=\"skippy sr-only sr-only-focusable\" href=\"#content\">\n-  <span class=\"skippy-text\">Skip to main content</span>\n-</a>\n+<div class=\"skippy overflow-hidden\">\n+  <div class=\"container-xl\">\n+    <a class=\"sr-only sr-only-focusable d-inline-flex p-2 m-1\" href=\"#content\">Skip to main content</a>\n+    {%- if page.layout == \"docs\" -%}\n+      <a class=\"sr-only sr-only-focusable d-none d-md-inline-flex p-2 m-1\" href=\"#bd-docs-nav\">Skip to docs navigation</a>\n+    {%- endif -%}\n+  </div>\n+</div>\ndiff --git a/site/docs/4.5/assets/scss/_skippy.scss b/site/docs/4.5/assets/scss/_skippy.scss\nindex bd2aadb82..894db70db 100644\n--- a/site/docs/4.5/assets/scss/_skippy.scss\n+++ b/site/docs/4.5/assets/scss/_skippy.scss\n@@ -1,17 +1,20 @@\n+// stylelint-disable declaration-no-important\n+\n .skippy {\n-  display: block;\n-  padding: 1em;\n-  color: $white;\n-  text-align: center;\n   background-color: $bd-purple;\n-  outline: 0;\n \n-  @include hover() {\n+  a {\n     color: $white;\n   }\n-}\n \n-.skippy-text {\n-  padding: .5em;\n-  outline: 1px dotted;\n+  &:focus-within a {\n+    position: static !important;\n+    width: auto !important;\n+    height: auto !important;\n+    padding: $spacer / 2 !important;\n+    margin: $spacer / 4 !important;\n+    overflow: visible !important;\n+    clip: auto !important;\n+    white-space: normal !important;\n+  }\n }",
    "output": "docs(skippy): prevent skip links from overlapping header"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_data/core-team.yml b/site/_data/core-team.yml\nindex 5fbae8506..f59b4285c 100644\n--- a/site/_data/core-team.yml\n+++ b/site/_data/core-team.yml\n@@ -27,3 +27,6 @@\n \n - name: Shohei Yoshida\n   user: ysds\n+\n+- name: Ga\u00ebl Poupard\n+  user: ffoodd",
    "output": "docs: add Ga\u00ebl Poupard to the core team page (#31081)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/components/toasts.md b/site/docs/4.5/components/toasts.md\nindex 58b5cb5ca..7ef36c7f7 100644\n--- a/site/docs/4.5/components/toasts.md\n+++ b/site/docs/4.5/components/toasts.md\n@@ -167,7 +167,7 @@ You can also get fancy with flexbox utilities to align toasts horizontally and/o\n \n {% capture example %}\n <!-- Flexbox container for aligning the toasts -->\n-<div aria-live=\"polite\" aria-atomic=\"true\" class=\"d-flex justify-content-center align-items-center\" style=\"min-height: 200px;\">\n+<div aria-live=\"polite\" aria-atomic=\"true\" class=\"d-flex justify-content-center align-items-center\" style=\"height: 200px;\">\n \n   <!-- Then put toasts within -->\n   <div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">",
    "output": "docs(toasts): centered examples flexbugs #3 in IE11"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_toasts.scss b/scss/_toasts.scss\nindex 6aa5352a3..1d9ec1357 100644\n--- a/scss/_toasts.scss\n+++ b/scss/_toasts.scss\n@@ -1,4 +1,7 @@\n .toast {\n+  // Prevents from shrinking in IE11, when in a flex container\n+  // See https://github.com/twbs/bootstrap/issues/28341\n+  flex-basis: $toast-max-width;\n   max-width: $toast-max-width;\n   overflow: hidden; // cheap rounded corners on nested items\n   @include font-size($toast-font-size);",
    "output": "fix(toasts): IE11 shrinks toasts when in flex container, unless we specify flex-basis"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 0aac36a6b..c371f24be 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -32,7 +32,7 @@ jobs:\n         run: 'echo \"gem: --no-document\" > ~/.gemrc'\n \n       - name: Set up Ruby cache\n-        uses: actions/cache@v1\n+        uses: actions/cache@v2\n         with:\n           path: vendor/bundle\n           key: ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}\n@@ -41,7 +41,7 @@ jobs:\n             ${{ runner.os }}-ruby-v${{ matrix.ruby }}-\n \n       - name: Set up npm cache\n-        uses: actions/cache@v1\n+        uses: actions/cache@v2\n         with:\n           path: ~/.npm\n           key: ${{ runner.os }}-node-v${{ matrix.node }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}",
    "output": "ci: update to `actions/cache@2`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/mixins/_forms.scss b/scss/mixins/_forms.scss\nindex 57c2d79f2..39b52f3ca 100644\n--- a/scss/mixins/_forms.scss\n+++ b/scss/mixins/_forms.scss\n@@ -53,6 +53,7 @@\n   .#{$state}-tooltip {\n     position: absolute;\n     top: 100%;\n+    left: 0;\n     z-index: 5;\n     display: none;\n     max-width: 100%; // Contain to parent when possible",
    "output": "fix(forms): IE11 misalign validation tooltips in input-groups (#30960)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/components/card.md b/site/docs/4.5/components/card.md\nindex 818396127..b234eeaa5 100644\n--- a/site/docs/4.5/components/card.md\n+++ b/site/docs/4.5/components/card.md\n@@ -356,9 +356,28 @@ Cards include a few options for working with images. Choose from appending \"imag\n \n Similar to headers and footers, cards can include top and bottom \"image caps\"\u2014images at the top or bottom of a card.\n \n-{% capture example %}\n+<div class=\"bd-example\">\n+  <div class=\"card mb-3\">\n+    {% include icons/placeholder.svg width=\"100%\" height=\"180\" class=\"card-img-top\" text=\"Image cap\" %}\n+    <div class=\"card-body\">\n+      <h5 class=\"card-title\">Card title</h5>\n+      <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n+      <p class=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\n+    </div>\n+  </div>\n+  <div class=\"card\">\n+    <div class=\"card-body\">\n+      <h5 class=\"card-title\">Card title</h5>\n+      <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n+      <p class=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\n+    </div>\n+    {% include icons/placeholder.svg width=\"100%\" height=\"180\" class=\"card-img-bottom\" text=\"Image cap\" %}\n+  </div>\n+</div>\n+\n+{% highlight html %}\n <div class=\"card mb-3\">\n-  {% include icons/placeholder.svg width=\"100%\" height=\"180\" class=\"card-img-top\" text=\"Image cap\" %}\n+  <img src=\"...\" class=\"card-img-top\" alt=\"...\">\n   <div class=\"card-body\">\n     <h5 class=\"card-title\">Card title</h5>\n     <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n@@ -371,10 +390,9 @@ Similar to headers and footers, cards can include top and bottom \"image caps\"\u2014\n     <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n     <p class=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\n   </div>\n-  {% include icons/placeholder.svg width=\"100%\" height=\"180\" class=\"card-img-bottom\" text=\"Image cap\" %}\n+  <img src=\"...\" class=\"card-img-bottom\" alt=\"...\">\n </div>\n-{% endcapture %}\n-{% include example.html content=example %}\n+{% endhighlight %}\n \n ### Image overlays\n ",
    "output": "docs(cards): fix card-img-bottom example (#30925)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.5/getting-started/download.md b/site/docs/4.5/getting-started/download.md\nindex 79d8d1752..fc5b93819 100644\n--- a/site/docs/4.5/getting-started/download.md\n+++ b/site/docs/4.5/getting-started/download.md\n@@ -43,7 +43,7 @@ Skip the download with [BootstrapCDN](https://www.bootstrapcdn.com/) to deliver\n <script src=\"{{ site.cdn.js }}\" integrity=\"{{ site.cdn.js_hash }}\" crossorigin=\"anonymous\"></script>\n {% endhighlight %}\n \n-If you're using our compiled JavaScript, don't forget to include CDN versions of jQuery and Popper.js before it.\n+If you're using our compiled JavaScript, don't forget to include jQuery and Popper.js, via a CDN preferably, before our JS.\n \n {% highlight html %}\n <script src=\"{{ site.cdn.jquery }}\" integrity=\"{{ site.cdn.jquery_hash }}\" crossorigin=\"anonymous\"></script>",
    "output": "docs(cdn): improve wording to match master and fix #30873 (#30896)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex d87b1e122..0aac36a6b 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -35,17 +35,19 @@ jobs:\n         uses: actions/cache@v1\n         with:\n           path: vendor/bundle\n-          key: ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+          key: ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}\n           restore-keys: |\n-            ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+            ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}\n+            ${{ runner.os }}-ruby-v${{ matrix.ruby }}-\n \n       - name: Set up npm cache\n         uses: actions/cache@v1\n         with:\n           path: ~/.npm\n-          key: ${{ runner.os }}-node-v${{ matrix.node }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+          key: ${{ runner.os }}-node-v${{ matrix.node }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}\n           restore-keys: |\n-            ${{ runner.OS }}-node-v${{ matrix.node }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+            ${{ runner.OS }}-node-v${{ matrix.node }}-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}\n+            ${{ runner.OS }}-node-v${{ matrix.node }}-\n \n       - name: Set up Bundler\n         run: gem install bundler -v \"~> 1.17\"",
    "output": "ci: simplify cache"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 685aa13f1..d87b1e122 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -50,9 +50,6 @@ jobs:\n       - name: Set up Bundler\n         run: gem install bundler -v \"~> 1.17\"\n \n-      - name: Update rubygems\n-        run: gem update --system\n-\n       - run: ruby --version\n       - run: gem --version\n       - run: bundle --version",
    "output": "ci: stop updating RubyGems since it's not needed"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex ea38f78ef..685aa13f1 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -56,8 +56,6 @@ jobs:\n       - run: ruby --version\n       - run: gem --version\n       - run: bundle --version\n-      - run: node --version\n-      - run: npm --version\n       - run: java -version\n \n       - name: Install npm dependencies",
    "output": "ci: remove no longer needed steps (#30674)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 83604d85a..ea38f78ef 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -74,6 +74,7 @@ jobs:\n         if: matrix.node == 10\n         env:\n           BUNDLEWATCH_GITHUB_TOKEN: \"${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }}\"\n+          CI_BRANCH_BASE: v4-dev\n \n       - name: Run BrowserStack tests\n         run: npm run js-test-cloud",
    "output": "ci: set `CI_BRANCH_BASE` to v4-dev"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scss/_functions.scss b/scss/_functions.scss\nindex ea02aa48c..eb2471d75 100644\n--- a/scss/_functions.scss\n+++ b/scss/_functions.scss\n@@ -23,10 +23,12 @@\n // Starts at zero\n // Used to ensure the min-width of the lowest breakpoint starts at 0.\n @mixin _assert-starts-at-zero($map, $map-name: \"$grid-breakpoints\") {\n-  $values: map-values($map);\n-  $first-value: nth($values, 1);\n-  @if $first-value != 0 {\n-    @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n+  @if length($map) > 0 {\n+    $values: map-values($map);\n+    $first-value: nth($values, 1);\n+    @if $first-value != 0 {\n+      @warn \"First breakpoint in #{$map-name} must start at 0, but starts at #{$first-value}.\";\n+    }\n   }\n }\n ",
    "output": "feat: checks for `$grid-breakpoints` map list (#30609)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex a41906322..05a78a458 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -12,7 +12,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         node: [10, 12]\n-        ruby: [2.4.x]\n+        ruby: [2.6.x]\n \n     steps:\n       - name: Clone repository",
    "output": "ci: switch to Ruby 2.6."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 1958de409..8ccbdbae1 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -12,7 +12,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         node: [10, 12]\n-        ruby: [2.4.x]\n+        ruby: [2.6]\n \n     steps:\n       - name: Clone repository\n@@ -23,7 +23,7 @@ jobs:\n         with:\n           node-version: ${{ matrix.node }}\n \n-      - name: Set up Ruby 2.4\n+      - name: Set up Ruby\n         uses: actions/setup-ruby@v1\n         with:\n           ruby-version: ${{ matrix.ruby }}\n@@ -50,9 +50,6 @@ jobs:\n       - name: Set up Bundler\n         run: gem install bundler -v \"~> 1.17\"\n \n-      - name: Update rubygems\n-        run: gem update --system\n-\n       - run: ruby --version\n       - run: gem --version\n       - run: bundle --version",
    "output": "ci: switch to Ruby 2.6"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.4/getting-started/theming.md b/site/docs/4.4/getting-started/theming.md\nindex 99c5066c5..32f83f308 100644\n--- a/site/docs/4.4/getting-started/theming.md\n+++ b/site/docs/4.4/getting-started/theming.md\n@@ -193,7 +193,7 @@ In practice, you'd call the function and pass in two parameters: the name of the\n \n Additional functions could be added in the future or your own custom Sass to create level functions for additional Sass maps, or even a generic one if you wanted to be more verbose.\n \n-### Color contrast\n+#### Color contrast\n \n An additional function we include in Bootstrap is the color contrast function, `color-yiq`. It utilizes the [YIQ color space](https://en.wikipedia.org/wiki/YIQ) to automatically return a light (`#fff`) or dark (`#111`) contrast color based on the specified base color. This function is especially useful for mixins or loops where you're generating multiple classes.\n \n@@ -223,11 +223,11 @@ You can also specify a base color with our color map functions:\n }\n {% endhighlight %}\n \n-## Escape SVG\n+#### Escape SVG\n \n We use the `escape-svg` function to escape the `<`, `>` and `#` characters for SVG background images. These characters need to be escaped to properly render the background images in IE.\n \n-## Add and Subtract functions\n+#### Add and Subtract functions\n \n We use the `add` and `subtract` functions to wrap the CSS `calc` function. The primary purpose of these functions is to avoid errors when a \"unitless\" `0` value is passed into a `calc` expression. Expressions like `calc(10px - 0)` will return an error in all browsers, despite being mathematically correct.\n ",
    "output": "docs(theming): improve headings hierarchy under Sass \u2192 Functions (#30207)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 18e44ea40..d55e6d7f1 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -12,6 +12,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         node: [6, 8, 12]\n+        ruby: [2.4.x]\n \n     steps:\n       - name: Clone repository\n@@ -25,7 +26,7 @@ jobs:\n       - name: Set up Ruby 2.4\n         uses: actions/setup-ruby@v1\n         with:\n-          ruby-version: 2.4.x\n+          ruby-version: ${{ matrix.ruby }}\n \n       - name: Disable gem docs\n         run: 'echo \"gem: --no-document\" > ~/.gemrc'\n@@ -34,9 +35,10 @@ jobs:\n         uses: actions/cache@v1\n         with:\n           path: vendor/bundle\n-          key: ${{ runner.os }}-gem-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+          key: ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}\n           restore-keys: |\n-            ${{ runner.os }}-gem-\n+            ${{ runner.os }}-ruby-v${{ matrix.ruby }}-${{ hashFiles('Gemfile') }}-${{ hashFiles('Gemfile.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}\n+            ${{ runner.os }}-ruby-v${{ matrix.ruby }}-\n \n       - name: Set up npm cache\n         uses: actions/cache@v1",
    "output": "ci: fix Ruby caching"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 994972a03..2cb23ab26 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -15,9 +15,7 @@ jobs:\n \n     steps:\n       - name: Clone repository\n-        uses: actions/checkout@v1\n-        with:\n-          fetch-depth: 3\n+        uses: actions/checkout@v2\n \n       - name: Set Node.js version\n         uses: actions/setup-node@v1",
    "output": "ci: update to `actions/checkout@v2` (#29847)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/_data/translations.yml b/site/_data/translations.yml\nindex 030fa771b..f4dfd2366 100644\n--- a/site/_data/translations.yml\n+++ b/site/_data/translations.yml\n@@ -17,3 +17,8 @@\n   code: ja\n   description: Bootstrap 4 \u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n   url: https://getbootstrap.jp/\n+\n+- name: Korean\n+  code: ko\n+  description: Bootstrap 4 \ud55c\uad6d\uc5b4 \ubb38\uc11c\n+  url: https://getbootstrap.kr/",
    "output": "docs: Add Korean translation link"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex e3bb25ef2..a3c76ad6c 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -29,8 +29,11 @@ jobs:\n         with:\n           ruby-version: 2.4.x\n \n+      - name: Disable gem docs\n+        run: 'echo \"gem: --no-document\" > ~/.gemrc'\n+\n       - name: Set up Bundler\n-        run: gem install bundler -v \"~> 1.17\" --no-document\n+        run: gem install bundler -v \"~> 1.17\"\n \n       - run: ruby --version\n       - run: gem --version",
    "output": "ci: disable gem docs globally"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex d7dc4708c..e3bb25ef2 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -30,7 +30,7 @@ jobs:\n           ruby-version: 2.4.x\n \n       - name: Set up Bundler\n-        run: gem install bundler\n+        run: gem install bundler -v \"~> 1.17\" --no-document\n \n       - run: ruby --version\n       - run: gem --version",
    "output": "ci: install bundler 1.17 and without docs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex 71fa94351..d7dc4708c 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -1,5 +1,7 @@\n name: Tests\n on: [push, pull_request]\n+env:\n+  CI: true\n \n jobs:\n   run:\n@@ -39,8 +41,6 @@ jobs:\n \n       - name: Install npm dependencies\n         run: npm install\n-        env:\n-          CI: true\n \n       - name: Install bundler dependencies\n         run: bundle install --deployment --jobs=3 --retry=3 --clean",
    "output": "ci: move `CI` env variable to the root of the workflow. (#29499)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.3/assets/scss/_colors.scss b/site/docs/4.3/assets/scss/_colors.scss\nindex 8d2825c57..10ad8efdb 100644\n--- a/site/docs/4.3/assets/scss/_colors.scss\n+++ b/site/docs/4.3/assets/scss/_colors.scss\n@@ -9,13 +9,6 @@\n   }\n }\n \n-@each $color, $value in $theme-colors {\n-  .swatch-#{$color} {\n-    color: color-yiq($value);\n-    background-color: #{$value};\n-  }\n-}\n-\n @each $color, $value in $grays {\n   .swatch-#{$color} {\n     color: color-yiq($value);\ndiff --git a/site/docs/4.3/getting-started/theming.md b/site/docs/4.3/getting-started/theming.md\nindex c52ca752b..198a55da3 100644\n--- a/site/docs/4.3/getting-started/theming.md\n+++ b/site/docs/4.3/getting-started/theming.md\n@@ -292,7 +292,7 @@ We use a subset of all colors to create a smaller color palette for generating c\n <div class=\"row\">\n   {% for color in site.data.theme-colors %}\n     <div class=\"col-md-4\">\n-      <div class=\"p-3 mb-3 swatch-{{ color.name }}\">{{ color.name | capitalize }}</div>\n+      <div class=\"p-3 mb-3 bg-{{ color.name }} {% if color.name == \"light\" or color.name == \"warning\" %}text-dark{% else %}text-white{% endif %}\">{{ color.name | capitalize }}</div>\n     </div>\n   {% endfor %}\n </div>",
    "output": "docs: remove swatches for theme colors. (#29327)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.3/assets/scss/_ads.scss b/site/docs/4.3/assets/scss/_ads.scss\nindex 0c08025c2..da682b952 100644\n--- a/site/docs/4.3/assets/scss/_ads.scss\n+++ b/site/docs/4.3/assets/scss/_ads.scss\n@@ -34,5 +34,6 @@\n \n .carbon-poweredby {\n   display: block;\n+  margin-top: .75rem;\n   color: #777 !important;\n }",
    "output": "docs: fix tap targets (#29272)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/docs/4.3/assets/scss/_nav.scss b/site/docs/4.3/assets/scss/_nav.scss\nindex c3fdc8e5f..6de8447a8 100644\n--- a/site/docs/4.3/assets/scss/_nav.scss\n+++ b/site/docs/4.3/assets/scss/_nav.scss\n@@ -67,7 +67,7 @@\n     font-weight: 600;\n     color: $gray-900;\n     background-color: transparent;\n-    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");\n+    background-image: escape-svg($dropdown-active-icon);\n     background-repeat: no-repeat;\n     background-position: .4rem .6rem;\n     background-size: .75rem .75rem;\ndiff --git a/site/docs/4.3/assets/scss/_variables.scss b/site/docs/4.3/assets/scss/_variables.scss\nindex e8bf3728d..32b138a45 100644\n--- a/site/docs/4.3/assets/scss/_variables.scss\n+++ b/site/docs/4.3/assets/scss/_variables.scss\n@@ -7,6 +7,7 @@ $bd-download:      #ffe484 !default;\n $bd-info:          #5bc0de !default;\n $bd-warning:       #f0ad4e !default;\n $bd-danger:        #d9534f !default;\n+$dropdown-active-icon: url(\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='#292b2c' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/></svg>\");\n \n // Enable responsive font sizes for font sizes defined in the docs\n // The weird if test is made as a workaround to prevent a false fusv error.",
    "output": "docs: use the `escape_svg` function."
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/layouts/_default/single.html b/site/layouts/_default/single.html\nindex 58b55331c..2ba0b826f 100644\n--- a/site/layouts/_default/single.html\n+++ b/site/layouts/_default/single.html\n@@ -6,6 +6,8 @@\n   <body>\n     {{ partial \"skippy\" . }}\n \n+    {{ partial \"announcement\" . }}\n+\n     {{ partial \"docs-navbar\" . }}\n \n     <header class=\"d-flex flex-column flex-md-row align-items-md-center p-5 bg-light\">",
    "output": "feat(eol): Add announcement to Examples page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/site/assets/scss/_nav.scss b/site/assets/scss/_nav.scss\nindex d8d24b723..5e87acf09 100644\n--- a/site/assets/scss/_nav.scss\n+++ b/site/assets/scss/_nav.scss\n@@ -69,3 +69,12 @@\n     background: escape-svg($dropdown-active-icon) no-repeat .4rem .6rem/.75rem .75rem;\n   }\n }\n+\n+.bd-announcement {\n+  color: $white;\n+  background-color: $bd-purple;\n+  a {\n+    color: $white;\n+    text-decoration: underline;\n+  }\n+}\ndiff --git a/site/layouts/_default/docs.html b/site/layouts/_default/docs.html\nindex 664a85494..afb88c642 100644\n--- a/site/layouts/_default/docs.html\n+++ b/site/layouts/_default/docs.html\n@@ -6,6 +6,8 @@\n   <body>\n     {{ partial \"skippy\" . }}\n \n+    {{ partial \"announcement\" . }}\n+\n     {{ partial \"docs-navbar\" . }}\n \n     <div class=\"container-fluid\">\ndiff --git a/site/layouts/_default/home.html b/site/layouts/_default/home.html\nindex c03de11ab..c404556e5 100644\n--- a/site/layouts/_default/home.html\n+++ b/site/layouts/_default/home.html\n@@ -6,6 +6,8 @@\n   <body>\n     {{ partial \"skippy\" . }}\n \n+    {{ partial \"announcement\" . }}\n+\n     {{ partial \"docs-navbar\" . }}\n \n     {{ partial \"home/masthead\" . }}\ndiff --git a/site/layouts/partials/announcement.html b/site/layouts/partials/announcement.html\nnew file mode 100644\nindex 000000000..f7aa62c86\n--- /dev/null\n+++ b/site/layouts/partials/announcement.html\n@@ -0,0 +1,17 @@\n+<div class=\"d-block px-3 py-2 text-center text-bold bd-announcement\">\n+  Bootstrap 4 has reached end of life.\n+  <a\n+    href=\"https://getbootstrap.com/docs/5.3/migration/\"\n+    target=\"_blank\"\n+    rel=\"noopener\"\n+    >Upgrade to the latest</a\n+  >\n+  or consider\n+  <a\n+    href=\"https://www.herodevs.com/support/nes-bootstrap?utm_source=Bootstrap_site&utm_medium=Banner&utm_campaign=v4_eol\"\n+    target=\"_blank\"\n+    rel=\"noopener\"\n+    >Never-Ending-Support</a\n+  >\n+  for your project\n+</div>",
    "output": "feat(announcement): Add End of Life announcement"
  }
]