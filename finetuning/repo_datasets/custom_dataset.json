[
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": " diff --git a/evals/scripts/create_eval_set_from_repo_datasets.py b/evals/scripts/create_eval_set_from_repo_datasets.py\nindex fd828bb..478a973 100644\n--- a/evals/scripts/create_eval_set_from_repo_datasets.py\n+++ b/evals/scripts/create_eval_set_from_repo_datasets.py\n@@ -172,12 +172,10 @@ tests:\n                     system_prompt_content = f.read().strip()\n                 logger.info(f'Successfully loaded system prompt from {system_prompt_file}')\n             else:\n-                system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'\n                 logger.warning(f'System prompt file not found at {system_prompt_file}, using default system prompt')\n         except Exception as e:\n             logger.error(f'Error reading system prompt: {e}')\n             system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'",
    "output": "fix: remove system_prompt_content variable"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/math_utils.py b/src/math_utils.py\nindex 111aaa..222bbb 100644\n--- a/src/math_utils.py\n- def calcualte_area(radius):\n+ def calculate_area(radius):\n     return 3.14 * radius * radius",
    "output": "fix: rename calcualte_area to calculate_area to fix critical naming typo"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/auth.js b/src/auth.js\nindex 333aaa..444bbb 100644\n--- a/src/auth.js\n+++ b/src/auth.js\n@@ -20,7 +20,7 @@ function login(user) {\n-    if(user.isActive = true) {\n+    if(user.isActive === true) {\n         return true;\n     }",
    "output": "fix: change assignment operator to equality operator in login check"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/loop.js b/src/loop.js\nindex 555ccc..666ddd 100644\n--- a/src/loop.js\n+++ b/src/loop.js\n@@ -8,7 +8,7 @@ function iterate(items) {\n-    for(let i=0; i<=items.length; i++){\n+    for(let i=0; i<items.length; i++){\n         console.log(items[i]);\n     }",
    "output": "fix: update loop condition from <= to < to fix off-by-one error"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/messages.js b/src/messages.js\nindex 777eee..888fff 100644\n--- a/src/messages.js\n+++ b/src/messages.js\n@@ -3,7 +3,7 @@ const messages = {\n-    welcome: \"Welcom to our app!\",\n+    welcome: \"Welcome to our app!\",\n };",
    "output": "fix: correct typo in welcome message from 'Welcom' to 'Welcome'"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/api.md b/docs/api.md\nindex aaa111..bbb222 100644\n--- a/docs/api.md\n@@ -10,7 +10,7 @@ GET /users\n-Endpoint: /api/v1/userinfo\n+Endpoint: /api/v1/users/info",
    "output": "fix: update API endpoint in docs to correct user info URL"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package.json b/package.json\nindex ccc333..ddd444 100644\n--- a/package.json\n@@ -5,7 +5,7 @@\n-    \"lodash\": \"^4.17.19\"\n+    \"lodash\": \"^4.17.21\"",
    "output": "fix(deps): update lodash version to fix compatibility issue"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/db.js b/src/db.js\nindex eee555..fff666 100644\n--- a/src/db.js\n+++ b/src/db.js\n@@ -12,6 +12,8 @@ function queryDatabase(query) {\n-    return db.execute(query);\n+    try {\n+        return db.execute(query);\n+    } catch (error) {\n+        console.error(\"Database query failed\", error);\n+    }",
    "output": "fix: add try-catch block in db query to handle errors properly"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/service.js b/src/service.js\nindex fff777..aaa888 100644\n--- a/src/service.js\n+++ b/src/service.js\n@@ -25,7 +25,7 @@ function fetchData(id) {\n-    processRequest(data);\n+    processRequest(id, data);",
    "output": "fix: update function call to include correct parameter for processRequest"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/logger.js b/src/logger.js\nindex bbb999..ccc000 100644\n--- a/src/logger.js\n+++ a/src/logger.js\n@@ -2,7 +2,7 @@ logger.setLevel(\"info\");\n-logger.setLevel(\"debug\");\n+logger.setLevel(\"info\");",
    "output": "fix: revert logging level from debug to info for production stability"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/keyboard_manager.py b/src/keyboard_manager.py\nindex c9ee2f4..021a9a8 100644\n--- a/src/keyboard_manager.py\n+++ b/src/keyboard_manager.py\n@@ -13,9 +13,7 @@ import logging\n import keyboard\n import openai\n import os\n-import sys\n import json\n-import time\n from pathlib import Path\n\n from data.model_config import (",
    "output": "fix: remove unused imports"
  }
]
