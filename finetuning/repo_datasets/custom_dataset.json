[
  {
      "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
      "input": " diff --git a/evals/scripts/create_eval_set_from_repo_datasets.py b/evals/scripts/create_eval_set_from_repo_datasets.py\nindex fd828bb..478a973 100644\n--- a/evals/scripts/create_eval_set_from_repo_datasets.py\n+++ b/evals/scripts/create_eval_set_from_repo_datasets.py\n@@ -172,12 +172,10 @@ tests:\n                     system_prompt_content = f.read().strip()\n                 logger.info(f'Successfully loaded system prompt from {system_prompt_file}')\n             else:\n-                system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'\n                 logger.warning(f'System prompt file not found at {system_prompt_file}, using default system prompt')\n         except Exception as e:\n             logger.error(f'Error reading system prompt: {e}')\n             system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'",
      "output": "fix: remove system_prompt_content variable"
  }
]