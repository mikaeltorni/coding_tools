[
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": " diff --git a/evals/scripts/create_eval_set_from_repo_datasets.py b/evals/scripts/create_eval_set_from_repo_datasets.py\nindex fd828bb..478a973 100644\n--- a/evals/scripts/create_eval_set_from_repo_datasets.py\n+++ b/evals/scripts/create_eval_set_from_repo_datasets.py\n@@ -172,12 +172,10 @@ tests:\n                     system_prompt_content = f.read().strip()\n                 logger.info(f'Successfully loaded system prompt from {system_prompt_file}')\n             else:\n-                system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'\n                 logger.warning(f'System prompt file not found at {system_prompt_file}, using default system prompt')\n         except Exception as e:\n             logger.error(f'Error reading system prompt: {e}')\n             system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'",
    "output": "fix: remove system_prompt_content variable"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/math_utils.py b/src/math_utils.py\nindex 111aaa..222bbb 100644\n--- a/src/math_utils.py\n+++ b/src/math_utils.py\n@@ -172,12 +172,10 @@ tests:\n                     system_prompt_content = f.read().strip()\n                 logger.info(f'Successfully loaded system prompt from {system_prompt_file}')\n             else:\n-                system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'\n                 logger.warning(f'System prompt file not found at {system_prompt_file}, using default system prompt')\n         except Exception as e:\n             logger.error(f'Error reading system prompt: {e}')\n             system_prompt_content = 'You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \\'feat: implemented user authentication with JWT tokens\\' or \\'fix(deps): updated npm dependencies to fix security vulnerabilities\\'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.'",
    "output": "fix: rename calcualte_area to calculate_area to fix critical naming typo"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/auth.js b/src/auth.js\nindex 333aaa..444bbb 100644\n--- a/src/auth.js\n+++ b/src/auth.js\n@@ -20,7 +20,7 @@ function login(user) {\n-    if(user.isActive = true) {\n+    if(user.isActive === true) {\n         return true;\n     }",
    "output": "fix: change assignment operator to equality operator in login check"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/loop.js b/src/loop.js\nindex 555ccc..666ddd 100644\n--- a/src/loop.js\n+++ b/src/loop.js\n@@ -8,7 +8,7 @@ function iterate(items) {\n-    for(let i=0; i<=items.length; i++){\n+    for(let i=0; i<items.length; i++){\n         console.log(items[i]);\n     }",
    "output": "fix: update loop condition from <= to < to fix off-by-one error"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/messages.js b/src/messages.js\nindex 777eee..888fff 100644\n--- a/src/messages.js\n+++ b/src/messages.js\n@@ -3,7 +3,7 @@ const messages = {\n-    welcome: \"Welcom to our app!\",\n+    welcome: \"Welcome to our app!\",\n };",
    "output": "fix: correct typo in welcome message from 'Welcom' to 'Welcome'"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/docs/api.md b/docs/api.md\nindex aaa111..bbb222 100644\n--- a/docs/api.md\n@@ -10,7 +10,7 @@ GET /users\n-Endpoint: /api/v1/userinfo\n+Endpoint: /api/v1/users/info",
    "output": "fix: update API endpoint in docs to correct user info URL"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package.json b/package.json\nindex ccc333..ddd444 100644\n--- a/package.json\n@@ -5,7 +5,7 @@\n-    \"lodash\": \"^4.17.19\"\n+    \"lodash\": \"^4.17.21\"",
    "output": "fix(deps): update lodash version to fix compatibility issue"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/db.js b/src/db.js\nindex eee555..fff666 100644\n--- a/src/db.js\n+++ b/src/db.js\n@@ -12,6 +12,8 @@ function queryDatabase(query) {\n-    return db.execute(query);\n+    try {\n+        return db.execute(query);\n+    } catch (error) {\n+        console.error(\"Database query failed\", error);\n+    }",
    "output": "fix: add try-catch block in db query to handle errors properly"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/service.js b/src/service.js\nindex fff777..aaa888 100644\n--- a/src/service.js\n+++ b/src/service.js\n@@ -25,7 +25,7 @@ function fetchData(id) {\n-    processRequest(data);\n+    processRequest(id, data);",
    "output": "fix: update function call to include correct parameter for processRequest"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/logger.js b/src/logger.js\nindex bbb999..ccc000 100644\n--- a/src/logger.js\n+++ a/src/logger.js\n@@ -2,7 +2,7 @@ logger.setLevel(\"info\");\n-logger.setLevel(\"debug\");\n+logger.setLevel(\"info\");",
    "output": "fix: revert logging level from debug to info for production stability"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/keyboard_manager.py b/src/keyboard_manager.py\nindex c9ee2f4..021a9a8 100644\n--- a/src/keyboard_manager.py\n+++ b/src/keyboard_manager.py\n@@ -13,9 +13,7 @@ import logging\n import keyboard\n import openai\n import os\n-import sys\n import json\n-import time\n from pathlib import Path\n\n from data.model_config import (",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/network_manager.py b/src/network_manager.py\nindex a1b2c3d..e4f5g6h 100644\n--- a/src/network_manager.py\n+++ b/src/network_manager.py\n@@ -5,8 +5,6 @@ import requests\n import json\n import logging\n-import random\n-import datetime\n\n def fetch_data(url):\n     response = requests.get(url)\n     return response.json()",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/file_handler.py b/src/file_handler.py\nindex 123abcd..456efgh 100644\n--- a/src/file_handler.py\n+++ b/src/file_handler.py\n@@ -10,7 +10,6 @@ import os\n import shutil\n import logging\n-import re\n\n def copy_file(src, dest):\n     shutil.copy(src, dest)\n     logging.info(f'File copied from {src} to {dest}')",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/image_processor.py b/src/image_processor.py\nindex 789ijkl..012mnop 100644\n--- a/src/image_processor.py\n+++ b/src/image_processor.py\n@@ -3,8 +3,6 @@ import cv2\n import numpy as np\n import os\n-import math\n-import sys\n\n def process_image(image_path):\n     image = cv2.imread(image_path)\n     return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/data_analyzer.py b/src/data_analyzer.py\nindex 345qrst..678uvwx 100644\n--- a/src/data_analyzer.py\n+++ b/src/data_analyzer.py\n@@ -6,7 +6,6 @@ import pandas as pd\n import numpy as np\n import matplotlib.pyplot as plt\n-import random\n\n def analyze_data(data):\n     df = pd.DataFrame(data)\n     return df.describe()",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/user_service.py b/src/user_service.py\nindex abcd123..efgh456 100644\n--- a/src/user_service.py\n+++ b/src/user_service.py\n@@ -1,7 +1,5 @@\n import requests\n import json\n-import datetime\n-import uuid\n import logging\n\n def get_user_profile(user_id):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/config_manager.py b/src/config_manager.py\nindex 9876zyx..5432wvu 100644\n--- a/src/config_manager.py\n+++ b/src/config_manager.py\n@@ -2,9 +2,7 @@\n import yaml\n import os\n import logging\n-import sys\n-import time\n-import shutil\n from pathlib import Path\n\n def load_config(config_path):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/email_sender.py b/src/email_sender.py\nindex mnbvcx..poiuyt 100644\n--- a/src/email_sender.py\n+++ b/src/email_sender.py\n@@ -1,10 +1,7 @@\n import smtplib\n from email.mime.text import MIMEText\n from email.mime.multipart import MIMEMultipart\n-import time\n-import random\n-import string\n import logging\n-import sys\n\n def send_email(to_address, subject, body):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/database_connector.py b/src/database_connector.py\nindex lkjhgf..asdfgh 100644\n--- a/src/database_connector.py\n+++ b/src/database_connector.py\n@@ -1,9 +1,6 @@\n import sqlite3\n import logging\n-import os\n-import sys\n-import time\n import json\n\n def connect_to_database(db_path):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/api_client.py b/src/api_client.py\nindex qwerty..zxcvbn 100644\n--- a/src/api_client.py\n+++ b/src/api_client.py\n@@ -1,8 +1,5 @@\n import requests\n import json\n-import time\n-import hashlib\n-import base64\n import logging\n\n def make_api_request(url, method='GET', data=None, headers=None):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/utils/file_utils.py b/src/utils/file_utils.py\nindex 123xyz..456abc 100644\n--- a/src/utils/file_utils.py\n+++ b/src/utils/file_utils.py\n@@ -1,9 +1,6 @@\n import os\n import shutil\n-import zipfile\n-import tarfile\n import logging\n-import tempfile\n\n def copy_directory(src_dir, dest_dir):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/authentication.py b/src/authentication.py\nindex aabbcc..ddeeff 100644\n--- a/src/authentication.py\n+++ b/src/authentication.py\n@@ -1,9 +1,6 @@\n import bcrypt\n import jwt\n-import datetime\n-import uuid\n-import random\n import logging\n\n def hash_password(password):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/logger_setup.py b/src/logger_setup.py\nindex 112233..445566 100644\n--- a/src/logger_setup.py\n+++ b/src/logger_setup.py\n@@ -1,9 +1,6 @@\n import logging\n import os\n-import sys\n-import datetime\n-import traceback\n from pathlib import Path\n\n def setup_logger(log_file, log_level=logging.INFO):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/cache_manager.py b/src/cache_manager.py\nindex 778899..aabbcc 100644\n--- a/src/cache_manager.py\n+++ b/src/cache_manager.py\n@@ -1,10 +1,7 @@\n import redis\n import json\n-import pickle\n-import time\n-import hashlib\n import logging\n-import sys\n\n def cache_data(key, data, expiration=3600):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/data_validation.py b/src/data_validation.py\nindex 112233..445566 100644\n--- a/src/data_validation.py\n+++ b/src/data_validation.py\n@@ -1,8 +1,5 @@\n import json\n import logging\n-import datetime\n-import re\n-import uuid\n\n def validate_user_data(user_data):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/encryption_utils.py b/src/encryption_utils.py\nindex 778899..aabbcc 100644\n--- a/src/encryption_utils.py\n+++ b/src/encryption_utils.py\n@@ -1,9 +1,5 @@\n import hashlib\n import base64\n-import os\n-import secrets\n-import time\n-import uuid\n import logging\n\n def encrypt_data(data, key):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/html_parser.py b/src/html_parser.py\nindex 112233..445566 100644\n--- a/src/html_parser.py\n+++ b/src/html_parser.py\n@@ -1,9 +1,5 @@\n from bs4 import BeautifulSoup\n import requests\n-import re\n-import json\n-import os\n-import time\n import logging\n\n def parse_html(html_content):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/image_resizer.py b/src/image_resizer.py\nindex 112233..445566 100644\n--- a/src/image_resizer.py\n+++ b/src/image_resizer.py\n@@ -1,10 +1,6 @@\n from PIL import Image\n import os\n-import sys\n-import math\n-import time\n-import uuid\n import logging\n-import json\n\n def resize_image(input_path, output_path, size=(800, 600)):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/json_formatter.py b/src/json_formatter.py\nindex 112233..445566 100644\n--- a/src/json_formatter.py\n+++ b/src/json_formatter.py\n@@ -1,8 +1,4 @@\n import json\n-import os\n-import sys\n-import re\n-import datetime\n import logging\n\n def format_json(json_data, indent=2):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/kafka_producer.py b/src/kafka_producer.py\nindex 112233..445566 100644\n--- a/src/kafka_producer.py\n+++ b/src/kafka_producer.py\n@@ -1,10 +1,6 @@\n from kafka import KafkaProducer\n import json\n-import time\n-import uuid\n-import socket\n-import sys\n import logging\n-import os\n\n def send_message(topic, message, bootstrap_servers=['localhost:9092']):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/log_analyzer.py b/src/log_analyzer.py\nindex 112233..445566 100644\n--- a/src/log_analyzer.py\n+++ b/src/log_analyzer.py\n@@ -1,10 +1,6 @@\n import re\n-import os\n-import sys\n-import datetime\n-import json\n import logging\n-import csv\n\n def analyze_log_file(log_file_path):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/ml_model.py b/src/ml_model.py\nindex 112233..445566 100644\n--- a/src/ml_model.py\n+++ b/src/ml_model.py\n@@ -1,13 +1,9 @@\n import numpy as np\n import pandas as pd\n import sklearn\n-import matplotlib.pyplot as plt\n-import seaborn as sns\n from sklearn.model_selection import train_test_split\n from sklearn.ensemble import RandomForestClassifier\n-import pickle\n-import os\n import logging\n-import time\n\n def train_model(X, y):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/network_scanner.py b/src/network_scanner.py\nindex 112233..445566 100644\n--- a/src/network_scanner.py\n+++ b/src/network_scanner.py\n@@ -1,11 +1,7 @@\n import socket\n-import sys\n-import os\n-import time\n-import random\n import logging\n-import json\n-import threading\n\n def scan_port(ip, port):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/pdf_processor.py b/src/pdf_processor.py\nindex 112233..445566 100644\n--- a/src/pdf_processor.py\n+++ b/src/pdf_processor.py\n@@ -1,9 +1,5 @@\n import PyPDF2\n-import os\n-import sys\n-import datetime\n import logging\n-import re\n\n def extract_text_from_pdf(pdf_path):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/queue_manager.py b/src/queue_manager.py\nindex 112233..445566 100644\n--- a/src/queue_manager.py\n+++ b/src/queue_manager.py\n@@ -1,10 +1,6 @@\n import queue\n import threading\n-import time\n-import sys\n-import os\n-import uuid\n import logging\n-import json\n\n def process_queue_items(task_queue):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/redis_connector.py b/src/redis_connector.py\nindex 112233..445566 100644\n--- a/src/redis_connector.py\n+++ b/src/redis_connector.py\n@@ -1,9 +1,5 @@\n import redis\n-import os\n-import sys\n-import time\n import logging\n-import json\n\n def connect_to_redis(host='localhost', port=6379, db=0):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/s3_manager.py b/src/s3_manager.py\nindex 112233..445566 100644\n--- a/src/s3_manager.py\n+++ b/src/s3_manager.py\n@@ -1,10 +1,6 @@\n import boto3\n-import os\n-import sys\n-import time\n-import uuid\n import logging\n-import json\n\n def upload_to_s3(file_path, bucket_name, object_key):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/template_renderer.py b/src/template_renderer.py\nindex 112233..445566 100644\n--- a/src/template_renderer.py\n+++ b/src/template_renderer.py\n@@ -1,10 +1,6 @@\n import jinja2\n-import os\n-import sys\n-import datetime\n-import re\n import logging\n-import json\n\n def render_template(template_path, context):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/url_processor.py b/src/url_processor.py\nindex 112233..445566 100644\n--- a/src/url_processor.py\n+++ b/src/url_processor.py\n@@ -1,10 +1,6 @@\n import urllib.parse\n-import os\n-import sys\n-import re\n-import time\n import logging\n-import json\n\n def parse_url(url):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/video_converter.py b/src/video_converter.py\nindex 112233..445566 100644\n--- a/src/video_converter.py\n+++ b/src/video_converter.py\n@@ -1,9 +1,5 @@\n import ffmpeg\n-import os\n-import sys\n-import time\n import logging\n-import json\n\n def convert_video(input_path, output_path, format='mp4'):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/websocket_client.py b/src/websocket_client.py\nindex 112233..445566 100644\n--- a/src/websocket_client.py\n+++ b/src/websocket_client.py\n@@ -1,10 +1,6 @@\n import websocket\n import json\n-import time\n-import threading\n-import ssl\n-import sys\n import logging\n-import os\n\n def connect_to_websocket(url):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/xml_parser.py b/src/xml_parser.py\nindex 112233..445566 100644\n--- a/src/xml_parser.py\n+++ b/src/xml_parser.py\n@@ -1,9 +1,5 @@\n import xml.etree.ElementTree as ET\n-import os\n-import sys\n-import re\n import logging\n-import json\n\n def parse_xml_file(xml_file_path):",
    "output": "fix: remove unused imports"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/keyboard_manager.py b/src/keyboard_manager.py\nindex 20591de..ab1d1ab 100644\n--- a/src/keyboard_manager.py\n+++ b/src/keyboard_manager.py\n@@ -201,13 +201,6 @@ def handle_commit_hotkey(repo_paths, server_url=None, payload=None):\n-                    # Truncate diff content if it's too large (first 5000 chars should be enough)\n-                    MAX_DIFF_LENGTH = 5000\n-                    truncated_diff = diff_content\n-                    if len(diff_content) > MAX_DIFF_LENGTH:\n-                        truncated_diff = diff_content[:MAX_DIFF_LENGTH] + \"\\n\\n[... additional changes truncated due to size ...]\"\n-                        logger.info(f\"Truncated diff content from {len(diff_content)} to {len(truncated_diff)} characters\")\n+                    # Always use full diff content now\n+                    truncated_diff = diff_content\n@@ -220,7 +213,7 @@ def handle_commit_hotkey(repo_paths, server_url=None, payload=None):\n-                            {\"role\": \"user\", \"content\": truncated_diff}\n+                            {\"role\": \"user\", \"content\": diff_content}\n",
    "output": "feat(commit): drop diff truncation block to always send complete diffs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/commit_builder.py b/src/commit_builder.py\nindex d4e5f6..e7f8g9 100644\n--- a/src/commit_builder.py\n+++ b/src/commit_builder.py\n@@ -45,12 +45,6 @@ def build_commit_message(diff_content):\n-    # limit diff to avoid oversized payloads\n-    MAX_PAYLOAD = 3000\n-    truncated = diff_content[:MAX_PAYLOAD]\n-    if len(diff_content) > MAX_PAYLOAD:\n-        truncated += \"\\n[...]\"\n-        logger.debug(f\"Payload truncated to {MAX_PAYLOAD} chars\")\n+    # using full diff content without truncation\n+    truncated = diff_content\n     prompt = assemble_prompt(truncated)\n     response = send_to_llm(prompt)\n",
    "output": "feat(builder): remove payload truncation to include entire diff in prompt"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/git_diff_service.py b/src/git_diff_service.py\nindex f1a2b3..a4b5c6 100644\n--- a/src/git_diff_service.py\n+++ b/src/git_diff_service.py\n@@ -30,14 +30,7 @@ def get_diff(repo_path):\n-    # enforce maximum diff size\n-    MAX_SIZE = 5000\n-    raw = reader.read()\n-    content = raw[:MAX_SIZE]\n-    if len(raw) > MAX_SIZE:\n-        content += \"\\n[... trimmed]\"\n-    logger.info(\"Diff trimmed to %d bytes\", MAX_SIZE)\n+    # always return full raw diff\n+    content = reader.read()\n     return content\n",
    "output": "feat(diff): eliminate size limit to return full raw diff contents"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/diff_renderer.py b/src/diff_renderer.py\nindex 1234abc..2345bcd 100644\n--- a/src/diff_renderer.py\n+++ b/src/diff_renderer.py\n@@ -10,10 +10,6 @@ def render(diff_text):\n-    # truncate long lines for UI\n-    lines = diff_text.splitlines()\n-    rendered = [l[:100] + '…' if len(l) > 100 else l for l in lines]\n-    logger.debug(\"Truncated long lines for display\")\n-    return '\\n'.join(rendered)\n+    # display full diff lines without truncation\n+    return diff_text\n",
    "output": "feat(ui): remove line truncation in diff renderer for full context"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/main.py b/src/main.py\nindex 9abc0de..0def1ab 100644\n--- a/src/main.py\n+++ b/src/main.py\n@@ -100,12 +100,6 @@ def process_diff(input_path):\n-    # remove truncation guard\n-    guard = 2000\n-    data = data[:guard]\n-    if len(data) > guard:\n-        data += '\\n[truncated]'\n-    logger.info(f\"Data truncated to {guard} chars\")\n+    # always process full data length\n+    data = data\n     analyze(data)\n",
    "output": "feat(process): remove data truncation guard to analyze full content"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/utils/truncate.py b/src/utils/truncate.py\nindex 777888..888999 100644\n--- a/src/utils/truncate.py\n+++ b/src/utils/truncate.py\n@@ -1,8 +1,3 @@\n-def truncate_text(text, limit=1000):\n-    if len(text) <= limit:\n-        return text\n-    return text[:limit] + '...'\n-\n-def safe_truncate = truncate_text\n+# truncation utility removed, use full text instead\n+safe_truncate = lambda text: text\n",
    "output": "refactor(utils): remove text truncation helper for full string usage"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/server.py b/src/server.py\nindex abc123..bcd234 100644\n--- a/src/server.py\n+++ b/src/server.py\n@@ -82,10 +82,6 @@ def serve_diff_request(req):\n-    # enforce max response size\n-    MAX_RESP = 8000\n-    body = body[:MAX_RESP]\n-    if len(body) > MAX_RESP:\n-        body += '\\n[cut]'\n-    logger.info('Response truncated')\n+    # now returning complete diff in response\n+    body = body\n     return make_response(body, 200)\n",
    "output": "feat(api): remove response size cap to return full diff payload"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: \"feat: implemented user authentication with JWT tokens\" or \"fix(deps): updated npm dependencies to fix security vulnerabilities\". By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/src/core/processor.py b/src/core/processor.py\nindex cde345..def456 100644\n--- a/src/core/processor.py\n+++ b/src/core/processor.py\n@@ -150,9 +150,4 @@ class DiffProcessor:\n-        # shrink diff for performance\n-        short = diff[:2500]\n-        if len(diff) > 2500:\n-            short += '\\n[...]'\n-        return analyze(short)\n+        # analyze full diff without shrinking\n+        return analyze(diff)\n",
    "output": "feat(processor): eliminate diff shrinking to analyze complete changes"
  }
]