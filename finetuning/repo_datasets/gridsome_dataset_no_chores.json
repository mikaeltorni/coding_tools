[
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/directives/image.js b/gridsome/app/directives/image.js\nindex 2cc7883..7c0a2db 100644\n--- a/gridsome/app/directives/image.js\n+++ b/gridsome/app/directives/image.js\n@@ -67,20 +67,13 @@ function loadImage (el) {\n   if (!src || el.src.endsWith(src)) {\n     return // src is already switched\n   }\n-\n-  const image = new Image()\n-\n-  image.onload = function () {\n+  \n+  el.onload = function() {\n     el.classList.remove('g-image--loading')\n     el.classList.add('g-image--loaded')\n-    \n-    el.src = src\n-    el.sizes = sizes\n-    el.srcset = srcset\n   }\n-\n-  image.src = src\n-\n-  el.classList.add('g-image--loading')\n-  el.classList.remove('g-image--loaded')\n+  \n+  el.srcset = srcset\n+  el.sizes = sizes\n+  el.src = src\n }",
    "output": "fix(app): prevent images from loading twice (#486)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/project-basic.build.e2e.js b/gridsome/lib/__tests__/project-basic.build.e2e.js\nindex dcc81f7..e3655d6 100644\n--- a/gridsome/lib/__tests__/project-basic.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-basic.build.e2e.js\n@@ -180,10 +180,14 @@ test('compile scripts correctly', () => {\n   // env variables\n   expect(homeJS).toMatch('GRIDSOME_PROD_VARIABLE: \"PROD_1\"')\n   expect(homeJS).toMatch('PROD_VARIABLE: process.env.PROD_VARIABLE')\n+})\n \n-  // polyfills\n+test('compile scripts includes polyfills', () => {\n+  const appJS = content('dist/assets/js/app.js')\n \n-  expect(appJS).toMatch('// ECMAScript 6 symbols shim')\n+  expect(appJS).toMatch('core-js/modules/es6.promise.js')\n+  expect(appJS).toMatch('core-js/modules/es6.symbol.js')\n+  expect(appJS).toMatch('core-js/modules/es6.string.ends-with.js')\n })\n \n test('compile a single css file', () => {\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex e78f871..0e6c223 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -29,10 +29,6 @@ module.exports = (app, { isProd, isServer }) => {\n     .chunkFilename(`${assetsDir}/js/${filename}`)\n     .filename(`${assetsDir}/js/${filename}`)\n \n-  if (process.env.NODE_ENV === 'test') {\n-    config.output.pathinfo(true)\n-  }\n-\n   config.resolve\n     .set('symlinks', true)\n     .alias\n@@ -56,7 +52,7 @@ module.exports = (app, { isProd, isServer }) => {\n     .add(resolve('../../../packages'))\n     .add('node_modules')\n \n-  config.module.noParse(/^(vue|vue-router)$/)\n+  config.module.noParse(/^(vue|vue-router|vue-meta)$/)\n \n   if (app.config.runtimeCompiler) {\n     config.resolve.alias.set('vue$', 'vue/dist/vue.esm.js')\n@@ -94,10 +90,10 @@ module.exports = (app, { isProd, isServer }) => {\n   // js\n \n   config.module.rule('js')\n-    .test(/\\.jsx?$/)\n+    .test(/\\.js?$/)\n     .exclude\n     .add(filepath => {\n-      if (/\\.vue\\.jsx?$/.test(filepath)) {\n+      if (/\\.vue\\.js?$/.test(filepath)) {\n         return false\n       }\n \n@@ -131,7 +127,12 @@ module.exports = (app, { isProd, isServer }) => {\n     .loader('babel-loader')\n     .options({\n       presets: [\n-        require.resolve('@vue/babel-preset-app')\n+        [require.resolve('@vue/babel-preset-app'), {\n+          entryFiles: [\n+            resolve('../../app/entry.server.js'),\n+            resolve('../../app/entry.client.js')\n+          ]\n+        }]\n       ]\n     })\n \n@@ -204,9 +205,6 @@ module.exports = (app, { isProd, isServer }) => {\n   config.plugin('case-sensitive-paths')\n     .use(require('case-sensitive-paths-webpack-plugin'))\n \n-  // config.plugin('friendly-errors')\n-  //   .use(require('friendly-errors-webpack-plugin'))\n-\n   if (!isProd) {\n     config.plugin('html')\n       .use(require('html-webpack-plugin'), [{\n@@ -230,6 +228,7 @@ module.exports = (app, { isProd, isServer }) => {\n   }\n \n   if (process.env.GRIDSOME_TEST) {\n+    config.output.pathinfo(true)\n     config.optimization.minimize(false)\n   }\n ",
    "output": "fix(webpack): inject promise polyfill (#480)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 1013512..96f12f2 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -3,6 +3,7 @@\n const path = require('path')\n const chalk = require('chalk')\n const program = require('commander')\n+const didYouMean = require('didyoumean')\n const resolveCwd = require('resolve-cwd')\n const resolveVersions = require('../lib/utils/version')\n const pkgPath = require('find-up').sync('package.json')\n@@ -10,6 +11,18 @@ const pkgPath = require('find-up').sync('package.json')\n const context = pkgPath ? path.dirname(pkgPath) : process.cwd()\n const version = resolveVersions(pkgPath)\n \n+function suggestCommands (cmd) {\n+  const availableCommands = program.commands.map(cmd => {\n+    return cmd._name\n+  })\n+\n+  const suggestion = didYouMean(cmd, availableCommands)\n+  if (suggestion) {\n+    console.log()\n+    console.log(`Did you mean ${suggestion}?`)\n+  }\n+}\n+\n program\n   .version(version, '-v, --version')\n   .usage('<command> [options]')\n@@ -44,6 +57,7 @@ program.arguments('<command>').action(async command => {\n     console.log()\n   } else {\n     console.log(chalk.red(`Unknown command ${chalk.bold(command)}`))\n+    suggestCommands(command)\n   }\n })\n \ndiff --git a/packages/cli/package.json b/packages/cli/package.json\nindex a8c8677..706c4ee 100644\n--- a/packages/cli/package.json\n+++ b/packages/cli/package.json\n@@ -16,6 +16,7 @@\n     \"@hjvedvik/tasks\": \"^0.0.8\",\n     \"chalk\": \"^2.4.1\",\n     \"commander\": \"^2.15.1\",\n+    \"didyoumean\": \"^1.2.1\",\n     \"execa\": \"^0.10.0\",\n     \"find-up\": \"^2.1.0\",\n     \"fs-extra\": \"^6.0.1\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 910b237..6b14b76 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -4660,6 +4660,11 @@ dezalgo@^1.0.0:\n     asap \"^2.0.0\"\n     wrappy \"1\"\n \n+didyoumean@^1.2.1:\n+  version \"1.2.1\"\n+  resolved \"https://registry.yarnpkg.com/didyoumean/-/didyoumean-1.2.1.tgz#e92edfdada6537d484d73c0172fd1eba0c4976ff\"\n+  integrity sha1-6S7f2tplN9SE1zwBcv0eugxJdv8=\n+\n diff-sequences@^24.3.0:\n   version \"24.3.0\"\n   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-24.3.0.tgz#0f20e8a1df1abddaf4d9c226680952e64118b975\"",
    "output": "feat(cli): suggest matching commands (#481)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex cb938ee..dd28dd2 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -64,7 +64,7 @@ export default (route, options = {}) => {\n     const loadJSON = ([ group, hash ]) => {\n       const jsonPath = dataUrl + `${group}/${hash}.json` \n \n-      if (shouldPrefetch) {\n+      if (shouldPrefetch && !isLoaded[jsonPath]) {\n         if (!isPrefetched[jsonPath]) {\n           isPrefetched[jsonPath] = prefetch(jsonPath)\n         }",
    "output": "fix(app): don\u2019t prefetch already loaded data"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex 7229c6a..5d412b6 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -24,7 +24,7 @@ module.exports = function (api, options) {\n       const urlConfig = options.config[pattern] || {}\n \n       return {\n-        url: page.path,\n+        url: `${page.path}/`.replace(/\\/+$/, '/'),\n         priority: urlConfig.priority,\n         changefreq: urlConfig.changefreq\n       }\n@@ -43,6 +43,7 @@ module.exports = function (api, options) {\n module.exports.defaultOptions = () => ({\n   output: '/sitemap.xml',\n   cacheTime: 600000,\n+  staticUrls: [],\n   exclude: [],\n   config: {}\n })",
    "output": "fix(sitemap): add trailing slash to urls (#444)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createServerConfig.js b/gridsome/lib/webpack/createServerConfig.js\nindex 07ac5b6..3ca57d8 100644\n--- a/gridsome/lib/webpack/createServerConfig.js\n+++ b/gridsome/lib/webpack/createServerConfig.js\n@@ -11,7 +11,7 @@ module.exports = async app => {\n   config.entry('app').add(resolve('../../app/entry.server.js'))\n \n   config.target('node')\n-  config.externals([/^vue|vue-router$/])\n+  config.externals([/^(vue|vue-router|vue-meta)$/])\n   config.devtool('source-map')\n \n   config.optimization.minimize(false)",
    "output": "fix(webpack): externalize included dependencies only"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 1fb165d..fed4a43 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -6,14 +6,14 @@ import head from './head'\n import router from './router'\n import fetchPath from './fetchPath'\n import { url } from './utils/helpers'\n-import gaphqlGuard from './graphql/guard'\n-import graphlMixin from './graphql/mixin'\n+import graphqlGuard from './graphql/guard'\n+import graphqlMixin from './graphql/mixin'\n \n import Link from './components/Link'\n import Image from './components/Image'\n import ClientOnly from './components/ClientOnly'\n \n-Vue.mixin(graphlMixin)\n+Vue.mixin(graphqlMixin)\n Vue.component('g-link', Link)\n Vue.component('g-image', Image)\n Vue.component('ClientOnly', ClientOnly)\n@@ -21,11 +21,11 @@ Vue.component('ClientOnly', ClientOnly)\n Vue.prototype.$url = url\n Vue.prototype.$fetch = fetchPath\n \n-router.beforeEach(gaphqlGuard)\n+router.beforeEach(graphqlGuard)\n \n const context = {\n   appOptions: {\n-    render: h => h('router-view', { attrs: { id: 'app' }}),\n+    render: h => h('router-view', { attrs: { id: 'app' } }),\n     metaInfo: head,\n     methods: {},\n     data: {},\n@@ -39,7 +39,7 @@ const context = {\n \n runPlugins(plugins)\n \n-export function runPlugins (plugins) {\n+export function runPlugins(plugins) {\n   for (const { run, options } of plugins) {\n     if (typeof run === 'function') {\n       run(Vue, options, context)\n@@ -47,13 +47,13 @@ export function runPlugins (plugins) {\n   }\n }\n \n-export function runMain () {\n+export function runMain() {\n   if (typeof main === 'function') {\n     main(Vue, context)\n   }\n }\n \n-export default function createApp () {\n+export default function createApp() {\n   return {\n     app: new Vue(context.appOptions),\n     router",
    "output": "refactor(app): fix typo in file (#448)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex d95cd41..436b0f2 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -34,7 +34,9 @@ document.addEventListener('click', event => {\n   ) return\n \n   const path = stripPathPrefix($el.pathname)\n-  const { route, location } = router.resolve({ path, hash: $el.hash })\n+  const { route, location } = router.resolve({\n+    path: path + ($el.search || '') + ($el.hash || '')\n+  })\n \n   if (route.name === '*') {\n     return",
    "output": "fix(app): include query params in html links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 8ed5113..9c66ff5 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -1,5 +1,6 @@\n const path = require('path')\n const fs = require('fs-extra')\n+const slash = require('slash')\n const { mapValues } = require('lodash')\n \n const isDev = process.env.NODE_ENV === 'development'\n@@ -86,7 +87,6 @@ class FilesystemSource {\n   }\n \n   watchFiles () {\n-    const slash = require('slash')\n     const chokidar = require('chokidar')\n \n     const watcher = chokidar.watch(this.options.path, {\n@@ -158,11 +158,12 @@ class FilesystemSource {\n   }\n \n   createPath ({ dir, name }) {\n-    const { route, pathPrefix = '' } = this.options\n+    const { route, pathPrefix = '/' } = this.options\n \n     if (route) return\n \n-    const segments = (pathPrefix + dir)\n+    const joinedPath = path.join(pathPrefix, dir)\n+    const segments = slash(joinedPath)\n       .split('/')\n       .filter(v => v)\n       .map(s => this.store.slugify(s))",
    "output": "refactor(filesystem): pathPrefix fix"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/ContentType.js b/gridsome/lib/store/ContentType.js\nindex 9ba9231..d85cc9c 100644\n--- a/gridsome/lib/store/ContentType.js\n+++ b/gridsome/lib/store/ContentType.js\n@@ -195,9 +195,9 @@ class ContentType {\n       const field = get(node, path, fieldName)\n \n       if (fieldName === 'id') params.id = node.id\n-      else if (fieldName === 'year') params.year = date.format('YYYY')\n-      else if (fieldName === 'month') params.month = date.format('MM')\n-      else if (fieldName === 'day') params.day = date.format('DD')\n+      else if (fieldName === 'year' && !node.year) params.year = date.format('YYYY')\n+      else if (fieldName === 'month' && !node.month) params.month = date.format('MM')\n+      else if (fieldName === 'day' && !node.day) params.day = date.format('DD')\n       else {\n         const repeated = repeat && Array.isArray(field)\n         const values = repeated ? field : [field]\ndiff --git a/gridsome/lib/store/PluginStore.js b/gridsome/lib/store/PluginStore.js\nindex bfe565c..0eb642c 100644\n--- a/gridsome/lib/store/PluginStore.js\n+++ b/gridsome/lib/store/PluginStore.js\n@@ -88,7 +88,7 @@ class PluginStore {\n       options.resolveAbsolutePaths = this._resolveAbsolutePaths\n     }\n \n-    const dateField = 'date'\n+    const dateField = options.dateField || 'date'\n     const defaultSortBy = dateField\n     const defaultSortOrder = 'DESC'\n \ndiff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex 20927da..fb165a5 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -353,6 +353,41 @@ test('add type with custom fields in route', () => {\n   expect(node.path).toEqual('/my-value/My%20value/abcDef/10/2/thriller/1/missing/lorem-ipsum')\n })\n \n+// TODO: move dateField and route options to global permalinks config\n+test('set custom date field name for content type', () => {\n+  const contentType = createPlugin().store.addContentType({\n+    typeName: 'TestPost',\n+    dateField: 'published_at',\n+    route: '/:year/:month/:day/:slug'\n+  })\n+\n+  const node = contentType.addNode({\n+    id: '1',\n+    slug: 'my-post',\n+    published_at: '2019-05-19'\n+  })\n+\n+  expect(node.path).toEqual('/2019/05/19/my-post')\n+})\n+\n+test('set custom year, month and day fields', () => {\n+  const contentType = createPlugin().store.addContentType({\n+    typeName: 'TestPost',\n+    route: '/:year/:month/:day/:slug'\n+  })\n+\n+  const node = contentType.addNode({\n+    id: '1',\n+    slug: 'my-post',\n+    date: '2019-05-19',\n+    year: 'Twenty Nighteen',\n+    month: 'May',\n+    day: 'Nighteen'\n+  })\n+\n+  expect(node.path).toEqual('/twenty-nighteen/may/nighteen/my-post')\n+})\n+\n test('deeply nested field starting with `raw`', () => {\n   const contentType = createPlugin().store.addContentType({\n     typeName: 'TestPost',",
    "output": "fix(store): use custom year, month or day fields if they exist"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex 51ce4af..cb938ee 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -1,6 +1,6 @@\n import prefetch from './utils/prefetch'\n import { unslashEnd, stripPageParam } from './utils/helpers'\n-import { NOT_FOUND_NAME, NOT_FOUND_PATH } from '~/.temp/constants'\n+import { NOT_FOUND_PATH } from '~/.temp/constants'\n \n const headers = { 'Content-Type': 'application/json' }\n const dataUrl = process.env.DATA_URL\n@@ -22,9 +22,7 @@ export default (route, options = {}) => {\n           headers,\n           body: JSON.stringify({\n             page: route.params.page ? Number(route.params.page) : null,\n-            path: route.name !== NOT_FOUND_NAME\n-              ? stripPageParam(route)\n-              : NOT_FOUND_PATH\n+            path: route.name === '*' ? NOT_FOUND_PATH : stripPageParam(route)\n           })\n         })\n           .then(res => res.json())\n@@ -89,7 +87,7 @@ export default (route, options = {}) => {\n     }\n \n     const { name, meta: { data }} = route\n-    const usePath = name === NOT_FOUND_NAME ? NOT_FOUND_PATH : route.path\n+    const usePath = name === '*' ? NOT_FOUND_PATH : route.path\n     const path = unslashEnd(usePath) || '/'\n \n     if (typeof data === 'function') {\ndiff --git a/gridsome/app/graphql/guard.js b/gridsome/app/graphql/guard.js\nindex a89c73a..1848dd9 100644\n--- a/gridsome/app/graphql/guard.js\n+++ b/gridsome/app/graphql/guard.js\n@@ -15,6 +15,7 @@ export default (to, from, next) => {\n   fetch(to)\n     .then(res => {\n       if (res.code === 404) {\n+        setResults(to.path, { data: null, context: {} })\n         next({ name: '*', params: { 0: to.path }})\n       } else {\n         setResults(to.path, res)",
    "output": "fix(app): prevent infinite loop for 404 (#387)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/explore.js b/gridsome/lib/explore.js\nindex 4fcd3f2..1070e1c 100644\n--- a/gridsome/lib/explore.js\n+++ b/gridsome/lib/explore.js\n@@ -5,7 +5,7 @@ const createExpressServer = require('./server/createExpressServer')\n \n module.exports = async (context, args) => {\n   process.env.NODE_ENV = 'production'\n-  process.env.GRIDSOME_MODE === 'serve'\n+  process.env.GRIDSOME_MODE = 'serve'\n \n   const app = await createApp(context, { args }, BOOTSTRAP_PAGES)\n   const server = await createExpressServer(app, { withExplorer: true })",
    "output": "fix(explore): set correct mode for explore command (#435)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/utils/helpers.js b/gridsome/app/utils/helpers.js\nindex 76f01df..4a0c08c 100644\n--- a/gridsome/app/utils/helpers.js\n+++ b/gridsome/app/utils/helpers.js\n@@ -17,9 +17,12 @@ export function url (string) {\n }\n \n export function stripPageParam (route) {\n-  return route.params.page && /^\\d+$/.test(route.params.page)\n-    ? route.path.split('/').slice(0, -1).join('/') || '/'\n-    : unslashEnd(route.path) || '/'\n+  const { path, params: { page }} = route\n+  const normalizedPath = unslashEnd(path)\n+\n+  return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath)\n+    ? normalizedPath.split('/').slice(0, -1).join('/') || '/'\n+    : normalizedPath || '/'\n }\n \n const re = new RegExp(`^${publicPath}`)",
    "output": "fix(app): resolve pagination with trailing slash (#430)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/ContentType.js b/gridsome/lib/store/ContentType.js\nindex 7deef0f..9ba9231 100644\n--- a/gridsome/lib/store/ContentType.js\n+++ b/gridsome/lib/store/ContentType.js\n@@ -194,7 +194,8 @@ class ContentType {\n \n       const field = get(node, path, fieldName)\n \n-      if (fieldName === 'year') params.year = date.format('YYYY')\n+      if (fieldName === 'id') params.id = node.id\n+      else if (fieldName === 'year') params.year = date.format('YYYY')\n       else if (fieldName === 'month') params.month = date.format('MM')\n       else if (fieldName === 'day') params.day = date.format('DD')\n       else {\ndiff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex 0d1a0ac..20927da 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -335,7 +335,7 @@ test('add type with custom fields in route', () => {\n   })\n \n   const node = contentType.addNode({\n-    id: '1234',\n+    id: 'abcDef',\n     title: 'Lorem ipsum',\n     test: 'My value',\n     genre: {\n@@ -350,7 +350,7 @@ test('add type with custom fields in route', () => {\n     }\n   })\n \n-  expect(node.path).toEqual('/my-value/My%20value/1234/10/2/thriller/1/missing/lorem-ipsum')\n+  expect(node.path).toEqual('/my-value/My%20value/abcDef/10/2/thriller/1/missing/lorem-ipsum')\n })\n \n test('deeply nested field starting with `raw`', () => {",
    "output": "fix(store): do not slugify id in routes (#429)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/compileAssets.js b/gridsome/lib/webpack/compileAssets.js\nindex f810506..c020cd3 100644\n--- a/gridsome/lib/webpack/compileAssets.js\n+++ b/gridsome/lib/webpack/compileAssets.js\n@@ -14,8 +14,10 @@ module.exports = async (app, defines = {}) => {\n       return args\n     })\n \n-  const serverConfig = await app.resolveWebpackConfig(true)\n-  const clientConfig = await app.resolveWebpackConfig(false, clientChain)\n+  const [serverConfig, clientConfig] = await Promise.all([\n+    app.resolveWebpackConfig(true),\n+    app.resolveWebpackConfig(false, clientChain)\n+  ])\n \n   return new Promise((resolve, reject) => {\n     webpack([clientConfig, serverConfig]).run((err, stats) => {\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 38daaa5..a3944f1 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -227,19 +227,6 @@ module.exports = (app, { isProd, isServer }) => {\n       .use(CSSExtractPlugin, [{\n         filename: `${assetsDir}/css/styles${useHash ? '.[contenthash:8]' : ''}.css`\n       }])\n-\n-    const cacheGroups = {}\n-\n-    if (projectConfig.css.split !== true) {\n-      cacheGroups.styles = {\n-        name: 'styles',\n-        test: m => /css\\/mini-extract/.test(m.type),\n-        chunks: 'all',\n-        enforce: true\n-      }\n-    }\n-\n-    config.optimization.splitChunks({ cacheGroups })\n   }\n \n   if (process.env.GRIDSOME_TEST) {\ndiff --git a/gridsome/lib/webpack/createClientConfig.js b/gridsome/lib/webpack/createClientConfig.js\nindex 7392471..f687906 100644\n--- a/gridsome/lib/webpack/createClientConfig.js\n+++ b/gridsome/lib/webpack/createClientConfig.js\n@@ -6,7 +6,7 @@ const resolve = p => path.resolve(__dirname, p)\n module.exports = async app => {\n   const isProd = process.env.NODE_ENV === 'production'\n   const config = createBaseConfig(app, { isProd, isServer: false })\n-  const { outDir, clientManifestPath } = app.config\n+  const { outDir, clientManifestPath, css } = app.config\n \n   config.entry('app').add(resolve('../../app/entry.client.js'))\n \n@@ -29,6 +29,18 @@ module.exports = async app => {\n           mergeLonghand: false\n         }\n       }])\n+\n+    if (css.split !== true) {\n+      const cacheGroups = {\n+        styles: {\n+          name: 'styles',\n+          test: m => /css\\/mini-extract/.test(m.type),\n+          chunks: 'all',\n+          enforce: true\n+        }\n+      }\n+      config.optimization.splitChunks({ cacheGroups })\n+    }\n   } else {\n     config.entry('app').add(resolve('../../app/entry.sockjs.js'))\n ",
    "output": "refactor(webpack): resolve config without blocking (#428)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex ae1f336..807cd25 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -26,7 +26,7 @@ class FilesystemSource {\n     this.refsCache = {}\n \n     api.loadSource(async () => {\n-      await this.createContentTypes()\n+      this.createContentTypes()\n       await this.createNodes()\n       if (isDev) this.watchFiles()\n     })",
    "output": "refactor(filesystem): remove unnecessary await (#427)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-datocms/index.js b/packages/source-datocms/index.js\nindex e30e8a6..d7e35cc 100644\n--- a/packages/source-datocms/index.js\n+++ b/packages/source-datocms/index.js\n@@ -124,7 +124,7 @@ class DatoCmsSource {\n \n             return fields\n           } else {\n-            fields[camelize(field.apiKey)] = val && val.toMap\n+            fields[camelize(field.apiKey)] = val.toMap\n               ? withNoEmptyValues(val.toMap())\n               : withNoEmptyValues(val)\n ",
    "output": "refactor(datocms): remove always true val check (#426)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/queue/FileProcessQueue.js b/gridsome/lib/app/queue/FileProcessQueue.js\nindex 0d5e247..72af524 100644\n--- a/gridsome/lib/app/queue/FileProcessQueue.js\n+++ b/gridsome/lib/app/queue/FileProcessQueue.js\n@@ -15,13 +15,7 @@ class FileProcessQueue {\n   }\n \n   async add (filePath, options = {}) {\n-    let asset\n-\n-    try {\n-      asset = await this.preProcess(filePath, options)\n-    } catch (err) {\n-      throw err\n-    }\n+    const asset = await this.preProcess(filePath, options)\n \n     if (process.env.GRIDSOME_MODE === 'serve') {\n       return asset\ndiff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex 44acfa5..a8028d4 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -21,13 +21,7 @@ class ImageProcessQueue {\n   }\n \n   async add (filePath, options = {}) {\n-    let asset\n-\n-    try {\n-      asset = await this.preProcess(filePath, options)\n-    } catch (err) {\n-      throw err\n-    }\n+    const asset = await this.preProcess(filePath, options)\n \n     if (process.env.GRIDSOME_MODE === 'serve') {\n       return asset\ndiff --git a/gridsome/lib/workers/html-writer.js b/gridsome/lib/workers/html-writer.js\nindex c486e6e..bd74249 100644\n--- a/gridsome/lib/workers/html-writer.js\n+++ b/gridsome/lib/workers/html-writer.js\n@@ -22,11 +22,7 @@ exports.render = async function ({\n       ? await fs.readJson(page.dataOutput)\n       : undefined\n \n-    try {\n-      html = await render(page.path, state)\n-    } catch (err) {\n-      throw err\n-    }\n+    html = await render(page.path, state)\n \n     await fs.outputFile(page.htmlOutput, html)\n   }",
    "output": "refactor: remove duplicate exception rethrow (#425)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/README.md b/packages/plugin-sitemap/README.md\nindex 9d173eb..4684a5f 100644\n--- a/packages/plugin-sitemap/README.md\n+++ b/packages/plugin-sitemap/README.md\n@@ -35,4 +35,39 @@ module.exports = {\n }\n ```\n \n+### Adding static urls\n+```js\n+module.exports = {\n+  plugins: [\n+    {\n+      use: '@gridsome/plugin-sitemap',\n+      options: {\n+        staticUrls: [\n+          {\n+            url: '/images/',\n+            img: [\n+              {\n+                url: '/images/img1.jpg',\n+                caption: 'Image One',\n+                title: 'The Title of Image One',\n+                geoLocation: 'Trondheim, Norway',\n+                license: 'https://creativecommons.org/licenses/by/4.0/'\n+              },\n+              {\n+                url: '/images/img2.jpg',\n+                caption: 'Image Two',\n+                title: 'The Title of Image Two',\n+                geoLocation: 'Trondheim, Norway',\n+                license: 'https://creativecommons.org/licenses/by/4.0/'\n+              }\n+            ]\n+          }\n+        ]\n+      }\n+    }\n+  ]\n+}\n+```\n+\n+\n Your sitemap will be available at `/sitemap.xml` after your site is built.\ndiff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex 667c6ba..7229c6a 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -15,22 +15,25 @@ module.exports = function (api, options) {\n     const filename = path.join(config.outDir, options.output)\n     const pathPrefix = config.pathPrefix !== '/' ? config.pathPrefix : ''\n     const pages = queue.filter(page => micromatch(page.path, exclude).length < 1)\n+    const staticUrls = options.staticUrls || []\n \n-    console.log(`Generate ${options.output} (${pages.length} pages)`)\n+    console.log(`Generate ${options.output} (${pages.length + staticUrls.length} pages)`)\n+\n+    const generatedUrls = pages.map(page => {\n+      const pattern = patterns.find(p => micromatch.isMatch(page.path, p))\n+      const urlConfig = options.config[pattern] || {}\n+\n+      return {\n+        url: page.path,\n+        priority: urlConfig.priority,\n+        changefreq: urlConfig.changefreq\n+      }\n+    })\n \n     const sitemap = require('sitemap').createSitemap({\n-      hostname: config.siteUrl,\n+      hostname: config.siteUrl.replace(/\\/+$/, '') + pathPrefix,\n       cacheTime: options.cacheTime,\n-      urls: pages.map(page => {\n-        const pattern = patterns.find(p => micromatch.isMatch(page.path, p))\n-        const urlConfig = options.config[pattern] || {}\n-\n-        return {\n-          url: pathPrefix + page.path,\n-          priority: urlConfig.priority,\n-          changefreq: urlConfig.changefreq\n-        }\n-      })\n+      urls: [...generatedUrls, ...staticUrls]\n     })\n \n     return fs.outputFile(filename, sitemap.toString())",
    "output": "feat(sitemap): add support for static urls (#392)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-datocms/index.js b/packages/source-datocms/index.js\nindex b1d7dfb..e30e8a6 100644\n--- a/packages/source-datocms/index.js\n+++ b/packages/source-datocms/index.js\n@@ -107,6 +107,11 @@ class DatoCmsSource {\n         updated: new Date(item.updatedAt),\n         fields: item.itemType.fields.reduce((fields, field) => {\n           const val = item.readAttribute(field)\n+\n+          if (item.itemType.hasOwnProperty('apiKey')) {\n+            fields.model = { apiKey: item.itemType.apiKey }\n+          }\n+\n           if (!val) return fields\n \n           if (['link', 'links', 'rich_text'].includes(field.fieldType)) {",
    "output": "feat(datocms): add model.apiKey to nodes (#369)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/__tests__/createPageQuery.spec.js b/gridsome/lib/pages/__tests__/createPageQuery.spec.js\nindex f83bbc7..d51af51 100644\n--- a/gridsome/lib/pages/__tests__/createPageQuery.spec.js\n+++ b/gridsome/lib/pages/__tests__/createPageQuery.spec.js\n@@ -158,7 +158,7 @@ test('parse @paginate with perPage default value', () => {\n \n test('parse @paginate directive from belongsTo field with id', () => {\n   const query = createPageQuery(`query {\n-    testPage (id: \"1\") {\n+    author (id: \"1\") {\n       belongsTo (perPage: 5, skip: 1, limit: 10) @paginate {\n         edges {\n           node {\n@@ -169,8 +169,8 @@ test('parse @paginate directive from belongsTo field with id', () => {\n     }\n   }`)\n \n-  expect(query.paginate.typeName).toEqual('TestPage')\n-  expect(query.paginate.fieldName).toEqual('testPage')\n+  expect(query.paginate.typeName).toEqual('Author')\n+  expect(query.paginate.fieldName).toEqual('author')\n   expect(query.paginate.belongsTo).toMatchObject({ id: '1' })\n   expect(query.paginate.perPage).toEqual(5)\n   expect(query.paginate.limit).toEqual(10)\ndiff --git a/gridsome/lib/pages/createPageQuery.js b/gridsome/lib/pages/createPageQuery.js\nindex 2e56314..a60bc2b 100644\n--- a/gridsome/lib/pages/createPageQuery.js\n+++ b/gridsome/lib/pages/createPageQuery.js\n@@ -97,8 +97,11 @@ function parsePageQuery (source) {\n             const filterArg = parentArgs.find(node => node.name.value === 'filter')\n \n             result.paginate = {\n+              // TODO: use visitWithTypeInfo() to get real GraphQL type here instead\n               // guess content type by converting root field value into a camel cased string\n-              typeName: upperFirst(trimStart(fieldName.value, 'all')),\n+              typeName: /^all[A-Z]/.test(fieldName.value)\n+                ? fieldName.value.replace(/^all/, '')\n+                : upperFirst(fieldName.value),\n               perPage: perPageArg && perPageArg.value.value ? Number(perPageArg.value.value) : undefined,\n               fieldName: fieldName.value,\n               belongsTo: null",
    "output": "fix(graphql): use correct typeName for belongsTo pagination (#422)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/index.js b/gridsome/app/index.js\nindex f5dc137..12d5cc0 100644\n--- a/gridsome/app/index.js\n+++ b/gridsome/app/index.js\n@@ -1,7 +1,12 @@\n+import Vue from 'vue'\n+\n export { default as Vue } from 'vue'\n-export { default as fetch } from './fetchPath'\n export { default as Link } from './components/Link'\n export { default as Image } from './components/Image'\n export { default as Pager } from './components/Pager'\n export { default as ClientOnly } from './components/ClientOnly'\n export { url } from './utils/helpers'\n+\n+export function fetch(path) {\n+  return Vue.prototype.$fetch(path)\n+}",
    "output": "fix(app): prevent cyclic dependency (#421)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 7641cdc..620f073 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -119,11 +119,13 @@ class RemarkTransformer {\n   }\n \n   createProcessor (options = {}) {\n-    return unified()\n-      .data('transformer', this)\n+    const processor = unified().data('transformer', this)\n+    const plugins = createPlugins(this.options, options)\n+\n+    return processor\n       .use(remarkParse)\n-      .use(createPlugins(this.options, options))\n-      .use(remarkHtml)\n+      .use(plugins)\n+      .use(options.stringifier || remarkHtml)\n   }\n \n   _nodeToAST (node) {",
    "output": "fix(remark): let plugins set custom stringifier"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/createExpressServer.js b/gridsome/lib/server/createExpressServer.js\nindex 6000927..14985ce 100644\n--- a/gridsome/lib/server/createExpressServer.js\n+++ b/gridsome/lib/server/createExpressServer.js\n@@ -40,9 +40,9 @@ module.exports = async (app, options = {}) => {\n         message: err.message,\n         stringified: err.toString()\n       }),\n-      extensions ({ variables: { path }}) {\n-        if (path) {\n-          const page = app.pages.findPage({ path })\n+      extensions ({ variables: { __path }}) {\n+        if (__path) {\n+          const page = app.pages.findPage({ path: __path })\n           return { context: page ? page.context : {}}\n         }\n       }",
    "output": "fix(pages): set page context in dev mode (#417)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex e2b9c09..ae1f336 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -69,8 +69,8 @@ class FilesystemSource {\n     for (const fieldName in this.refs) {\n       const ref = this.refs[fieldName]\n \n-      if (ref.create && node.fields[fieldName]) {\n-        const value = node.fields[fieldName]\n+      if (ref.create && node[fieldName]) {\n+        const value = node[fieldName]\n         const typeName = ref.typeName\n \n         if (Array.isArray(value)) {",
    "output": "fix(filesystem): get ref id from node object (#415)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 14cae05..3875aa5 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -15,10 +15,8 @@ module.exports = async (context, args) => {\n \n   await app.events.dispatch('beforeBuild', { context, config })\n \n-  await fs.remove(config.outDir)\n-  await fs.remove(config.dataDir)\n-  await fs.ensureDir(config.dataDir)\n-  await fs.ensureDir(config.outDir)\n+  await fs.emptyDir(config.outDir)\n+  await fs.emptyDir(config.dataDir)\n \n   const queue = await createRenderQueue(app)\n \ndiff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 4b0fb4a..1c48be0 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -16,8 +16,7 @@ module.exports = async (context, args) => {\n   const server = await createExpressServer(app, { withExplorer: true })\n   const sock = await createSockJsServer(app)\n \n-  await fs.remove(config.cacheDir)\n-  await fs.ensureDir(config.cacheDir)\n+  await fs.emptyDir(config.cacheDir)\n \n   server.app.use(config.pathPrefix, express.static(config.staticDir))\n   server.app.use(require('connect-history-api-fallback')())\ndiff --git a/gridsome/lib/serve.js b/gridsome/lib/serve.js\nindex 3ca94b5..201ad6e 100644\n--- a/gridsome/lib/serve.js\n+++ b/gridsome/lib/serve.js\n@@ -17,8 +17,9 @@ module.exports = async (context, args) => {\n   const { config } = app\n \n   await app.events.dispatch('beforeServe', { context, config })\n+\n   await fs.ensureDir(config.cacheDir)\n-  await fs.remove(config.outDir)\n+  await fs.emptyDir(config.outDir)\n \n   const routes = createRoutes(app)\n   const server = await createExpressServer(app)",
    "output": "fix(build): keep dist folder between builds (#409)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.server.js b/gridsome/app/entry.server.js\nindex ef5ca18..67707a8 100644\n--- a/gridsome/app/entry.server.js\n+++ b/gridsome/app/entry.server.js\n@@ -8,11 +8,20 @@ export default context => new Promise((resolve, reject) => {\n   const { fullPath, name } = router.resolve(url).route\n \n   if (fullPath !== url || name === '*') {\n-    return reject(new Error(`Could not resolve ${url}`))\n+    return reject(new Error(`Could not resolve ${url}.`))\n   }\n-  \n+\n   context.meta = app.$meta()\n \n-  router.push(url)\n-  router.onReady(() => resolve(app))\n+  router.onError(err => reject(err))\n+  router.push(url, () => {\n+    router.history.errorCbs.pop()\n+    resolve(app)\n+  }, err => {\n+    if (err) reject(err)\n+    else {\n+      if (url === router.currentRoute.path) resolve(app)\n+      else reject(new Error(`Route transition was aborted while generating HTML.`))\n+    }\n+  })\n })",
    "output": "refactor(renderer): ensure an error message is shown (#408)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 557cda3..950073c 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -21,7 +21,9 @@ module.exports = async (name, starter = 'default') => {\n     throw new Error(err.message)\n   }\n \n-  if (starters.includes(starter)) {\n+  if (/^([a-z0-9_-]+)\\//i.test(starter)) {\n+    starter = `https://github.com/${starter}.git`\n+  } else if (starters.includes(starter)) {\n     starter = `https://github.com/gridsome/gridsome-starter-${starter}.git`\n   }\n ",
    "output": "feat(cli): support relative github repository urls"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-critical/index.js b/packages/plugin-critical/index.js\nindex 7cff559..cce4d6f 100644\n--- a/packages/plugin-critical/index.js\n+++ b/packages/plugin-critical/index.js\n@@ -9,7 +9,7 @@ const {\n \n module.exports = function (api, options) {\n   api.afterBuild(async ({ queue, config }) => {\n-    const { outDir: base, pathPrefix } = config\n+    const { outDir: base, pathPrefix, publicPath } = config\n \n     const pages = queue.filter(page => {\n       return micromatch(page.path, options.paths).length\n@@ -27,10 +27,11 @@ module.exports = function (api, options) {\n           ignore: options.ignore,\n           width: options.width,\n           height: options.height,\n+          // TODO: remove pathPrefix fallback\n+          pathPrefix: publicPath || pathPrefix || '/',\n           html: sourceHTML,\n           inline: false,\n           minify: true,\n-          pathPrefix,\n           base\n         })\n       } catch (err) {",
    "output": "fix(critical): use publicPath as path prefix"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex efa8eb1..f4de378 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -74,7 +74,7 @@ class ContentfulSource {\n \n         if (Array.isArray(value)) {\n           fields[key] = value.map(item =>\n-            typeof item === 'object' && typeof value.sys !== 'undefined'\n+            typeof item === 'object' && typeof item.sys !== 'undefined'\n               ? this.createReferenceField(item)\n               : item\n           )",
    "output": "fix(contentful): prevent infinite loop for references (#399)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-faker/index.js b/packages/source-faker/index.js\nindex b097f0b..778a675 100644\n--- a/packages/source-faker/index.js\n+++ b/packages/source-faker/index.js\n@@ -11,26 +11,18 @@ module.exports = function (api, options) {\n       const random = faker.random.number({ min: 3, max: 6 })\n       const title = faker.lorem.sentence(random).slice(0, -1)\n \n-      const options = {\n+      contentType.addNode({\n         title,\n         id: faker.random.uuid(),\n         slug: slugify(title),\n         date: faker.date.past(10),\n         excerpt: faker.lorem.sentences(2),\n         content: faker.lorem.paragraphs(10),\n-        fields: {\n-          author: faker.name.findName(),\n-          thumbnail: faker.image.people(),\n-          email: faker.internet.exampleEmail(),\n-          avatar: faker.image.avatar()\n-        }\n-      }\n-\n-      try {\n-        contentType.addNode(options)\n-      } catch (err) {\n-        this.logger.warn(err.message)\n-      }\n+        author: faker.name.findName(),\n+        thumbnail: faker.image.people(),\n+        email: faker.internet.exampleEmail(),\n+        avatar: faker.image.avatar()\n+      })\n     }\n   })\n }",
    "output": "feat(faker): update for latest changes in core"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 53d043b..e2b9c09 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -41,9 +41,7 @@ class FilesystemSource {\n     })\n \n     mapValues(this.refs, (ref, key) => {\n-      this.contentType.addReference(key, {\n-        typeName: ref.typeName\n-      })\n+      this.contentType.addReference(key, ref.typeName)\n \n       if (ref.create) {\n         this.store.addContentType({\n@@ -121,30 +119,27 @@ class FilesystemSource {\n   // helpers\n \n   async createNodeOptions (file) {\n-    const absPath = path.join(this.context, file)\n+    const origin = path.join(this.context, file)\n     const relPath = path.relative(this.context, file)\n     const mimeType = this.store.mime.lookup(file)\n-    const content = await fs.readFile(absPath, 'utf8')\n-    const uid = this.store.makeUid(relPath)\n+    const content = await fs.readFile(origin, 'utf8')\n+    const id = this.store.makeUid(relPath)\n     const { dir, name, ext = '' } = path.parse(file)\n     const routePath = this.createPath({ dir, name })\n \n     return {\n-      uid,\n-      id: uid,\n+      id,\n       path: routePath,\n-      fields: {\n-        fileInfo: {\n-          extension: ext,\n-          directory: dir,\n-          path: file,\n-          name\n-        }\n+      fileInfo: {\n+        extension: ext,\n+        directory: dir,\n+        path: file,\n+        name\n       },\n       internal: {\n         mimeType,\n         content,\n-        origin: absPath\n+        origin\n       }\n     }\n   }",
    "output": "feat(filesystem): update for latest changes in core"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 6c25e19..53d043b 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -7,6 +7,7 @@ const isDev = process.env.NODE_ENV === 'development'\n class FilesystemSource {\n   static defaultOptions () {\n     return {\n+      baseDir: undefined,\n       path: undefined,\n       route: undefined,\n       index: ['index'],\n@@ -18,8 +19,10 @@ class FilesystemSource {\n   constructor (api, options) {\n     this.api = api\n     this.options = options\n-    this.context = api.context\n     this.store = api.store\n+    this.context = options.baseDir\n+      ? api.resolve(options.baseDir)\n+      : api.context\n     this.refsCache = {}\n \n     api.loadSource(async () => {",
    "output": "feat(filesystem): baseDir option (#297)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex dbc5fd6..33fd37a 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -3,6 +3,7 @@ const fs = require('fs-extra')\n const autoBind = require('auto-bind')\n const hirestime = require('hirestime')\n const { info } = require('../utils/log')\n+const isRelative = require('is-relative')\n const { version } = require('../../package.json')\n \n const {\n@@ -196,8 +197,12 @@ class App {\n   // helpers\n   //\n \n-  resolve (p) {\n-    return path.resolve(this.context, p)\n+  resolve (...args) {\n+    const value = path.join(...args)\n+\n+    return isRelative(value)\n+      ? path.join(this.context, value)\n+      : value\n   }\n \n   async resolveChainableWebpackConfig (isServer = false) {\ndiff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex 0d48048..c60999f 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -18,6 +18,10 @@ class PluginAPI {\n     this._app.events.on(eventName, { api: this, handler, options })\n   }\n \n+  resolve (value) {\n+    return this._app.resolve(value)\n+  }\n+\n   setClientOptions (options) {\n     this._entry.clientOptions = options\n   }\ndiff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex 73c7ee3..019a294 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -1,7 +1,6 @@\n const path = require('path')\n const autoBind = require('auto-bind')\n const { Collection } = require('lokijs')\n-const isRelative = require('is-relative')\n const { FSWatcher } = require('chokidar')\n const EventEmitter = require('eventemitter3')\n const validateOptions = require('./validateOptions')\n@@ -12,6 +11,7 @@ const { slugify } = require('../utils')\n \n class Pages {\n   constructor (app) {\n+    this._app = app\n     this._context = app.context\n     this._parser = app.parser\n     this._events = new EventEmitter()\n@@ -146,9 +146,7 @@ class Pages {\n   _normalizeOptions (input = {}) {\n     const options = validateOptions(input)\n \n-    options.component = isRelative(input.component)\n-      ? path.resolve(this._context, input.component)\n-      : input.component\n+    options.component = this._app.resolve(input.component)\n \n     return options\n   }",
    "output": "feat(api): helper method for resolving paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/gridsome.config.js b/gridsome/lib/__tests__/__fixtures__/project-basic/gridsome.config.js\nindex c728b9f..58da407 100644\n--- a/gridsome/lib/__tests__/__fixtures__/project-basic/gridsome.config.js\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/gridsome.config.js\n@@ -3,6 +3,10 @@ module.exports = {\n   siteUrl: 'https://www.gridsome.org',\n   titleTemplate: '%s | Test',\n \n+  metaData: {\n+    someMeta: 'test'\n+  },\n+\n   chainWebpack: config => {\n     config.plugin('test-injections-1')\n       .use(require('webpack/lib/DefinePlugin'), [{\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue b/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\nindex ca52110..c7482f4 100644\n--- a/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n@@ -22,6 +22,7 @@\n     <span class=\"from-env-production\">{{ TEST_1 }}</span>\n     <span class=\"from-plugin\">{{ TEST_2 }}</span>\n     <span class=\"from-chain-webpack\">{{ TEST_3 }}</span>\n+    <span class=\"from-metadata\">{{ $page.metaData.someMeta }}</span>\n \n     <ul>\n       <li v-for=\"edge in $page.allTestDoc.edges\" :key=\"edge.node.id\">\n@@ -40,6 +41,7 @@\n query Home {\n   customRootValue\n   metaData {\n+    someMeta\n     myTest {\n       value\n     }\ndiff --git a/gridsome/lib/__tests__/project-basic.build.e2e.js b/gridsome/lib/__tests__/project-basic.build.e2e.js\nindex 5e69f10..71c8409 100644\n--- a/gridsome/lib/__tests__/project-basic.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-basic.build.e2e.js\n@@ -52,6 +52,7 @@ test('build basic project', () => {\n   expect($home('span.from-env-production').text()).toEqual('PROD_2')\n   expect($home('span.from-plugin').text()).toEqual('test 2')\n   expect($home('span.from-chain-webpack').text()).toEqual('test 3')\n+  expect($home('span.from-metadata').text()).toEqual('test')\n   expect($home('.footer span.meta-data-1').text()).toEqual('Test Value')\n   expect($home('.footer span.meta-data-2').text()).toEqual('bar')\n })\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 8decdcc..c777380 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -115,6 +115,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.siteName = localConfig.siteName || path.parse(context).name\n   config.titleTemplate = localConfig.titleTemplate || `%s - ${config.siteName}`\n   config.siteDescription = localConfig.siteDescription || ''\n+  config.metaData = localConfig.metaData || {}\n \n   config.manifestsDir = path.join(config.assetsDir, 'manifest')\n   config.clientManifestPath = path.join(config.manifestsDir, 'client.json')\ndiff --git a/gridsome/lib/plugins/core/index.js b/gridsome/lib/plugins/core/index.js\nindex 94124bd..fc0a1c9 100644\n--- a/gridsome/lib/plugins/core/index.js\n+++ b/gridsome/lib/plugins/core/index.js\n@@ -7,6 +7,10 @@ function corePlugin (api, config) {\n     store.addMetaData('siteDescription', config.siteDescription)\n     store.addMetaData('siteUrl', config.siteUrl)\n     store.addMetaData('baseUrl', config.baseUrl)\n+\n+    for (const key in config.metaData) {\n+      store.addMetaData(key, config.metaData[key])\n+    }\n   })\n \n   api.afterBuild(({ queue, config }) => {",
    "output": "feat(graphql): add metaData from config (#225)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Pager.js b/gridsome/app/components/Pager.js\nindex c4dbad1..ce7f178 100644\n--- a/gridsome/app/components/Pager.js\n+++ b/gridsome/app/components/Pager.js\n@@ -14,6 +14,7 @@ export default {\n     nextLabel: { type: String, default: '\u203a' },\n     lastLabel: { type: String, default: '\u00bb' },\n     linkClass: { type: String, default: '' },\n+    range: { type: Number, default: 5 },\n     activeLinkClass: { type: String, default: undefined },\n     exactActiveLinkClass: { type: String, default: undefined },\n \n@@ -29,7 +30,7 @@ export default {\n \n   render: (h, { props, data, parent }) => {\n     const { info, showLinks, showNavigation, ariaLabel } = props\n-    const { current, total, pages, start, end } = resolveRange(info)\n+    const { current, total, pages, start, end } = resolveRange(info, props.range)\n     const currentPath = stripPageParam(parent.$route)\n \n     const renderLink = (page, text = page, ariaLabel = text) => {\n@@ -92,21 +93,20 @@ function createPagePath (path, page) {\n function resolveRange ({\n   currentPage: current = 1,\n   totalPages: total = 1\n-}) {\n-  const length = 10\n-  const offset = Math.ceil(length / 2)\n+}, range) {\n+  const offset = Math.ceil(range / 2)\n \n-  let start = current - offset\n-  let end = current + offset\n+  let start = Math.floor(current - offset)\n+  let end = Math.floor(current + offset)\n \n-  if (total <= length) {\n+  if (total <= range) {\n     start = 0\n     end = total\n   } else if (current <= offset) {\n     start = 0\n-    end = length\n+    end = range\n   } else if ((current + offset) >= total) {\n-    start = total - length\n+    start = total - range\n     end = total\n   }\n ",
    "output": "feat(app): range option for Pager component (#344)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.server.js b/gridsome/app/entry.server.js\nindex c67b30a..ef5ca18 100644\n--- a/gridsome/app/entry.server.js\n+++ b/gridsome/app/entry.server.js\n@@ -1,21 +1,18 @@\n import createApp, { runMain } from './app'\n-import { NOT_FOUND_NAME, NOT_FOUND_PATH } from '~/.temp/constants'\n \n runMain()\n \n export default context => new Promise((resolve, reject) => {\n+  const { url } = context\n   const { app, router } = createApp()\n-  const location = context.url\n+  const { fullPath, name } = router.resolve(url).route\n+\n+  if (fullPath !== url || name === '*') {\n+    return reject(new Error(`Could not resolve ${url}`))\n+  }\n   \n   context.meta = app.$meta()\n \n-  router.push(location, () => {\n-    const { matched: [match] } = app.$route\n-\n-    if (!match || (location !== NOT_FOUND_PATH && match.name === NOT_FOUND_NAME)) {\n-      return reject(new Error(`Could not resolve ${context.url}`))\n-    }\n-\n-    resolve(app)\n-  })\n+  router.push(url)\n+  router.onReady(() => resolve(app))\n })",
    "output": "refactor(app): resolve app in router.onReady (#366)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.client.js b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.client.js\nnew file mode 100644\nindex 0000000..b7e878d\n--- /dev/null\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.client.js\n@@ -0,0 +1,9 @@\n+import './test-es6-1'\n+import './test-es6-2'\n+\n+export default function (Vue, options, { head }) {\n+  head.meta.push({\n+    name: 'og:title',\n+    content: options.ogTitle\n+  })\n+}\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.server.js b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.server.js\nnew file mode 100644\nindex 0000000..cb7c977\n--- /dev/null\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/gridsome.server.js\n@@ -0,0 +1,36 @@\n+const path = require('path')\n+\n+module.exports = function (api, options) {\n+  api.setClientOptions({\n+    ogTitle: options.foo\n+  })\n+\n+  api.transpileDependencies([\n+    path.join(__dirname, 'test-es6-1.js')\n+  ])\n+\n+  api.loadSource(store => {\n+    store.addMetaData('pluginValue', options.foo)\n+  })\n+\n+  api.chainWebpack(config => {\n+    config.plugin('test-injections-2')\n+      .use(require('webpack/lib/DefinePlugin'), [{\n+        'TEST_2': JSON.stringify('test 2')\n+      }])\n+  })\n+\n+  api.createSchema(graphql => {\n+    return new graphql.GraphQLSchema({\n+      query: new graphql.GraphQLObjectType({\n+        name: 'CustomRootQuery',\n+        fields: {\n+          customRootValue: {\n+            type: graphql.GraphQLString,\n+            resolve: () => 'string from custom schema'\n+          }\n+        }\n+      })\n+    })\n+  })\n+}\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-1.js b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-1.js\nnew file mode 100644\nindex 0000000..b5e677b\n--- /dev/null\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-1.js\n@@ -0,0 +1,5 @@\n+export default {\n+  testToArray1 (...args) {\n+    return args\n+  }\n+}\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-2.js b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-2.js\nnew file mode 100644\nindex 0000000..bcb0ff9\n--- /dev/null\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/node_modules/plugin/test-es6-2.js\n@@ -0,0 +1,5 @@\n+export default {\n+  testToArray2 (...args) {\n+    return args\n+  }\n+}",
    "output": "test(e2e): add files for plugin test"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 5922d67..10595ee 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -160,7 +160,11 @@ class WordPressSource {\n \n     try {\n       res = await this.client.request({ url, params })\n-    } catch ({ response }) {\n+    } catch ({ response, code, config }) {\n+      if (!response && code) {\n+        throw new Error(`${code} - ${config.url}`)\n+      }\n+\n       const { url } = response.config\n       const { status } = response.data.data\n \n@@ -168,7 +172,7 @@ class WordPressSource {\n         console.warn(`Error: Status ${status} - ${url}`)\n         return { ...response, data: fallbackData }\n       } else {\n-        throw new Error(`Status ${status} - ${url}`)\n+        throw new Error(`${status} - ${url}`)\n       }\n     }\n ",
    "output": "fix(wordpress): show error message when api fails"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex db482e2..e655f5d 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -82,7 +82,7 @@ export default {\n           innerHTML: `` + \n             `<img src=\"${props.src.src}\" class=\"${stringifyClass(noscriptClassNames)}\"` +\n             (attrs.width ? ` width=\"${attrs.width}\"`: '') +\n-            (props.alt ? ` alt=\"${props.alt}\"` : '') +\n+            (attrs.alt ? ` alt=\"${attrs.alt}\"` : '') +\n             `>`\n         }\n       }))\ndiff --git a/gridsome/lib/__tests__/project-basic.build.e2e.js b/gridsome/lib/__tests__/project-basic.build.e2e.js\nindex 9925042..775a233 100644\n--- a/gridsome/lib/__tests__/project-basic.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-basic.build.e2e.js\n@@ -103,6 +103,7 @@ test('render g-image components', () => {\n   expect($home('img.g-image-2').data('srcset')).toMatch('/assets/static/test.82a2fbd.test.png 480w')\n   expect($home('img.g-image-2').data('src')).toEqual('/assets/static/test.97c148e.test.png')\n   expect($home('img.g-image-2').attr('class')).not.toEqual('g-image-false')\n+  expect($home('img.g-image-2 + noscript').html()).toMatch('alt=\"Test image\"')\n   expect($home('img.g-image-static').attr('src')).toEqual('/uploads/test.png')\n   expect($home('img.g-image-static').attr('alt')).toEqual('Static image')\n   expect($home('img.g-image-immediate').attr('src')).toEqual('/assets/static/test.cbab2cf.test.png')",
    "output": "fix(g-image): alt attribute for noscript image (#353)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 7b6f907..5e1edef 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -16,7 +16,7 @@ const { app, router } = createApp()\n // let Vue router handle internal URLs for anchors in innerHTML\n document.addEventListener('click', event => {\n   const $el = event.target.closest('a')\n-  const { hostname } = document.location\n+  const { hostname, port } = document.location\n \n   if (\n     event.defaultPrevented ||     // disables this behavior\n@@ -28,6 +28,7 @@ document.addEventListener('click', event => {\n     $el === null ||               // no link clicked\n     $el.__gLink__ ||              // g-link anchor\n     $el.hostname !== hostname ||  // external link\n+    $el.port !== port ||  // external link\n     /\\.[^.]+$/.test($el.pathname) // link to a file\n   ) return\n ",
    "output": "fix(app): don't resolve url for different port (#350)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\nindex 9fc1817..9b83ad0 100644\n--- a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n@@ -129,6 +129,33 @@ test('create graphql types from node fields', () => {\n   expect(types.emptyObj).toBeUndefined()\n })\n \n+test.each([\n+  ['number first', [{ number: 1 }, { number: 1.2 }, { number: 2 }]],\n+  ['float first', [{ number: 1.2 }, { number: 1 }, { number: 2 }]],\n+  ['missing number 1', [{ number: 1 }, {}, { number: 1.2 }]],\n+  ['missing number 2', [{ number: 1.2 }, {}, { number: 1 }]],\n+  ['mixed type', [{ number: 1.2 }, { number: true }, { number: 'string' }]]\n+])('prefer float when mixed number types - %s', (_, nodeFields) => {\n+  const nodes = nodeFields.map(fields => ({ fields }))\n+  const fields = createFieldDefinitions(nodes)\n+  const types = createFieldTypes(fields, 'Test')\n+\n+  expect(types.number.type).toEqual(GraphQLFloat)\n+})\n+\n+test.each([\n+  ['number first', [{ numbers: [1, 1.5, 2] }]],\n+  ['float first', [{ numbers: [1.5, 1] }]],\n+  ['empty list', [{ numbers: [] }, { numbers: [1] }, { numbers: [1.2] }]],\n+  ['missing list', [{ numbers: [1.2] }, {}, { numbers: [1] }]]\n+])('prefer float when mixed number types in lists - %s', (_, nodeFields) => {\n+  const nodes = nodeFields.map(fields => ({ fields }))\n+  const fields = createFieldDefinitions(nodes)\n+  const types = createFieldTypes(fields, 'Test')\n+\n+  expect(types.numbers.type.ofType).toEqual(GraphQLFloat)\n+})\n+\n test('infer date fields', () => {\n   const fields = createFieldDefinitions([\n     {\ndiff --git a/gridsome/lib/graphql/createFieldDefinitions.js b/gridsome/lib/graphql/createFieldDefinitions.js\nindex da3ea16..590dc1f 100644\n--- a/gridsome/lib/graphql/createFieldDefinitions.js\n+++ b/gridsome/lib/graphql/createFieldDefinitions.js\n@@ -1,4 +1,4 @@\n-const { isPlainObject } = require('lodash')\n+const { isPlainObject, isNumber, isInteger } = require('lodash')\n const { isRefField, isRefFieldDefinition } = require('./utils')\n \n module.exports = function createFieldDefinitions (nodes) {\n@@ -64,6 +64,10 @@ function fieldValue (value, currentValue) {\n     }\n \n     return fieldValues(value, currentValue)\n+  } else if (isNumber(value)) {\n+    return isNumber(currentValue) && isInteger(value)\n+      ? currentValue\n+      : value\n   }\n \n   return currentValue !== undefined ? currentValue : value",
    "output": "fix(graphql): prefer float when mixed number types (#332)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/__tests__/index.spec.js b/gridsome/lib/app/__tests__/index.spec.js\nindex af41429..b60db1c 100644\n--- a/gridsome/lib/app/__tests__/index.spec.js\n+++ b/gridsome/lib/app/__tests__/index.spec.js\n@@ -28,10 +28,10 @@ test('setup basic config', () => {\n   expect(config.siteName).toEqual('Gridsome')\n   expect(config.titleTemplate).toEqual('%s | Test')\n   expect(config.icon.favicon).toHaveProperty('sizes')\n-  expect(config.icon.favicon).toHaveProperty('src', 'src/favicon.png')\n+  expect(config.icon.favicon).toHaveProperty('src', './src/favicon.png')\n   expect(config.icon.touchicon).toHaveProperty('sizes')\n   expect(config.icon.touchicon).toHaveProperty('precomposed')\n-  expect(config.icon.touchicon).toHaveProperty('src', 'src/favicon.png')\n+  expect(config.icon.touchicon).toHaveProperty('src', './src/favicon.png')\n })\n \n test('load env variables', () => {",
    "output": "test(app): update tests"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/codegen/icons.js b/gridsome/lib/app/codegen/icons.js\nindex 06f8177..01b8a1c 100644\n--- a/gridsome/lib/app/codegen/icons.js\n+++ b/gridsome/lib/app/codegen/icons.js\n@@ -1,9 +1,11 @@\n+const path = require('path')\n const fs = require('fs-extra')\n+const isRelative = require('is-relative')\n \n-async function genIcons ({ config, resolve, queue }) {\n+async function genIcons ({ config, context, queue }) {\n   const { touchicon, favicon } = config.icon\n-  const touchiconPath = resolve(touchicon.src)\n-  const faviconPath = resolve(favicon.src)\n+  const touchiconPath = iconPath(context, touchicon.src)\n+  const faviconPath = iconPath(context, favicon.src)\n \n   const icons = {\n     touchiconMimeType: null,\n@@ -37,6 +39,12 @@ async function genIcons ({ config, resolve, queue }) {\n   return `export default ${JSON.stringify(icons, null, 2)}`\n }\n \n+function iconPath (context, src) {\n+  return isRelative(src)\n+    ? path.join(context, src)\n+    : src\n+}\n+\n function iconData (set) {\n   return {\n     width: set.width,\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 146207e..7521640 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -246,7 +246,7 @@ function normalizeIconsConfig (config = {}) {\n \n   const faviconSizes = [16, 32, 96]\n   const touchiconSizes = [76, 152, 120, 167, 180]\n-  const defaultIcon = 'src/favicon.png'\n+  const defaultIcon = './src/favicon.png'\n   const icon = typeof config === 'string' ? { favicon: config } : (config || {})\n \n   res.favicon = typeof icon.favicon === 'string'",
    "output": "fix(app): allow absolute path to custom favicon"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex fadc154..b936dc1 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -14,18 +14,13 @@ module.exports = ({ store }) => {\n       return res.sendStatus(200)\n     }\n \n-    const { query, variables, ...body } = await getGraphQLParams(req)\n-\n-    if (!query || !variables) {\n-      return next()\n-    }\n+    const { query = '', variables, ...body } = await getGraphQLParams(req)\n \n     const pageQuery = processPageQuery({ query })\n-    const { path } = variables\n \n-    if (variables.path) {\n+    if (variables && variables.path) {\n       const entry = store.index.findOne({\n-        path: { $in: [path, trimEnd(path, '/')] }\n+        path: { $in: [variables.path, trimEnd(variables.path, '/')] }\n       })\n \n       if (!entry) {",
    "output": "fix(graphql): allow requests without variables (#323)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 2c30c07..ce48344 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -1,7 +1,6 @@\n import Vue from 'vue'\n import plugins from '~/.temp/plugins-server'\n import main from './main'\n-import routes from '~/.temp/routes.js'\n \n import head from './head'\n import router from './router'\n@@ -17,8 +16,6 @@ Vue.component('ClientOnly', ClientOnly)\n \n Vue.prototype.$url = url\n \n-router.addRoutes(routes)\n-\n const context = {\n   appOptions: {\n     render: h => h('router-view', { attrs: { id: 'app' }}),\ndiff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex c86ab5e..05b2e6f 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -1,15 +1,16 @@\n /* global GRIDSOME_MODE, GRIDSOME_DATA_DIR */\n \n-import router from '../router'\n import { setResults } from './shared'\n import { unslash } from '../utils/helpers'\n import { NOT_FOUND_NAME, NOT_FOUND_PATH } from '../utils/constants'\n \n export default (route, query) => {\n   if (GRIDSOME_MODE === 'serve') {\n-    const { page, ...params } = route.params\n-    const { location } = router.resolve({ ...route, params })\n-    const path = location.path || '/'\n+    const { name, params: { page }} = route\n+\n+    const path = page\n+      ? route.path.split('/').slice(0, -1).join('/')\n+      : route.path\n \n     return new Promise((resolve, reject) => {\n       fetch(process.env.GRAPHQL_ENDPOINT, {\n@@ -18,9 +19,7 @@ export default (route, query) => {\n         body: JSON.stringify({\n           variables: {\n             page: page ? Number(page) : null,\n-            path: route.name === NOT_FOUND_NAME\n-              ? NOT_FOUND_PATH\n-              : path\n+            path: name === NOT_FOUND_NAME ? NOT_FOUND_PATH : (path || '/')\n           },\n           query\n         })\ndiff --git a/gridsome/app/router.js b/gridsome/app/router.js\nindex 1530e8f..35a3a13 100644\n--- a/gridsome/app/router.js\n+++ b/gridsome/app/router.js\n@@ -1,5 +1,6 @@\n import Vue from 'vue'\n import Router from 'vue-router'\n+import routes from '~/.temp/routes.js'\n \n Vue.use(Router)\n \n@@ -7,6 +8,7 @@ const router = new Router({\n   base: process.env.PUBLIC_PATH,\n   mode: 'history',\n   fallback: false,\n+  routes,\n \n   scrollBehavior (to, from, saved) {\n     if (saved) {",
    "output": "fix(app): make routes appear in vue-devtools (#322)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/__tests__/index.spec.js b/gridsome/lib/app/__tests__/index.spec.js\nindex d52aa16..af41429 100644\n--- a/gridsome/lib/app/__tests__/index.spec.js\n+++ b/gridsome/lib/app/__tests__/index.spec.js\n@@ -101,9 +101,10 @@ test('setup style loader options', async () => {\n   const app = await createApp(context, {\n     localConfig: {\n       css: {\n+        split: true,\n         loaderOptions: {\n           css: { url: false },\n-          sass: { data: '@import \"variables.sass\";' },\n+          sass: { indentedSyntax: false },\n           scss: { data: '@import \"variables.scss\";' },\n           less: { strictMath: true },\n           stylus: { use: ['plugin'] },\n@@ -119,6 +120,8 @@ test('setup style loader options', async () => {\n   const chain = await createClientConfig(app)\n   const oneOf = ['normal', 'modules']\n \n+  expect(app.config.css.split).toEqual(true)\n+\n   oneOf.forEach(oneOf => {\n     const css = chain.module.rule('css').oneOf(oneOf).use('css-loader').toConfig()\n     const postcss = chain.module.rule('postcss').oneOf(oneOf).use('postcss-loader').toConfig()\n@@ -132,7 +135,7 @@ test('setup style loader options', async () => {\n     expect(postcss.options.plugins).toHaveLength(2)\n     expect(postcss.options.plugins[0]).toEqual('plugin')\n     expect(postcss.options.plugins[1]).toBeInstanceOf(Function)\n-    expect(sass.options.data).toEqual('@import \"variables.sass\";')\n+    expect(sass.options.indentedSyntax).toEqual(false)\n     expect(scss.options.data).toEqual('@import \"variables.scss\";')\n     expect(less.options.strictMath).toEqual(true)\n     expect(stylus.options.use[0]).toEqual('plugin')",
    "output": "test(app): overriding css config with custom config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 3d59731..146207e 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -122,7 +122,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.templatePath = fs.existsSync(localIndex) ? localIndex : path.resolve(config.appPath, 'index.html')\n   config.htmlTemplate = fs.readFileSync(config.templatePath, 'utf-8')\n \n-  config.css = defaultsDeep(css, localConfig.css || {})\n+  config.css = defaultsDeep(localConfig.css || {}, css)\n \n   return Object.freeze(config)\n }",
    "output": "fix(app): allow css.split option to be true (#266)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex 9042007..da1d27b 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -49,6 +49,11 @@ class ContentTypeCollection extends EventEmitter {\n     const { typeName } = this.options\n     const internal = this.pluginStore._createInternals(options.internal)\n \n+    // prioritize node.id over node.fields.id\n+    if (options.id && options.fields && options.fields.id) {\n+      delete options.fields.id\n+    }\n+\n     // transform content with transformer for given mime type\n     if (internal.content && internal.mimeType) {\n       this._transformNodeOptions(options, internal)\n@@ -128,6 +133,11 @@ class ContentTypeCollection extends EventEmitter {\n \n     const internal = this.pluginStore._createInternals(options.internal)\n \n+    // prioritize node.id over node.fields.id\n+    if (options.id && options.fields && options.fields.id) {\n+      delete options.fields.id\n+    }\n+\n     // transform content with transformer for given mime type\n     if (internal.content && internal.mimeType) {\n       this._transformNodeOptions(options, internal)\ndiff --git a/gridsome/lib/app/__tests__/PluginStore.spec.js b/gridsome/lib/app/__tests__/PluginStore.spec.js\nindex 7c22002..0fea78d 100644\n--- a/gridsome/lib/app/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/app/__tests__/PluginStore.spec.js\n@@ -166,6 +166,19 @@ test('change node id from fields', () => {\n   expect(entry.uid).toEqual('test')\n })\n \n+test('prioritize node.id over node.fields.id', () => {\n+  const contentType = createPlugin().store.addContentType('Test')\n+\n+  const node = contentType.addNode({\n+    id: 'foo',\n+    fields: {\n+      id: 'bar'\n+    }\n+  })\n+\n+  expect(node.id).toEqual('foo')\n+})\n+\n test('remove node', () => {\n   const api = createPlugin()\n ",
    "output": "fix(store): prioritize node.id over node.fields.id"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex ceb9ec2..fadc154 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -9,6 +9,11 @@ const {\n \n module.exports = ({ store }) => {\n   return async function (req, res, next) {\n+    // allow OPTIONS method for cors\n+    if (req.method === 'OPTIONS') {\n+      return res.sendStatus(200)\n+    }\n+\n     const { query, variables, ...body } = await getGraphQLParams(req)\n \n     if (!query || !variables) {",
    "output": "fix(develop): allow OPTIONS method request to /___graphql (#271)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Pager.js b/gridsome/app/components/Pager.js\nindex b588b41..1df99c8 100644\n--- a/gridsome/app/components/Pager.js\n+++ b/gridsome/app/components/Pager.js\n@@ -44,7 +44,7 @@ export default {\n       }\n \n       return h(Link, {\n-        staticClass: props.linkClass,\n+        class: props.linkClass,\n         props: linkProps,\n         attrs: {\n           'aria-label': ariaLabel.replace('%n', page),\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-blog/src/pages/Index.vue b/gridsome/lib/__tests__/__fixtures__/project-blog/src/pages/Index.vue\nindex 75de7a3..f0474c1 100644\n--- a/gridsome/lib/__tests__/__fixtures__/project-blog/src/pages/Index.vue\n+++ b/gridsome/lib/__tests__/__fixtures__/project-blog/src/pages/Index.vue\n@@ -9,7 +9,7 @@\n         <g-link :class=\"`post-link-${node.id}`\" :to=\"node.path\">Read more</g-link>\n       </li>\n     </ul>\n-    <Pager :info=\"$page.posts.pageInfo\"/>\n+    <Pager :linkClass=\"{ 'pager-link': true }\" :info=\"$page.posts.pageInfo\"/>\n   </Layout>\n </template>\n \ndiff --git a/gridsome/lib/__tests__/project-blog.build.e2e.js b/gridsome/lib/__tests__/project-blog.build.e2e.js\nindex 9c2b2d1..b56d790 100644\n--- a/gridsome/lib/__tests__/project-blog.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-blog.build.e2e.js\n@@ -98,7 +98,7 @@ test('open blog in browser', async () => {\n })\n \n test('navigate to /2', async () => {\n-  await page.click('nav[role=\"navigation\"] a.active + a')\n+  await page.click('nav[role=\"navigation\"] .pager-link.active + .pager-link')\n   await page.waitForSelector('#app.home-2')\n })\n ",
    "output": "fix(pager): bind linkClass to an object (#257)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/BaseStore.js b/gridsome/lib/app/BaseStore.js\nindex 4582a59..5696645 100644\n--- a/gridsome/lib/app/BaseStore.js\n+++ b/gridsome/lib/app/BaseStore.js\n@@ -42,6 +42,8 @@ class BaseStore {\n       node.data = node.data.concat(data)\n     } else if (node && isPlainObject(node.data) && isPlainObject(data)) {\n       Object.assign(node.data, data)\n+    } else if (node) {\n+      node.data = data\n     } else {\n       node = this.metaData.insert({ key, data })\n     }\ndiff --git a/gridsome/lib/graphql/__tests__/metaData.spec.js b/gridsome/lib/graphql/__tests__/metaData.spec.js\nindex e4680e1..8e2efb3 100644\n--- a/gridsome/lib/graphql/__tests__/metaData.spec.js\n+++ b/gridsome/lib/graphql/__tests__/metaData.spec.js\n@@ -68,6 +68,9 @@ test('add meta data', async () => {\n \n   api.store.addMetaData('myOtherValue', 'Value')\n \n+  api.store.addMetaData('overrideValue', 'Value 1')\n+  api.store.addMetaData('overrideValue', 'Value 2')\n+\n   const query = `{\n     metaData {\n       myValue {\n@@ -80,6 +83,7 @@ test('add meta data', async () => {\n         }\n       }\n       myOtherValue\n+      overrideValue\n       myList {\n         name\n         description\n@@ -96,6 +100,7 @@ test('add meta data', async () => {\n   expect(data.metaData.myValue.object.list).toHaveLength(3)\n   expect(data.metaData.myValue.object.value).toEqual(1000)\n   expect(data.metaData.myOtherValue).toEqual('Value')\n+  expect(data.metaData.overrideValue).toEqual('Value 2')\n   expect(data.metaData.myList).toHaveLength(3)\n   expect(data.metaData.myList[0]).toMatchObject({\n     name: 'Etiam Nibh',\ndiff --git a/gridsome/lib/plugins/core/index.js b/gridsome/lib/plugins/core/index.js\nindex 32fde24..3462c7b 100644\n--- a/gridsome/lib/plugins/core/index.js\n+++ b/gridsome/lib/plugins/core/index.js\n@@ -1,6 +1,7 @@\n function corePlugin (api, options) {\n   api.loadSource(store => {\n     store.addMetaData('siteName', options.siteName)\n+    store.addMetaData('siteDescription', options.siteDescription)\n     store.addMetaData('siteUrl', options.siteUrl)\n     store.addMetaData('baseUrl', options.baseUrl)\n   })",
    "output": "fix(graphq): siteDescription as metaData (#260)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/package.json b/gridsome/package.json\nindex c81e122..8462024 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -63,7 +63,7 @@\n     \"imagemin-webp\": \"^5.0.0\",\n     \"is-relative\": \"^1.0.0\",\n     \"is-url\": \"^1.2.4\",\n-    \"jest-worker\": \"^24.0.0\",\n+    \"jest-worker\": \"24.0.0\",\n     \"json-loader\": \"^0.5.7\",\n     \"loader-utils\": \"^1.2.3\",\n     \"lodash\": \"^4.17.11\",\ndiff --git a/yarn.lock b/yarn.lock\nindex bcc7346..6cd702e 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -7423,7 +7423,7 @@ jest-watcher@^24.0.0:\n     jest-util \"^24.0.0\"\n     string-length \"^2.0.0\"\n \n-jest-worker@^24.0.0:\n+jest-worker@24.0.0, jest-worker@^24.0.0:\n   version \"24.0.0\"\n   resolved \"https://registry.yarnpkg.com/jest-worker/-/jest-worker-24.0.0.tgz#3d3483b077bf04f412f47654a27bba7e947f8b6d\"\n   integrity sha512-s64/OThpfQvoCeHG963MiEZOAAxu8kHsaL/rCMF7lpdzo7vgF0CtPml9hfguOMgykgH/eOm4jFP4ibfHLruytg==",
    "output": "fix: pin jest-worker version until fix is published (#252)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/utils/sysinfo.js b/gridsome/lib/utils/sysinfo.js\nindex fc742f3..5ffc0f8 100644\n--- a/gridsome/lib/utils/sysinfo.js\n+++ b/gridsome/lib/utils/sysinfo.js\n@@ -6,6 +6,6 @@ module.exports = {\n   cpus: {\n     model: cpus.length ? cpus[0].model : '',\n     logical: cpus.length,\n-    physical\n+    physical: physical || 1\n   }\n }",
    "output": "fix: count minimum one physical cpu (#255)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/BaseStore.js b/gridsome/lib/app/BaseStore.js\nindex 8dc7d7e..99afea8 100644\n--- a/gridsome/lib/app/BaseStore.js\n+++ b/gridsome/lib/app/BaseStore.js\n@@ -1,6 +1,6 @@\n const Loki = require('lokijs')\n const autoBind = require('auto-bind')\n-const { uniqBy, isArray, isPlainObject } = require('lodash')\n+const { omit, isArray, isPlainObject } = require('lodash')\n const ContentTypeCollection = require('./ContentTypeCollection')\n \n class BaseStore {\n@@ -69,17 +69,11 @@ class BaseStore {\n   }\n \n   chainIndex (query = {}) {\n-    let chain = this.index.chain().find(query)\n-    const typeNames = uniqBy(chain.data(), 'typeName').map(entry => entry.typeName)\n-    const joinMapper = (left, right) => ({ ...left, ...right })\n-    const joinOptions = { removeMeta: true }\n-\n-    for (let i = 0, l = typeNames.length; i < l; i++) {\n-      const { collection } = this.getContentType(typeNames[i])\n-      chain = chain.eqJoin(collection, 'uid', 'uid', joinMapper, joinOptions)\n-    }\n-\n-    return chain\n+    return this.index.chain().find(query).map(entry => {\n+      const type = this.collections[entry.typeName]\n+      const node = type.collection.by('id', entry.id)\n+      return omit(node, '$loki')\n+    })\n   }\n \n   // pages",
    "output": "perf(graphql): improve belongsTo query performance"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/createRoutes.js b/gridsome/lib/app/createRoutes.js\nindex 9b19c37..9e89179 100644\n--- a/gridsome/lib/app/createRoutes.js\n+++ b/gridsome/lib/app/createRoutes.js\n@@ -1,6 +1,7 @@\n const path = require('path')\n const camelCase = require('camelcase')\n const { info } = require('../utils/log')\n+const { parsePageQuery } = require('../graphql/page-query')\n \n const {\n   PAGED_ROUTE,\n@@ -97,9 +98,9 @@ module.exports = ({ store, config }) => {\n   const notFoundPage = store.pages.findOne({ type: '404' })\n   const notFoundRoute = {\n     component: path.join(config.appPath, 'pages', '404.vue'),\n+    pageQuery: parsePageQuery(),\n     type: NOT_FOUND_ROUTE,\n     isIndex: false,\n-    pageQuery: {},\n     path: '/404',\n     name: '404'\n   }",
    "output": "fix(app): don\u2019t preload /404 without page-query"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex ccafe59..7b6f907 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -20,6 +20,11 @@ document.addEventListener('click', event => {\n \n   if (\n     event.defaultPrevented ||     // disables this behavior\n+    event.which !== 1 ||          // not a left click\n+    event.metaKey ||\n+    event.altKey ||\n+    event.ctrlKey ||\n+    event.shiftKey ||\n     $el === null ||               // no link clicked\n     $el.__gLink__ ||              // g-link anchor\n     $el.hostname !== hostname ||  // external link",
    "output": "fix(app): only intercept left clicks on links (#236)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex f90b8e2..ba3000c 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -147,7 +147,7 @@ module.exports = (app, { isProd, isServer }) => {\n   // assets\n \n   config.module.rule('images')\n-    .test(/\\.(png|jpe?g|gif)(\\?.*)?$/)\n+    .test(/\\.(png|jpe?g|gif|webp)(\\?.*)?$/)\n     .use('url-loader')\n     .loader('url-loader')\n     .options({",
    "output": "fix(webpack): support webp images (#227)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/.gitignore b/gridsome/lib/__tests__/.gitignore\nindex 91630c2..6351907 100644\n--- a/gridsome/lib/__tests__/.gitignore\n+++ b/gridsome/lib/__tests__/.gitignore\n@@ -1 +1,2 @@\n assets/static\n+assets/cache\ndiff --git a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\nindex 26b104e..9fc1817 100644\n--- a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n@@ -69,6 +69,14 @@ const nodes = [\n         }\n       }\n     }\n+  },\n+  {\n+    fields: {\n+      ref: null,\n+      refs: [],\n+      objList: [],\n+      numberList: []\n+    }\n   }\n ]\n \ndiff --git a/gridsome/lib/graphql/createFieldDefinitions.js b/gridsome/lib/graphql/createFieldDefinitions.js\nindex 077a2a5..da3ea16 100644\n--- a/gridsome/lib/graphql/createFieldDefinitions.js\n+++ b/gridsome/lib/graphql/createFieldDefinitions.js\n@@ -46,6 +46,10 @@ function fieldValue (value, currentValue) {\n       return currentValue\n     }\n \n+    if (isRefFieldDefinition(currentValue)) {\n+      return currentValue\n+    }\n+\n     for (let i = 0; i < length; i++) {\n       arr[0] = fieldValue(value[i], arr[0])\n     }",
    "output": "fix(store): keep references for empty arrays"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex b1c9e7e..f35ef70 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -9,6 +9,11 @@ const {\n module.exports = ({ store }) => {\n   return async function (req, res, next) {\n     const { query, variables, ...body } = await getGraphQLParams(req)\n+\n+    if (!query || !variables) {\n+      return next()\n+    }\n+\n     const pageQuery = processPageQuery({ query })\n \n     if (variables.path) {",
    "output": "fix(graphql): don\u2019t process non graphql requests (#220)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex 4db00c7..78be889 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -33,8 +33,8 @@ export default (route, query) => {\n   } else if (GRIDSOME_MODE === 'static') {\n     return new Promise((resolve, reject) => {\n       const { name, meta: { isIndex }} = route\n-      const path = name === '*' ? '404' : unslash(route.path)\n-      const jsonPath = isIndex === false ? `${path}.json` : `${path}/index.json`\n+      const path = unslash(name === '*' ? '404' : route.path)\n+      const jsonPath = unslash(isIndex === false ? `${path}.json` : `${path}/index.json`)\n \n       import(/* webpackChunkName: \"data/\" */ `${GRIDSOME_DATA_DIR}/${jsonPath}`)\n         .then(res => {",
    "output": "fix(app): fetch data properly for homepage (#218)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/directives/link.js b/gridsome/app/directives/link.js\nindex 43dbd32..581f421 100644\n--- a/gridsome/app/directives/link.js\n+++ b/gridsome/app/directives/link.js\n@@ -29,6 +29,9 @@ function intersectionHandler ({ intersectionRatio, target }) {\n \n         const path = stripPathPrefix(target.pathname)\n         const { route } = router.resolve({ path })\n+        const options = route.matched[0].components.default\n+        \n+        if (route.meta.isStatic) return\n \n         const fetchComponentData = options => {\n           setTimeout(() => {\n@@ -38,14 +41,10 @@ function intersectionHandler ({ intersectionRatio, target }) {\n           }, 250)\n         }\n \n-        if (route.meta.data && route.matched.length) {\n-          const options = route.matched[0].components.default\n-\n-          if (typeof options === 'function') {\n-            options().then(m => fetchComponentData(m.default))\n-          } else {\n-            fetchComponentData(options)\n-          }\n+        if (typeof options === 'function') {\n+          options().then(m => fetchComponentData(m.default))\n+        } else {\n+          fetchComponentData(options)\n         }\n       }\n     }\ndiff --git a/gridsome/lib/app/codegen/routes.js b/gridsome/lib/app/codegen/routes.js\nindex 9b32d45..c376c36 100644\n--- a/gridsome/lib/app/codegen/routes.js\n+++ b/gridsome/lib/app/codegen/routes.js\n@@ -23,7 +23,9 @@ function genRoutes (app) {\n     props.push(`    path: ${JSON.stringify(page.route || page.path)}`)\n     props.push(`    component: () => import(/* webpackChunkName: ${chunkName} */ ${component})`)\n \n+    if (page.pageQuery.query === null) metas.push('isStatic: true')\n     if (page.isIndex === false) metas.push('isIndex: false')\n+\n     if (metas.length) props.push(`    meta: { ${metas.join(', ')} }`)\n \n     if (page.name) {",
    "output": "fix(app): preload data for links in view"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex 511ed7d..4db00c7 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -33,8 +33,8 @@ export default (route, query) => {\n   } else if (GRIDSOME_MODE === 'static') {\n     return new Promise((resolve, reject) => {\n       const { name, meta: { isIndex }} = route\n-      const path = name === '*' ? '/404' : route.path\n-      const jsonPath = unslash(isIndex === false ? `${path}.json` : `${path}/index.json`)\n+      const path = name === '*' ? '404' : unslash(route.path)\n+      const jsonPath = isIndex === false ? `${path}.json` : `${path}/index.json`\n \n       import(/* webpackChunkName: \"data/\" */ `${GRIDSOME_DATA_DIR}/${jsonPath}`)\n         .then(res => {",
    "output": "fix(app): unslash path before fetching data"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex dcbed20..7c71fa6 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -126,13 +126,20 @@ async function createRenderQueue ({ routes, config, store, schema }) {\n \n     switch (page.type) {\n       case STATIC_ROUTE:\n-      case NOT_FOUND_ROUTE:\n-      case STATIC_TEMPLATE_ROUTE: {\n+      case NOT_FOUND_ROUTE: {\n         queue.push(createPage(page, pageQuery.query))\n \n         break\n       }\n \n+      case STATIC_TEMPLATE_ROUTE: {\n+        const node = store.getNodeByPath(page.path)\n+        const variables = contextValues(node, pageQuery.variables)\n+        queue.push(createEntry(node, page, pageQuery.query, variables))\n+\n+        break\n+      }\n+\n       case DYNAMIC_TEMPLATE_ROUTE: {\n         const { collection } = store.getContentType(page.typeName)\n \ndiff --git a/gridsome/lib/webpack/loaders/page-query.js b/gridsome/lib/webpack/loaders/page-query.js\nindex 2f46b74..195cbb1 100644\n--- a/gridsome/lib/webpack/loaders/page-query.js\n+++ b/gridsome/lib/webpack/loaders/page-query.js\n@@ -30,7 +30,7 @@ module.exports = function (source, map) {\n     const errors = validateQuery(schema, source)\n \n     if (errors && errors.length) {\n-      this.callback(errors[0], source, map)\n+      this.callback(new Error(errors[0]), source, map)\n       return\n     }\n   } catch (err) {",
    "output": "fix(build): query context for templates with static route"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/page-query.spec.js b/gridsome/lib/graphql/__tests__/page-query.spec.js\nindex 0b9306f..4969ff4 100644\n--- a/gridsome/lib/graphql/__tests__/page-query.spec.js\n+++ b/gridsome/lib/graphql/__tests__/page-query.spec.js\n@@ -31,6 +31,13 @@ test('parse empty page-query', () => {\n   expect(parsed.paginate).toEqual(false)\n })\n \n+test('parse invalid page-query', () => {\n+  const parsed = parsePageQuery('..')\n+\n+  expect(parsed.query).toEqual(null)\n+  expect(parsed.paginate).toEqual(false)\n+})\n+\n test('parse @paginate directive for connection', () => {\n   const parsed = parsePageQuery(`query {\n     allTestAuthors {\ndiff --git a/gridsome/lib/graphql/page-query.js b/gridsome/lib/graphql/page-query.js\nindex 70b8d3e..b83322d 100644\n--- a/gridsome/lib/graphql/page-query.js\n+++ b/gridsome/lib/graphql/page-query.js\n@@ -10,17 +10,24 @@ function parsePageQuery (query = '') {\n   }\n \n   if (query) {\n+    let ast = null\n+\n+    try {\n+      ast = parse(query)\n+    } catch (err) {\n+      return result\n+    }\n+\n     result.query = query.trim() || null\n \n-    if (result.query) {\n-      visit(parse(result.query), {\n-        Directive (node) {\n-          if (node.name.value === 'paginate') {\n-            result.paginate = true\n-          }\n+    visit(ast, {\n+      Directive (node) {\n+        if (node.name.value === 'paginate') {\n+          result.paginate = true\n+          return BREAK\n         }\n-      })\n-    }\n+      }\n+    })\n   }\n \n   return result",
    "output": "fix(graphql): don\u2019t fail when invalid page-query"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.server.js b/gridsome/app/entry.server.js\nindex df247d0..b1ddb46 100644\n--- a/gridsome/app/entry.server.js\n+++ b/gridsome/app/entry.server.js\n@@ -1,17 +1,24 @@\n import createApp, { runMain } from './app'\n \n+const NOT_FOUND_URL = '/404'\n+const NOT_FOUND_NAME = '404'\n+\n runMain()\n \n export default context => new Promise((resolve, reject) => {\n+  const location = context.url === NOT_FOUND_URL\n+    ? { name: NOT_FOUND_NAME }\n+    : { path: context.url }\n+\n   const { app, router } = createApp()\n-  let { url } = context\n+  const { name } = router.resolve(location).route\n \n-  if (url === '/404') {\n-    url = { name: '404' }\n+  if (location.name !== NOT_FOUND_NAME && name === NOT_FOUND_NAME) {\n+    return reject(new Error(`Could not resolve ${context.url}`))\n   }\n   \n   context.meta = app.$meta()\n-  router.push(url)\n+  router.push(location)\n \n   router.onReady(() => {\n     resolve(app)",
    "output": "fix(build): fail if path resolves to 404 (#218)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex ebb4fcd..db482e2 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -17,9 +17,9 @@ export default {\n   },\n \n   render: (h, { data, props }) => {\n-    const classNames = [data.staticClass, data.class, 'g-image']\n+    const classNames = [data.class, 'g-image']\n+    const noscriptClassNames = [data.staticClass, classNames.slice()]\n     const isImmediate = props.immediate || props.immediate !== undefined\n-    const noscriptClassNames = classNames.slice()\n     const directives = data.directives || []\n     const attrs = data.attrs || {}\n     const hook = data.hook || {}",
    "output": "fix(g-image): remove duplicate class names"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Link.js b/gridsome/app/components/Link.js\nindex 46eee85..2380b6c 100644\n--- a/gridsome/app/components/Link.js\n+++ b/gridsome/app/components/Link.js\n@@ -15,16 +15,17 @@ export default {\n \n   render: (h, { data, props, children }) => {\n     const directives = data.directives || []\n+    const attrs = data.attrs || {}\n \n     if (props.to && props.to.type === 'file') {\n-      data.attrs.href = props.to.src\n+      attrs.href = props.to.src\n       \n       return h('a', data, children)\n     }\n \n-    if (isExternalLink(data.attrs.href)){\n-      data.attrs.target = data.attrs.target || '_blank'\n-      data.attrs.rel = data.attrs.rel || 'noopener'\n+    if (isExternalLink(attrs.href)){\n+      attrs.target = attrs.target || '_blank'\n+      attrs.rel = attrs.rel || 'noopener'\n       \n       return h('a', data, children)\n     }\n@@ -35,19 +36,20 @@ export default {\n \n     if (props.page) {\n       to.params.page = props.page > 1 ? props.page : null\n-      data.attrs.exact = true\n+      attrs.exact = true\n     }\n \n     if (GRIDSOME_MODE === 'static' && process.isClient) {\n       directives.push({ name: 'g-link' })\n     }\n \n-    data.attrs.to = to\n-    data.attrs.activeClass = props.activeClass\n-    data.attrs.exactActiveClass = props.exactActiveClass\n+    attrs.to = to\n+    attrs.activeClass = props.activeClass\n+    attrs.exactActiveClass = props.exactActiveClass\n \n     return h('router-link', {\n       ...data,\n+      attrs,\n       directives,\n       domProps: {\n         __gLink__: true\ndiff --git a/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue b/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\nindex 55cbd8f..d071e47 100644\n--- a/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n+++ b/gridsome/lib/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n@@ -18,6 +18,9 @@\n     <span>{{ TEST_1 }}</span>\n     <span>{{ TEST_2 }}</span>\n     <span>{{ TEST_3 }}</span>\n+\n+    <g-image />\n+    <g-link />\n   </Layout>\n </template>\n \ndiff --git a/gridsome/lib/webpack/modules/assets.js b/gridsome/lib/webpack/modules/assets.js\nindex af90782..6180f04 100644\n--- a/gridsome/lib/webpack/modules/assets.js\n+++ b/gridsome/lib/webpack/modules/assets.js\n@@ -14,6 +14,8 @@ module.exports = () => ({\n })\n \n function transformNodeAttr (node, attrName) {\n+  if (!Array.isArray(node.attrs)) return\n+\n   for (const attr of node.attrs) {\n     if (attr.name === attrName) {\n       if (isStatic(attr.value)) {",
    "output": "fix(webpack): don\u2019t fail if g-image or g-link has no attrs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex d729436..7cf52e2 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -803,7 +803,7 @@ test('should format dates from schema', async () => {\n   expect(data.post3.date).toEqual('10/10/2018')\n })\n \n-test('add custom schema fields', async () => {\n+test('collection.addSchemaField', async () => {\n   const contentType = api.store.addContentType({\n     typeName: 'TestPost'\n   })\n@@ -822,6 +822,16 @@ test('add custom schema fields', async () => {\n     expect(nodeTypes).toHaveProperty('TestPost')\n     expect(nodeTypes['TestPost']).toEqual(nodeType)\n     expect(graphql).toHaveProperty('graphql')\n+    expect(graphql).toHaveProperty('GraphQLID')\n+    expect(graphql).toHaveProperty('GraphQLInt')\n+    expect(graphql).toHaveProperty('GraphQLList')\n+    expect(graphql).toHaveProperty('GraphQLJSON')\n+    expect(graphql).toHaveProperty('GraphQLFloat')\n+    expect(graphql).toHaveProperty('GraphQLString')\n+    expect(graphql).toHaveProperty('GraphQLBoolean')\n+    expect(graphql).toHaveProperty('GraphQLNonNull')\n+    expect(graphql).toHaveProperty('GraphQLUnionType')\n+    expect(graphql).toHaveProperty('GraphQLObjectType')\n \n     return {\n       type: graphql.GraphQLString,\ndiff --git a/gridsome/lib/graphql/nodes/createType.js b/gridsome/lib/graphql/nodes/createType.js\nindex b357850..c5c5fd3 100644\n--- a/gridsome/lib/graphql/nodes/createType.js\n+++ b/gridsome/lib/graphql/nodes/createType.js\n@@ -1,4 +1,4 @@\n-const graphql = require('graphql')\n+const graphql = require('../graphql')\n const { dateType } = require('../types/date')\n const { nodeInterface } = require('../interfaces')\n const createBelongsTo = require('./createBelongsTo')",
    "output": "fix(store): include GraphQLJSON type in addSchemaField"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/createRoutes.js b/gridsome/lib/app/createRoutes.js\nindex ace83b3..ca5d2ab 100644\n--- a/gridsome/lib/app/createRoutes.js\n+++ b/gridsome/lib/app/createRoutes.js\n@@ -90,7 +90,7 @@ module.exports = ({ store, config }) => {\n   })\n \n   specialPages.push({\n-    path: '(.*)',\n+    path: '*',\n     name: '404',\n     directoryIndex: false,\n     type: NOT_FOUND_ROUTE,",
    "output": "fix(app): keep original path when showing 404"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex f5e1946..1f293d7 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -17,7 +17,7 @@ export default {\n   },\n \n   render: (h, { data, props }) => {\n-    const classNames = [data.class, 'g-image']\n+    const classNames = [data.staticClass, data.class, 'g-image']\n     const isImmediate = props.immediate || props.immediate !== undefined\n     const noscriptClassNames = classNames.slice()\n     const directives = data.directives || []",
    "output": "fix(g-image): add static classes to noscript image (#203)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.server.js b/gridsome/app/entry.server.js\nindex 4aac465..df247d0 100644\n--- a/gridsome/app/entry.server.js\n+++ b/gridsome/app/entry.server.js\n@@ -4,9 +4,14 @@ runMain()\n \n export default context => new Promise((resolve, reject) => {\n   const { app, router } = createApp()\n+  let { url } = context\n+\n+  if (url === '/404') {\n+    url = { name: '404' }\n+  }\n   \n   context.meta = app.$meta()\n-  router.push(context.url)\n+  router.push(url)\n \n   router.onReady(() => {\n     resolve(app)",
    "output": "fix(build): ensure 404 route for /404 page"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 86ac00d..d729436 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -260,9 +260,7 @@ test('get nodes by path regex', async () => {\n })\n \n test('create node reference', async () => {\n-  const authors = api.store.addContentType({\n-    typeName: 'TestAuthor'\n-  })\n+  const authors = api.store.addContentType('TestAuthor')\n \n   const posts = api.store.addContentType({\n     typeName: 'TestPost',\n@@ -275,36 +273,49 @@ test('create node reference', async () => {\n   })\n \n   authors.addNode({\n-    id: '2',\n-    title: 'Test Author'\n+    id: '2'\n   })\n \n   posts.addNode({\n     id: '1',\n     fields: {\n       author: '2',\n-      customRefs: {\n-        author: api.store.createReference('TestAuthor', '2')\n-      }\n+      customRefs: [\n+        api.store.createReference('TestAuthor', '2')\n+      ]\n+    }\n+  })\n+\n+  posts.addNode({\n+    id: '2',\n+    fields: {\n+      customRef: api.store.createReference('TestAuthor', '2')\n     }\n   })\n \n   const query = `{\n-    testPost (id: \"1\") {\n-      author { id title }\n-      customRefs {\n-        author { id title }\n-      }\n+    post1: testPost (id: \"1\") {\n+      author { id }\n+      customRef { id }\n+      customRefs { id }\n+    }\n+    post2: testPost (id: \"2\") {\n+      author { id }\n+      customRef { id }\n+      customRefs { id }\n     }\n   }`\n \n   const { errors, data } = await createSchemaAndExecute(query)\n \n   expect(errors).toBeUndefined()\n-  expect(data.testPost.author.id).toEqual('2')\n-  expect(data.testPost.author.title).toEqual('Test Author')\n-  expect(data.testPost.customRefs.author.id).toEqual('2')\n-  expect(data.testPost.customRefs.author.title).toEqual('Test Author')\n+  expect(data.post1.author.id).toEqual('2')\n+  expect(data.post1.customRef).toEqual(null)\n+  expect(data.post1.customRefs).toHaveLength(1)\n+  expect(data.post1.customRefs[0].id).toEqual('2')\n+  expect(data.post2.author).toEqual(null)\n+  expect(data.post2.customRef.id).toEqual('2')\n+  expect(data.post2.customRefs).toHaveLength(0)\n })\n \n test('create node reference to same typeName', async () => {\ndiff --git a/gridsome/lib/graphql/resolvers.js b/gridsome/lib/graphql/resolvers.js\nindex c4f7f59..5469ad3 100644\n--- a/gridsome/lib/graphql/resolvers.js\n+++ b/gridsome/lib/graphql/resolvers.js\n@@ -21,6 +21,8 @@ function createRefResolver ({ typeName, isList = false }) {\n       query.typeName = Array.isArray(typeName) ? { $in: typeName } : typeName\n     } else if (Array.isArray(fieldValue)) {\n       query.$or = fieldValue\n+    } else {\n+      return isList ? [] : null\n     }\n \n     if (Array.isArray(typeName)) {",
    "output": "fix(graphql): return null for missing references"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginStore.js b/gridsome/lib/app/PluginStore.js\nindex d9a0580..ec61f4b 100644\n--- a/gridsome/lib/app/PluginStore.js\n+++ b/gridsome/lib/app/PluginStore.js\n@@ -91,14 +91,16 @@ class Source extends EventEmitter {\n       route: options.route,\n       fields: options.fields || {},\n       typeName: options.typeName,\n-      routeKeys: routeKeys.map(key => {\n-        const name = key.name.replace('_raw', '')\n-        const path = !NODE_FIELDS.includes(name)\n-          ? ['fields'].concat(name.split('__'))\n-          : [name]\n-\n-        return { name, path }\n-      }),\n+      routeKeys: routeKeys\n+        .filter(key => typeof key.name === 'string')\n+        .map(key => {\n+          const name = key.name.replace('_raw', '')\n+          const path = !NODE_FIELDS.includes(name)\n+            ? ['fields'].concat(name.split('__'))\n+            : [name]\n+\n+          return { name, path }\n+        }),\n       resolveAbsolutePaths: options.resolveAbsolutePaths,\n       mimeTypes: [],\n       belongsTo: {},\ndiff --git a/gridsome/lib/app/__tests__/PluginStore.spec.js b/gridsome/lib/app/__tests__/PluginStore.spec.js\nindex 6158481..1139472 100644\n--- a/gridsome/lib/app/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/app/__tests__/PluginStore.spec.js\n@@ -23,7 +23,7 @@ test('add type', () => {\n \n   const contentType = api.store.addContentType({\n     typeName: 'TestPost',\n-    route: '/path/:id/:bar/:foo_raw'\n+    route: '/path/:id/:bar/:foo_raw/(.*)?'\n   })\n \n   expect(contentType.typeName).toEqual('TestPost')",
    "output": "fix(store): allow regex wildcard route param"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/package.json b/package.json\nindex d3ce030..2d609b5 100644\n--- a/package.json\n+++ b/package.json\n@@ -23,7 +23,8 @@\n     \"execa\": \"^1.0.0\",\n     \"jest\": \"^23.1.0\",\n     \"lerna\": \"^3.4.0\",\n-    \"memfs\": \"^2.9.4\"\n+    \"memfs\": \"^2.9.4\",\n+    \"minimist\": \"^1.2.0\"\n   },\n   \"engines\": {\n     \"node\": \">=8.3\",\ndiff --git a/scripts/test.js b/scripts/test.js\nindex 5eca290..32f8594 100644\n--- a/scripts/test.js\n+++ b/scripts/test.js\n@@ -1,7 +1,11 @@\n-const args = ['--config', 'jest.config.js']\n+const minimist = require('minimist')\n+const argv = minimist(process.argv.slice(2))\n+const options = []\n \n-if (process.argv.some(v => v === '--watch')) {\n-  args.push('--watchAll')\n-}\n+options.push('--config', 'jest.config.js')\n+options.push('--runInBand')\n \n-require('jest').run(args)\n+if (argv.watch) options.push('--watchAll')\n+if (argv.regex) options.push('--testPathPattern', argv.regex)\n+\n+require('jest').run(options)",
    "output": "test: run tests serially in the current process"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 82a29a7..6c25e19 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -121,13 +121,23 @@ class FilesystemSource {\n     const absPath = path.join(this.context, file)\n     const relPath = path.relative(this.context, file)\n     const mimeType = this.store.mime.lookup(file)\n-    const content = await fs.readFile(absPath, 'utf-8')\n+    const content = await fs.readFile(absPath, 'utf8')\n     const uid = this.store.makeUid(relPath)\n+    const { dir, name, ext = '' } = path.parse(file)\n+    const routePath = this.createPath({ dir, name })\n \n     return {\n       uid,\n       id: uid,\n-      path: this.createPath(file),\n+      path: routePath,\n+      fields: {\n+        fileInfo: {\n+          extension: ext,\n+          directory: dir,\n+          path: file,\n+          name\n+        }\n+      },\n       internal: {\n         mimeType,\n         content,\n@@ -148,10 +158,9 @@ class FilesystemSource {\n     }\n   }\n \n-  createPath (file) {\n+  createPath ({ dir, name }) {\n     if (this.options.route) return\n \n-    const { dir, name } = path.parse(file)\n     const segments = dir.split('/').map(s => this.store.slugify(s))\n \n     if (!this.options.index.includes(name)) {",
    "output": "feat(filesystem): fileInfo field in schema"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/cache.js b/gridsome/app/page-query/cache.js\nindex 0552a2f..ea5b202 100644\n--- a/gridsome/app/page-query/cache.js\n+++ b/gridsome/app/page-query/cache.js\n@@ -1,12 +1,10 @@\n import Vue from 'vue'\n \n-const cache = {}\n-\n-Vue.util.defineReactive(cache, 'data', {})\n+const cache = Vue.observable({})\n \n export default {\n-  set: (key, val) => Vue.set(cache.data, key, val),\n-  delete: key => Vue.delete(cache.data, key),\n-  get: key => cache.data[key],\n-  has: key => !!cache.data[key]\n+  set: (key, val) => Vue.set(cache, key, val),\n+  delete: key => Vue.delete(cache, key),\n+  get: key => cache[key],\n+  has: key => !!cache[key]\n }",
    "output": "refactor(app): use new observable api"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/ImageProcessQueue.spec.js b/gridsome/__tests__/ImageProcessQueue.spec.js\nindex b000943..a537f04 100644\n--- a/gridsome/__tests__/ImageProcessQueue.spec.js\n+++ b/gridsome/__tests__/ImageProcessQueue.spec.js\n@@ -110,6 +110,16 @@ test('set custom quality', async () => {\n   expect(result.src).toEqual('/assets/static/1000x600.6bbe610.test.png')\n })\n \n+test('set custom blur', async () => {\n+  const filePath = path.resolve(__dirname, 'assets/1000x600.png')\n+  const queue = new AssetsQueue({ context, config: baseconfig })\n+\n+  const result = await queue.add(filePath, { blur: 10 })\n+\n+  expect(queue.images.queue).toHaveLength(2)\n+  expect(result.src).toEqual('/assets/static/1000x600.248ba3a.test.png')\n+})\n+\n test('add custom attributes to markup', async () => {\n   const filePath = path.resolve(__dirname, 'assets/1000x600.png')\n   const queue = new AssetsQueue({ context, config: baseconfig })\ndiff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex 646f310..9b6af91 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -202,6 +202,10 @@ class ImageProcessQueue {\n       imageOptions.push({ key: 'background', shortKey: 'b-', value: options.background })\n     }\n \n+    if (options.blur) {\n+      imageOptions.push({ key: 'blur', shortKey: 'bl-', value: options.blur })\n+    }\n+\n     return imageOptions\n   }\n ",
    "output": "fix(g-image): pass custom blur to asset queue"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex a9e6029..3b79d50 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -12,8 +12,13 @@ module.exports = async (name, starter = 'default') => {\n   const starters = ['default', 'wordpress']\n   const hasYarn = await useYarn()\n \n-  if (fs.existsSync(dir)) {\n-    return console.log(chalk.red(`Directory \u00ab${projectName}\u00bb already exists.`))\n+  try {\n+    const files = fs.readdirSync(dir)\n+    if (files.length > 1) {\n+      return console.log(chalk.red(`Directory \u00ab${projectName}\u00bb is not empty.`))\n+    }\n+  } catch (err) {\n+    throw new Error(err.message)\n   }\n \n   if (starters.includes(starter)) {",
    "output": "fix(cli): create project in current directory (#179)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex fadb008..4c46ba1 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -1,12 +1,19 @@\n /* global GRIDSOME_MODE, GRIDSOME_DATA_DIR */\n \n import cache from './cache'\n+import router from '../router'\n import config from '~/.temp/config.js'\n import { unslash } from '../utils/helpers'\n \n export default (route, query) => {\n   if (GRIDSOME_MODE === 'serve') {\n-    const variables = { ...route.params, path: route.path }\n+    const { page, ...params } = route.params\n+    const { href } = router.resolve({ ...route, params })\n+    const variables = { ...params }\n+\n+    if (page) variables.page = Number(page)\n+\n+    variables.path = href || route.path\n \n     return new Promise((resolve, reject) => {\n       fetch(process.env.GRAPHQL_ENDPOINT, {",
    "output": "fix(graphql): do not send page param in path"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex eef1738..7dc9505 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -1,5 +1,6 @@\n import Vue from 'vue'\n import plugins from '~/.temp/plugins-server'\n+import routes from '~/.temp/routes.js'\n import main from './main'\n \n import head from './head'\n@@ -19,6 +20,8 @@ Vue.component('ClientOnly', ClientOnly)\n \n Vue.prototype.$url = url\n \n+router.addRoutes(routes)\n+\n export default function createApp (callback) {\n   const appOptions = {\n     render: h => h('router-view', { attrs: { id: 'app' }}),\ndiff --git a/gridsome/app/router.js b/gridsome/app/router.js\nindex 35a3a13..1530e8f 100644\n--- a/gridsome/app/router.js\n+++ b/gridsome/app/router.js\n@@ -1,6 +1,5 @@\n import Vue from 'vue'\n import Router from 'vue-router'\n-import routes from '~/.temp/routes.js'\n \n Vue.use(Router)\n \n@@ -8,7 +7,6 @@ const router = new Router({\n   base: process.env.PUBLIC_PATH,\n   mode: 'history',\n   fallback: false,\n-  routes,\n \n   scrollBehavior (to, from, saved) {\n     if (saved) {",
    "output": "fix(app): fix cyclic dependency when importing Pager (#109)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex da9d8a6..36fc3de 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -61,24 +61,28 @@ class FilesystemSource {\n       const options = await this.createNodeOptions(file)\n       const node = this.contentType.addNode(options)\n \n-      for (const fieldName in this.refs) {\n-        if (node.fields[fieldName]) {\n-          const ref = this.refs[fieldName]\n-          const value = node.fields[fieldName]\n-          const typeName = ref.typeName\n-\n-          if (ref.exists) continue\n-\n-          if (Array.isArray(value)) {\n-            value.forEach(value =>\n-              this.addRefNode(typeName, fieldName, value)\n-            )\n-          } else {\n+      this.createNodeRefs(node)\n+    }))\n+  }\n+\n+  createNodeRefs (node) {\n+    for (const fieldName in this.refs) {\n+      if (node.fields[fieldName]) {\n+        const ref = this.refs[fieldName]\n+        const value = node.fields[fieldName]\n+        const typeName = ref.typeName\n+\n+        if (ref.exists) continue\n+\n+        if (Array.isArray(value)) {\n+          value.forEach(value =>\n             this.addRefNode(typeName, fieldName, value)\n-          }\n+          )\n+        } else {\n+          this.addRefNode(typeName, fieldName, value)\n         }\n       }\n-    }))\n+    }\n   }\n \n   watchFiles () {\n@@ -90,25 +94,27 @@ class FilesystemSource {\n       ignoreInitial: true\n     })\n \n-    watcher.on('add', file => {\n+    watcher.on('add', async file => {\n       const filePath = slash(file)\n-      const options = this.createNodeOptions(filePath)\n+      const options = await this.createNodeOptions(filePath)\n+      const node = this.contentType.addNode(options)\n \n-      this.contentType.addNode(options)\n+      this.createNodeRefs(node)\n     })\n \n     watcher.on('unlink', file => {\n       const filePath = slash(file)\n-      const id = this.store.makeUid(filePath)\n+      const id = hash(filePath)\n \n       this.contentType.removeNode(id)\n     })\n \n-    watcher.on('change', file => {\n+    watcher.on('change', async file => {\n       const filePath = slash(file)\n-      const options = this.createNodeOptions(filePath)\n+      const options = await this.createNodeOptions(filePath)\n+      const node = this.contentType.updateNode(options.id, options)\n \n-      this.contentType.updateNode(options.id, options)\n+      this.createNodeRefs(node)\n     })\n   }\n ",
    "output": "refactor(filesystem): create refs when node changes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex efbba3c..1e187d7 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -150,7 +150,7 @@ class RemarkTransformer {\n     return Promise.resolve(cached)\n   }\n \n-  async _nodeToHTML (node) {\n+  _nodeToHTML (node) {\n     const key = cacheKey(node, 'html')\n     let cached = cache.get(key)\n \ndiff --git a/packages/transformer-remark/lib/plugins/file.js b/packages/transformer-remark/lib/plugins/file.js\nnew file mode 100644\nindex 0000000..9666dc2\n--- /dev/null\n+++ b/packages/transformer-remark/lib/plugins/file.js\n@@ -0,0 +1,30 @@\n+const visit = require('unist-util-visit')\n+\n+module.exports = function attacher () {\n+  const transformer = this.data('transformer')\n+\n+  return async function transform (tree, file, callback) {\n+    if (!transformer) return callback()\n+    if (!file.path) return callback()\n+\n+    const links = []\n+\n+    visit(tree, 'link', node => links.push(node))\n+\n+    for (const node of links) {\n+      const path = file.data.node\n+        ? transformer.resolveNodeFilePath(file.data.node, node.url)\n+        : node.url\n+\n+      try {\n+        const asset = await transformer.queue.add(path)\n+        node.url = asset.src\n+      } catch (err) {\n+        callback(err)\n+        return\n+      }\n+    }\n+\n+    callback()\n+  }\n+}\ndiff --git a/packages/transformer-remark/lib/utils.js b/packages/transformer-remark/lib/utils.js\nindex 7fea666..a0d4509 100644\n--- a/packages/transformer-remark/lib/utils.js\n+++ b/packages/transformer-remark/lib/utils.js\n@@ -1,7 +1,6 @@\n const vfile = require('vfile')\n const hash = require('hash-sum')\n const visit = require('unist-util-visit')\n-const imagePlugin = require('./plugins/image')\n \n exports.cacheKey = function (node, key) {\n   return hash({\n@@ -41,6 +40,9 @@ exports.createPlugins = function (options, userPlugins) {\n     return exports.normalizePlugins(userPlugins || [])\n   }\n \n+  plugins.push(require('./plugins/file'))\n+  plugins.push(require('./plugins/image'))\n+\n   if (options.slug !== false) {\n     plugins.push('remark-slug')\n   }\n@@ -76,7 +78,6 @@ exports.createPlugins = function (options, userPlugins) {\n     }])\n   }\n \n-  plugins.push(imagePlugin)\n   plugins.push(...userPlugins)\n \n   return exports.normalizePlugins(plugins)",
    "output": "feat(remark): resolve local file links in content"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/README.md b/packages/transformer-remark/README.md\nindex bf4ec0c..1cc9071 100644\n--- a/packages/transformer-remark/README.md\n+++ b/packages/transformer-remark/README.md\n@@ -38,9 +38,23 @@ module.exports = {\n }\n ```\n \n-## Methods\n+## Options\n+\n+#### plugins\n+\n+- Type: `array` Default: `[]`\n+\n+Add additional plugins to the parser.\n+\n+#### useBuiltIns\n+\n+- Type: `boolean` Default: `true`\n+\n+Set this option to `false` to disable all built-in plugins.\n+\n+## API\n \n - `parse` Parse front matter data \n-- `toAST` Parse text to a syntax tree\n+- `toAST` Parse markdown into a syntax tree\n - `applyPlugins` Transform a syntax tree by applying plugins to it (async)\n-- `toHTML` Compile a syntax tree to HTML\n+- `toHTML` Compile a syntax tree into HTML\ndiff --git a/packages/transformer-remark/lib/utils.js b/packages/transformer-remark/lib/utils.js\nindex 54f55c5..408272b 100644\n--- a/packages/transformer-remark/lib/utils.js\n+++ b/packages/transformer-remark/lib/utils.js\n@@ -34,6 +34,10 @@ exports.normalizePlugins = function (arr = []) {\n exports.createPlugins = function (options, userPlugins) {\n   const plugins = []\n \n+  if (options.useBuiltIns === false) {\n+    return exports.normalizePlugins(userPlugins || [])\n+  }\n+\n   if (options.slug !== false) {\n     plugins.push('remark-slug')\n   }\n@@ -53,7 +57,7 @@ exports.createPlugins = function (options, userPlugins) {\n     }])\n   }\n \n-  if (options.autolinkHeadings !== false) {\n+  if (options.autolinkHeadings !== false && options.slug !== false) {\n     plugins.push(['remark-autolink-headings', {\n       content: {\n         type: 'element',",
    "output": "feat(remark): option for disabling all built-in plugins"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex aafb53c..9157cac 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -91,9 +91,12 @@ class App {\n \n     // run config.chainWebpack after all plugins\n     if (typeof this.config.chainWebpack === 'function') {\n-      this.on('chainWebpack', {\n-        handler: this.config.chainWebpack\n-      })\n+      this.on('chainWebpack', { handler: this.config.chainWebpack })\n+    }\n+\n+    // run config.configureServer after all plugins\n+    if (typeof this.config.configureServer === 'function') {\n+      this.on('configureServer', { handler: this.config.configureServer })\n     }\n \n     this.isInitialized = true\ndiff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex 8648c79..f4b67c8 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -7,6 +7,7 @@ class PluginAPI {\n     this._entry = entry\n     this._app = app\n \n+    this.config = app.config\n     this.context = app.context\n     this.store = new PluginStore(app, entry.options, { transformers })\n \n@@ -91,6 +92,10 @@ class PluginAPI {\n     this._on('chainWebpack', fn)\n   }\n \n+  configureServer (fn) {\n+    this._on('configureServer', fn)\n+  }\n+\n   //\n   // build hooks\n   //\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex ce3918a..1f0e3e2 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -75,6 +75,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.port = parseInt(args.port || localConfig.port, 10) || 8080\n   config.plugins = normalizePlugins(context, plugins)\n   config.chainWebpack = localConfig.chainWebpack\n+  config.configureServer = localConfig.configureServer\n   config.transformers = resolveTransformers(config.pkg, localConfig)\n   config.pathPrefix = isProd ? localConfig.pathPrefix || '/' : '/'\n   config.staticDir = resolve('static')\ndiff --git a/gridsome/lib/server/createExpressServer.js b/gridsome/lib/server/createExpressServer.js\nindex 9a56afc..c2be212 100644\n--- a/gridsome/lib/server/createExpressServer.js\n+++ b/gridsome/lib/server/createExpressServer.js\n@@ -15,6 +15,19 @@ module.exports = async app => {\n   const { config, schema } = app\n   const server = express()\n \n+  await app.dispatch('configureServer', null, server, {\n+    host: config.host,\n+    port\n+  })\n+\n+  if (process.env.NODE_ENV === 'development') {\n+    server.use((req, res, next) => {\n+      res.header('Access-Control-Allow-Origin', '*')\n+      res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')\n+      next()\n+    })\n+  }\n+\n   server.use(\n     endpoint.graphql,\n     graphqlMiddleware(app),",
    "output": "feat(develop): configureServer hook"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__fixtures__/project-basic/src/index.html b/gridsome/__tests__/__fixtures__/project-basic/src/index.html\nnew file mode 100644\nindex 0000000..5a63d8d\n--- /dev/null\n+++ b/gridsome/__tests__/__fixtures__/project-basic/src/index.html\n@@ -0,0 +1,11 @@\n+<!DOCTYPE html>\n+<html ${htmlAttrs}>\n+  <head>\n+    ${head}\n+  </head>\n+  <body ${bodyAttrs}>\n+    <div>custom html template</div>\n+    ${app}\n+    ${scripts}\n+  </body>\n+</html>\ndiff --git a/gridsome/__tests__/build.spec.js b/gridsome/__tests__/build.spec.js\nindex 481b618..c6a5d8d 100644\n--- a/gridsome/__tests__/build.spec.js\n+++ b/gridsome/__tests__/build.spec.js\n@@ -35,6 +35,9 @@ test('build basic project', async () => {\n   expect(indexHTML).not.toMatch('Main description')\n   expect(indexHTML).toMatch('Index description')\n \n+  // Custom src/index.html template\n+  expect(indexHTML).toMatch('<div>custom html template</div>')\n+\n   // 404.html\n   expect(exists('dist/404.html')).toBeTruthy()\n   expect(content('dist/404.html')).toMatch('Custom 404 - not found')",
    "output": "test(app): custom index.html template"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 6d66178..a38c079 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -18,9 +18,11 @@ module.exports = (context, options = {}, pkg = {}) => {\n   const resolve = (...p) => path.resolve(context, ...p)\n   const isProd = process.env.NODE_ENV === 'production'\n   const configPath = resolve('gridsome.config.js')\n+  const localIndex = resolve('src/index.html')\n   const args = options.args || {}\n   const config = {}\n   const plugins = []\n+\n   const css = {\n     loaderOptions: {\n       sass: {\n@@ -32,6 +34,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n     }\n   }\n \n+\n   const localConfig = options.localConfig\n     ? options.localConfig\n     : fs.existsSync(configPath)\n@@ -110,7 +113,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n \n   config.icon = normalizeIconsConfig(localConfig.icon)\n \n-  config.templatePath = path.resolve(config.appPath, 'index.html')\n+  config.templatePath = fs.existsSync(localIndex) ? localIndex : path.resolve(config.appPath, 'index.html')\n   config.htmlTemplate = fs.readFileSync(config.templatePath, 'utf-8')\n \n   config.css = defaultsDeep(css, localConfig.css || {})",
    "output": "feat(app): override default index.html template (#162)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Pager.js b/gridsome/app/components/Pager.js\nindex 5a5a4ac..95bf3f8 100644\n--- a/gridsome/app/components/Pager.js\n+++ b/gridsome/app/components/Pager.js\n@@ -13,6 +13,8 @@ export default {\n     nextLabel: { type: String, default: '\u203a' },\n     lastLabel: { type: String, default: '\u00bb' },\n     linkClass: { type: String, default: '' },\n+    activeLinkClass: { type: String },\n+    exactActiveLinkClass: { type: String },\n \n     // accessibility\n     ariaLabel: { type: String, default: 'Pagination Navigation' },\n@@ -31,9 +33,14 @@ export default {\n     const renderLink = (page, text = page, ariaLabel = text) => {\n       if (page === current) ariaLabel = props.ariaCurrentLabel\n \n+      // Build props for Link component\n+      const navigationLinkProps = { page }\n+      if (props.activeLinkClass != undefined) navigationLinkProps.activeClass = props.activeLinkClass\n+      if (props.exactActiveLinkClass != undefined) navigationLinkProps.exactActiveClass = props.exactActiveLinkClass\n+\n       return h(Link, {\n         staticClass: props.linkClass,\n-        props: { page },\n+        props: navigationLinkProps,\n         attrs: {\n           'aria-label': ariaLabel.replace('%n', page),\n           'aria-current': current === page",
    "output": "feat(app): override active link classes for Pager (#143)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__fixtures__/project-path-prefix/gridsome.config.js b/gridsome/__tests__/__fixtures__/project-path-prefix/gridsome.config.js\nindex 8d86cd9..33f3479 100644\n--- a/gridsome/__tests__/__fixtures__/project-path-prefix/gridsome.config.js\n+++ b/gridsome/__tests__/__fixtures__/project-path-prefix/gridsome.config.js\n@@ -1,5 +1,6 @@\n module.exports = {\n   siteName: 'Gridsome',\n+  siteDescription: 'My super site',\n   pathPrefix: '/sub/-/dir',\n   plugins: []\n }\ndiff --git a/gridsome/__tests__/build.spec.js b/gridsome/__tests__/build.spec.js\nindex fbab83a..6da21c8 100644\n--- a/gridsome/__tests__/build.spec.js\n+++ b/gridsome/__tests__/build.spec.js\n@@ -100,6 +100,7 @@ test('build project with pathPrefix', async () => {\n   const appJS = content('dist/assets/js/app.js')\n \n   expect(indexHTML).toMatch('<h1>Gridsome</h1>')\n+  expect(indexHTML).toMatch('data-key=\"description\" name=\"description\" content=\"My super site\"')\n   expect(indexHTML).toMatch('href=\"/sub/-/dir/about\"')\n   expect(indexHTML).toMatch('href=\"/sub/-/dir/\"')\n   expect(indexHTML).toMatch('href=\"/sub/-/dir/assets/static/favicon.1539b60.test.png\"')\ndiff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex e749bdc..6d6114f 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -22,6 +22,7 @@ const head = {\n     { charset: 'utf-8' },\n     { name: 'generator', content: `Gridsome v${config.version}` },\n     { key: 'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n+    { key: 'description', name: 'description', content: config.siteDescription },\n     \n     // do not convert telephone numbers\n     // into hypertext links because it\ndiff --git a/gridsome/lib/app/CodeGenerator.js b/gridsome/lib/app/CodeGenerator.js\nindex 4d591d9..d97d718 100644\n--- a/gridsome/lib/app/CodeGenerator.js\n+++ b/gridsome/lib/app/CodeGenerator.js\n@@ -81,12 +81,13 @@ async function genIcons ({ config, resolve, queue }) {\n \n function genConfig ({ config }) {\n   const { version } = require('../../package.json')\n-  const { siteUrl, siteName, titleTemplate } = config\n+  const { siteUrl, siteName, titleTemplate, siteDescription } = config\n \n   return `export default ${JSON.stringify({\n     siteUrl,\n     siteName,\n     titleTemplate,\n+    siteDescription,\n     version\n   }, null, 2)}`\n }\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex d292c08..6d66178 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -102,6 +102,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.baseUrl = localConfig.baseUrl || '/'\n   config.siteName = localConfig.siteName || path.parse(context).name\n   config.titleTemplate = localConfig.titleTemplate || `%s - ${config.siteName}`\n+  config.siteDescription = localConfig.siteDescription || ''\n \n   config.manifestsDir = path.join(config.assetsDir, 'manifest')\n   config.clientManifestPath = path.join(config.manifestsDir, 'client.json')",
    "output": "feat(app): siteDescription as description meta tag (#70)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__fixtures__/JSONTransformer.js b/gridsome/__tests__/__fixtures__/JSONTransformer.js\nindex 993b656..4b51599 100644\n--- a/gridsome/__tests__/__fixtures__/JSONTransformer.js\n+++ b/gridsome/__tests__/__fixtures__/JSONTransformer.js\n@@ -24,7 +24,7 @@ class JSONTransformer {\n       fileField: {\n         type: GraphQLString,\n         resolve: node => {\n-          return this.resolveNodeFilePath(node, './image.png')\n+          return this.resolveNodeFilePath(node, '/assets/image.png')\n         }\n       }\n     }\ndiff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex 35981dd..e749bdc 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -21,11 +21,11 @@ const head = {\n   meta: [\n     { charset: 'utf-8' },\n     { name: 'generator', content: `Gridsome v${config.version}` },\n-    { key:'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n+    { key: 'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n     \n     // do not convert telephone numbers\n     // into hypertext links because it\n-    // will cause hydration failure\n+    // will cause hydration errors\n     {\n       key: 'format-detection',\n       name: 'format-detection',\ndiff --git a/gridsome/lib/app/PluginStore.js b/gridsome/lib/app/PluginStore.js\nindex 82cee5e..3790ba9 100644\n--- a/gridsome/lib/app/PluginStore.js\n+++ b/gridsome/lib/app/PluginStore.js\n@@ -208,12 +208,12 @@ class Source extends EventEmitter {\n   }\n \n   resolveNodeFilePath (node, toPath) {\n-    const { collection } = this.getContentType(node.typeName)\n+    const contentType = this.getContentType(node.typeName)\n \n     return this._app.resolveFilePath(\n       node.internal.origin,\n       toPath,\n-      collection.resolveAbsolutePaths\n+      contentType.resolveAbsolutePaths\n     )\n   }\n }",
    "output": "fix(store): pass resolveAbsolutePaths correctly"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex c70aafd..35981dd 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -21,7 +21,7 @@ const head = {\n   meta: [\n     { charset: 'utf-8' },\n     { name: 'generator', content: `Gridsome v${config.version}` },\n-    { name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n+    { key:'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n     \n     // do not convert telephone numbers\n     // into hypertext links because it",
    "output": "fix(app): add key to viewport meta (#169)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex bb7466e..735d742 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -1,4 +1,5 @@\n const path = require('path')\n+const hash = require('hash-sum')\n const Config = require('webpack-chain')\n const { forwardSlash } = require('../utils')\n const { VueLoaderPlugin } = require('vue-loader')\n@@ -257,18 +258,21 @@ module.exports = (app, { isProd, isServer }) => {\n   // helpes\n \n   function createCacheOptions () {\n+    const values = {\n+      'gridsome': require('../../package.json').version,\n+      'cache-loader': require('cache-loader/package.json').version,\n+      'vue-loader': require('vue-loader/package.json').version,\n+      context: app.context,\n+      isProd,\n+      isServer,\n+      config: (\n+        (projectConfig.chainWebpack || '').toString()\n+      )\n+    }\n+\n     return {\n-      cacheDirectory: resolve('../../node_modules/.cache/gridsome'),\n-      cacheIdentifier: JSON.stringify({\n-        'gridsome': require('../../package.json').version,\n-        'cache-loader': require('cache-loader').version,\n-        'vue-loader': require('vue-loader').version,\n-        isProd,\n-        isServer,\n-        config: (\n-          (projectConfig.chainWebpack || '').toString()\n-        )\n-      })\n+      cacheDirectory: app.resolve('node_modules/.cache/gridsome'),\n+      cacheIdentifier: hash(values)\n     }\n   }\n ",
    "output": "refactor(webpack): more accurate cache identifier"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 5a7f2de..1455842 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -276,13 +276,6 @@ module.exports = (app, { isProd, isServer }) => {\n \n     config.module.rule(type)\n       .resourceQuery(re)\n-      .use('cache-loader')\n-      .loader('cache-loader')\n-      .options({\n-        cacheDirectory,\n-        cacheIdentifier\n-      })\n-      .end()\n       .use('babel-loader')\n       .loader('babel-loader')\n       .options({",
    "output": "fix(webpack): don\u2019t cache static-query (#160)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/utils/caniuse.js b/gridsome/app/utils/caniuse.js\nindex 9505918..3d7514b 100644\n--- a/gridsome/app/utils/caniuse.js\n+++ b/gridsome/app/utils/caniuse.js\n@@ -1,8 +1,5 @@\n const IntersectionObserver = (\n-  'document' in global &&\n-  'IntersectionObserver' in global &&\n-  'IntersectionObserverEntry' in global &&\n-  'intersectionRatio' in global.IntersectionObserverEntry.prototype\n+  typeof global.IntersectionObserver !== 'undefined'\n )\n \n const prefetch = (",
    "output": "fix(app): simplify IntersectionObserver check (#153)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/main.js b/gridsome/app/main.js\nindex daa9fa4..bd5840e 100644\n--- a/gridsome/app/main.js\n+++ b/gridsome/app/main.js\n@@ -3,7 +3,11 @@ let main\n try {\n   main = require('~/main').default\n } catch (err) {\n-  main = function () {}\n+  if (err.code === 'MODULE_NOT_FOUND') {\n+    main = function () {}\n+  } else {\n+    throw err\n+  }\n }\n \n export default main",
    "output": "fix(build): throw error if something fails in main.js"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex d1cd717..eef1738 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -1,11 +1,14 @@\n import Vue from 'vue'\n+import plugins from '~/.temp/plugins-server'\n+import main from './main'\n+\n import head from './head'\n import router from './router'\n+import { url } from './utils/helpers'\n+\n import Link from './components/Link'\n import Image from './components/Image'\n import ClientOnly from './components/ClientOnly'\n-import plugins from '~/.temp/plugins-server.js'\n-import { url } from './utils/helpers'\n \n const isServer = process.isServer\n const isClient = process.isClient\n@@ -41,12 +44,9 @@ export default function createApp (callback) {\n     }\n   }\n \n-  try {\n-    const main = require('@/main.js')\n-    if (typeof main.default === 'function') {\n-      main.default(Vue, context)\n-    }\n-  } catch (err) {}\n+  if (typeof main === 'function') {\n+    main(Vue, context)\n+  }\n \n   const app = new Vue(appOptions)\n \ndiff --git a/gridsome/app/main.js b/gridsome/app/main.js\nnew file mode 100644\nindex 0000000..daa9fa4\n--- /dev/null\n+++ b/gridsome/app/main.js\n@@ -0,0 +1,9 @@\n+let main\n+\n+try {\n+  main = require('~/main').default\n+} catch (err) {\n+  main = function () {}\n+}\n+\n+export default main",
    "output": "refactor(app): import plugins and main.js before other modules"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex 15deede..c70aafd 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -21,7 +21,16 @@ const head = {\n   meta: [\n     { charset: 'utf-8' },\n     { name: 'generator', content: `Gridsome v${config.version}` },\n-    { name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' }\n+    { name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n+    \n+    // do not convert telephone numbers\n+    // into hypertext links because it\n+    // will cause hydration failure\n+    {\n+      key: 'format-detection',\n+      name: 'format-detection',\n+      content: 'telephone=no'\n+    }\n   ],\n   base: {},\n   noscript: [],",
    "output": "fix(app): add format-detection meta tag (#145)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 5135d15..1c975a4 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -143,17 +143,24 @@ function intersectionHandler ({ intersectionRatio, target }) {\n }\n \n function loadImage (el) {\n+  const src = el.getAttribute('data-src')\n+  const srcset = el.getAttribute('data-srcset')\n+  const sizes = el.getAttribute('data-sizes')\n+\n+  if (!src) return\n+\n   el.onload = function () {\n-    delete el.dataset.src\n-    delete el.dataset.srcset\n-    delete el.dataset.sizes\n-    delete el.onload\n+    el.removeAttribute('data-src')\n+    el.removeAttribute('data-srcset')\n+    el.removeAttribute('data-sizes')\n \n     el.classList.remove('g-image--loading')\n     el.classList.add('g-image--loaded')\n+    \n+    delete el.onload\n   }\n \n-  el.src = el.dataset.src\n-  el.srcset = el.dataset.srcset\n-  el.sizes = el.dataset.sizes\n+  el.src = src\n+  el.srcset = srcset\n+  el.sizes = sizes\n }",
    "output": "fix(g-image): run onload event once"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 8d4fb4d..b651cc5 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -211,7 +211,7 @@ function normalizeIconsConfig (config = {}) {\n   const faviconSizes = [16, 32, 96]\n   const touchiconSizes = [76, 152, 120, 167, 180]\n   const defaultIcon = 'src/favicon.png'\n-  const icon = typeof config === 'string' ? { favicon: icon } : (config || {})\n+  const icon = typeof config === 'string' ? { favicon: config } : (config || {})\n \n   res.favicon = typeof icon.favicon === 'string'\n     ? { src: icon.favicon, sizes: faviconSizes }",
    "output": "fix(app): custom favicon path (#149)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 4630381..5922d67 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -49,7 +49,7 @@ class WordPressSource {\n   }\n \n   async getPostTypes (store) {\n-    const { data } = await this.fetch('wp/v2/types')\n+    const { data } = await this.fetch('wp/v2/types', {}, {})\n \n     for (const type in data) {\n       const options = data[type]\n@@ -84,7 +84,7 @@ class WordPressSource {\n   }\n \n   async getTaxonomies (store) {\n-    const { data } = await this.fetch('wp/v2/taxonomies')\n+    const { data } = await this.fetch('wp/v2/taxonomies', {}, {})\n \n     for (const type in data) {\n       const options = data[type]\n@@ -155,19 +155,20 @@ class WordPressSource {\n     }\n   }\n \n-  async fetch (url, params = {}) {\n+  async fetch (url, params = {}, fallbackData = []) {\n     let res\n \n     try {\n       res = await this.client.request({ url, params })\n     } catch ({ response }) {\n       const { url } = response.config\n-      const { message, data } = response.data\n+      const { status } = response.data.data\n \n-      if (data.status === 403) {\n-        console.warn(`Permission denied: ${url}`)\n+      if ([401, 403].includes(status)) {\n+        console.warn(`Error: Status ${status} - ${url}`)\n+        return { ...response, data: fallbackData }\n       } else {\n-        throw new Error(`Failed to fetch: ${url}, ${message}`)\n+        throw new Error(`Status ${status} - ${url}`)\n       }\n     }\n ",
    "output": "fix(wordpress): don\u2019t throw error for 401 requests (#146)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/README.md b/packages/source-wordpress/README.md\nindex b19a19d..56669a4 100644\n--- a/packages/source-wordpress/README.md\n+++ b/packages/source-wordpress/README.md\n@@ -16,6 +16,7 @@ module.exports = {\n       use: '@gridsome/source-wordpress',\n       options: {\n         baseUrl: 'WEBSITE_URL', // required\n+        apiBase: 'wp-json',\n         typeName: 'WordPress',\n         perPage: 100,\n         concurrent: 10,\ndiff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 49e66dd..4630381 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -9,6 +9,7 @@ class WordPressSource {\n   static defaultOptions () {\n     return {\n       baseUrl: '',\n+      apiBase: 'wp-json',\n       perPage: 100,\n       concurrent: 10,\n       routes: {},\n@@ -26,7 +27,7 @@ class WordPressSource {\n     }\n \n     this.client = axios.create({\n-      baseURL: `${options.baseUrl.replace(/\\/+$/, '')}/wp-json`\n+      baseURL: `${options.baseUrl.replace(/\\/+$/, '')}/${options.apiBase}`\n     })\n \n     this.routes = {",
    "output": "feat(wordpress): apiBase option for custom rest endpoint"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-yaml/__tests__/index.spec.js b/packages/transformer-yaml/__tests__/index.spec.js\nnew file mode 100644\nindex 0000000..c0cf4fe\n--- /dev/null\n+++ b/packages/transformer-yaml/__tests__/index.spec.js\n@@ -0,0 +1,37 @@\n+const YamlTransformer = require('../index')\n+\n+test('parse string', async () => {\n+  const transformer = new YamlTransformer()\n+  const res = transformer.parse('string')\n+\n+  expect(res.fields.data).toEqual('string')\n+})\n+\n+test('parse boolean', async () => {\n+  const transformer = new YamlTransformer()\n+  const res = transformer.parse('true')\n+\n+  expect(res.fields.data).toEqual(true)\n+})\n+\n+test('parse number', async () => {\n+  const transformer = new YamlTransformer()\n+  const res = transformer.parse('5')\n+\n+  expect(res.fields.data).toEqual(5)\n+})\n+\n+test('parse list', async () => {\n+  const transformer = new YamlTransformer()\n+  const res = transformer.parse('- string')\n+\n+  expect(res.fields.data).toHaveLength(1)\n+  expect(res.fields.data[0]).toEqual('string')\n+})\n+\n+test('parse object', async () => {\n+  const transformer = new YamlTransformer()\n+  const res = transformer.parse('foo: bar')\n+\n+  expect(res.fields.foo).toEqual('bar')\n+})\ndiff --git a/packages/transformer-yaml/index.js b/packages/transformer-yaml/index.js\nindex 846db3c..2eb4fa0 100644\n--- a/packages/transformer-yaml/index.js\n+++ b/packages/transformer-yaml/index.js\n@@ -6,14 +6,11 @@ class YamlTransformer {\n   }\n \n   parse (content) {\n-    const yaml = jsYaml.load(content)\n+    const data = jsYaml.load(content)\n \n-    let fields = {}\n-    if (Array.isArray(yaml)) {\n-      fields = { data: yaml }\n-    } else {\n-      fields = yaml\n-    }\n+    const fields = typeof data !== 'object' || Array.isArray(data)\n+      ? { data }\n+      : data\n \n     return { fields }\n   }\ndiff --git a/yarn.lock b/yarn.lock\nindex 0d01919..6358386 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -8124,6 +8124,14 @@ js-yaml@^3.10.0, js-yaml@^3.11.0, js-yaml@^3.12.0, js-yaml@^3.5.2, js-yaml@^3.7.\n     argparse \"^1.0.7\"\n     esprima \"^4.0.0\"\n \n+js-yaml@^3.12.1:\n+  version \"3.12.1\"\n+  resolved \"https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.12.1.tgz#295c8632a18a23e054cf5c9d3cecafe678167600\"\n+  integrity sha512-um46hB9wNOKlwkHgiuyEVAybXBjwFUV0Z/RaHJblRd9DXltue9FTYvzCr9ErQrK9Adz5MU4gHWVaNUfdmrC8qA==\n+  dependencies:\n+    argparse \"^1.0.7\"\n+    esprima \"^4.0.0\"\n+\n js-yaml@~3.10.0:\n   version \"3.10.0\"\n   resolved \"https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.10.0.tgz#2e78441646bd4682e963f22b6e92823c309c62dc\"",
    "output": "test(yaml): test various values"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-yaml/README.md b/packages/transformer-yaml/README.md\nnew file mode 100644\nindex 0000000..27066fb\n--- /dev/null\n+++ b/packages/transformer-yaml/README.md\n@@ -0,0 +1,7 @@\n+# @gridsome/transformer-yaml\n+\n+> YAML transformer for Gridsome\n+\n+## Install\n+- `yarn add @gridsome/transformer-yaml`\n+- `npm install @gridsome/transformer-yaml`\n\\ No newline at end of file\ndiff --git a/packages/transformer-yaml/index.js b/packages/transformer-yaml/index.js\nnew file mode 100644\nindex 0000000..846db3c\n--- /dev/null\n+++ b/packages/transformer-yaml/index.js\n@@ -0,0 +1,22 @@\n+const jsYaml = require('js-yaml')\n+\n+class YamlTransformer {\n+  static mimeTypes () {\n+    return ['text/yaml']\n+  }\n+\n+  parse (content) {\n+    const yaml = jsYaml.load(content)\n+\n+    let fields = {}\n+    if (Array.isArray(yaml)) {\n+      fields = { data: yaml }\n+    } else {\n+      fields = yaml\n+    }\n+\n+    return { fields }\n+  }\n+}\n+\n+module.exports = YamlTransformer\ndiff --git a/packages/transformer-yaml/package.json b/packages/transformer-yaml/package.json\nnew file mode 100644\nindex 0000000..669cd28\n--- /dev/null\n+++ b/packages/transformer-yaml/package.json\n@@ -0,0 +1,23 @@\n+{\n+  \"version\": \"0.0.0\",\n+  \"name\": \"@gridsome/transformer-yaml\",\n+  \"description\": \"Yaml transformer for Gridsome\",\n+  \"homepage\": \"https://github.com/gridsome/gridsome/tree/master/packages/transformer-yaml\",\n+  \"repository\": \"https://github.com/gridsome/gridsome/tree/master/packages/transformer-yaml\",\n+  \"main\": \"index.js\",\n+  \"keywords\": [\n+    \"gridsome\",\n+    \"gridsome-plugin\",\n+    \"gridsome-transformer\",\n+    \"yaml\"\n+  ],\n+  \"dependencies\": {\n+    \"js-yaml\": \"^3.12.1\"\n+  },\n+  \"publishConfig\": {\n+    \"access\": \"public\"\n+  },\n+  \"engines\": {\n+    \"node\": \">=8\"\n+  }\n+}",
    "output": "feat(yaml): parse yaml sources (#133)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/README.md b/packages/source-contentful/README.md\nindex 3bd9dfc..476e4bb 100644\n--- a/packages/source-contentful/README.md\n+++ b/packages/source-contentful/README.md\n@@ -24,4 +24,45 @@ module.exports = {\n     }\n   ]\n }\n-```\n\\ No newline at end of file\n+```\n+\n+## Contentful Content Types\n+@gridsome/souce-contentful currently works with all Contentful Content Types except the Rich Text [Beta] type.\n+\n+### Location\n+Contentful Location data is returned as JSON with `lat` and `lon`. You will need to query the field name and each field in the GraphQL query\n+```\n+<page-query>\n+query Location{\n+  allContentfulTestType{\n+    edges {\n+        node{\n+          geoLocation {\n+            lat,\n+            lon,\n+          }\n+        }\n+      }\n+    }\n+  }\n+</page-query>\n+```\n+\n+### JSON\n+In Contentful JSON ContentTypes, rather than recieving the entire object when querying for the field, GraphQL requires that you query for each field that you need.\n+```\n+<page-query>\n+query Json {\n+  allContentfulTestType {\n+    edges {\n+      node {\n+        jsonFieldName{\n+          itemOne,\n+          itemTwo,\n+        }\n+      }\n+    }\n+  }\n+}\n+</page-query>\n+```\ndiff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex e67c591..efa8eb1 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -74,9 +74,11 @@ class ContentfulSource {\n \n         if (Array.isArray(value)) {\n           fields[key] = value.map(item =>\n-            typeof item === 'object' ? this.createReferenceField(item) : item\n+            typeof item === 'object' && typeof value.sys !== 'undefined'\n+              ? this.createReferenceField(item)\n+              : item\n           )\n-        } else if (typeof value === 'object') {\n+        } else if (typeof value === 'object' && typeof value.sys !== 'undefined') {\n           fields[key] = this.createReferenceField(value)\n         } else {\n           fields[key] = value",
    "output": "fix(contentful): support location fields (#132)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/createFieldTypes.spec.js b/gridsome/__tests__/createFieldTypes.spec.js\nindex cc7644a..aca19d0 100644\n--- a/gridsome/__tests__/createFieldTypes.spec.js\n+++ b/gridsome/__tests__/createFieldTypes.spec.js\n@@ -26,6 +26,7 @@ test('infer types from node fields', () => {\n         numberList: [10],\n         floatList: [1.2],\n         extendObj: {},\n+        refs: [],\n         simpleObj: {\n           foo: 'bar'\n         },\n@@ -43,6 +44,9 @@ test('infer types from node fields', () => {\n         emptyList: [],\n         emptyObj: {},\n         emptyString: '',\n+        refs: [\n+          { typeName: 'Post', id: '1' } // #128, #129\n+        ],\n         extendObj: {\n           bar: 'foo'\n         },\n@@ -56,7 +60,7 @@ test('infer types from node fields', () => {\n     }\n   ])\n \n-  const types = createFieldTypes(fields, 'TestPost')\n+  const types = createFieldTypes(fields, 'TestPost', {})\n \n   expect(types.string.type).toEqual(GraphQLString)\n   expect(types.number.type).toEqual(GraphQLInt)\ndiff --git a/gridsome/lib/graphql/utils/mergeFields.js b/gridsome/lib/graphql/utils/mergeFields.js\nindex a63b6b3..31acf91 100644\n--- a/gridsome/lib/graphql/utils/mergeFields.js\n+++ b/gridsome/lib/graphql/utils/mergeFields.js\n@@ -29,15 +29,17 @@ function fieldValues (obj, currentObj = {}) {\n function fieldValue (value, currentValue) {\n   if (Array.isArray(value)) {\n     if (isRefField(value[0])) {\n-      const ref = currentValue || { typeName: [], isList: true }\n+      if (!isRefValue(currentValue)) {\n+        currentValue = { typeName: [], isList: true }\n+      }\n \n       for (let i = 0, l = value.length; i < l; i++) {\n-        if (!ref.typeName.includes(value[i].typeName)) {\n-          ref.typeName.push(value[i].typeName)\n+        if (!currentValue.typeName.includes(value[i].typeName)) {\n+          currentValue.typeName.push(value[i].typeName)\n         }\n       }\n \n-      return ref\n+      return currentValue\n     }\n \n     return value.map((value, index) => {\n@@ -57,6 +59,15 @@ function fieldValue (value, currentValue) {\n   return currentValue !== undefined ? currentValue : value\n }\n \n+function isRefValue (value) {\n+  return (\n+    typeof value === 'object' &&\n+    Object.keys(value).length === 2 &&\n+    value.hasOwnProperty('typeName') &&\n+    value.hasOwnProperty('isList')\n+  )\n+}\n+\n function isRefField (field) {\n   return (\n     typeof field === 'object' &&",
    "output": "fix(graphql): merge ref fields correctly (#128, #129)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-google-analytics/README.md b/packages/plugin-google-analytics/README.md\nnew file mode 100644\nindex 0000000..e5203fc\n--- /dev/null\n+++ b/packages/plugin-google-analytics/README.md\n@@ -0,0 +1,24 @@\n+# @gridsome/plugin-google-analytics\n+\n+> Google Analytics plugin for Gridsome\n+\n+See [VueAnalytics](https://github.com/MatteoGabriele/vue-analytics/blob/master/README.md) for possible options.\n+\n+## Install\n+- `yarn add @gridsome/plugin-google-analytics`\n+- `npm install @gridsome/plugin-google-analytics`\n+\n+## Usage\n+\n+```js\n+module.exports = {\n+  plugins: [\n+    {\n+      use: '@gridsome/plugin-google-analytics',\n+      options: {\n+        id: 'UA-XXX-XX',\n+      }\n+    }\n+  ]\n+}\n+```\ndiff --git a/packages/plugin-google-analytics/gridsome.client.js b/packages/plugin-google-analytics/gridsome.client.js\nnew file mode 100644\nindex 0000000..f6026f8\n--- /dev/null\n+++ b/packages/plugin-google-analytics/gridsome.client.js\n@@ -0,0 +1,21 @@\n+import VueAnalytics from 'vue-analytics'\n+/**\n+ * @param Vue                 Vue instance\n+ * @param options             Plugin options\n+ * @param context.appOptions  Options for the Vue instance\n+ * @param context.router      The router instance\n+ * @param context.head        VueMeta info objet\n+ * @param context.isClient\n+ * @param context.isServer\n+ */\n+export default function (Vue, options, { isServer, router }) {\n+  const baseOptions = {\n+    disabled: isServer,\n+    debug: {\n+      sendHitTask: process.env.NODE_ENV === 'production'\n+    },\n+    router\n+  }\n+\n+  Vue.use(VueAnalytics, { ...baseOptions, ...options })\n+}\ndiff --git a/packages/plugin-google-analytics/package.json b/packages/plugin-google-analytics/package.json\nnew file mode 100644\nindex 0000000..19b28b8\n--- /dev/null\n+++ b/packages/plugin-google-analytics/package.json\n@@ -0,0 +1,25 @@\n+{\n+  \"name\": \"@gridsome/plugin-google-analytics\",\n+  \"homepage\": \"https://github.com/gridsome/gridsome/tree/master/packages/plugin-google-analytics#readme\",\n+  \"repository\": \"https://github.com/gridsome/gridsome/tree/master/packages/plugin-google-analytics\",\n+  \"version\": \"0.0.0\",\n+  \"main\": \"gridsome.client.js\",\n+  \"license\": \"MIT\",\n+  \"files\": [\n+    \"gridsome.client.js\"\n+  ],\n+  \"keywords\": [\n+    \"gridsome\",\n+    \"gridsome-plugin\",\n+    \"analytics\"\n+  ],\n+  \"publishConfig\": {\n+    \"access\": \"public\"\n+  },\n+  \"dependencies\": {\n+    \"vue-analytics\": \"^5.16.1\"\n+  },\n+  \"engines\": {\n+    \"node\": \">=8\"\n+  }\n+}\ndiff --git a/yarn.lock b/yarn.lock\nindex c94796d..6490e07 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -13765,6 +13765,11 @@ vm-browserify@0.0.4:\n   dependencies:\n     indexof \"0.0.1\"\n \n+vue-analytics@^5.16.1:\n+  version \"5.16.1\"\n+  resolved \"https://registry.yarnpkg.com/vue-analytics/-/vue-analytics-5.16.1.tgz#2fa909a245e1cee9993a69f0b72caf1dd6126c10\"\n+  integrity sha512-3gnS0c9lxS7+eOtzEPZKZHgWur+qSFLsM+ZIXgPOGPBLfG4mIttT18RJROEozQ+qrCRmqnSCj/dgyg6FxVMM0A==\n+\n vue-eslint-parser@^2.0.3:\n   version \"2.0.3\"\n   resolved \"https://registry.yarnpkg.com/vue-eslint-parser/-/vue-eslint-parser-2.0.3.tgz#c268c96c6d94cfe3d938a5f7593959b0ca3360d1\"",
    "output": "feat(google-analytics): initial plugin (#96)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/PluginStore.spec.js b/gridsome/__tests__/PluginStore.spec.js\nindex a6f3645..a9100bd 100644\n--- a/gridsome/__tests__/PluginStore.spec.js\n+++ b/gridsome/__tests__/PluginStore.spec.js\n@@ -229,10 +229,11 @@ test('prefix dynamic route with leading slash', () => {\n test('add type with custom fields in route', () => {\n   const contentType = createPlugin().store.addContentType({\n     typeName: 'TestPost',\n-    route: '/:test/:test_raw/:numeric/:author/:slug'\n+    route: '/:test/:test_raw/:id/:numeric/:author/:slug'\n   })\n \n   const node = contentType.addNode({\n+    id: '1234',\n     title: 'Lorem ipsum',\n     fields: {\n       test: 'My value',\n@@ -244,7 +245,7 @@ test('add type with custom fields in route', () => {\n     }\n   })\n \n-  expect(node.path).toEqual('/my-value/My%20value/10/2/lorem-ipsum')\n+  expect(node.path).toEqual('/my-value/My%20value/1234/10/2/lorem-ipsum')\n })\n \n test('transform node', () => {\ndiff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex 0fad128..89ecd17 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -231,7 +231,7 @@ class ContentTypeCollection extends EventEmitter {\n     // with '_raw' suffix.\n     for (let i = 0, l = routeKeys.length; i < l; i++) {\n       const keyName = routeKeys[i]\n-      const fieldValue = node.fields[keyName] || keyName\n+      const fieldValue = node.fields[keyName] || node[keyName] || keyName\n \n       if (\n         isObject(fieldValue) &&",
    "output": "fix(route): allow node props as route params"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/PluginStore.spec.js b/gridsome/__tests__/PluginStore.spec.js\nindex 5a883cf..a6f3645 100644\n--- a/gridsome/__tests__/PluginStore.spec.js\n+++ b/gridsome/__tests__/PluginStore.spec.js\n@@ -74,14 +74,24 @@ test('update node', () => {\n \n   const oldNode = contentType.addNode({\n     id: 'test',\n-    date: '2018-09-04T23:20:33.918Z'\n+    date: '2018-09-04T23:20:33.918Z',\n+    content: 'Lorem ipsum dolor sit amet',\n+    excerpt: 'Lorem ipsum...',\n+    fields: {\n+      foo: 'bar'\n+    }\n   })\n \n   const oldTimestamp = oldNode.internal.timestamp\n   const uid = oldNode.uid\n \n   const node = contentType.updateNode('test', {\n-    title: 'New title'\n+    title: 'New title',\n+    content: 'Praesent commodo cursus magna',\n+    excerpt: 'Praesent commodo...',\n+    fields: {\n+      foo: 'foo'\n+    }\n   })\n \n   const entry = api.store.store.index.findOne({ uid: node.uid })\n@@ -92,6 +102,9 @@ test('update node', () => {\n   expect(node.slug).toEqual('new-title')\n   expect(node.path).toEqual('/test/new-title')\n   expect(node.date).toEqual('2018-09-04T23:20:33.918Z')\n+  expect(node.content).toEqual('Praesent commodo cursus magna')\n+  expect(node.excerpt).toEqual('Praesent commodo...')\n+  expect(node.fields.foo).toEqual('foo')\n   expect(node.internal.timestamp).not.toEqual(oldTimestamp)\n   expect(emit).toHaveBeenCalledTimes(2)\n   expect(entry.id).toEqual('test')\ndiff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex 7adda9e..0fad128 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -87,6 +87,8 @@ class ContentTypeCollection extends EventEmitter {\n     node.title = options.title || fields.title || node.title\n     node.date = options.date || fields.date || node.date\n     node.slug = options.slug || fields.slug || this.slugify(node.title)\n+    node.content = options.content || fields.content || node.content\n+    node.excerpt = options.excerpt || fields.excerpt || node.excerpt\n     node.internal = Object.assign({}, node.internal, internal)\n     node.path = typeof options.path === 'string'\n       ? '/' + options.path.replace(/^\\/+/g, '')",
    "output": "fix(store): update node content and excerpt"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex a743ce4..69fe57b 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -25,6 +25,21 @@ class ContentfulSource {\n       space, accessToken, environment, host\n     })\n \n+    const { items: assets } = await client.getAssets()\n+\n+    const assetCollection = addContentType({\n+      typeName: makeTypeName('asset')\n+    })\n+\n+    for (const asset of assets) {\n+      const fields = asset.fields\n+\n+      assetCollection.addNode({\n+        _id: asset.sys.id,\n+        fields\n+      })\n+    }\n+\n     const { items: contentTypes } = await client.getContentTypes()\n     const cache = { contentTypes: {}}\n \n@@ -33,7 +48,7 @@ class ContentfulSource {\n     }\n \n     for (const contentType of contentTypes) {\n-      addContentType({\n+      const collection = addContentType({\n         typeName: makeTypeName(contentType.name),\n         route: routes[contentType.name] || `/${slugify(contentType.name)}/:slug`,\n         refs: contentType.fields.reduce((refs, { id, items }) => {\n@@ -55,6 +70,15 @@ class ContentfulSource {\n           return refs\n         }, {})\n       })\n+\n+      for (const field of contentType.fields) {\n+        if (field.type === 'Link' && field.linkType === 'Asset') {\n+          collection.addReference(field.name, {\n+            typeName: makeTypeName('asset'),\n+            key: '_id'\n+          })\n+        }\n+      }\n     }\n \n     const { items: entries } = await client.getEntries()",
    "output": "feat(contentful): asset references (#95)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 4d243f3..21e2ded 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -123,8 +123,8 @@ class RemarkTransformer {\n             defaultValue: 230\n           }\n         },\n-        resolve: (node, { speed }) => {\n-          const html = this.stringifyNode(node)\n+        resolve: async (node, { speed }) => {\n+          const html = await this.stringifyNode(node)\n           const text = htmlToText.fromString(html)\n           const count = words(text).length\n ",
    "output": "fix(remark): calculate time to read correctly"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex b926380..8d4fb4d 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -52,8 +52,8 @@ module.exports = (context, options = {}, pkg = {}) => {\n   const assetsDir = localConfig.assetsDir || 'assets'\n \n   config.pkg = options.pkg || resolvePkg(context)\n-  config.host = args.host || options.host || 'localhost'\n-  config.port = parseInt(args.port || options.port, 10) || 8080\n+  config.host = args.host || localConfig.host || 'localhost'\n+  config.port = parseInt(args.port || localConfig.port, 10) || 8080\n   config.plugins = normalizePlugins(context, plugins)\n   config.chainWebpack = localConfig.chainWebpack\n   config.transformers = resolveTransformers(config.pkg, localConfig)",
    "output": "fix(config): use host and port from project config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex cebaa43..b926380 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -52,8 +52,8 @@ module.exports = (context, options = {}, pkg = {}) => {\n   const assetsDir = localConfig.assetsDir || 'assets'\n \n   config.pkg = options.pkg || resolvePkg(context)\n-  config.host = args.host || 'localhost'\n-  config.port = parseInt(args.port, 10) || 8080\n+  config.host = args.host || options.host || 'localhost'\n+  config.port = parseInt(args.port || options.port, 10) || 8080\n   config.plugins = normalizePlugins(context, plugins)\n   config.chainWebpack = localConfig.chainWebpack\n   config.transformers = resolveTransformers(config.pkg, localConfig)",
    "output": "fix(config): customizing host and port"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__fixtures__/project-basic/src/assets/logo.svg b/gridsome/__tests__/__fixtures__/project-basic/src/assets/logo.svg\nnew file mode 100644\nindex 0000000..40b9f83\n--- /dev/null\n+++ b/gridsome/__tests__/__fixtures__/project-basic/src/assets/logo.svg\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   viewBox=\"0 0 400 400\"\n+   height=\"400\"\n+   width=\"400\"\n+   xml:space=\"preserve\"\n+   id=\"svg2\"\n+   version=\"1.1\"><metadata\n+     id=\"metadata8\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs6\" /><g\n+     transform=\"matrix(1.3333333,0,0,-1.3333333,0,400)\"\n+     id=\"g10\"><g\n+       transform=\"translate(178.0626,235.0086)\"\n+       id=\"g12\"><path\n+         id=\"path14\"\n+         style=\"fill:#4dba87;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n+         d=\"M 0,0 -22.669,-39.264 -45.338,0 h -75.491 L -22.669,-170.017 75.491,0 Z\" /></g><g\n+       transform=\"translate(178.0626,235.0086)\"\n+       id=\"g16\"><path\n+         id=\"path18\"\n+         style=\"fill:#435466;fill-opacity:1;fill-rule:nonzero;stroke:none\"\n+         d=\"M 0,0 -22.669,-39.264 -45.338,0 H -81.565 L -22.669,-102.01 36.227,0 Z\" /></g></g></svg>\n\\ No newline at end of file\ndiff --git a/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue b/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\nindex 26f4b88..9ee8687 100644\n--- a/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n+++ b/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n@@ -4,6 +4,7 @@\n     <h2>{{ $page.metaData.myTest.value }}</h2>\n     <g-link :to=\"{ name: 'blog' }\">Blog</g-link>\n     <g-link :to=\"{ name: 'home' }\" active-class=\"test-active\">Home</g-link>\n+    <g-image src=\"~/assets/logo.svg\" alt=\"SVG logo\" width=\"300\" />\n     <g-image src=\"~/assets/test.png\" alt=\"Test image\" width=\"1000\" />\n     <g-image src=\"https://www.example.com/assets/image.png\" alt=\"External image\" immediate />\n     <g-link to=\"~/assets/dummy.pdf\">Download</g-link>\ndiff --git a/gridsome/__tests__/build.spec.js b/gridsome/__tests__/build.spec.js\nindex 2f940cd..39d209c 100644\n--- a/gridsome/__tests__/build.spec.js\n+++ b/gridsome/__tests__/build.spec.js\n@@ -40,6 +40,7 @@ test('build basic project', async () => {\n   expect(exists('dist/assets/static/test.97c148e.test.png')).toBeTruthy()\n   expect(indexHTML).toMatch('src=\"data:image/svg+xml')\n   expect(indexHTML).toMatch('alt=\"Test image\"')\n+  expect(indexHTML).toMatch('alt=\"SVG logo\"')\n   expect(indexHTML).toMatch('data-srcset=\"/assets/static/test.82a2fbd.test.png 480w')\n   expect(indexHTML).toMatch('src=\"/assets/static/test.97c148e.test.png\"')\n   expect(indexHTML).toMatch('src=\"https://www.example.com/assets/image.png\"')",
    "output": "test(build): render svg image tag"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/nodes/createType.js b/gridsome/lib/graphql/schema/nodes/createType.js\nindex a73365b..73d7100 100644\n--- a/gridsome/lib/graphql/schema/nodes/createType.js\n+++ b/gridsome/lib/graphql/schema/nodes/createType.js\n@@ -102,19 +102,19 @@ function createFields (contentType, customFields) {\n function createRefs (contentType, nodeTypes, fields) {\n   if (isEmpty(contentType.options.refs)) return null\n \n-  return mapValues(contentType.options.refs, ({ typeName, fieldName }, key) => {\n-    const field = fields[key] || { type: GraphQLString }\n+  return mapValues(contentType.options.refs, ({ typeName }, fieldName) => {\n+    const field = fields[fieldName] || { type: GraphQLString }\n     const isList = field.type instanceof GraphQLList\n     const ref = { typeName, isList }\n     const resolve = createRefResolver(ref)\n \n     return {\n-      ...createRefType(ref, key, contentType.typeName, nodeTypes),\n+      ...createRefType(ref, fieldName, contentType.typeName, nodeTypes),\n       resolve: (obj, args, context, info) => {\n         const field = {\n           [fieldName]: {\n             typeName,\n-            id: obj.fields[key]\n+            id: obj.fields[fieldName]\n           }\n         }\n ",
    "output": "fix(graphql): fix deprecated references api"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__fixtures__/project-basic/src/main.js b/gridsome/__tests__/__fixtures__/project-basic/src/main.js\nindex 4d51cef..a599a86 100644\n--- a/gridsome/__tests__/__fixtures__/project-basic/src/main.js\n+++ b/gridsome/__tests__/__fixtures__/project-basic/src/main.js\n@@ -1,3 +1,4 @@\n export default function (Vue, { head }) {\n   head.meta.push({ name: 'keywords', content: 'test' })\n+  head.meta.push({ key: 'description', name: 'description', content: 'Main description' })\n }\ndiff --git a/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue b/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\nindex a7c37b6..26f4b88 100644\n--- a/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n+++ b/gridsome/__tests__/__fixtures__/project-basic/src/pages/Index.vue\n@@ -44,10 +44,17 @@ export default {\n \n   metaInfo () {\n     return {\n-      meta: [{\n-        name: 'og:description',\n-        content: this.$page.metaData.myTest.value\n-      }]\n+      meta: [\n+        {\n+          name: 'og:description',\n+          content: this.$page.metaData.myTest.value\n+        },\n+        {\n+          key: 'description',\n+          name: 'description',\n+          content: 'Index description'\n+        }\n+      ]\n     }\n   }\n }\ndiff --git a/gridsome/__tests__/build-basic.spec.js b/gridsome/__tests__/build-basic.spec.js\nindex 9408cb4..8205e0c 100644\n--- a/gridsome/__tests__/build-basic.spec.js\n+++ b/gridsome/__tests__/build-basic.spec.js\n@@ -33,6 +33,8 @@ test('build basic project', async () => {\n   expect(indexHTML).toMatch('<span>test 3</span>')\n   expect(indexHTML).toMatch('<a href=\"/blog\">Blog</a>')\n   expect(indexHTML).toMatch('test-active')\n+  expect(indexHTML).not.toMatch('Main description')\n+  expect(indexHTML).toMatch('Index description')\n \n   // favicon\n   expect(exists('dist/assets/static/favicon-w32.test.png')).toBeTruthy()",
    "output": "test: add duplicate metas in test project"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/types/image.js b/gridsome/lib/graphql/schema/types/image.js\nindex 261cbd5..d73b536 100644\n--- a/gridsome/lib/graphql/schema/types/image.js\n+++ b/gridsome/lib/graphql/schema/types/image.js\n@@ -29,10 +29,15 @@ exports.imageType = {\n   },\n   async resolve (obj, args, context, info) {\n     const value = fieldResolver(obj, args, context, info)\n+    let result\n \n     if (!value) return null\n \n-    const result = await context.queue.add(value, args)\n+    try {\n+      result = await context.queue.add(value, args)\n+    } catch (err) {\n+      return null\n+    }\n \n     return {\n       type: result.type,",
    "output": "fix(graphql): return null for missing images"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/infer-types.js b/gridsome/lib/graphql/schema/infer-types.js\nindex edb8071..730a08a 100644\n--- a/gridsome/lib/graphql/schema/infer-types.js\n+++ b/gridsome/lib/graphql/schema/infer-types.js\n@@ -6,6 +6,7 @@ const { isFile, fileType } = require('./types/file')\n const { isImage, imageType } = require('./types/image')\n const { isEmpty, isPlainObject } = require('lodash')\n const { fieldResolver, createRefResolver } = require('./resolvers')\n+const { warn } = require('../../utils/log')\n \n const {\n   GraphQLInt,\n@@ -169,12 +170,14 @@ function createRefType (ref, fieldName, fieldTypeName, nodeTypes) {\n     } else if (typeName.length === 1) {\n       res.type = nodeTypes[typeName[0]]\n     } else {\n-      throw new Error(`No reference found for ${fieldName}.`)\n+      warn(`No reference found for ${fieldName}.`)\n+      return null\n     }\n   } else if (nodeTypes.hasOwnProperty(typeName)) {\n     res.type = nodeTypes[typeName]\n   } else {\n-    throw new Error(`No reference found for ${fieldName}.`)\n+    warn(`No reference found for ${fieldName}.`)\n+    return null\n   }\n \n   if (ref.isList) {",
    "output": "fix(graphql): warn when missing reference"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex 48d4b8b..12bf2aa 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -16,7 +16,7 @@ export default (route, query) => {\n       })\n         .then(res => res.json())\n         .then(res => {\n-          cache.set(route.fullPath, res.data)\n+          cache.set(route.path, res.data)\n           resolve(res)\n         })\n     })\n@@ -27,7 +27,7 @@ export default (route, query) => {\n       const filename = !routePath ? '/index.json' : `/${routePath}.json`\n \n       import(/* webpackChunkName: \"data/\" */ `${GRIDSOME_DATA_DIR}${filename}`).then(res => {\n-        cache.set(route.fullPath, res.default.data)\n+        cache.set(route.path, res.default.data)\n         resolve(res)\n       })\n     })\ndiff --git a/gridsome/app/page-query/index.js b/gridsome/app/page-query/index.js\nindex 999250a..21c0d58 100644\n--- a/gridsome/app/page-query/index.js\n+++ b/gridsome/app/page-query/index.js\n@@ -15,7 +15,7 @@ export default ({ options }, query = true) => {\n     $page () {\n       return process.isServer\n         ? this.$ssrContext.pageQuery.data\n-        : cache.get(this.$route.fullPath)\n+        : cache.get(this.$route.path)\n     }\n   }, options.computed)\n ",
    "output": "fix(router): fetch data for paths with hash"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Link.js b/gridsome/app/components/Link.js\nindex b8413f3..5843e30 100644\n--- a/gridsome/app/components/Link.js\n+++ b/gridsome/app/components/Link.js\n@@ -16,7 +16,9 @@ export default {\n \n   props: {\n     to: { type: [Object, String] },\n-    page: { type: Number }\n+    page: { type: Number },\n+    activeClass: { type: String, default: 'active' },\n+    exactActiveClass: { type: String, default: 'active--exact' }\n   },\n \n   render: (h, { data, props, parent, children, ...res }) => {\n@@ -54,8 +56,8 @@ export default {\n       ref,\n       attrs: {\n         to,\n-        activeClass: 'active',\n-        exactActiveClass: 'active--exact',\n+        activeClass: props.activeClass,\n+        exactActiveClass: props.exactActiveClass,\n         ...data.attrs\n       },\n       domProps: {",
    "output": "fix(g-link): customizable active classes (#65)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.eslintignore b/.eslintignore\nindex 3ccc1f6..448a2d6 100644\n--- a/.eslintignore\n+++ b/.eslintignore\n@@ -1,3 +1,4 @@\n+__fixtures__\n node_modules\n projects\n dist\ndiff --git a/gridsome/__tests__/PluginStore.spec.js b/gridsome/__tests__/PluginStore.spec.js\nindex 1b88c1d..b7230ee 100644\n--- a/gridsome/__tests__/PluginStore.spec.js\n+++ b/gridsome/__tests__/PluginStore.spec.js\n@@ -122,6 +122,35 @@ test('remove node', () => {\n   emit.mockRestore()\n })\n \n+test('add nodes with custom fields', () => {\n+  const api = createPlugin()\n+\n+  const contentType = api.store.addContentType({ typeName: 'TestPost' })\n+\n+  const node = contentType.addNode({\n+    title: 'Lorem ipsum',\n+    fields: {\n+      nullValue: null,\n+      undefinedValue: undefined,\n+      falseValue: false,\n+      test: 'My value',\n+      list: ['1', '2', '3'],\n+      objectList: [{ test: 1 }, { test: 2 }],\n+      number: 24\n+    }\n+  })\n+\n+  expect(node.fields.test).toEqual('My value')\n+  expect(node.fields.nullValue).toEqual(null)\n+  expect(node.fields.undefinedValue).toEqual(undefined)\n+  expect(node.fields.falseValue).toEqual(false)\n+  expect(node.fields.list).toHaveLength(3)\n+  expect(node.fields.objectList).toHaveLength(2)\n+  expect(node.fields.objectList[0]).toMatchObject({ test: 1 })\n+  expect(node.fields.objectList[1]).toMatchObject({ test: 2 })\n+  expect(node.fields.number).toEqual(24)\n+})\n+\n test('add type with ref', () => {\n   const api = createPlugin()\n \ndiff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex c1802c9..71ff88c 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -164,6 +164,9 @@ class ContentTypeCollection extends EventEmitter {\n \n   processNodeFields (fields, origin) {\n     const processField = field => {\n+      if (field === undefined) return field\n+      if (field === null) return field\n+\n       switch (typeof field) {\n         case 'object':\n           return processFields(field)",
    "output": "fix(store): dont process null value as an object"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex c4e5ea0..9ae1459 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -28,7 +28,11 @@ document.addEventListener('click', event => {\n   ) return\n \n   const path = stripPathPrefix($el.pathname)\n-  const { location } = router.resolve({ path, hash: $el.hash })\n+  const { route, location } = router.resolve({ path, hash: $el.hash })\n+\n+  if (route.name === '404') {\n+    return\n+  }\n \n   router.push(location)\n   event.preventDefault()",
    "output": "fix(app): use default link behavior if 404"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex 9abb9be..a743ce4 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -35,7 +35,7 @@ class ContentfulSource {\n     for (const contentType of contentTypes) {\n       addContentType({\n         typeName: makeTypeName(contentType.name),\n-        route: routes[contentType.name] || `${slugify(contentType.name)}/:slug`,\n+        route: routes[contentType.name] || `/${slugify(contentType.name)}/:slug`,\n         refs: contentType.fields.reduce((refs, { id, items }) => {\n           if (items && items.type === 'Link' && items.linkType === 'Entry') {\n             refs[id] = {",
    "output": "fix(router): prefix default routes with slash"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/loaders/assets-loader.js b/gridsome/lib/webpack/loaders/assets-loader.js\nindex fa6b114..a905c10 100644\n--- a/gridsome/lib/webpack/loaders/assets-loader.js\n+++ b/gridsome/lib/webpack/loaders/assets-loader.js\n@@ -10,6 +10,7 @@ module.exports = async function (source, map) {\n   this.dependency(this.resourcePath)\n \n   const res = {\n+    type: asset.type,\n     mimeType: asset.mimeType,\n     src: asset.src\n   }",
    "output": "fix(g-link): link to local files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex cb327ee..44ca4b6 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -63,6 +63,8 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.maxImageWidth = localConfig.maxImageWidth || 1920\n   config.imageExtensions = SUPPORTED_IMAGE_TYPES\n \n+  config.runtimeCompiler = localConfig.runtimeCompiler || false\n+\n   config.transpileDependencies = Array.isArray(localConfig.transpileDependencies)\n     ? localConfig.transpileDependencies.slice()\n     : []\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex d4b7fc1..c38cec7 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -50,6 +50,10 @@ module.exports = (app, { isProd, isServer }) => {\n \n   config.module.noParse(/^(vue|vue-router)$/)\n \n+  if (app.config.runtimeCompiler) {\n+    config.resolve.alias.set('vue$', 'vue/dist/vue.esm.js')\n+  }\n+\n   if (!isProd) {\n     config.devtool('cheap-module-eval-source-map')\n   }",
    "output": "feat(webpack): runtimeCompiler config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex f2b0350..8648c79 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -75,6 +75,10 @@ class PluginAPI {\n     this._entry.clientOptions = options\n   }\n \n+  transpileDependencies (list) {\n+    this._app.config.transpileDependencies.push(...list)\n+  }\n+\n   loadSource (handler) {\n     this._on('loadSource', handler)\n   }\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 02c3644..cb327ee 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -63,6 +63,10 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.maxImageWidth = localConfig.maxImageWidth || 1920\n   config.imageExtensions = SUPPORTED_IMAGE_TYPES\n \n+  config.transpileDependencies = Array.isArray(localConfig.transpileDependencies)\n+    ? localConfig.transpileDependencies.slice()\n+    : []\n+\n   // max cache age for html markup in serve mode\n   config.maxCacheAge = localConfig.maxCacheAge || 1000\n \ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex d16f63f..d4b7fc1 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -90,6 +90,13 @@ module.exports = (app, { isProd, isServer }) => {\n       if (/gridsome\\.client\\.js$/.test(filepath)) {\n         return false\n       }\n+      if (app.config.transpileDependencies.some(dep => {\n+        return typeof dep === 'string'\n+          ? filepath.includes(path.normalize(dep))\n+          : filepath.match(dep)\n+      })) {\n+        return false\n+      }\n       if (filepath.startsWith(projectConfig.appPath)) {\n         return false\n       }",
    "output": "feat(webpack): transpileDependencies config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/inferTypes.spec.js b/gridsome/__tests__/inferTypes.spec.js\nindex 4d832d9..3a5e66b 100644\n--- a/gridsome/__tests__/inferTypes.spec.js\n+++ b/gridsome/__tests__/inferTypes.spec.js\n@@ -110,7 +110,7 @@ test('infer image fields', () => {\n     }\n   ], 'TestPost')\n \n-  expect(types.image1.type).toEqual(imageType.type)\n+  expect(types.image1.type).toEqual(GraphQLString)\n   expect(types.image2.type).toEqual(imageType.type)\n   expect(types.image3.type).toEqual(imageType.type)\n   expect(types.image4.type).toEqual(imageType.type)\ndiff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex 698f598..dfcf734 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -599,7 +599,7 @@ test('process image types in schema', async () => {\n         image: '/assets/350x250.png',\n         image2: 'https://www.example.com/images/image.png',\n         image3: './350x250.png',\n-        image4: './1000x600.png'\n+        image4: '1000x600.png'\n       })\n     }\n   })\ndiff --git a/gridsome/lib/graphql/schema/types/image.js b/gridsome/lib/graphql/schema/types/image.js\nindex acd80e1..261cbd5 100644\n--- a/gridsome/lib/graphql/schema/types/image.js\n+++ b/gridsome/lib/graphql/schema/types/image.js\n@@ -13,7 +13,7 @@ exports.isImage = value => {\n     const ext = path.extname(value).toLowerCase()\n \n     if (SUPPORTED_IMAGE_TYPES.includes(ext)) {\n-      return true\n+      return path.parse(value).base !== value\n     }\n   }\n ",
    "output": "fix(graphql): dont infer filename as file type"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/loaders/assets-loader.js b/gridsome/lib/webpack/loaders/assets-loader.js\nindex a274ed9..fa6b114 100644\n--- a/gridsome/lib/webpack/loaders/assets-loader.js\n+++ b/gridsome/lib/webpack/loaders/assets-loader.js\n@@ -5,9 +5,22 @@ module.exports = async function (source, map) {\n \n   const { queue } = process.GRIDSOME\n   const options = utils.parseQuery(this.query || '?')\n-  const res = await queue.add(this.resourcePath, options)\n+  const asset = await queue.add(this.resourcePath, options)\n \n   this.dependency(this.resourcePath)\n \n+  const res = {\n+    mimeType: asset.mimeType,\n+    src: asset.src\n+  }\n+\n+  if (asset.type === 'image') {\n+    res.sets = asset.sets\n+    res.size = asset.size\n+    res.sizes = asset.sizes\n+    res.srcset = asset.srcset\n+    res.dataUri = asset.dataUri\n+  }\n+\n   callback(null, `module.exports = ${JSON.stringify(res)}`)\n }",
    "output": "fix(image): exclude unecessary data"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex 1b83a2c..a23a6f3 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -116,6 +116,21 @@ test('get node by path', async () => {\n   expect(data.testPost.id).toEqual('1')\n })\n \n+test('get node by id', async () => {\n+  const contentType = api.store.addContentType({\n+    typeName: 'TestPost'\n+  })\n+\n+  contentType.addNode({ id: '20', title: 'Test' })\n+\n+  const query = '{ testPost (id: \"20\") { id title }}'\n+  const { errors, data } = await createSchemaAndExecute(query)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.testPost.id).toEqual('20')\n+  expect(data.testPost.title).toEqual('Test')\n+})\n+\n test('fail if node with given ID is missing', async () => {\n   const contentType = api.store.addContentType({\n     typeName: 'TestPost'\ndiff --git a/gridsome/lib/graphql/schema/nodes/createQuery.js b/gridsome/lib/graphql/schema/nodes/createQuery.js\nindex 96e04cb..a4f2dff 100644\n--- a/gridsome/lib/graphql/schema/nodes/createQuery.js\n+++ b/gridsome/lib/graphql/schema/nodes/createQuery.js\n@@ -19,7 +19,7 @@ module.exports = nodeType => {\n     },\n     resolve (object, { _id, id = _id, path, nullable }, { store }, { returnType }) {\n       const { collection } = store.getContentType(returnType)\n-      const node = id ? collection.get(id) : collection.findOne({ path })\n+      const node = id ? collection.findOne({ id }) : collection.findOne({ path })\n \n       if (!node && !nullable) {\n         const message = path",
    "output": "fix(graphql): get node by id"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 09e6534..02c3644 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -201,7 +201,7 @@ function normalizeIconsConfig (config = {}) {\n     })\n \n   res.touchicon = typeof icon.touchicon === 'string'\n-    ? { src: icon.touchicon, sizes: faviconSizes, precomposed: false }\n+    ? { src: icon.touchicon, sizes: touchiconSizes, precomposed: false }\n     : Object.assign({}, icon.touchicon, {\n       sizes: touchiconSizes,\n       src: res.favicon.src,",
    "output": "fix(touchicon): use correct sizes when custom icon"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex d618bdc..1aa22e0 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -412,6 +412,39 @@ test('should format dates from schema', async () => {\n   expect(data.testPostDate.dateObject.date).toEqual('10/10/2018')\n })\n \n+test('add custom schema fields', async () => {\n+  const contentType = api.store.addContentType({\n+    typeName: 'TestPost'\n+  })\n+\n+  contentType.addNode({\n+    id: '1',\n+    fields: {\n+      myField: 'test'\n+    }\n+  })\n+\n+  contentType.addSchemaField('myField', payload => {\n+    const { nodeTypes, nodeType, graphql } = payload\n+\n+    expect(payload.contentType).toEqual(contentType)\n+    expect(nodeTypes).toHaveProperty('TestPost')\n+    expect(nodeTypes['TestPost']).toEqual(nodeType)\n+    expect(graphql).toHaveProperty('graphql')\n+\n+    return {\n+      type: graphql.GraphQLString,\n+      resolve: () => 'my-custom-value'\n+    }\n+  })\n+\n+  const query = '{ testPost (id: \"1\") { myField }}'\n+  const { errors, data } = await createSchemaAndExecute(query)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.testPost.myField).toEqual('my-custom-value')\n+})\n+\n test('transformer extends node type', async () => {\n   const contentType = api.store.addContentType({\n     typeName: 'TestPost'\ndiff --git a/gridsome/lib/graphql/schema/nodes/createType.js b/gridsome/lib/graphql/schema/nodes/createType.js\nindex 86ac76f..0032c03 100644\n--- a/gridsome/lib/graphql/schema/nodes/createType.js\n+++ b/gridsome/lib/graphql/schema/nodes/createType.js\n@@ -1,4 +1,5 @@\n const camelCase = require('camelcase')\n+const graphql = require('../../graphql')\n const inferTypes = require('../infer-types')\n const { dateType } = require('../types/date')\n const { mapValues, isEmpty } = require('lodash')\n@@ -6,7 +7,6 @@ const { refResolver } = require('../resolvers')\n \n const { nodeInterface } = require('../interfaces')\n \n-const graphql = require('../../graphql')\n const {\n   GraphQLID,\n   GraphQLList,\n@@ -69,28 +69,20 @@ module.exports = ({ contentType, nodeTypes }) => {\n }\n \n function extendNodeType (contentType, nodeType, nodeTypes) {\n+  const payload = { contentType, nodeTypes, nodeType, graphql }\n   const fields = {}\n \n   for (const mimeType in contentType.options.mimeTypes) {\n     const transformer = contentType.options.mimeTypes[mimeType]\n     if (typeof transformer.extendNodeType === 'function') {\n-      Object.assign(fields, transformer.extendNodeType({\n-        contentType,\n-        nodeTypes,\n-        nodeType\n-      }))\n+      Object.assign(fields, transformer.extendNodeType(payload))\n     }\n   }\n \n   for (const fieldName in contentType.options.fields) {\n     const field = contentType.options.fields[fieldName]\n     if (typeof field === 'function') {\n-      fields[fieldName] = field({\n-        contentType,\n-        nodeTypes,\n-        nodeType,\n-        graphql\n-      })\n+      fields[fieldName] = field(payload)\n     }\n   }\n ",
    "output": "test(api): test createSchemaField"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/nodes/createType.js b/gridsome/lib/graphql/schema/nodes/createType.js\nindex b11e6ad..86ac76f 100644\n--- a/gridsome/lib/graphql/schema/nodes/createType.js\n+++ b/gridsome/lib/graphql/schema/nodes/createType.js\n@@ -6,6 +6,7 @@ const { refResolver } = require('../resolvers')\n \n const { nodeInterface } = require('../interfaces')\n \n+const graphql = require('../../graphql')\n const {\n   GraphQLID,\n   GraphQLList,\n@@ -13,7 +14,7 @@ const {\n   GraphQLNonNull,\n   GraphQLUnionType,\n   GraphQLObjectType\n-} = require('../../graphql')\n+} = graphql\n \n module.exports = ({ contentType, nodeTypes }) => {\n   const nodeType = new GraphQLObjectType({\n@@ -87,7 +88,8 @@ function extendNodeType (contentType, nodeType, nodeTypes) {\n       fields[fieldName] = field({\n         contentType,\n         nodeTypes,\n-        nodeType\n+        nodeType,\n+        graphql\n       })\n     }\n   }",
    "output": "fix(api): pass graphql object to addSchemaField (#64)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex cca9fcd..15deede 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -30,10 +30,10 @@ const head = {\n   link: []\n }\n \n-icons.favicons.forEach(({ type, width, height, src: href }) => {\n+icons.favicons.forEach(({ width, height, src: href }) => {\n   head.link.push({\n     rel: 'icon',\n-    type: `image/${type}`,\n+    type: icons.faviconMimeType,\n     sizes: `${width}x${height}`,\n     href\n   })\n@@ -42,6 +42,7 @@ icons.favicons.forEach(({ type, width, height, src: href }) => {\n icons.touchicons.forEach(({ width, height, src: href }) => {\n   head.link.push({\n     rel: `apple-touch-icon${icons.precomposed ? '-precomposed' : ''}`,\n+    type: icons.touchiconMimeType,\n     sizes: `${width}x${height}`,\n     href\n   })\ndiff --git a/gridsome/lib/app/CodeGenerator.js b/gridsome/lib/app/CodeGenerator.js\nindex 23c479c..2e09235 100644\n--- a/gridsome/lib/app/CodeGenerator.js\n+++ b/gridsome/lib/app/CodeGenerator.js\n@@ -48,6 +48,8 @@ async function genIcons ({ config, resolve, queue }) {\n   const faviconPath = resolve(favicon.src)\n \n   const icons = {\n+    touchiconMimeType: null,\n+    faviconMimeType: null,\n     precomposed: false,\n     touchicons: [],\n     favicons: []\n@@ -61,6 +63,7 @@ async function genIcons ({ config, resolve, queue }) {\n \n     icons.precomposed = touchicon.precomposed\n     icons.touchicons = touchicons.sets\n+    icons.touchiconMimeType = touchicons.mimeType\n   }\n \n   if (await fs.exists(faviconPath)) {\n@@ -70,6 +73,7 @@ async function genIcons ({ config, resolve, queue }) {\n     })\n \n     icons.favicons = favicons.sets\n+    icons.faviconMimeType = favicons.mimeType\n   }\n \n   return `export default ${JSON.stringify(icons, null, 2)}`",
    "output": "fix(favicon): set mime type for icons in head"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex 6ad4b8c..f2b0350 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -103,8 +103,8 @@ class PluginAPI {\n     this._on('beforeRenderHTML', fn)\n   }\n \n-  beforeProcessImages (fn) {\n-    this._on('beforeProcessImages', fn)\n+  beforeProcessAssets (fn) {\n+    this._on('beforeProcessAssets', fn)\n   }\n \n   afterBuild (fn) {",
    "output": "fix(build): fix beforeProcessAssets hook name"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex 022ad07..d618bdc 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -158,6 +158,32 @@ test('create connection', async () => {\n   expect(data.allTestPost.edges[1].node.title).toEqual('test 1')\n })\n \n+test('sort nodes collection', async () => {\n+  const contentType = api.store.addContentType({\n+    typeName: 'TestPost'\n+  })\n+\n+  contentType.addNode({ title: 'c' })\n+  contentType.addNode({ title: 'b' })\n+  contentType.addNode({ title: 'a' })\n+\n+  const query = `{\n+    allTestPost (sortBy: \"title\", order: ASC) {\n+      edges {\n+        node { title }\n+      }\n+    }\n+  }`\n+\n+  const { errors, data } = await createSchemaAndExecute(query)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.allTestPost.edges.length).toEqual(3)\n+  expect(data.allTestPost.edges[0].node.title).toEqual('a')\n+  expect(data.allTestPost.edges[1].node.title).toEqual('b')\n+  expect(data.allTestPost.edges[2].node.title).toEqual('c')\n+})\n+\n test('get nodes by path regex', async () => {\n   const contentType = api.store.addContentType({\n     typeName: 'TestPost'\ndiff --git a/gridsome/lib/graphql/schema/nodes/createConnection.js b/gridsome/lib/graphql/schema/nodes/createConnection.js\nindex 71bf934..5d98679 100644\n--- a/gridsome/lib/graphql/schema/nodes/createConnection.js\n+++ b/gridsome/lib/graphql/schema/nodes/createConnection.js\n@@ -52,7 +52,7 @@ module.exports = nodeType => {\n       const results = collection\n         .chain()\n         .find(query)\n-        .simplesort(sortBy, order === -1)\n+        .simplesort(sortBy, order === 'DESC')\n         .offset(((page - 1) * perPage) + skip)\n         .limit(perPage)\n \ndiff --git a/gridsome/lib/graphql/schema/types.js b/gridsome/lib/graphql/schema/types.js\nindex b718504..29a1a7d 100644\n--- a/gridsome/lib/graphql/schema/types.js\n+++ b/gridsome/lib/graphql/schema/types.js\n@@ -19,8 +19,16 @@ const pageInfoType = new GraphQLObjectType({\n const sortOrderType = new GraphQLEnumType({\n   name: 'SortOrder',\n   values: {\n-    ASC: { value: 1 },\n-    DESC: { value: -1 }\n+    ASC: {\n+      value: 'ASC',\n+      name: 'Ascending',\n+      description: 'Sort ascending'\n+    },\n+    DESC: {\n+      value: 'DESC',\n+      name: 'Descending',\n+      description: 'Sort descending'\n+    }\n   }\n })\n ",
    "output": "fix(graphql): fix order argument for collections"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex ee04ecb..4d243f3 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -17,7 +17,8 @@ const {\n const {\n   GraphQLInt,\n   GraphQLList,\n-  GraphQLString\n+  GraphQLString,\n+  GraphQLBoolean\n } = require('gridsome/graphql')\n \n class RemarkTransformer {\n@@ -94,16 +95,23 @@ class RemarkTransformer {\n       headings: {\n         type: new GraphQLList(HeadingType),\n         args: {\n-          depth: { type: HeadingLevels }\n+          depth: { type: HeadingLevels },\n+          stripTags: { type: GraphQLBoolean, defaultValue: true }\n         },\n-        resolve: async (node, { depth }) => {\n-          const headings = await this.findHeadings(node, depth)\n-\n-          return headings.filter(heading => {\n-            return typeof depth === 'number'\n-              ? heading.depth === depth\n-              : true\n-          })\n+        resolve: async (node, { depth, stripTags }) => {\n+          const headings = await this.findHeadings(node)\n+\n+          return headings\n+            .filter(heading =>\n+              typeof depth === 'number' ? heading.depth === depth : true\n+            )\n+            .map(heading => ({\n+              depth: heading.depth,\n+              anchor: heading.anchor,\n+              value: stripTags\n+                ? heading.value.replace(/(<([^>]+)>)/ig, '')\n+                : heading.value\n+            }))\n         }\n       },\n       timeToRead: {\n@@ -162,9 +170,17 @@ class RemarkTransformer {\n \n       visit(ast, 'heading', node => {\n         const heading = { depth: node.depth, value: '', anchor: '' }\n+        const children = node.children || []\n \n-        visit(node, 'link', link => (heading.anchor = link.url))\n-        visit(node, 'text', text => (heading.value = text.value))\n+        for (let i = 0, l = children.length; i < l; i++) {\n+          const el = children[i]\n+\n+          if (el.type === 'link') {\n+            heading.anchor = el.url\n+          } else if (el.value) {\n+            heading.value += el.value\n+          }\n+        }\n \n         headings.push(heading)\n       })",
    "output": "fix(remark): strip html tags from headings"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 574a56e..ee04ecb 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -46,12 +46,14 @@ class RemarkTransformer {\n           type: 'element',\n           tagName: 'span',\n           properties: {\n-            className: options.anchorClassName || 'icon icon-link'\n+            className: options.autolinkClassName || 'icon icon-link'\n           }\n         },\n         linkProperties: {\n           'aria-hidden': 'true'\n-        }\n+        },\n+        ...options.autolinkHeadings,\n+        ...localOptions.autolinkHeadings\n       }],\n       // built-in plugins\n       imagePlugin,",
    "output": "fix(remark): override autolink heading options"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex f48f1d0..574a56e 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -1,7 +1,8 @@\n const unified = require('unified')\n const parse = require('gray-matter')\n const words = require('lodash.words')\n-const markdown = require('remark-parse')\n+const remarkParse = require('remark-parse')\n+const remarkHtml = require('remark-html')\n const visit = require('unist-util-visit')\n const htmlToText = require('html-to-text')\n const { normalizePlugins } = require('./lib/utils')\n@@ -33,7 +34,6 @@ class RemarkTransformer {\n \n     this.remarkPlugins = normalizePlugins([\n       // built-in plugins\n-      'remark-parse',\n       'remark-slug',\n       'remark-fix-guillemets',\n       'remark-squeeze-paragraphs',\n@@ -87,7 +87,7 @@ class RemarkTransformer {\n     return {\n       content: {\n         type: GraphQLString,\n-        resolve: node => this.toHTML(node)\n+        resolve: node => this.stringifyNode(node)\n       },\n       headings: {\n         type: new GraphQLList(HeadingType),\n@@ -96,6 +96,7 @@ class RemarkTransformer {\n         },\n         resolve: async (node, { depth }) => {\n           const headings = await this.findHeadings(node, depth)\n+\n           return headings.filter(heading => {\n             return typeof depth === 'number'\n               ? heading.depth === depth\n@@ -113,7 +114,7 @@ class RemarkTransformer {\n           }\n         },\n         resolve: (node, { speed }) => {\n-          const html = this.toHTML(node)\n+          const html = this.stringifyNode(node)\n           const text = htmlToText.fromString(html)\n           const count = words(text).length\n \n@@ -123,29 +124,38 @@ class RemarkTransformer {\n     }\n   }\n \n-  toAST (node) {\n-    return this.nodeCache(node, 'ast', () => {\n-      return unified()\n-        .use(markdown)\n-        .parse(node.fields.__remarkContent)\n+  parseNode (node) {\n+    const content = node.fields.__remarkContent\n+\n+    return this.nodeCache(node, 'tree', () => {\n+      return unified().use(remarkParse).parse(content)\n     })\n   }\n \n-  toHTML (node) {\n-    return this.nodeCache(node, 'html', () => {\n+  transformNode (node) {\n+    return this.nodeCache(node, 'ast', async () => {\n+      const tree = await this.parseNode(node)\n+\n       return unified()\n         .data('node', node)\n         .data('queue', this.queue)\n         .data('context', this.context)\n         .use(this.remarkPlugins)\n-        .use(require('remark-html'))\n-        .process(node.fields.__remarkContent)\n+        .run(tree)\n+    })\n+  }\n+\n+  stringifyNode (node) {\n+    return this.nodeCache(node, 'html', async () => {\n+      const ast = await this.transformNode(node)\n+\n+      return unified().use(remarkHtml).stringify(ast)\n     })\n   }\n \n   findHeadings (node) {\n     return this.nodeCache(node, 'headings', async () => {\n-      const ast = await this.toAST(node)\n+      const ast = await this.transformNode(node)\n       const headings = []\n \n       visit(ast, 'heading', node => {",
    "output": "fix(remark): get heading anchors"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex a6ed916..022ad07 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -494,6 +494,8 @@ test('process file types in schema', async () => {\n         file: '/assets/document.pdf',\n         file2: 'https://www.example.com/assets/document.pdf',\n         file3: './dummy.pdf',\n+        url: 'https://www.gridsome.org',\n+        url2: 'https://www.gridsome.com',\n         text: 'pdf'\n       })\n     }\n@@ -504,6 +506,8 @@ test('process file types in schema', async () => {\n       file\n       file2\n       file3\n+      url\n+      url2\n       text\n     }\n   }`)\n@@ -517,6 +521,8 @@ test('process file types in schema', async () => {\n   expect(data.testPost.file3.type).toEqual('file')\n   expect(data.testPost.file3.mimeType).toEqual('application/pdf')\n   expect(data.testPost.file3.src).toEqual('/assets/files/dummy.pdf')\n+  expect(data.testPost.url).toEqual('https://www.gridsome.org')\n+  expect(data.testPost.url2).toEqual('https://www.gridsome.com')\n   expect(data.testPost.text).toEqual('pdf')\n })\n \ndiff --git a/gridsome/lib/graphql/schema/types/file.js b/gridsome/lib/graphql/schema/types/file.js\nindex b082714..ab39be5 100644\n--- a/gridsome/lib/graphql/schema/types/file.js\n+++ b/gridsome/lib/graphql/schema/types/file.js\n@@ -1,3 +1,4 @@\n+const url = require('url')\n const path = require('path')\n const mime = require('mime-types')\n \n@@ -11,6 +12,12 @@ exports.isFile = value => {\n     const ext = path.extname(value).toLowerCase()\n \n     if (ext.length && mimeType && mimeType !== 'application/x-msdownload') {\n+      const { hostname, pathname } = url.parse(value)\n+\n+      if (hostname && pathname === '/') {\n+        return false\n+      }\n+\n       return !SUPPORTED_IMAGE_TYPES.includes(ext)\n     }\n   }",
    "output": "fix(graphql): do not use file type for urls"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 9a9d695..a9e6029 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -17,22 +17,21 @@ module.exports = async (name, starter = 'default') => {\n   }\n \n   if (starters.includes(starter)) {\n-    starter = `gridsome/gridsome-starter-${starter}`\n+    starter = `https://github.com/gridsome/gridsome-starter-${starter}.git`\n   }\n \n-  const url = `https://github.com/${starter}.git`\n   const developCommand = 'gridsome develop'\n   const buildCommand = 'gridsome build'\n \n   const tasks = new Tasks([\n     {\n-      title: `Clone ${url}`,\n+      title: `Clone ${starter}`,\n       task: async () => {\n         try {\n-          await exec('git', ['clone', url, dir, '--single-branch'])\n-          await fs.remove(`${dir}/.git`)\n+          await exec('git', ['clone', starter, dir, '--single-branch'])\n+          await fs.remove(path.join(dir, '.git'))\n         } catch (err) {\n-          throw new Error('Failed to clone repository')\n+          throw new Error(err.message)\n         }\n       }\n     },",
    "output": "fix(cli): allow any url as starter"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 262784d..76b3430 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -1,30 +1,28 @@\n const Prism = require('prismjs')\n const escapeHtml = require('escape-html')\n const visit = require('unist-util-visit')\n-const loadLanguages = require('prismjs/components/index')\n \n-module.exports = options => {\n-  loadLanguages()\n+// load all prismjs languages\n+require('prismjs/components/index')()\n \n-  // highlight for graphql and static-query tags in html\n-  Prism.languages.html.graphql = {\n-    pattern: /(<(page|static)-query[\\s\\S]*?>)[\\s\\S]*?(?=<\\/(page|static)-query>)/i,\n-    inside: Prism.languages.graphql,\n-    lookbehind: true,\n-    greedy: true\n-  }\n+// highlight page-query and static-query in html\n+Prism.languages.html.graphql = {\n+  pattern: /(<(page|static)-query[\\s\\S]*?>)[\\s\\S]*?(?=<\\/(page|static)-query>)/i,\n+  inside: Prism.languages.graphql,\n+  lookbehind: true,\n+  greedy: true\n+}\n \n-  return tree => {\n-    visit(tree, 'code', node => {\n-      node.type = 'html'\n-      node.value = highlight(node, 'pre')\n-    })\n+module.exports = () => tree => {\n+  visit(tree, 'code', node => {\n+    node.type = 'html'\n+    node.value = highlight(node, 'pre')\n+  })\n \n-    visit(tree, 'inlineCode', node => {\n-      node.type = 'html'\n-      node.value = highlight(node, 'code')\n-    })\n-  }\n+  visit(tree, 'inlineCode', node => {\n+    node.type = 'html'\n+    node.value = highlight(node, 'code')\n+  })\n }\n \n function highlight ({ value, lang }, tag = 'pre') {",
    "output": "fix(prismjs): improve perf by loading languages once"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 45f8b5e..e2b40d0 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -95,6 +95,9 @@ class WordPressSource {\n       for (const type of options.types) {\n         const postTypeName = makeTypeName(type)\n         const collection = getContentType(postTypeName)\n+        if (!collection) {\n+          continue;\n+        }\n \n         collection.addReference(options.rest_base, { typeName, key: '_id' })\n       }",
    "output": "fix(wordpress): skip missing types when referring taxonomies (#49)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-faker/index.js b/packages/source-faker/index.js\nindex 7f3ae3f..b097f0b 100644\n--- a/packages/source-faker/index.js\n+++ b/packages/source-faker/index.js\n@@ -4,7 +4,7 @@ module.exports = function (api, options) {\n   api.loadSource(({ addContentType, slugify }) => {\n     const contentType = addContentType({\n       typeName: options.typeName,\n-      route: '/:year/:month/:day/:slug'\n+      route: options.route\n     })\n \n     for (let i = 0; i < options.numNodes; i++) {\n@@ -37,5 +37,6 @@ module.exports = function (api, options) {\n \n module.exports.defaultOptions = () => ({\n   numNodes: 500,\n-  typeName: 'Faker'\n+  typeName: 'Faker',\n+  route: '/:year/:month/:day/:slug'\n })",
    "output": "feat(faker): option for custom route (#34)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex caf0a37..262784d 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -4,7 +4,7 @@ const visit = require('unist-util-visit')\n const loadLanguages = require('prismjs/components/index')\n \n module.exports = options => {\n-  loadLanguages(['graphql'])\n+  loadLanguages()\n \n   // highlight for graphql and static-query tags in html\n   Prism.languages.html.graphql = {",
    "output": "fix(prismjs): load all languages (#52)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/PluginStore.spec.js b/gridsome/__tests__/PluginStore.spec.js\nindex 5ce83ed..9a128a8 100644\n--- a/gridsome/__tests__/PluginStore.spec.js\n+++ b/gridsome/__tests__/PluginStore.spec.js\n@@ -179,7 +179,8 @@ test('resolve absolute file paths', () => {\n       url4: 'ftp://ftp.example.com',\n       email: 'email@example.com',\n       text: 'Lorem ipsum dolor sit amet.',\n-      text2: 'example.com'\n+      text2: 'example.com',\n+      text3: 'md'\n     },\n     internal: {\n       origin: '/absolute/dir/to/a/file.md'\n@@ -191,6 +192,7 @@ test('resolve absolute file paths', () => {\n   expect(node.fields.file3).toEqual('/absolute/dir/to/image.png')\n   expect(node.fields.text).toEqual('Lorem ipsum dolor sit amet.')\n   expect(node.fields.text2).toEqual('example.com')\n+  expect(node.fields.text3).toEqual('md')\n   expect(node.fields.url).toEqual('https://example.com/image.jpg')\n   expect(node.fields.url2).toEqual('//example.com/image.jpg')\n   expect(node.fields.url3).toEqual('git@github.com:gridsome/gridsome.git')\ndiff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex eabbd4b..f919b2a 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -494,7 +494,8 @@ test('process file types in schema', async () => {\n       content: JSON.stringify({\n         file: '/assets/document.pdf',\n         file2: 'https://www.example.com/assets/document.pdf',\n-        file3: './dummy.pdf'\n+        file3: './dummy.pdf',\n+        text: 'pdf'\n       })\n     }\n   })\n@@ -504,6 +505,7 @@ test('process file types in schema', async () => {\n       file\n       file2\n       file3\n+      text\n     }\n   }`)\n \n@@ -516,6 +518,7 @@ test('process file types in schema', async () => {\n   expect(data.testPost.file3.type).toEqual('file')\n   expect(data.testPost.file3.mimeType).toEqual('application/pdf')\n   expect(data.testPost.file3.src).toEqual('/assets/files/dummy.pdf')\n+  expect(data.testPost.text).toEqual('pdf')\n })\n \n async function createSchemaAndExecute (query) {\ndiff --git a/gridsome/lib/graphql/schema/types/file.js b/gridsome/lib/graphql/schema/types/file.js\nindex 2a6b8a1..26e37f4 100644\n--- a/gridsome/lib/graphql/schema/types/file.js\n+++ b/gridsome/lib/graphql/schema/types/file.js\n@@ -11,7 +11,7 @@ exports.isFile = value => {\n     const mimeType = mime.lookup(value)\n     const ext = path.extname(value).toLowerCase()\n \n-    if (mimeType && mimeType !== 'application/x-msdownload') {\n+    if (ext.length && mimeType && mimeType !== 'application/x-msdownload') {\n       return !SUPPORTED_IMAGE_TYPES.includes(ext)\n     }\n   }",
    "output": "fix(graphql): do not use file type if no extension"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex ed15ff2..d8d0c04 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -23,7 +23,7 @@ class PluginAPI {\n         clearTimeout(regenerateTimeout)\n         regenerateTimeout = setTimeout(() => {\n           if (app.isBootstrapped) {\n-            app.routerData = createRoutes(app.store)\n+            app.routerData = createRoutes(app)\n             app.generator.generate('routes.js')\n           }\n         }, 20)",
    "output": "fix: re-create routes after a node.path change"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex 7a34ff3..6a2cf3f 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -114,7 +114,7 @@ class App {\n   }\n \n   generateFiles () {\n-    this.routerData = createRoutes(this.store)\n+    this.routerData = createRoutes(this)\n \n     this.router = new Router({\n       base: '/',\ndiff --git a/gridsome/lib/app/createRoutes.js b/gridsome/lib/app/createRoutes.js\nindex f02fb79..2e56eaa 100644\n--- a/gridsome/lib/app/createRoutes.js\n+++ b/gridsome/lib/app/createRoutes.js\n@@ -1,3 +1,4 @@\n+const path = require('path')\n const camelCase = require('camelcase')\n \n const {\n@@ -7,7 +8,7 @@ const {\n   DYNAMIC_TEMPLATE_ROUTE\n } = require('../utils/constants')\n \n-module.exports = store => {\n+module.exports = ({ store, config }) => {\n   const pages = store.pages.find({ type: 'page' })\n   const templates = store.pages.find({ type: 'template' })\n   const notFoundPage = store.pages.findOne({ type: '404' })\n@@ -18,7 +19,7 @@ module.exports = store => {\n \n   const notFoundComponent = notFoundPage\n     ? notFoundPage.component\n-    : 'gridsome/app/pages/404.vue'\n+    : path.join(config.appPath, 'pages', '404.vue')\n \n   pages.forEach(page => {\n     const name = camelCase(page.path.replace(/\\//g, ' ')) || 'home'",
    "output": "fix(webpack): absolute path to 404 fallback"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex d395ee7..ebaef31 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -106,9 +106,9 @@ module.exports = (app, { isProd, isServer }) => {\n     .use('babel-loader')\n       .loader('babel-loader')\n       .options({\n-        babelrc: false,\n-        configFile: false,\n-        presets: [require.resolve('./babel-preset')]\n+        presets: [\n+          require.resolve('./babel-preset')\n+        ]\n       })\n \n   // css",
    "output": "fix(webpack): load local babel config files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex 3d83957..7a34ff3 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -89,6 +89,13 @@ class App {\n       this.plugins.push({ api, entry, instance })\n     })\n \n+    // run config.chainWebpack after all plugins\n+    if (typeof this.config.chainWebpack === 'function') {\n+      this.on('chainWebpack', {\n+        handler: this.config.chainWebpack\n+      })\n+    }\n+\n     this.isInitialized = true\n \n     return this",
    "output": "fix(webpack): run chainWebpack after all plugins"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/createRenderFn.js b/gridsome/lib/server/createRenderFn.js\nindex 66d36ae..bebb09b 100644\n--- a/gridsome/lib/server/createRenderFn.js\n+++ b/gridsome/lib/server/createRenderFn.js\n@@ -46,10 +46,14 @@ module.exports = function createRenderFn ({\n       context.renderResourceHints() +\n       context.renderStyles()\n \n+    const scripts = '' +\n+      context.renderScripts() +\n+      inject.script.text({ body: true })\n+\n     return renderHTML({\n       htmlAttrs: `data-html-server-rendered=\"true\" ${htmlAttrs}`,\n-      scripts: context.renderScripts(),\n       bodyAttrs,\n+      scripts,\n       head,\n       app\n     })",
    "output": "fix(ssr): render body scripts from vue-meta"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/nodes/createType.js b/gridsome/lib/graphql/schema/nodes/createType.js\nindex 9bcc78c..bb9b0be 100644\n--- a/gridsome/lib/graphql/schema/nodes/createType.js\n+++ b/gridsome/lib/graphql/schema/nodes/createType.js\n@@ -1,11 +1,9 @@\n const camelCase = require('camelcase')\n const { dateType } = require('../types/date')\n-const { mapValues, isEmpty, omit } = require('lodash')\n+const { mapValues, isEmpty } = require('lodash')\n \n const { nodeInterface } = require('../interfaces')\n \n-const SPECIAL_FIELDS = ['id', 'title', 'slug', 'path', 'date', 'content', 'excerpt']\n-\n const {\n   GraphQLID,\n   GraphQLList,\n@@ -23,23 +21,24 @@ module.exports = ({ contentType, nodeTypes, fields }) => {\n     interfaces: [nodeInterface],\n     isTypeOf: node => node.typeName === contentType.typeName,\n     fields: () => {\n-      const rootFields = omit(fields, SPECIAL_FIELDS)\n-      const refs = createRefs(contentType, nodeTypes, rootFields)\n+      const refs = createRefs(contentType, nodeTypes, fields)\n \n       const nodeFields = {\n-        id: { type: new GraphQLNonNull(GraphQLID) },\n-        title: { type: GraphQLString },\n-        slug: { type: GraphQLString },\n-        path: { type: GraphQLString },\n+        ...fields,\n+        ...refs,\n+\n         content: { type: GraphQLString },\n         excerpt: { type: GraphQLString },\n-        date: dateType,\n \n-        ...rootFields,\n-        ...refs,\n         ...extendNodeType(contentType, nodeType, nodeTypes),\n         ...createFields(contentType, fields),\n \n+        id: { type: new GraphQLNonNull(GraphQLID) },\n+        title: { type: GraphQLString },\n+        slug: { type: GraphQLString },\n+        path: { type: GraphQLString },\n+        date: dateType,\n+\n         _id: {\n           deprecationReason: 'Use node.id instead.',\n           type: new GraphQLNonNull(GraphQLID),",
    "output": "refactor(graphql): reorder node type fields"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex 08631ab..c08e4de 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -370,6 +370,73 @@ test('infer file fields', () => {\n   expect(types.file2.type).toEqual(fileType.type)\n })\n \n+test('should get values from object fields', async () => {\n+  const contentType = api.store.addContentType({\n+    typeName: 'TestPost'\n+  })\n+\n+  contentType.addNode({\n+    id: '1',\n+    fields: {\n+      myObject: {\n+        value: 'test1',\n+        otherObject: {\n+          value: 'test2'\n+        }\n+      }\n+    }\n+  })\n+\n+  const { data } = await createSchemaAndExecute(`{\n+    testPost (id: \"1\") {\n+      myObject {\n+        value\n+        otherObject {\n+          value\n+        }\n+      }\n+    }\n+  }`)\n+\n+  expect(data.testPost.myObject.value).toEqual('test1')\n+  expect(data.testPost.myObject.otherObject.value).toEqual('test2')\n+})\n+\n+test('should format dates from schema', async () => {\n+  const contentType = api.store.addContentType({\n+    typeName: 'TestPostDate'\n+  })\n+\n+  contentType.addNode({\n+    id: '1',\n+    date: '2018-10-10',\n+    fields: {\n+      customDate: '2018-10-10',\n+      dateObject: {\n+        date: '2018-10-10'\n+      }\n+    }\n+  })\n+\n+  const { data } = await createSchemaAndExecute(`{\n+    testPostDate (id: \"1\") {\n+      date\n+      customDate\n+      date2: date(format: \"YYYY-MM-DD\")\n+      date3: customDate(format: \"DD/MM/YYYY\")\n+      dateObject {\n+        date(format: \"DD/MM/YYYY\")\n+      }\n+    }\n+  }`)\n+\n+  expect(data.testPostDate.date).toEqual('2018-10-10T00:00:00+02:00')\n+  expect(data.testPostDate.customDate).toEqual('2018-10-10T00:00:00+02:00')\n+  expect(data.testPostDate.date2).toEqual('2018-10-10')\n+  expect(data.testPostDate.date3).toEqual('10/10/2018')\n+  expect(data.testPostDate.dateObject.date).toEqual('10/10/2018')\n+})\n+\n test('transformer extends node type', async () => {\n   const contentType = api.store.addContentType({\n     typeName: 'TestPost'",
    "output": "test(graphql): date and object fields"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/infer-types.js b/gridsome/lib/graphql/schema/infer-types.js\nindex 975a4aa..d2274bf 100644\n--- a/gridsome/lib/graphql/schema/infer-types.js\n+++ b/gridsome/lib/graphql/schema/infer-types.js\n@@ -83,7 +83,7 @@ function createObjectType (obj, key, nodeType) {\n \n   return !isEmpty(fields) ? {\n     type: new GraphQLObjectType({ name, fields }),\n-    resolve: obj => obj\n+    resolve: fieldResolver\n   } : null\n }\n ",
    "output": "fix(graphql): get sub fields from object fields"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/schema/infer-types.js b/gridsome/lib/graphql/schema/infer-types.js\nindex e7057b8..975a4aa 100644\n--- a/gridsome/lib/graphql/schema/infer-types.js\n+++ b/gridsome/lib/graphql/schema/infer-types.js\n@@ -1,7 +1,7 @@\n const camelCase = require('camelcase')\n const { mapValues, isEmpty } = require('lodash')\n const { fieldResolver } = require('./resolvers')\n-const { isDate, dateType } = require('./types/date')\n+const { isDate, dateTypeField } = require('./types/date')\n const { isFile, fileType } = require('./types/file')\n const { isImage, imageType } = require('./types/image')\n \n@@ -50,7 +50,7 @@ function inferType (value, key, nodeType) {\n   const type = typeof value\n \n   if (isDate(value)) {\n-    return dateType\n+    return dateTypeField\n   }\n \n   switch (type) {\ndiff --git a/gridsome/lib/graphql/schema/types/date.js b/gridsome/lib/graphql/schema/types/date.js\nindex 886cf65..5a1f90b 100644\n--- a/gridsome/lib/graphql/schema/types/date.js\n+++ b/gridsome/lib/graphql/schema/types/date.js\n@@ -54,6 +54,17 @@ exports.dateType = {\n     format: { type: GraphQLString, description: 'Date format' },\n     locale: { type: GraphQLString, description: 'Locale', defaultValue: 'en' }\n   },\n+  resolve: (obj, args, context, { fieldName }) => {\n+    const { format, locale } = args\n+    const value = obj[fieldName]\n+\n+    return moment(value).locale(locale).format(format)\n+  }\n+}\n+\n+// TODO: remove this before v1.0\n+exports.dateTypeField = {\n+  ...exports.dateType,\n   resolve: (obj, args, context, info) => {\n     const value = fieldResolver(obj, args, context, info)\n     const { format, locale } = args\n@@ -61,4 +72,3 @@ exports.dateType = {\n     return moment(value).locale(locale).format(format)\n   }\n }\n-",
    "output": "fix(graphql): return correct dates"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 02a3e5e..c4e5ea0 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -28,7 +28,7 @@ document.addEventListener('click', event => {\n   ) return\n \n   const path = stripPathPrefix($el.pathname)\n-  const { location } = router.resolve({ path })\n+  const { location } = router.resolve({ path, hash: $el.hash })\n \n   router.push(location)\n   event.preventDefault()",
    "output": "fix: keep hash when resolving raw html links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex 637eb59..ed15ff2 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -1,6 +1,7 @@\n const autoBind = require('auto-bind')\n const { mapValues } = require('lodash')\n const PluginStore = require('./PluginStore')\n+const createRoutes = require('./createRoutes')\n const { cache, nodeCache } = require('../utils/cache')\n \n class PluginAPI {\n@@ -22,6 +23,7 @@ class PluginAPI {\n         clearTimeout(regenerateTimeout)\n         regenerateTimeout = setTimeout(() => {\n           if (app.isBootstrapped) {\n+            app.routerData = createRoutes(app.store)\n             app.generator.generate('routes.js')\n           }\n         }, 20)\n@@ -34,6 +36,7 @@ class PluginAPI {\n         if (!app.isBootstrapped) return\n \n         if (\n+          (node && node.withPath && node === oldNode) ||\n           (node && node.withPath && node.path !== oldNode.path) ||\n           (!node && oldNode.withPath)\n         ) {",
    "output": "fix: update routes when source path changes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/schema.spec.js b/gridsome/__tests__/schema.spec.js\nindex e41f239..08631ab 100644\n--- a/gridsome/__tests__/schema.spec.js\n+++ b/gridsome/__tests__/schema.spec.js\n@@ -426,7 +426,8 @@ test('process image types in schema', async () => {\n       content: JSON.stringify({\n         image: '/assets/350x250.png',\n         image2: 'https://www.example.com/images/image.png',\n-        image3: './350x250.png'\n+        image3: './350x250.png',\n+        image4: './1000x600.png'\n       })\n     }\n   })\n@@ -436,6 +437,7 @@ test('process image types in schema', async () => {\n       image\n       image2\n       image3\n+      image4 (width: 300, quality: 100, blur: 0)\n     }\n   }`)\n \n@@ -456,6 +458,10 @@ test('process image types in schema', async () => {\n   expect(data.testPost.image3.sizes).toEqual('(max-width: 350px) 100vw, 350px')\n   expect(data.testPost.image3.srcset).toHaveLength(1)\n   expect(data.testPost.image3.dataUri).toMatch(/data:image\\/png/g)\n+  expect(data.testPost.image4.src).toEqual('/assets/static/1000x600-w300-q100.test.png')\n+  expect(data.testPost.image4.size).toMatchObject({ width: 300, height: 180 })\n+  expect(data.testPost.image4.sizes).toEqual('(max-width: 300px) 100vw, 300px')\n+  expect(data.testPost.image4.srcset).toHaveLength(1)\n })\n \n test('process file types in schema', async () => {\ndiff --git a/gridsome/lib/graphql/schema/types/image.js b/gridsome/lib/graphql/schema/types/image.js\nindex 5405f15..341b437 100644\n--- a/gridsome/lib/graphql/schema/types/image.js\n+++ b/gridsome/lib/graphql/schema/types/image.js\n@@ -1,7 +1,11 @@\n const fs = require('fs')\n const path = require('path')\n \n-const { GraphQLJSON } = require('../../graphql')\n+const {\n+  GraphQLInt,\n+  GraphQLJSON\n+} = require('../../graphql')\n+\n const { fieldResolver } = require('../resolvers')\n const { SUPPORTED_IMAGE_TYPES } = require('../../../utils/constants')\n \n@@ -19,13 +23,17 @@ exports.isImage = value => {\n \n exports.imageType = {\n   type: GraphQLJSON,\n-  args: {},\n+  args: {\n+    width: { type: GraphQLInt, description: 'Width' },\n+    quality: { type: GraphQLInt, description: 'Quality (default: 75)' },\n+    blur: { type: GraphQLInt, description: 'Blur level for base64 string' }\n+  },\n   async resolve (obj, args, context, info) {\n     const value = fieldResolver(obj, args, context, info)\n \n     if (!value) return null\n \n-    const result = await context.queue.add(value)\n+    const result = await context.queue.add(value, args)\n \n     return {\n       type: result.type,",
    "output": "feat(graphql): image arguments"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/CodeGenerator.js b/gridsome/lib/app/CodeGenerator.js\nindex ef5ce6a..2ce706d 100644\n--- a/gridsome/lib/app/CodeGenerator.js\n+++ b/gridsome/lib/app/CodeGenerator.js\n@@ -44,22 +44,35 @@ module.exports = CodeGenerator\n \n async function genIcons ({ config, resolve, queue }) {\n   const { touchicon, favicon } = config.icon\n+  const touchiconPath = resolve(touchicon.src)\n+  const faviconPath = resolve(favicon.src)\n+  \n+  const icons = {\n+    precomposed: false,\n+    touchicons: [],\n+    favicons: []\n+  }\n \n-  const touchicons = await queue.add(resolve(touchicon.src), {\n-    sizes: touchicon.sizes,\n-    srcset: false\n-  })\n+  if (await fs.exists(touchiconPath)) {\n+    const touchicons = await queue.add(touchiconPath, {\n+      sizes: touchicon.sizes,\n+      srcset: false\n+    })\n+    \n+    icons.precomposed = touchicon.precomposed\n+    icons.touchicons = touchicons.sets\n+  }\n \n-  const favicons = await queue.add(resolve(favicon.src), {\n-    sizes: favicon.sizes,\n-    srcset: false\n-  })\n+  if (await fs.exists(faviconPath)) {\n+    const favicons = await queue.add(faviconPath, {\n+      sizes: favicon.sizes,\n+      srcset: false\n+    })\n \n-  return `export default ${JSON.stringify({\n-    precomposed: touchicon.precomposed,\n-    touchicons: touchicons.sets || [],\n-    favicons: favicons.sets || []\n-  })}`\n+    icons.favicons = favicons.sets\n+  }\n+\n+  return `export default ${JSON.stringify(icons, null, 2)}`\n }\n \n function genConfig ({ config }) {",
    "output": "fix: dont fail when missing favicon.png"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 714d87f..732e4bd 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -37,11 +37,14 @@ module.exports = async (context, args) => {\n \n   const devMiddleware = require('webpack-dev-middleware')(compiler, {\n     pathPrefix: webpackConfig.output.pathPrefix,\n-    logLevel: 'error',\n-    noInfo: true\n+    logLevel: 'silent'\n   })\n \n-  devMiddleware.waitUntilValid(() => {\n+  compiler.hooks.done.tap('gridsome develop', stats => {\n+    if (stats.hasErrors()) {\n+      return\n+    }\n+    \n     console.log()\n     console.log(`  Site running at:          ${chalk.cyan(server.url.site)}`)\n     console.log(`  Explore GraphQL data at:  ${chalk.cyan(server.url.explore)}`)\n@@ -65,6 +68,10 @@ module.exports = async (context, args) => {\n   function createWebpackConfig () {\n     const clientConfig = createClientConfig(app)\n \n+    clientConfig\n+      .plugin('friendly-errors')\n+        .use(require('friendly-errors-webpack-plugin'))\n+\n     clientConfig\n       .plugin('dev-endpoints')\n         .use(require('webpack/lib/DefinePlugin'), [{",
    "output": "fix: clear errors in terminal when resolved"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 26400ba..354616a 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -113,7 +113,7 @@ function normalizePlugins (context, plugins) {\n \n     const hash = crypto.createHash('md5')\n     const uid = hash.update(`${plugin.use}-${index}`).digest('hex')\n-    const entries = resolvePluginEntries(plugin.use)\n+    const entries = resolvePluginEntries(plugin.use, context)\n \n     return defaultsDeep(plugin, {\n       server: true,\n@@ -126,8 +126,16 @@ function normalizePlugins (context, plugins) {\n   })\n }\n \n-function resolvePluginEntries (id) {\n-  const dirName = path.isAbsolute(id) ? id : path.dirname(require.resolve(id))\n+function resolvePluginEntries (id, context) {\n+  let dirName = ''\n+\n+  if (path.isAbsolute(id)) {\n+    dirName = id\n+  } else if (id.startsWith('~/')) {\n+    dirName = path.join(context, id.replace(/^~\\//, ''))\n+  } else {\n+    dirName = path.dirname(require.resolve(id))\n+  }\n \n   const entryPath = entry => {\n     const filePath = path.resolve(dirName, entry)",
    "output": "feat: support local plugins (#22)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 60ff801..37148d1 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -12,7 +12,7 @@ export default {\n   functional: true,\n \n   props: {\n-    src: { type: Object },\n+    src: { type: [Object, String] },\n     width: { type: String },\n     alt: { type: String },\n     immediate: { type: true },\n@@ -30,12 +30,27 @@ export default {\n \n   render: (h, { data, props, parent }) => {\n     const isDev = process.env.NODE_ENV === 'development'\n-    const { src, srcset, sizes, size, dataUri } = props.src\n     const isLazy = typeof props.immediate === 'undefined'\n     const classNames = (data.class || []).concat(['g-image'])\n     const noscriptClass = classNames.slice()\n     const res = []\n \n+    let src = ''\n+    let sizes = ''\n+    let dataUri = ''\n+    let srcset = []\n+    let size = { width: undefined }\n+\n+    if (typeof props.src === 'string') {\n+      src = props.src\n+    } else {\n+      src = props.src.src\n+      srcset = props.src.srcset\n+      sizes = props.src.sizes\n+      size = props.src.size\n+      dataUri = props.src.dataUri\n+    }\n+\n     const ref = data.ref || `__image_${uid++}`\n     const key = data.key || isDev ? ref : undefined\n \ndiff --git a/gridsome/lib/webpack/modules/image.js b/gridsome/lib/webpack/modules/image.js\nindex 90379bf..c657082 100644\n--- a/gridsome/lib/webpack/modules/image.js\n+++ b/gridsome/lib/webpack/modules/image.js\n@@ -1,3 +1,5 @@\n+const isUrl = require('is-url')\n+\n module.exports = () => ({\n   postTransformNode (node) {\n     if (node.tag === 'g-image') {\n@@ -6,9 +8,11 @@ module.exports = () => ({\n           if (!isStatic(attr.value)) return\n \n           const value = extractValue(attr.value)\n-          const query = createOptionsQuery(node.attrs)\n \n-          attr.value = `require(\"!!image-loader?${query}!${value}\")`\n+          if (!isUrl(value)) {\n+            const query = createOptionsQuery(node.attrs)\n+            attr.value = `require(\"!!image-loader?${query}!${value}\")`\n+          }\n \n           return\n         }",
    "output": "fix: lazy load external image urls"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex d2ddeca..f48f1d0 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -26,7 +26,7 @@ class RemarkTransformer {\n \n   constructor (options, { localOptions, context, nodeCache, queue }) {\n     this.options = options\n-    this.localOptions = this.localOptions\n+    this.localOptions = localOptions\n     this.context = context\n     this.nodeCache = nodeCache\n     this.queue = queue",
    "output": "fix: use local remark options"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex b3345b1..9e95c93 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -4,6 +4,7 @@ const camelCase = require('camelcase')\n const dateFormat = require('dateformat')\n const slugify = require('@sindresorhus/slugify')\n const { mapKeys, cloneDeep, deepMerge } = require('lodash')\n+const { warn } = require('../utils/log')\n \n class ContentTypeCollection extends EventEmitter {\n   constructor (store, pluginStore, options) {\n@@ -41,8 +42,12 @@ class ContentTypeCollection extends EventEmitter {\n       mimeTypes[mimeType] = this._pluginStore._transformers[mimeType]\n     }\n \n-    this.collection.insert(node)\n-    this.emit('change', node)\n+    try {\n+      this.collection.insert(node)\n+      this.emit('change', node)\n+    } catch (err) {\n+      warn(`Skipping duplicate path for ${node.path}`, this.typeName)\n+    }\n \n     return node\n   }\ndiff --git a/gridsome/lib/utils/log.js b/gridsome/lib/utils/log.js\nnew file mode 100644\nindex 0000000..f678841\n--- /dev/null\n+++ b/gridsome/lib/utils/log.js\n@@ -0,0 +1,21 @@\n+const chalk = require('chalk')\n+\n+exports.log = function (message, tag) {\n+  log('log', null, message, tag)\n+}\n+\n+exports.warn = function (message, tag) {\n+  log('warn', 'yellow', message, tag)\n+}\n+\n+exports.error = function (message, tag) {\n+  log('error', 'red', message, tag)\n+}\n+\n+\n+function log (type, color, message, tag) {\n+  const formatted = color ? chalk[color](message) : message\n+  const fn = console[type]\n+  \n+  tag ? fn(tag, '>', formatted) : fn(format)\n+}",
    "output": "fix(store): warn and skip when duplicate path detected"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/README.md b/README.md\nindex 340a947..9f8b8cd 100644\n--- a/README.md\n+++ b/README.md\n@@ -76,7 +76,7 @@ Install [Node.js 8.3](https://nodejs.org/en/download/) or higher and [Yarn](http\n 1. Clone this repository.\n 2. Create a new Gridsome project inside the `/projects` folder.\n 3. Enter the new project folder and run `yarn` (or `lerna bootstrap` if installed).\n-4. The project will now use the local packages when you run `gridsome develop`\n+4. The project will now use the local packages when you run `gridsome develop`.\n \n To use `@gridsome/cli` in the repo as a global command. Enter the `/packages/cli` folder and run `npm link`.\n \ndiff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex e84f617..30b6213 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -96,10 +96,10 @@ class App {\n   }\n \n   async createSchema () {\n+    const graphql = require('../graphql/graphql')\n+\n     this.schema = createSchema(this.store, {\n-      schemas: await this.dispatch('createSchema', () => ({\n-        graphql: this.graphql\n-      }))\n+      schemas: await this.dispatch('createSchema', () => graphql)\n     })\n   }\n ",
    "output": "fix: send graphql to createSchema api"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-faker/index.js b/packages/source-faker/index.js\nindex 5c84cc2..7f3ae3f 100644\n--- a/packages/source-faker/index.js\n+++ b/packages/source-faker/index.js\n@@ -1,46 +1,28 @@\n const faker = require('faker')\n \n-class FakerSource {\n-  static defaultOptions () {\n-    return {\n-      numNodes: 500,\n-      typeName: 'Faker'\n-    }\n-  }\n-\n-  constructor (api, options) {\n-    this.api = api\n-    this.options = options\n-\n-    api.loadSource(store => this.createFakerNodes(store))\n-  }\n-\n-  createFakerNodes ({ addContentType }) {\n+module.exports = function (api, options) {\n+  api.loadSource(({ addContentType, slugify }) => {\n     const contentType = addContentType({\n-      typeName: this.options.typeName,\n+      typeName: options.typeName,\n       route: '/:year/:month/:day/:slug'\n     })\n \n-    for (let i = 0; i < this.options.numNodes; i++) {\n+    for (let i = 0; i < options.numNodes; i++) {\n       const random = faker.random.number({ min: 3, max: 6 })\n       const title = faker.lorem.sentence(random).slice(0, -1)\n-      const created = faker.date.past(10)\n-      const updated = faker.date.between(created, new Date())\n \n       const options = {\n         title,\n         id: faker.random.uuid(),\n-        slug: this.source.slugify(title),\n-        created: created,\n-        updated: updated,\n+        slug: slugify(title),\n+        date: faker.date.past(10),\n+        excerpt: faker.lorem.sentences(2),\n+        content: faker.lorem.paragraphs(10),\n         fields: {\n           author: faker.name.findName(),\n-          date: faker.date.recent(),\n           thumbnail: faker.image.people(),\n           email: faker.internet.exampleEmail(),\n-          avatar: faker.image.avatar(),\n-          excerpt: faker.lorem.sentences(2),\n-          content: faker.lorem.paragraphs(10)\n+          avatar: faker.image.avatar()\n         }\n       }\n \n@@ -50,7 +32,10 @@ class FakerSource {\n         this.logger.warn(err.message)\n       }\n     }\n-  }\n+  })\n }\n \n-module.exports = FakerSource\n+module.exports.defaultOptions = () => ({\n+  numNodes: 500,\n+  typeName: 'Faker'\n+})",
    "output": "refactor(faker): function style plugin example"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex e9a493e..9a69509 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -11,9 +11,10 @@ class PluginAPI {\n     this.transformers = transformers || mapValues(app.config.transformers, entry => {\n       return new entry.TransformerClass(entry.options, {\n         localOptions: options[entry.name] || {},\n+        context: app.context,\n         queue: app.queue,\n-        nodeCache,\n-        cache\n+        cache,\n+        nodeCache\n       })\n     })\n ",
    "output": "fix: send context to transformer"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/App.js b/gridsome/lib/app/App.js\nindex 9ab83a9..45e3673 100644\n--- a/gridsome/lib/app/App.js\n+++ b/gridsome/lib/app/App.js\n@@ -12,6 +12,7 @@ const createRoutes = require('./createRoutes')\n const { execute, graphql } = require('../graphql/graphql')\n const { version } = require('../../package.json')\n \n+\n class App {\n   constructor (context, options) {\n     process.GRIDSOME = this\n@@ -70,8 +71,6 @@ class App {\n     this.plugins.on('generateRoutes', () => {\n       this.generateFiles()\n     })\n-\n-    // return this.plugins.callHook('init')\n   }\n \n   async loadSources () {\n@@ -79,11 +78,9 @@ class App {\n   }\n \n   async createSchema () {\n-    // const queries = await this.plugins.callHook('createSchemaQueries', {\n-    //   store: this.store\n-    // })\n-\n-    this.schema = createSchema(this.store)\n+    this.schema = createSchema(this.store, {\n+      schemas: await this.dispatch('createSchema', { graphql })\n+    })\n   }\n \n   generateFiles () {\ndiff --git a/gridsome/lib/app/ContentTypeCollection.js b/gridsome/lib/app/ContentTypeCollection.js\nindex f46c3c2..95ffde9 100644\n--- a/gridsome/lib/app/ContentTypeCollection.js\n+++ b/gridsome/lib/app/ContentTypeCollection.js\n@@ -26,7 +26,7 @@ class ContentTypeCollection extends EventEmitter {\n     this.options.refs[camelCase(fieldName)] = options\n   }\n \n-  addGraphQLField (fieldName, options) {\n+  addSchemaField (fieldName, options) {\n     this.options.fields[camelCase(fieldName)] = options\n   }\n \ndiff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex 446947b..e9a493e 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -29,6 +29,9 @@ class PluginAPI {\n   loadSource (handler) {\n     this.on('loadSource', handler)\n   }\n+\n+  createSchema (handler) {\n+    this.on('createSchema', handler)\n   }\n \n   chainWebpack (fn) {\ndiff --git a/gridsome/lib/graphql/createSchema.js b/gridsome/lib/graphql/createSchema.js\nindex d508b00..898d84a 100644\n--- a/gridsome/lib/graphql/createSchema.js\n+++ b/gridsome/lib/graphql/createSchema.js\n@@ -3,16 +3,15 @@ const {\n   GraphQLObjectType\n } = require('./graphql')\n \n-module.exports = (store, options = {}) => {\n+module.exports = store => {\n   const directives = require('./schema/directives')\n   const pagesSchema = require('./schema/pages')()\n   const nodesSchema = require('./schema/nodes')(store)\n \n-  return new GraphQLSchema({\n+  const schema = new GraphQLSchema({\n     query: new GraphQLObjectType({\n       name: 'RootQuery',\n       fields: {\n-        ...options.queries,\n         ...pagesSchema.queries,\n         ...nodesSchema.queries,\n         ...pagesSchema.connections,\n@@ -21,4 +20,10 @@ module.exports = (store, options = {}) => {\n     }),\n     directives\n   })\n+\n+  // TODO: merge schemas once query directives are working in\n+  // graphql-tools or Gridsome has found another way to figure out\n+  // pagination etc...\n+\n+  return schema\n }",
    "output": "feat(graphql): createSchema api [wip]"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginsRunner.js b/gridsome/lib/app/PluginsRunner.js\nindex aabef59..a258658 100644\n--- a/gridsome/lib/app/PluginsRunner.js\n+++ b/gridsome/lib/app/PluginsRunner.js\n@@ -20,7 +20,11 @@ class Plugins extends EventEmitter {\n \n       const transformers = mapValues(app.config.transformers, entry => {\n         return new entry.TransformerClass(entry.options, {\n-          queue, cache, nodeCache, localOptions: options[entry.name] || {}\n+          localOptions: options[entry.name] || {},\n+          context,\n+          queue,\n+          cache,\n+          nodeCache\n         })\n       })\n ",
    "output": "fix: send context to transofmers"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/lib/plugins/image.js b/packages/transformer-remark/lib/plugins/image.js\nindex 022bcdd..0ec6ef1 100644\n--- a/packages/transformer-remark/lib/plugins/image.js\n+++ b/packages/transformer-remark/lib/plugins/image.js\n@@ -12,7 +12,7 @@ module.exports = function attacher () {\n \n     if (path.isAbsolute(node.internal.origin)) {\n       visit(tree, 'image', node => {\n-        if (!isUrl(node.url)) images.push(node)\n+        if (isLocalPath(node.url)) images.push(node)\n       })\n     }\n \n@@ -38,3 +38,8 @@ module.exports = function attacher () {\n     callback()\n   }\n }\n+\n+function isLocalPath (string) {\n+  if (/^\\//.test(string)) return false\n+  return !isUrl(string)\n+}",
    "output": "fix(transformer-remark): dont process relative image urls"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 2401186..ac02f65 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -63,6 +63,13 @@ class RemarkTransformer {\n   parse (source) {\n     const file = parse(source)\n \n+    // if no title was found by gray-matter,\n+    // try to find the first one in the content\n+    if (!file.data.title) {\n+      const title = file.content.trim().match(/^#+\\s+(.*)/)\n+      if (title) file.data.title = title[1]\n+    }\n+\n     return {\n       fields: file.data,\n       content: file.content,",
    "output": "fix(transformer-remark): title fallback"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/ImageProcessQueue.spec.js b/gridsome/__tests__/ImageProcessQueue.spec.js\nindex 7e8d56b..8fbc98b 100644\n--- a/gridsome/__tests__/ImageProcessQueue.spec.js\n+++ b/gridsome/__tests__/ImageProcessQueue.spec.js\n@@ -79,6 +79,27 @@ test('set custom quality', async () => {\n   expect(result.src).toEqual('/assets/static/1000x600-w1000-q10.test.png')\n })\n \n+test('add custom attributes to markup', async () => {\n+  const filePath = path.resolve(__dirname, 'assets/1000x600.png')\n+  const queue = new ImageProcessQueue({ context, config: baseconfig })\n+\n+  const result = await queue.add(filePath, {\n+    classNames: ['test-1', 'test-2'],\n+    alt: 'Alternative text',\n+    height: '100'\n+  })\n+\n+  expect(result.imageHTML).toMatch(/test-1/)\n+  expect(result.imageHTML).toMatch(/test-2/)\n+  expect(result.imageHTML).toMatch(/height=\\\"100\\\"/)\n+  expect(result.imageHTML).toMatch(/alt=\\\"Alternative text\\\"/)\n+\n+  expect(result.noscriptHTML).toMatch(/test-1/)\n+  expect(result.noscriptHTML).toMatch(/test-2/)\n+  expect(result.noscriptHTML).toMatch(/height=\\\"100\\\"/)\n+  expect(result.noscriptHTML).toMatch(/alt=\\\"Alternative text\\\"/)\n+})\n+\n test('respect config.maxImageWidth', async () => {\n   const filePath = path.resolve(__dirname, 'assets/1000x600.png')\n   const config = { ...baseconfig, maxImageWidth: 600 }\ndiff --git a/gridsome/lib/app/ImageProcessQueue.js b/gridsome/lib/app/ImageProcessQueue.js\nindex c413034..00f976f 100644\n--- a/gridsome/lib/app/ImageProcessQueue.js\n+++ b/gridsome/lib/app/ImageProcessQueue.js\n@@ -136,7 +136,7 @@ class ProcessQueue {\n       sets\n     }\n \n-    const classNames = ['g-image']\n+    const classNames = (options.classNames || []).concat(['g-image'])\n     const isSrcset = options.srcset !== false\n     const isLazy = options.immediate === undefined\n \n@@ -152,7 +152,9 @@ class ProcessQueue {\n       result.noscriptHTML = '' +\n         `<noscript>` +\n         `<img class=\"${classNames.join(' ')} g-image--loaded\" ` +\n-        `src=\"${result.src}\" width=\"${result.size.width}\">` +\n+        `src=\"${result.src}\" width=\"${result.size.width}\"` +\n+        (options.height ? ` height=\"${options.height}\"` : '') +\n+        (options.alt ? ` alt=\"${options.alt}\">` : '>') +\n         `</noscript>`\n     }\n \n@@ -160,6 +162,8 @@ class ProcessQueue {\n       `<img class=\"${classNames.join(' ')}\" ` +\n       `src=\"${isLazy ? result.dataUri || result.src : result.src}\" ` +\n       `width=\"${result.size.width}\"` +\n+      (options.height ? ` height=\"${options.height}\"` : '') +\n+      (options.alt ? ` alt=\"${options.alt}\"` : '') +\n       (isLazy && isSrcset ? ` data-srcset=\"${result.srcset.join(', ')}\"` : '') +\n       (isLazy && isSrcset ? ` data-sizes=\"${result.sizes}\"` : '') +\n       (isLazy && isSrcset ? ` data-src=\"${result.src}\">` : '>')",
    "output": "fix(image): add more attributes to markup"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 63ae5f3..7d268c3 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -21,10 +21,6 @@ module.exports = async (context, args) => {\n   await fs.ensureDir(config.cacheDir)\n   await fs.remove(config.outDir)\n \n-  if (fs.existsSync(config.staticDir)) {\n-    await fs.copy(config.staticDir, config.targetDir)\n-  }\n-\n   const queue = await createRenderQueue(app)\n \n   // 1. run all GraphQL queries and save results into json files\n@@ -42,7 +38,12 @@ module.exports = async (context, args) => {\n   await plugins.callHook('beforeProcessImages', { context, config, queue: app.queue })\n   await processImages(app.queue, config)\n \n-  // 5. clean up\n+  // 5. copy static files\n+  if (fs.existsSync(config.staticDir)) {\n+    await fs.copy(config.staticDir, config.targetDir)\n+  }\n+\n+  // 6. clean up\n   await plugins.callHook('afterBuild', { context, config, queue })\n   await fs.remove(path.resolve(config.cacheDir, 'data'))\n   await fs.remove(config.manifestsDir)\ndiff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex e250fa9..b0f354b 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -25,8 +25,8 @@ module.exports = async (context, args) => {\n     playground({ endpoint: server.endpoint.graphql })\n   )\n \n-  server.app.use(require('connect-history-api-fallback')())\n   server.app.use(config.pathPrefix, express.static(config.staticDir))\n+  server.app.use(require('connect-history-api-fallback')())\n \n   const webpackConfig = createWebpackConfig()\n   const compiler = require('webpack')(webpackConfig)",
    "output": "fix: prioritize static files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 64589b1..63ae5f3 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -44,6 +44,7 @@ module.exports = async (context, args) => {\n \n   // 5. clean up\n   await plugins.callHook('afterBuild', { context, config, queue })\n+  await fs.remove(path.resolve(config.cacheDir, 'data'))\n   await fs.remove(config.manifestsDir)\n \n   console.log()",
    "output": "fix(build): clear cached data files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 817535e..64589b1 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -61,7 +61,8 @@ const {\n async function createRenderQueue ({ router, config, graphql }) {\n   const createPage = (page, currentPage = 1) => {\n     const isPager = currentPage > 1\n-    const fullPath = isPager ? `${page.path}/${currentPage}` : page.path\n+    const pagePath = page.path.replace(/\\/+$/, '')\n+    const fullPath = isPager ? `${pagePath}/${currentPage}` : page.path\n     const { route } = router.resolve(fullPath)\n     const { query } = page.pageQuery\n     const routePath = trim(route.path, '/')",
    "output": "fix(build): use correct path for pagination"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 314ab1b..4838f71 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -10,14 +10,33 @@ class FilesystemSource {\n     return {\n       path: undefined,\n       route: undefined,\n-      type: 'node',\n       refs: {},\n       index: ['index'],\n-      typeName: 'Filesystem'\n+      typeName: 'FileNode'\n     }\n   }\n \n   constructor (options, { context, source }) {\n+    // TODO: remove this before v1.0\n+    if (options.type) {\n+      if (options.typeName === 'FileNode') {\n+        source.typeName = 'Filesystem'\n+        options.typeName = 'Filesystem'\n+      }\n+\n+      const typeName = source.makeTypeName(options.type)\n+\n+      console.log(\n+        `The 'type' option for @gridsome/source-filesystem is ` +\n+        `deprecated. Use the 'typeName' option to set the GrahpQL ` +\n+        `node type and template name instead. Change 'typeName' from ` +\n+        `'${options.typeName}' to '${typeName}' in your ` +\n+        `gridsome.config.js\\n`\n+      )\n+    } else {\n+      options.type = ''\n+    }\n+\n     this.options = options\n     this.context = context\n     this.source = source",
    "output": "feat(source-filesystem): remove type option"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex 0756697..2ef636c 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -23,16 +23,12 @@ class ContentfulSource {\n       space, accessToken, environment, host\n     })\n \n-    const cache = { contentTypes: {} }\n+    const refs = {}\n+    const cache = { contentTypes: {}}\n     const { items: contentTypes } = await client.getContentTypes()\n \n-    let refs\n-\n-    // api.service.info(`Content types (${contentTypes.length})`, namespace)\n-\n     for (const contentType of contentTypes) {\n       // filter out fields which are not references\n-\n       const fields = contentType.fields.filter(({ type, items }) => {\n         if (items) return items.type !== 'Link'\n         return type !== 'Link'\n@@ -40,7 +36,7 @@ class ContentfulSource {\n \n       // get all reference fields\n       // TODO: include Asset references\n-      refs = contentType.fields.filter(({ items }) => {\n+      refs[contentType.sys.id] = contentType.fields.filter(({ items }) => {\n         return items && items.type === 'Link' && items.linkType === 'Entry'\n       })\n \n@@ -55,7 +51,7 @@ class ContentfulSource {\n     for (const contentType of contentTypes) {\n       this.source.addType(contentType.name, {\n         name: contentType.name,\n-        refs: refs.reduce((refs, field) => {\n+        refs: refs[contentType.sys.id].reduce((refs, field) => {\n           refs[field.id] = {\n             key: '_id',\n             type: field.items.validations.reduce((types, { linkContentType }) => {\n@@ -78,7 +74,7 @@ class ContentfulSource {\n       const { contentType, fields, refs } = cache.contentTypes[id]\n \n       // TODO: let user choose which field contains the slug\n-      \n+\n       this.source.addNode(contentType.name, {\n         _id: this.source.makeUid(item.sys.id),\n         title: item.fields[contentType.displayField],\n@@ -92,7 +88,7 @@ class ContentfulSource {\n           return fields\n         }, {}),\n \n-        refs: refs.reduce((refs, { id }) => {\n+        refs: refs[contentType.sys.id].reduce((refs, { id }) => {\n           if (!item.fields[id]) return refs\n \n           refs[id] = item.fields[id].map(item => {\ndiff --git a/packages/source-contentful/lib/resolve-type.js b/packages/source-contentful/lib/resolve-type.js\ndeleted file mode 100644\nindex 7051011..0000000\n--- a/packages/source-contentful/lib/resolve-type.js\n+++ /dev/null\n@@ -1,16 +0,0 @@\n-function resolveType (field, graphql) {\n-  switch (field.type) {\n-    case 'Array' : return resolveListType(field.items, graphql)\n-    case 'Number' : return graphql.GraphQLFloat\n-    case 'Integer' : return graphql.GraphQLInt\n-    case 'Boolean' : return graphql.GraphQLBoolean\n-  }\n-\n-  return graphql.GraphQLString\n-}\n-\n-function resolveListType (field, graphql) {\n-  return new graphql.GraphQLList(resolveType(field, graphql))\n-}\n-\n-module.exports = resolveType",
    "output": "fix(source-contentful): use correct refs"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex d2ab551..0756697 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -23,13 +23,16 @@ class ContentfulSource {\n       space, accessToken, environment, host\n     })\n \n-    const cache = { contentTypes: {}}\n+    const cache = { contentTypes: {} }\n     const { items: contentTypes } = await client.getContentTypes()\n \n+    let refs\n+\n     // api.service.info(`Content types (${contentTypes.length})`, namespace)\n \n     for (const contentType of contentTypes) {\n       // filter out fields which are not references\n+\n       const fields = contentType.fields.filter(({ type, items }) => {\n         if (items) return items.type !== 'Link'\n         return type !== 'Link'\n@@ -37,7 +40,7 @@ class ContentfulSource {\n \n       // get all reference fields\n       // TODO: include Asset references\n-      const refs = contentType.fields.filter(({ items }) => {\n+      refs = contentType.fields.filter(({ items }) => {\n         return items && items.type === 'Link' && items.linkType === 'Entry'\n       })\n \n@@ -47,7 +50,9 @@ class ContentfulSource {\n         fields,\n         refs\n       }\n+    }\n \n+    for (const contentType of contentTypes) {\n       this.source.addType(contentType.name, {\n         name: contentType.name,\n         refs: refs.reduce((refs, field) => {\n@@ -73,7 +78,7 @@ class ContentfulSource {\n       const { contentType, fields, refs } = cache.contentTypes[id]\n \n       // TODO: let user choose which field contains the slug\n-\n+      \n       this.source.addNode(contentType.name, {\n         _id: this.source.makeUid(item.sys.id),\n         title: item.fields[contentType.displayField],",
    "output": "fix(souce-contentful): define all types before creating nodes (#15)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/createRoutes.js b/gridsome/lib/app/createRoutes.js\nindex 90eb9eb..31b69d7 100644\n--- a/gridsome/lib/app/createRoutes.js\n+++ b/gridsome/lib/app/createRoutes.js\n@@ -44,6 +44,13 @@ module.exports = store => {\n \n   templates.forEach(page => {\n     const typeName = page.pageQuery.type\n+\n+    if (!store.types.hasOwnProperty(typeName)) {\n+      return console.info(\n+        `No content type was found for ${page.internal.origin}`\n+      )\n+    }\n+\n     const contentType = store.types[typeName]\n     const collection = store.collections[typeName]\n     const { component, pageQuery } = page",
    "output": "fix: don\u2019t create routes for missing content types"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/dev.js b/gridsome/app/page-query/dev.js\nindex de75bba..70bde81 100644\n--- a/gridsome/app/page-query/dev.js\n+++ b/gridsome/app/page-query/dev.js\n@@ -30,13 +30,14 @@ export default ({ options }) => {\n   if (options.__pageQueryDev) return\n \n   const merge = Vue.config.optionMergeStrategies\n+  const slash = string => string.replace(/\\\\+/g, '/')\n \n   options.mounted = merge.mounted([function () {\n-    active[options.__file] = { options, vm: this }\n+    active[slash(options.__file)] = { options, vm: this }\n   }], options.mounted)\n \n   options.beforeDestroy = merge.beforeDestroy([function () {\n-    delete active[options.__file]\n+    delete active[slash(options.__file)]\n   }], options.beforeDestroy)\n \n   options.__pageQueryDev = true",
    "output": "fix: forward slash component file path"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/source-vue/index.js b/gridsome/lib/plugins/source-vue/index.js\nindex 82a2c64..0568dc6 100644\n--- a/gridsome/lib/plugins/source-vue/index.js\n+++ b/gridsome/lib/plugins/source-vue/index.js\n@@ -1,5 +1,6 @@\n const path = require('path')\n const glob = require('globby')\n+const slash = require('slash')\n const crypto = require('crypto')\n const chokidar = require('chokidar')\n const { createPagePath, parseComponent } = require('./lib/utils')\n@@ -30,9 +31,9 @@ class VueSource {\n         cwd: this.context\n       })\n \n-      watcher.on('add', file => this.addPage(file))\n-      watcher.on('unlink', file => this.source.removePage(createId(file)))\n-      watcher.on('change', file => this.updatePage(file))\n+      watcher.on('add', file => this.addPage(slash(file)))\n+      watcher.on('unlink', file => this.source.removePage(createId(slash(file))))\n+      watcher.on('change', file => this.updatePage(slash(file)))\n     }\n   }\n ",
    "output": "fix: hot reload page-query in windows"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 66b6ae4..314ab1b 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -1,6 +1,7 @@\n const path = require('path')\n const fs = require('fs-extra')\n const glob = require('globby')\n+const slash = require('slash')\n const chokidar = require('chokidar')\n const { mapValues } = require('lodash')\n \n@@ -74,17 +75,17 @@ class FilesystemSource {\n \n       // TODO: update nodes when changed\n       watcher.on('add', file => {\n-        const node = this.createNode(file)\n+        const node = this.createNode(slash(file))\n         this.source.addNode(options.type, node)\n       })\n \n       watcher.on('unlink', file => {\n-        const id = this.source.makeUid(file)\n+        const id = this.source.makeUid(slash(file))\n         this.source.removeNode(options.type, id)\n       })\n \n       watcher.on('change', file => {\n-        const node = this.createNode(file)\n+        const node = this.createNode(slash(file))\n         this.source.updateNode(options.type, node._id, node)\n       })\n     }\n@@ -127,7 +128,7 @@ class FilesystemSource {\n     if (this.options.route) return\n \n     const { dir, name } = path.parse(file)\n-    const segments = dir.split(path.sep).map(s => this.source.slugify(s))\n+    const segments = dir.split('/').map(s => this.source.slugify(s))\n \n     if (!this.options.index.includes(name)) {\n       segments.push(this.source.slugify(name))\ndiff --git a/packages/source-filesystem/package.json b/packages/source-filesystem/package.json\nindex 17132a9..d1109b4 100644\n--- a/packages/source-filesystem/package.json\n+++ b/packages/source-filesystem/package.json\n@@ -14,7 +14,8 @@\n     \"chokidar\": \"^2.0.4\",\n     \"fs-extra\": \"^7.0.0\",\n     \"globby\": \"^8.0.1\",\n-    \"lodash\": \"^4.17.10\"\n+    \"lodash\": \"^4.17.10\",\n+    \"slash\": \"^2.0.0\"\n   },\n   \"publishConfig\": {\n     \"access\": \"public\"",
    "output": "fix: hot reload filesystem sources in windows"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/loaders/page-query.js b/gridsome/lib/webpack/loaders/page-query.js\nindex 7798a32..6dbf28f 100644\n--- a/gridsome/lib/webpack/loaders/page-query.js\n+++ b/gridsome/lib/webpack/loaders/page-query.js\n@@ -1,9 +1,12 @@\n+const path = require('path')\n const validateQuery = require('../../graphql/utils/validateQuery')\n \n module.exports = function (source, map) {\n   const isDev = process.env.NODE_ENV === 'development'\n   const isServing = process.env.GRIDSOME_MODE === 'serve'\n   const { schema, config } = process.GRIDSOME\n+  const pageQueryPath = path.join(config.appPath, 'page-query')\n+  const pageQueryDevPath = path.join(pageQueryPath, 'dev')\n \n   try {\n     const errors = validateQuery(schema, source)\n@@ -15,12 +18,12 @@ module.exports = function (source, map) {\n     return this.callback(err, source, map)\n   }\n \n-  this.dependency(`${config.appPath}/page-query/index.js`)\n-  this.dependency(`${config.appPath}/page-query/dev.js`)\n+  this.dependency(path.join(config.appPath, 'page-query', 'index.js'))\n+  this.dependency(path.join(config.appPath, 'page-query', 'dev.js'))\n \n   this.callback(null, `\n-    import initPageQuery from '${config.appPath}/page-query'\n-    ${isDev && `import initDevQuery from '${config.appPath}/page-query/dev'`}\n+    import initPageQuery from ${JSON.stringify(pageQueryPath)}\n+    ${isDev && `import initDevQuery from ${JSON.stringify(pageQueryDevPath)}`}\n \n     const query = ${isServing ? JSON.stringify(source) : 'undefined'}\n \ndiff --git a/gridsome/lib/webpack/loaders/static-query.js b/gridsome/lib/webpack/loaders/static-query.js\nindex 7f4b5b5..2e3fcbd 100644\n--- a/gridsome/lib/webpack/loaders/static-query.js\n+++ b/gridsome/lib/webpack/loaders/static-query.js\n@@ -1,16 +1,17 @@\n-// const { parse } = require('../../graphql/graphql')\n+const path = require('path')\n const validateQuery = require('../../graphql/utils/validateQuery')\n \n module.exports = async function (source, map) {\n   const { config, schema, graphql } = process.GRIDSOME\n+  const staticQueryPath = path.join(config.appPath, 'static-query')\n   const callback = this.async()\n \n-  this.dependency(`${config.appPath}/static-query/index.js`)\n+  this.dependency(path.join(config.appPath, 'static-query', 'index.js'))\n \n   // add dependency to now.js to re-run\n   // this loader when store has changed\n   if (process.env.NODE_ENV === 'development') {\n-    this.dependency(`${config.tmpDir}/now.js`)\n+    this.dependency(path.join(config.tmpDir, 'now.js'))\n   }\n \n   try {\n@@ -26,7 +27,7 @@ module.exports = async function (source, map) {\n   const { data } = await graphql(source)\n \n   callback(null, `\n-    import initStaticQuery from '${config.appPath}/static-query'\n+    import initStaticQuery from ${JSON.stringify(staticQueryPath)}\n \n     const data = ${JSON.stringify(data)}\n ",
    "output": "fix: make paths in loaders work in windows"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex ded0dc4..817535e 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -18,6 +18,7 @@ module.exports = async (context, args) => {\n   const { config, graphql, plugins } = app\n \n   await plugins.callHook('beforeBuild', { context, config })\n+  await fs.ensureDir(config.cacheDir)\n   await fs.remove(config.outDir)\n \n   if (fs.existsSync(config.staticDir)) {\ndiff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex df14e6d..e250fa9 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -18,6 +18,7 @@ module.exports = async (context, args) => {\n   const sock = await createSockJsServer(app)\n \n   await fs.remove(config.cacheDir)\n+  await fs.ensureDir(config.cacheDir)\n \n   server.app.get(\n     server.endpoint.explore,\ndiff --git a/gridsome/lib/serve.js b/gridsome/lib/serve.js\nindex db7d94d..c00b795 100644\n--- a/gridsome/lib/serve.js\n+++ b/gridsome/lib/serve.js\n@@ -14,6 +14,7 @@ module.exports = async (context, args) => {\n   const { config, plugins } = app\n \n   await plugins.callHook('beforeServe', { context, config })\n+  await fs.ensureDir(config.cacheDir)\n   await fs.remove(config.outDir)\n \n   const server = await createExpressServer(app)",
    "output": "fix: ensure cache dir exists"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/index.js b/gridsome/index.js\nindex 8e6f4ba..916e58f 100644\n--- a/gridsome/index.js\n+++ b/gridsome/index.js\n@@ -40,7 +40,7 @@ function wrapCommand (fn) {\n   return (...args) => {\n     return fn(...args).catch(err => {\n       console.error(chalk.red(err.stack))\n-      process.exit(1)\n+      process.exitCode = 1\n     })\n   }\n }\ndiff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex d0ede05..ded0dc4 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -171,27 +171,25 @@ async function renderHTML (queue, config) {\n \n   const { htmlTemplate, clientManifestPath, serverBundlePath } = config\n \n-  const onError = err => {\n-    worker.end()\n-    throw err\n-  }\n-\n-  await Promise.all(chunks.map(chunk => {\n-    // reduce amount of data sent to worker\n-    const pages = chunk.map(page => ({\n+  await Promise.all(chunks.map(async queue => {\n+    const pages = queue.map(page => ({\n       path: page.path,\n       htmlOutput: page.htmlOutput,\n       dataOutput: page.dataOutput\n     }))\n \n-    return worker\n-      .render({\n+    try {\n+      await worker.render({\n         pages,\n         htmlTemplate,\n         clientManifestPath,\n         serverBundlePath\n-      }).catch(onError)\n-  })).catch(onError)\n+      })\n+    } catch (err) {\n+      worker.end()\n+      throw err\n+    }\n+  }))\n \n   worker.end()\n \n@@ -204,13 +202,17 @@ async function processImages (queue, { outDir, minProcessImageWidth }) {\n   const worker = createWorker('image-processor')\n   const totalAssets = queue.queue.length\n \n-  await Promise.all(chunks.map(queue => {\n-    return worker\n-      .process({ queue, outDir, minWidth: minProcessImageWidth })\n-      .catch(err => {\n-        worker.end()\n-        throw err\n+  await Promise.all(chunks.map(async queue => {\n+    try {\n+      await worker.process({\n+        queue,\n+        outDir,\n+        minWidth: minProcessImageWidth\n       })\n+    } catch (err) {\n+      worker.end()\n+      throw err\n+    }\n   }))\n \n   worker.end()",
    "output": "fix(build): show error stack form render failures"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 32ec047..db85484 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -20,6 +20,8 @@ module.exports = async (name, starter = 'default') => {\n   }\n \n   const url = `https://github.com/${starter}.git`\n+  const developCommand = 'gridsome develop'\n+  const buildCommand = 'gridsome build'\n \n   const tasks = new Tasks([\n     {\n@@ -89,8 +91,15 @@ module.exports = async (name, starter = 'default') => {\n \n           child.on('close', code => {\n             if (code !== 0) {\n-              reject(`Command failed: ${command} ${args.join(' ')}`)\n-              return\n+              return reject(\n+                new Error(\n+                  `Failed to install dependencies with ${command}. ` +\n+                  `Please enter ${chalk.cyan(name)} directory and ` +\n+                  `install dependencies with yarn or npm manually. ` +\n+                  `Then run ${chalk.cyan(developCommand)} to start ` +\n+                  `local development.\\n\\n    Exit code ${code}`\n+                )\n+              )\n             }\n \n             resolve()\n@@ -103,13 +112,9 @@ module.exports = async (name, starter = 'default') => {\n   try {\n     await tasks.run()\n   } catch (err) {\n-    console.log()\n-    return console.log(chalk.red(err.message))\n+    throw err\n   }\n \n-  const developCommand = 'gridsome develop'\n-  const buildCommand = 'gridsome build'\n-\n   console.log()\n   console.log(`  - Enter directory ${chalk.green(`cd ${name}`)}`)\n   console.log(`  - Run ${chalk.green(developCommand)} to start local development`)",
    "output": "fix(cli): show error message if install fails #7"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/utils/helpers.js b/gridsome/app/utils/helpers.js\nindex eb14790..90d16e2 100644\n--- a/gridsome/app/utils/helpers.js\n+++ b/gridsome/app/utils/helpers.js\n@@ -9,6 +9,7 @@ export function url (string) {\n }\n \n const re = new RegExp(`^${config.pathPrefix}`)\n+const replacement = config.pathPrefix !== '/' ? '' : '/'\n export function stripPathPrefix (string) {\n-  return string.replace(re, '')\n+  return string.replace(re, replacement)\n }\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 4cf569d..bc16d9b 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -8,6 +8,7 @@ const builtInPlugins = [\n   'internal://plugins/source-vue'\n ]\n \n+// TODO: use joi to define and validate config schema\n module.exports = (context, options = {}, pkg = {}) => {\n   const resolve = (...p) => path.resolve(context, ...p)\n   const isServing = process.env.GRIDSOME_MODE === 'serve'",
    "output": "fix: replace path prefix correctly in links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 6501dc3..d0ede05 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -19,7 +19,10 @@ module.exports = async (context, args) => {\n \n   await plugins.callHook('beforeBuild', { context, config })\n   await fs.remove(config.outDir)\n-  await fs.copy(config.staticDir, config.targetDir)\n+\n+  if (fs.existsSync(config.staticDir)) {\n+    await fs.copy(config.staticDir, config.targetDir)\n+  }\n \n   const queue = await createRenderQueue(app)\n ",
    "output": "fix(build): check if static dir exists"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex e4a98f6..4cf569d 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -77,7 +77,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.stylus = {}\n   config.postcss = {}\n \n-  return config\n+  return Object.freeze(config)\n }\n \n function resolvePkg (context) {",
    "output": "fix: freeze base config object to prevent changes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/createWorker.js b/gridsome/lib/app/createWorker.js\ndeleted file mode 100644\nindex d682502..0000000\n--- a/gridsome/lib/app/createWorker.js\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-const Worker = require('jest-worker').default\n-\n-module.exports = (config, numWorkers) => {\n-  const workerPath = require.resolve('./worker')\n-\n-  return new Worker(workerPath, {\n-    numWorkers,\n-    forkOptions: {\n-      stdio: ['pipe', 'pipe', process.stderr, 'ipc']\n-    }\n-  })\n-}\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 86fae7c..e4a98f6 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -44,6 +44,7 @@ module.exports = (context, options = {}, pkg = {}) => {\n   config.chainWebpack = localConfig.chainWebpack\n   config.transformers = resolveTransformers(config.pkg, localConfig)\n   config.pathPrefix = isProd && isServing ? '/' : localConfig.pathPrefix || '/'\n+  config.staticDir = resolve('static')\n   config.outDir = resolve(localConfig.outDir || 'dist')\n   config.targetDir = path.join(config.outDir, config.pathPrefix)\n   config.assetsDir = path.join(config.targetDir, localConfig.assetsDir || 'assets')\ndiff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex ddb54bc..6501dc3 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -19,6 +19,7 @@ module.exports = async (context, args) => {\n \n   await plugins.callHook('beforeBuild', { context, config })\n   await fs.remove(config.outDir)\n+  await fs.copy(config.staticDir, config.targetDir)\n \n   const queue = await createRenderQueue(app)\n \ndiff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 54edc4f..df14e6d 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -1,5 +1,6 @@\n const fs = require('fs-extra')\n const chalk = require('chalk')\n+const express = require('express')\n const createApp = require('./app')\n const createExpressServer = require('./server/createExpressServer')\n const createSockJsServer = require('./server/createSockJsServer')\n@@ -24,6 +25,7 @@ module.exports = async (context, args) => {\n   )\n \n   server.app.use(require('connect-history-api-fallback')())\n+  server.app.use(config.pathPrefix, express.static(config.staticDir))\n \n   const webpackConfig = createWebpackConfig()\n   const compiler = require('webpack')(webpackConfig)\ndiff --git a/gridsome/lib/serve.js b/gridsome/lib/serve.js\nindex 333006f..db7d94d 100644\n--- a/gridsome/lib/serve.js\n+++ b/gridsome/lib/serve.js\n@@ -25,7 +25,8 @@ module.exports = async (context, args) => {\n     'GRAPHQL_WS_ENDPOINT': JSON.stringify(server.url.websocket)\n   })\n \n-  server.app.use(express.static(config.outDir))\n+  server.app.use(express.static(config.targetDir))\n+  server.app.use(express.static(config.staticDir))\n \n   server.app.get('*', require('./server/middlewares/renderer')(app))\n ",
    "output": "feat: dir for static files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex b43b64b..ddb54bc 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -39,7 +39,7 @@ module.exports = async (context, args) => {\n \n   // 5. clean up\n   await plugins.callHook('afterBuild', { context, config, queue })\n-  await fs.remove(path.resolve(config.outDir, config.manifestsDir))\n+  await fs.remove(config.manifestsDir)\n \n   console.log()\n   console.log(`  Done in ${buildTime(hirestime.S)}s`)",
    "output": "fix(build): use correct manifest path"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/build/createRenderQueue.js b/gridsome/lib/commands/build/createRenderQueue.js\nindex 1575efd..5171398 100644\n--- a/gridsome/lib/commands/build/createRenderQueue.js\n+++ b/gridsome/lib/commands/build/createRenderQueue.js\n@@ -11,7 +11,7 @@ const {\n module.exports = async ({ router, config, graphql }) => {\n   const createPage = (page, currentPage = 1) => {\n     const isPager = currentPage > 1\n-    const fullPath = isPager ? `${trim(page.path, '/')}/${currentPage}` : page.path\n+    const fullPath = isPager ? `${page.path}/${currentPage}` : page.path\n     const { route } = router.resolve(fullPath)\n     const { query } = page.pageQuery\n     const routePath = trim(route.path, '/')\n@@ -23,7 +23,7 @@ module.exports = async ({ router, config, graphql }) => {\n     const output = path.dirname(htmlOutput)\n \n     return {\n-      path: fullPath,\n+      path: fullPath.replace(/\\/+/g, '/'),\n       dataOutput: query ? dataOutput : null,\n       htmlOutput,\n       output,",
    "output": "fix(build): keep leading slash for paged paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 315e78e..57919ac 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -152,7 +152,7 @@ function fetchPaged (url, options = {}) {\n     })\n \n     queue.on('task_finish', (id, { data }) => {\n-      res.data.push(...ensureArrayData(data))\n+      res.data.push(...ensureArrayData(id, data))\n     })\n \n     queue.on('drain', () => {\n@@ -163,8 +163,12 @@ function fetchPaged (url, options = {}) {\n \n function ensureArrayData (url, data) {\n   if (!Array.isArray(data)) {\n-    console.error(`Failed to fetch ${url}`)\n-    return []\n+    try {\n+      data = JSON.parse(data)\n+    } catch (err) {\n+      console.error(`Failed to parse results from ${url}`)\n+      return []\n+    }\n   }\n   return data\n }",
    "output": "fix(source-wordpress): try to parse response"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/develop.js b/gridsome/lib/commands/develop.js\nindex 33ebe92..5e65082 100644\n--- a/gridsome/lib/commands/develop.js\n+++ b/gridsome/lib/commands/develop.js\n@@ -65,7 +65,11 @@ module.exports = async (context, args) => {\n     console.log()\n   })\n \n-  app.use(devMiddleware)\n+  app.use((req, res, next) => {\n+    return req.originalUrl !== endpoints.explore\n+      ? devMiddleware(req, res, next)\n+      : next()\n+  })\n \n   app.listen(port, host, err => {\n     if (err) throw err",
    "output": "fix(develop): exclude dev middleware for playground route"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 93ac54d..315e78e 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -85,7 +85,7 @@ class WordPressSource {\n         this.source.addNode(post.type, {\n           _id: makePostId(post.id),\n           title: post.title ? post.title.rendered : '',\n-          date: new Date(post.date),\n+          date: post.date ? new Date(post.date) : null,\n           slug: post.slug,\n           fields: {\n             content: post.content ? post.content.rendered : '',\n@@ -127,12 +127,14 @@ async function taskHandler (task, cb) {\n function fetchPaged (url, options = {}) {\n   return new Promise(async (resolve, reject) => {\n     const query = querystring.stringify({ per_page: options.perPage })\n-    const { data, headers } = await axios.get(`${url}?${query}`)\n-    const totalItems = parseInt(headers['x-wp-total'], 10)\n-    const totalPages = parseInt(headers['x-wp-totalpages'], 10)\n+    const res = await axios.get(`${url}?${query}`)\n+    const totalItems = parseInt(res.headers['x-wp-total'], 10)\n+    const totalPages = parseInt(res.headers['x-wp-totalpages'], 10)\n+\n+    res.data = ensureArrayData(url, res.data)\n \n     if (!totalItems || totalPages <= 1) {\n-      return resolve(data)\n+      return resolve(res.data)\n     }\n \n     const queue = new Queue(taskHandler, {\n@@ -149,14 +151,22 @@ function fetchPaged (url, options = {}) {\n       queue.destroy()\n     })\n \n-    queue.on('task_finish', (id, response) => {\n-      data.push(...response.data)\n+    queue.on('task_finish', (id, { data }) => {\n+      res.data.push(...ensureArrayData(data))\n     })\n \n     queue.on('drain', () => {\n-      resolve(data)\n+      resolve(res.data)\n     })\n   })\n }\n \n+function ensureArrayData (url, data) {\n+  if (!Array.isArray(data)) {\n+    console.error(`Failed to fetch ${url}`)\n+    return []\n+  }\n+  return data\n+}\n+\n module.exports = WordPressSource",
    "output": "fix(source-wordpress): skip non json responses"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/build/createRenderQueue.js b/gridsome/lib/commands/build/createRenderQueue.js\nindex 828cf03..1575efd 100644\n--- a/gridsome/lib/commands/build/createRenderQueue.js\n+++ b/gridsome/lib/commands/build/createRenderQueue.js\n@@ -19,10 +19,14 @@ module.exports = async ({ router, config, graphql }) => {\n     const htmlOutput = path.resolve(config.outDir, routePath, 'index.html')\n     const dataOutput = path.resolve(config.cacheDir, 'data', dataPath)\n \n+    // TODO: remove this before v1.0\n+    const output = path.dirname(htmlOutput)\n+\n     return {\n       path: fullPath,\n       dataOutput: query ? dataOutput : null,\n       htmlOutput,\n+      output,\n       query,\n       route\n     }\n@@ -35,10 +39,14 @@ module.exports = async ({ router, config, graphql }) => {\n     const htmlOutput = path.resolve(config.outDir, routePath, 'index.html')\n     const dataOutput = path.resolve(config.cacheDir, 'data', `${routePath}.json`)\n \n+    // TODO: remove this before v1.0\n+    const output = path.dirname(htmlOutput)\n+\n     return {\n       path: node.path,\n       dataOutput: query ? dataOutput : null,\n       htmlOutput,\n+      output,\n       query,\n       route\n     }\ndiff --git a/packages/plugin-critical/index.js b/packages/plugin-critical/index.js\nindex 829d697..607303a 100644\n--- a/packages/plugin-critical/index.js\n+++ b/packages/plugin-critical/index.js\n@@ -30,9 +30,8 @@ class CriticalPlugin {\n \n     console.log(`Extract critical CSS (${pages.length} pages)`)\n \n-    await Promise.all(pages.map(async page => {\n-      const filePath = `${page.output}/index.html`\n-      const sourceHTML = await fs.readFile(filePath, 'utf-8')\n+    await Promise.all(pages.map(async ({ htmlOutput }) => {\n+      const sourceHTML = await fs.readFile(htmlOutput, 'utf-8')\n       let criticalCSS = ''\n \n       try {\n@@ -56,9 +55,9 @@ class CriticalPlugin {\n \n       // we manually inline critical css because cheerio is messing\n       // up the markup from Vue server renderer\n-      const resultHTML = await inlineCriticalCSS(filePath, criticalCSS)\n+      const resultHTML = await inlineCriticalCSS(htmlOutput, criticalCSS)\n \n-      return fs.outputFile(filePath, resultHTML)\n+      return fs.outputFile(htmlOutput, resultHTML)\n     }))\n   }\n }",
    "output": "fix(critical): use htmlOutput"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/utils/createRenderFn.js b/gridsome/lib/commands/utils/createRenderFn.js\nindex 7fa287b..30eb368 100644\n--- a/gridsome/lib/commands/utils/createRenderFn.js\n+++ b/gridsome/lib/commands/utils/createRenderFn.js\n@@ -12,9 +12,11 @@ module.exports = function createRenderFn ({\n   const serverBundle = require(serverBundlePath)\n \n   const renderer = createBundleRenderer(serverBundle, {\n-    inject: false,\n+    clientManifest,\n     runInNewContext: false,\n-    clientManifest\n+    shouldPrefetch (file, type) {\n+      return type === 'script' && !/js\\/data(?:[^/]+)?\\//.test(file)\n+    }\n   })\n \n   return async function render (url, data = {}) {\ndiff --git a/gridsome/lib/commands/utils/worker.js b/gridsome/lib/commands/utils/worker.js\nindex 0535c28..e2c9d66 100644\n--- a/gridsome/lib/commands/utils/worker.js\n+++ b/gridsome/lib/commands/utils/worker.js\n@@ -83,7 +83,6 @@ exports.processImages = async function ({ queue, outDir, minWidth }) {\n \n exports.renderHtml = async function ({\n   pages,\n-  cacheDir,\n   htmlTemplate,\n   clientManifestPath,\n   serverBundlePath",
    "output": "fix(build): dont prefetch data chunks"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 7fda409..33c525d 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -28,6 +28,7 @@ module.exports = (context, options, { isProd, isServer }) => {\n     .alias\n       .set('~', resolve('src', context))\n       .set('@', resolve('src', context))\n+      .set('gridsome$', path.resolve(options.appPath, 'index.js'))\n       .end()\n     .extensions\n       .merge(['.js', '.vue', '.json'])",
    "output": "fix(webpack): alias to gridsome app"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/utils/createRenderFn.js b/gridsome/lib/commands/utils/createRenderFn.js\nindex 16a745f..7fa287b 100644\n--- a/gridsome/lib/commands/utils/createRenderFn.js\n+++ b/gridsome/lib/commands/utils/createRenderFn.js\n@@ -1,3 +1,4 @@\n+const chalk = require('chalk')\n const { createHTMLRenderer } = require('../../utils/html')\n const { createBundleRenderer } = require('vue-server-renderer')\n \n@@ -18,33 +19,36 @@ module.exports = function createRenderFn ({\n \n   return async function render (url, data = {}) {\n     const context = { url, pageQuery: { data }}\n+    let app = ''\n \n     try {\n-      const app = await renderer.renderToString(context)\n-      const inject = context.meta ? context.meta.inject() : null\n-\n-      const head = '' +\n-        (inject ? inject.title.text() : '') +\n-        (inject ? inject.meta.text() : '') +\n-        (inject ? inject.link.text() : '') +\n-        (inject ? inject.style.text() : '') +\n-        (inject ? inject.script.text() : '') +\n-        (inject ? inject.noscript.text() : '') +\n-        context.renderResourceHints() +\n-        context.renderStyles()\n-\n-      const htmlAttrs = inject ? inject.htmlAttrs.text() : ''\n-      const bodyAttrs = inject ? inject.bodyAttrs.text() : ''\n-\n-      return renderHTML({\n-        htmlAttrs: inject ? `data-html-server-rendered=\"true\" ${htmlAttrs}` : '',\n-        scripts: context.renderScripts(),\n-        bodyAttrs,\n-        head,\n-        app\n-      })\n+      app = await renderer.renderToString(context)\n     } catch (err) {\n+      console.error(chalk.red(`Failed to render ${url}`))\n       throw err\n     }\n+\n+    const inject = context.meta.inject()\n+\n+    const head = '' +\n+      inject.title.text() +\n+      inject.meta.text() +\n+      inject.link.text() +\n+      inject.style.text() +\n+      inject.script.text() +\n+      inject.noscript.text() +\n+      context.renderResourceHints() +\n+      context.renderStyles()\n+\n+    const htmlAttrs = inject.htmlAttrs.text()\n+    const bodyAttrs = inject.bodyAttrs.text()\n+\n+    return renderHTML({\n+      htmlAttrs: inject ? `data-html-server-rendered=\"true\" ${htmlAttrs}` : '',\n+      scripts: context.renderScripts(),\n+      bodyAttrs,\n+      head,\n+      app\n+    })\n   }\n }",
    "output": "fix(build): better error if render fails"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/build/processImages.js b/gridsome/lib/commands/build/processImages.js\nindex 7735384..5070a63 100644\n--- a/gridsome/lib/commands/build/processImages.js\n+++ b/gridsome/lib/commands/build/processImages.js\n@@ -10,7 +10,8 @@ module.exports = async (queue, worker, { outDir, minProcessImageWidth }) => {\n     return worker\n       .processImages({ queue, outDir, minWidth: minProcessImageWidth })\n       .catch(err => {\n-        console.log(err.message)\n+        worker.end()\n+        throw err\n       })\n   }))\n \ndiff --git a/gridsome/lib/commands/build/renderHtml.js b/gridsome/lib/commands/build/renderHtml.js\nindex e6131c5..da96b93 100644\n--- a/gridsome/lib/commands/build/renderHtml.js\n+++ b/gridsome/lib/commands/build/renderHtml.js\n@@ -29,6 +29,7 @@ module.exports = async (queue, worker, config) => {\n         serverBundlePath\n       })\n       .catch(err => {\n+        worker.end()\n         throw err\n       })\n   }))",
    "output": "fix: stop worker if any errors"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/page-query/fetch.js b/gridsome/app/page-query/fetch.js\nindex 22b30f5..ce37a8a 100644\n--- a/gridsome/app/page-query/fetch.js\n+++ b/gridsome/app/page-query/fetch.js\n@@ -25,9 +25,8 @@ export default (options, route) => {\n     })\n   } else if (GRIDSOME_MODE === 'static') {\n     return new Promise(resolve => {\n-      import(\n-        `${GRIDSOME_CACHE_DIR}/data${route.path}.json`\n-      ).then(res => {\n+      const path = route.path.replace(/[\\/]+$/, '')\n+      import(`${GRIDSOME_CACHE_DIR}/data${path}.json`).then(res => {\n         cache.set(cacheKey, res.default.data)\n         resolve(res)\n       })",
    "output": "fix(data): strip trailing slash before import"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/index.js b/gridsome/index.js\nindex e8be62a..882f15c 100644\n--- a/gridsome/index.js\n+++ b/gridsome/index.js\n@@ -40,8 +40,8 @@ module.exports = ({ context, program }) => {\n function wrapCommand (fn) {\n   return (...args) => {\n     return fn(...args).catch(err => {\n-      console.error(chalk.red(err.message))\n-      process.exitCode = 1\n+      console.error(chalk.red(err.stack))\n+      process.exit(1)\n     })\n   }\n }",
    "output": "fix(cli): show stack when failing"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 8988ff8..caf0a37 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -8,7 +8,7 @@ module.exports = options => {\n \n   // highlight for graphql and static-query tags in html\n   Prism.languages.html.graphql = {\n-    pattern: /(<(graphql|static-query)[\\s\\S]*?>)[\\s\\S]*?(?=<\\/(graphql|static-query)>)/i,\n+    pattern: /(<(page|static)-query[\\s\\S]*?>)[\\s\\S]*?(?=<\\/(page|static)-query>)/i,\n     inside: Prism.languages.graphql,\n     lookbehind: true,\n     greedy: true",
    "output": "fix(prism): syntax highlighting for page-query"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 9d1d188..4d41b37 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -38,7 +38,7 @@ export default function createApp () {\n     }\n   })\n \n-  if (process.client) {\n+  if (process.isClient) {\n     initIntersectionObserver(router)\n   }\n \n@@ -102,8 +102,8 @@ export default function createApp () {\n     }\n   }\n \n-  const isServer = process.server\n-  const isClient = process.client\n+  const isServer = process.isServer\n+  const isClient = process.isClient\n \n   try {\n     const main = require('@/main.js')\ndiff --git a/gridsome/app/page-query/index.js b/gridsome/app/page-query/index.js\nindex 839960f..caedb98 100644\n--- a/gridsome/app/page-query/index.js\n+++ b/gridsome/app/page-query/index.js\n@@ -14,13 +14,13 @@ export default ({ options }, query = true) => {\n \n   options.computed = merge.computed({\n     $page () {\n-      return process.server\n+      return process.isServer\n         ? this.$ssrContext.pageQuery.data\n         : cache.get(this.$route.meta.cacheKey)\n     }\n   }, options.computed)\n \n-  if (process.server) return\n+  if (process.isServer) return\n \n   createRouteGuard(options, 'beforeRouteEnter')\n   createRouteGuard(options, 'beforeRouteUpdate')\ndiff --git a/gridsome/app/utils/Plugins.js b/gridsome/app/utils/Plugins.js\nindex f53a4e3..2b0201f 100644\n--- a/gridsome/app/utils/Plugins.js\n+++ b/gridsome/app/utils/Plugins.js\n@@ -1,8 +1,8 @@\n import Vue from 'vue'\n import plugins from 'plugins-loader!@gridsome/temp/plugins.js'\n \n-const isServer = process.server === true\n-const isClient = process.client === true\n+const isServer = process.isServer === true\n+const isClient = process.isClient === true\n \n class Plugins {\n   constructor () {\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex b4d5d9c..880b136 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -209,8 +209,8 @@ module.exports = (context, options, { isProd, isServer }) => {\n       'BASE_URL': JSON.stringify(options.publicPath),\n       'GRIDSOME_CACHE_DIR': JSON.stringify(options.cacheDir),\n       'GRIDSOME_MODE': JSON.stringify(process.env.GRIDSOME_MODE || ''),\n-      'process.client': !isServer,\n-      'process.server': isServer\n+      'process.isClient': !isServer,\n+      'process.isServer': isServer\n     }])\n \n   if (isProd && !isServer) {",
    "output": "feat(env): rename to isClient and isServer"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/package.json b/packages/source-filesystem/package.json\nindex f0d6970..e9092cb 100644\n--- a/packages/source-filesystem/package.json\n+++ b/packages/source-filesystem/package.json\n@@ -13,7 +13,8 @@\n   \"dependencies\": {\n     \"chokidar\": \"^2.0.4\",\n     \"fs-extra\": \"^7.0.0\",\n-    \"globby\": \"^8.0.1\"\n+    \"globby\": \"^8.0.1\",\n+    \"lodash\": \"^4.17.10\"\n   },\n   \"publishConfig\": {\n     \"access\": \"public\"",
    "output": "fix(filesystem): add missing dep"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 20d74a8..9d1d188 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -102,10 +102,13 @@ export default function createApp () {\n     }\n   }\n \n+  const isServer = process.server\n+  const isClient = process.client\n+\n   try {\n     const main = require('@/main.js')\n     if (typeof main.default === 'function') {\n-      main.default(Vue, { options, router, head })\n+      main.default(Vue, { options, router, head, isServer, isClient })\n     }\n   } catch (err) {}\n ",
    "output": "feat(app): send isServer and isClient to main.js"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex f89a65c..bff5831 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -100,6 +100,8 @@ module.exports = (context, options, { isProd, isServer }) => {\n     .use('babel-loader')\n       .loader('babel-loader')\n       .options({\n+        babelrc: false,\n+        configFile: false,\n         presets: [require.resolve('./babel-preset')]\n       })\n ",
    "output": "fix(babel): dont load config files"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/__tests__/__snapshots__/ProcessQueue.spec.js.snap b/gridsome/__tests__/__snapshots__/ProcessQueue.spec.js.snap\nindex d6e0f74..dd73450 100644\n--- a/gridsome/__tests__/__snapshots__/ProcessQueue.spec.js.snap\n+++ b/gridsome/__tests__/__snapshots__/ProcessQueue.spec.js.snap\n@@ -12,4 +12,4 @@ exports[`generate srcset for image 3`] = `\"<noscript><img class=\\\\\"g-image g-ima\n \n exports[`resize image by width attribute 1`] = `\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 300 180' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cfilter id='__svg-blur-0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40' /%3e%3c/filter%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0)' width='300' height='180' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAmCAIAAAD7pgrOAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABmElEQVRYw%2b2X3W6CQBBGff/nMF6AIoKCAgVFUJDy90Y9YRNCNe0FTUlJZy7M7PBt/M7MIrJ4n3ksBEAABEAABEAABEAABOBfA5Rl2edFUTxVXkNpXvdOClB2oZI8z1XeJ4/Ho3fW26VCnWVVVSRPe6cG4Iv3%2bz2fYRjquh7HMYmmaUmSBEFAhUQ5w67ymmWZaZqu66Zpul6vPc9DgxI9muFYfh0AN5jA7u12wxA%2bDoeD4zgsbds%2bHo/X65Vl0zRvXWCRHMeWZYHKFgTIELMXpRrIdAB0q65r3/eVD5ZMAx9c2u12p9MJQyChAWm5XF4ul7ZtqXAV9/hmdPAwELZQYTijD9LII8TQccwc%2bPooipwuzuczLkGiQp2uQ7harVgCABgCsMEgQQC22jL6/PzoJsYWneZIbDYbOk2bSe73O54Mw6DCBLgxqKtTTpu32y0YtB8BlxCToJ/6Hhj%2bApZfB576/Hvln36QDVtbdCFPYgEQAAEQAAEQAAEQAAGYAwD/tHln4LUz7YKkX5LwtsQ7xgwmUHyOYYX8A4oOoFMobbRdAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\"`;\n \n-exports[`skip srcset and dataUri 1`] = `\"<img class=\\\\\"g-image g-image--lazy\\\\\" src=\\\\\"/assets/static/1000x600-1000.png\\\\\" width=\\\\\"1000\\\\\">\"`;\n+exports[`skip srcset and dataUri 1`] = `\"<img class=\\\\\"g-image\\\\\" src=\\\\\"/assets/static/1000x600-1000.png\\\\\" width=\\\\\"1000\\\\\">\"`;\ndiff --git a/gridsome/lib/utils/ProcessQueue.js b/gridsome/lib/utils/ProcessQueue.js\nindex a572c86..08757fd 100644\n--- a/gridsome/lib/utils/ProcessQueue.js\n+++ b/gridsome/lib/utils/ProcessQueue.js\n@@ -118,7 +118,7 @@ class ProcessQueue {\n       result.srcset = result.sets.map(({ src, width }) => `${src} ${width}w`)\n     }\n \n-    if (isLazy) {\n+    if (isLazy && isSrcset) {\n       classNames.push('g-image--lazy')\n \n       result.noscriptHTML = '' +",
    "output": "fix(image): dont add lazy class when no srcset"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-critical/index.js b/packages/plugin-critical/index.js\nindex df2da36..829d697 100644\n--- a/packages/plugin-critical/index.js\n+++ b/packages/plugin-critical/index.js\n@@ -40,7 +40,7 @@ class CriticalPlugin {\n           ignore: options.ignore,\n           width: options.width,\n           height: options.height,\n-          folder: baseUrl,\n+          pathPrefix: baseUrl,\n           html: sourceHTML,\n           inline: false,\n           minify: true,\n@@ -51,6 +51,9 @@ class CriticalPlugin {\n         return\n       }\n \n+      // remove path prefix from hashed urls\n+      criticalCSS = criticalCSS.replace(/=\"url\\([/\\w]+%23(\\w+)\\)\"/g, '=\"url(%23$1)\"')\n+\n       // we manually inline critical css because cheerio is messing\n       // up the markup from Vue server renderer\n       const resultHTML = await inlineCriticalCSS(filePath, criticalCSS)",
    "output": "fix(critical): remove path prefix from hashed urls"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/Service.js b/gridsome/lib/Service.js\nindex bf341f4..2085193 100644\n--- a/gridsome/lib/Service.js\n+++ b/gridsome/lib/Service.js\n@@ -117,13 +117,16 @@ class Service {\n   }\n \n   queryRouteData (route, docOrQuery) {\n-    if (!route.matched.length) {\n-      return { data: {}}\n-    }\n+    const emptyData = { data: {}}\n+\n+    if (!route.matched.length) return emptyData\n \n-    const page = route.matched[0].components.default()\n+    const { pageQuery } = route.matched[0].components.default()\n     const variables = { ...route.params, path: route.path }\n-    return this.graphql(page.pageQuery.query, variables)\n+\n+    return pageQuery.query\n+      ? this.graphql(pageQuery.query, variables)\n+      : emptyData\n   }\n \n   broadcast (message, hotReload = true) {",
    "output": "fix(graphql): dont run empty page query"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 7760b5a..f920e93 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -138,19 +138,27 @@ class RemarkTransformer {\n       }\n \n       for (const node of images) {\n-        const data = node.data || (node.data = {})\n-        const props = data.hProperties || (data.hProperties = {})\n-\n         const res = await this.queue.add(\n           path.resolve(dirname, node.url)\n         )\n \n-        props['data-srcset'] = res.srcset.join(', ')\n-        props['data-sizes'] = res.sizes\n-        props['data-src'] = res.src\n-        props.className = 'g-image'\n-        props.width = res.size.width\n-        node.url = res.dataUri\n+        const className = 'g-image g-image--lazy'\n+\n+        const image = '' +\n+          `<img class=\"${className}\" ` +\n+          `src=\"${res.dataUri}\" width=\"${res.size.width}\" ` +\n+          `data-srcset=\"${res.srcset.join(', ')}\" ` +\n+          `data-sizes=\"${res.sizes}\" ` +\n+          `data-src=\"${res.src}\">`\n+\n+        const fallback = '' +\n+          `<noscript>` +\n+          `<img class=\"${className} g-image--loaded\" ` +\n+          `src=\"${res.src}\" width=\"${res.size.width}\">` +\n+          `</noscript>`\n+\n+        node.type = 'html'\n+        node.value = image + fallback\n       }\n \n       return toHAST(ast, options)",
    "output": "fix(remark): noscript fallback image"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/source-vue/index.js b/gridsome/lib/plugins/source-vue/index.js\nindex 0479616..10dc84a 100644\n--- a/gridsome/lib/plugins/source-vue/index.js\n+++ b/gridsome/lib/plugins/source-vue/index.js\n@@ -1,6 +1,7 @@\n const path = require('path')\n const fs = require('fs-extra')\n const glob = require('globby')\n+const chalk = require('chalk')\n const crypto = require('crypto')\n const chokidar = require('chokidar')\n const { kebabCase } = require('lodash')\n@@ -83,7 +84,16 @@ function parseComponent (file) {\n   const filename = path.parse(file).name\n   const source = fs.readFileSync(file, 'utf-8')\n   const { customBlocks } = parse({ filename, source, compiler })\n-  const block = customBlocks.filter(block => block.type === 'graphql').shift()\n+  const block = customBlocks.filter(block => {\n+    // TODO: remove deprecation warning before v1.0\n+    if (block.type === 'graphql') {\n+      console.log(chalk.yellow(\n+        `${filename}.vue: The <graphql> block is deprecated. Use <page-query> instead.`\n+      ))\n+    }\n+\n+    return /^(graphql|page-query)$/.test(block.type)\n+  }).shift()\n \n   const res = {\n     pageQuery: { content: null }\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 3f5e8fc..2e77b9f 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -163,8 +163,9 @@ module.exports = (context, options, { isProd, isServer }) => {\n \n   // graphql\n \n+  // TODO: remove graphql loader before v1.0\n   config.module.rule('graphql')\n-    .resourceQuery(/blockType=graphql/)\n+    .resourceQuery(/blockType=(graphql|page-query)/)\n     .use('page-query')\n       .loader(require.resolve('./loaders/page-query'))\n ",
    "output": "feat(graphql): rename graphql block to page-query"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex e42cd20..5bec3d0 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -38,7 +38,11 @@ export default function createApp () {\n     }\n   })\n \n-  initIntersectionObserver(router)\n+\n+  if (process.client) {\n+    initIntersectionObserver(router)\n+  }\n+\n   initRoutes(router)\n \n   const head = {\ndiff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 38cf399..fe1cffd 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -61,6 +61,7 @@ export default {\n }\n \n const supportsIntersectionObserver = (\n+  'document' in global &&\n   'IntersectionObserver' in global &&\n   'IntersectionObserverEntry' in global &&\n   'intersectionRatio' in global.IntersectionObserverEntry.prototype",
    "output": "fix(image): init observer in client only"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/index.js b/gridsome/index.js\nindex 9d8f9a4..d368bfc 100644\n--- a/gridsome/index.js\n+++ b/gridsome/index.js\n@@ -31,7 +31,7 @@ module.exports = ({ context, program }) => {\n function wrapCommand (fn) {\n   return (...args) => {\n     return fn(...args).catch(err => {\n-      console.error(chalk.red(err.stack))\n+      console.error(chalk.red(err.message))\n       process.exitCode = 1\n     })\n   }\ndiff --git a/gridsome/lib/utils/resolveConfig.js b/gridsome/lib/utils/resolveConfig.js\nindex cdfd1b0..da0ebbf 100644\n--- a/gridsome/lib/utils/resolveConfig.js\n+++ b/gridsome/lib/utils/resolveConfig.js\n@@ -75,13 +75,18 @@ module.exports = (context, options = {}, pkg = {}) => {\n \n function resolvePkg (context) {\n   const pkgPath = path.resolve(context, 'package.json')\n+  let pkg = { dependencies: {} }\n \n   try {\n     const content = fs.readFileSync(pkgPath, 'utf-8')\n-    return JSON.parse(content)\n+    pkg = Object.assign(pkg, JSON.parse(content))\n   } catch (err) {}\n \n-  return {}\n+  if (!Object.keys(pkg.dependencies).includes('gridsome')) {\n+    throw new Error('This is not a Gridsome project.')\n+  }\n+\n+  return pkg\n }\n \n function normalizePlugins (plugins) {",
    "output": "fix(cli): stop if not in a gridsome dir"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 404c9d1..f1e56bf 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -39,6 +39,8 @@ export default function createApp () {\n   const head = {\n     title: config.siteName,\n     titleTemplate: config.titleTemplate,\n+    __dangerouslyDisableSanitizers: ['style', 'script'],\n+    __dangerouslyDisableSanitizersByTagID: {},\n     htmlAttrs: {\n       lang: 'en'\n     },\n@@ -47,6 +49,7 @@ export default function createApp () {\n       { name: 'generator', content: `Gridsome v${config.version}` },\n       { name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' }\n     ],\n+    script: [],\n     style: [],\n     link: []\n   }\ndiff --git a/gridsome/app/entry.server.js b/gridsome/app/entry.server.js\nindex cb7e02c..3801a51 100644\n--- a/gridsome/app/entry.server.js\n+++ b/gridsome/app/entry.server.js\n@@ -4,7 +4,7 @@ const { app } = createApp()\n \n export default context => new Promise((resolve, reject) => {\n   app.$router.push(context.url)\n-  context.meta = app.$meta()\n+  context.head = app.$meta()\n \n   app.$router.onReady(() => {\n     resolve(app)\ndiff --git a/gridsome/app/index.server.html b/gridsome/app/index.server.html\nindex 605c33b..3a21869 100644\n--- a/gridsome/app/index.server.html\n+++ b/gridsome/app/index.server.html\n@@ -1,10 +1,11 @@\n <!DOCTYPE html>\n-<html {{{ meta.inject().htmlAttrs.text() }}}>\n+<html data-head-server-rendered=\"true\" {{{ head.inject().htmlAttrs.text() }}}>\n   <head>\n-    {{{ meta.inject().title.text() }}}\n-    {{{ meta.inject().meta.text() }}}\n-    {{{ meta.inject().style.text() }}}\n-    {{{ meta.inject().link.text() }}}\n+    {{{ head.inject().title.text() }}}\n+    {{{ head.inject().meta.text() }}}\n+    {{{ head.inject().script.text() }}}\n+    {{{ head.inject().style.text() }}}\n+    {{{ head.inject().link.text() }}}\n     {{{ renderResourceHints() }}}\n     {{{ renderStyles() }}}\n   </head>",
    "output": "fix(app): dont sanitize inline styles and scripts"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 7732451..7760b5a 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -42,6 +42,9 @@ class RemarkTransformer {\n           properties: {\n             className: options.anchorClassName || 'icon icon-link'\n           }\n+        },\n+        linkProperties: {\n+          'aria-hidden': 'true'\n         }\n       }],\n       // user plugins",
    "output": "fix(remark): add aria-hidden to heading links"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/commands/utils/worker.js b/gridsome/lib/commands/utils/worker.js\nindex 46c5130..ddb94ed 100644\n--- a/gridsome/lib/commands/utils/worker.js\n+++ b/gridsome/lib/commands/utils/worker.js\n@@ -65,7 +65,7 @@ exports.processImage = async function ({\n \n     if (isPng) plugins.push(imageminPngquant({ quality: config.quality }))\n     if (isWebp) plugins.push(imageminWebp({ quality: config.quality }))\n-    if (isJpeg) plugins.push(imageminJpegoptim({ max: quality }))\n+    if (isJpeg) plugins.push(imageminJpegoptim({ max: config.quality }))\n \n     buffer = await pipeline.toBuffer()\n     buffer = await imagemin.buffer(buffer, { plugins })",
    "output": "fix(worker): set jpeg quality"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 68ab54a..5fa1d75 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -56,11 +56,11 @@ export default function createApp () {\n     methods: {},\n     metaInfo: head,\n     mounted () {\n-      // let Vue router handle internal URLs\n+      // let Vue router handle internal URLs for anchors in innerHTML\n       document.addEventListener('click', event => {\n         const $el = event.target.closest('a')\n \n-        if ($el && document.location.hostname === $el.hostname) {\n+        if ($el && !$el.__vue__ && document.location.hostname === $el.hostname) {\n           router.push({ path: $el.pathname })\n           event.preventDefault()\n         }",
    "output": "fix(app): prevent duplicate router.push"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 95cd196..68ab54a 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -2,9 +2,9 @@ import Vue from 'vue'\n import Meta from 'vue-meta'\n import Router from 'vue-router'\n import Link from './components/Link'\n-import config from '@gridsome/temp/config.js'\n+import config from '~/.temp/config.js'\n+import initRoutes from '~/.temp/routes.js'\n import ClientOnly from './components/ClientOnly'\n-import initRoutes from '@gridsome/temp/routes.js'\n import Image, { initIntersectionObserver } from './components/Image'\n \n Vue.use(Meta)\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex c6d9c02..bf621d3 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -25,6 +25,7 @@ module.exports = (context, options, { isProd, isServer }) => {\n   config.resolve\n     .set('symlinks', true)\n     .alias\n+      .set('~', resolve('src', context))\n       .set('@', resolve('src', context))\n       .set('@gridsome/app', resolve('../../app'))\n       .set('@gridsome/temp', resolve('src/.temp', context))",
    "output": "feat(webpack): alias ~ to src dir"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/index.js b/gridsome/app/index.js\nnew file mode 100644\nindex 0000000..ad55602\n--- /dev/null\n+++ b/gridsome/app/index.js\n@@ -0,0 +1,5 @@\n+export { default as Vue } from 'vue'\n+export { default as Link } from './components/Link'\n+export { default as Image } from './components/Image'\n+export { default as Pager } from './components/Pager'\n+export { default as ClientOnly } from './components/ClientOnly'\ndiff --git a/gridsome/lib/utils/prepareRoutes.js b/gridsome/lib/utils/prepareRoutes.js\nindex b0b296a..e4d8fa3 100644\n--- a/gridsome/lib/utils/prepareRoutes.js\n+++ b/gridsome/lib/utils/prepareRoutes.js\n@@ -18,7 +18,7 @@ module.exports = store => {\n \n   const notFoundComponent = notFoundPage\n     ? notFoundPage.component\n-    : '@gridsome/app/pages/404.vue'\n+    : 'gridsome/app/pages/404.vue'\n \n   pages.forEach(page => {\n     const name = camelCase(page.path.replace(/\\//g, ' ')) || 'home'\ndiff --git a/gridsome/package.json b/gridsome/package.json\nindex 066eb7f..4c0ebe6 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -7,6 +7,7 @@\n   \"bugs\": \"https://github.com/gridsome/gridsome/issues\",\n   \"license\": \"MIT\",\n   \"main\": \"index.js\",\n+  \"browser\": \"app/index.js\",\n   \"bin\": {\n     \"gridsome\": \"./bin/gridsome.js\"\n   },",
    "output": "feat(app): browser field in package json"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex af3c21c..19f9a4a 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -46,9 +46,10 @@ module.exports = async (name, starter = 'default') => {\n     {\n       title: `Install dependencies`,\n       task: async (_, task) => {\n+        task.setSummary('Installing dependencies...')\n         try {\n-          if (hasYarn) await exec('yarnpkg')\n-          else await exec('npm', ['install'])\n+          if (hasYarn) await exec('yarn', undefined, undefined, dir)\n+          else await exec('npm', ['install', '--loglevel', 'error'], undefined, dir)\n           task.setSummary(`Installed successfully with ${hasYarn ? 'Yarn' : 'npm'}`)\n         } catch (err) {\n           task.skip('Failed to install dependencies')\n@@ -90,6 +91,9 @@ async function updatePkg (pkgPath, obj) {\n   await fs.outputFile(pkgPath, JSON.stringify(newPkg, null, 2))\n }\n \n-function exec (cmd, args = [], options = { stdio: 'ignore' }) {\n-  return execa(cmd, args, options)\n+function exec (cmd, args = [], options = {}, context = process.cwd()) {\n+  return execa(cmd, args, {\n+    stdio: options.stdio || 'ignore',\n+    cwd: context\n+  })\n }\ndiff --git a/packages/cli/package.json b/packages/cli/package.json\nindex e6ef0df..52ba0f7 100644\n--- a/packages/cli/package.json\n+++ b/packages/cli/package.json\n@@ -13,7 +13,7 @@\n     \"cli\"\n   ],\n   \"dependencies\": {\n-    \"@hjvedvik/tasks\": \"^0.0.7\",\n+    \"@hjvedvik/tasks\": \"^0.0.8\",\n     \"@vue/cli-shared-utils\": \"^3.0.0\",\n     \"chalk\": \"^2.4.1\",\n     \"commander\": \"^2.15.1\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 97e9a45..1a37036 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -635,11 +635,12 @@\n     follow-redirects \"^1.2.5\"\n     is-buffer \"^1.1.5\"\n \n-\"@hjvedvik/tasks@^0.0.7\":\n-  version \"0.0.7\"\n-  resolved \"https://registry.yarnpkg.com/@hjvedvik/tasks/-/tasks-0.0.7.tgz#f2e31500cf62899a1940e5b8b8fe892e3571bba9\"\n+\"@hjvedvik/tasks@^0.0.8\":\n+  version \"0.0.8\"\n+  resolved \"https://registry.yarnpkg.com/@hjvedvik/tasks/-/tasks-0.0.8.tgz#69440b92fccbe22c20c8d8788e723eac8f60aa59\"\n   dependencies:\n     chalk \"^2.4.1\"\n+    dateformat \"^3.0.3\"\n     figures \"^2.0.0\"\n     hirestime \"^3.2.1\"\n     log-update \"^2.3.0\"\n@@ -3470,7 +3471,7 @@ dateformat@^2.0.0:\n   version \"2.2.0\"\n   resolved \"https://registry.yarnpkg.com/dateformat/-/dateformat-2.2.0.tgz#4065e2013cf9fb916ddfd82efb506ad4c6769062\"\n \n-dateformat@^3.0.0:\n+dateformat@^3.0.0, dateformat@^3.0.3:\n   version \"3.0.3\"\n   resolved \"https://registry.yarnpkg.com/dateformat/-/dateformat-3.0.3.tgz#a6e37499a4d9a9cf85ef5872044d62901c9889ae\"\n ",
    "output": "fix(cli): install dependencies after create"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 6067475..eeed0f4 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -4,6 +4,7 @@ const path = require('path')\n const chalk = require('chalk')\n const fs = require('fs-extra')\n const program = require('commander')\n+const resolveCwd = require('resolve-cwd')\n const create = require('../lib/commands/create')\n const pkgPath = require('find-up').sync('package.json')\n const context = pkgPath ? path.dirname(pkgPath) : process.cwd()\n@@ -23,8 +24,12 @@ program\n   })\n \n try {\n-  // eslint-disable-next-line\n-  require('gridsome')({ context, program })\n+  const gridsomePath = resolveCwd.silent('gridsome')\n+\n+  if (gridsomePath) {\n+    // eslint-disable-next-line\n+    require(gridsomePath)({ context, program })\n+  }\n } catch (err) {\n   console.log(err)\n }\ndiff --git a/packages/cli/package.json b/packages/cli/package.json\nindex 757fbd0..1437f0f 100644\n--- a/packages/cli/package.json\n+++ b/packages/cli/package.json\n@@ -19,6 +19,7 @@\n     \"execa\": \"^0.10.0\",\n     \"find-up\": \"^2.1.0\",\n     \"fs-extra\": \"^6.0.1\",\n+    \"resolve-cwd\": \"^2.0.0\",\n     \"sort-package-json\": \"^1.15.0\"\n   },\n   \"publishConfig\": {",
    "output": "fix(cli): resolve local gridsome"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 35c0e59..c6d9c02 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -176,8 +176,10 @@ module.exports = (context, options, { isProd, isServer }) => {\n \n   // plugins\n \n-  config.plugin('progress')\n-    .use(require('webpack/lib/ProgressPlugin'))\n+  if (process.stdout.isTTY) {\n+    config.plugin('progress')\n+      .use(require('webpack/lib/ProgressPlugin'))\n+  }\n \n   config.plugin('vue-loader')\n     .use(VueLoaderPlugin)",
    "output": "fix: webpack progress in tty only"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/package.json b/gridsome/package.json\nindex 6b438e9..d605762 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -6,6 +6,9 @@\n   \"repository\": \"https://github.com/gridsome/gridsome\",\n   \"bugs\": \"https://github.com/gridsome/gridsome/issues\",\n   \"main\": \"index.js\",\n+  \"bin\": {\n+    \"gridsome\": \"./bin/gridsome.js\"\n+  },\n   \"keywords\": [\n     \"vue\",\n     \"gridsome\",\n@@ -27,6 +30,7 @@\n     \"@babel/plugin-transform-runtime\": \"^7.0.0\",\n     \"@babel/preset-env\": \"^7.0.0\",\n     \"@babel/runtime\": \"^7.0.0\",\n+    \"@gridsome/cli\": \"^0.0.1\",\n     \"@sindresorhus/slugify\": \"^0.3.0\",\n     \"@vue/component-compiler-utils\": \"^2.1.0\",\n     \"auto-bind\": \"^1.2.1\",",
    "output": "fix: add local bin to core package"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Link.js b/gridsome/app/components/Link.js\nindex 48aada5..1b6c224 100644\n--- a/gridsome/app/components/Link.js\n+++ b/gridsome/app/components/Link.js\n@@ -1,5 +1,5 @@\n import config from '~/.temp/config.js'\n-import { normalizePath } from '../utils/helpers'\n+import { normalizePath, isMailtoLink, isTelLink } from '../utils/helpers'\n \n // @vue/component\n export default {\n@@ -23,8 +23,8 @@ export default {\n       return h('a', data, children)\n     }\n \n-    if (isExternalLink(props.to)) {\n-      // TODO: warn if props.to is an external url\n+    if (isExternalLink(props.to) || isMailtoLink(props.to) || isTelLink(props.to)) {\n+      // TODO: warn if props.to is an external url, email or phone\n       attrs.href = props.to\n     }\n \n@@ -35,6 +35,10 @@ export default {\n       return h('a', data, children)\n     }\n \n+    if (isMailtoLink(attrs.href) || isTelLink(attrs.href)) {\n+      return h('a', data, children)\n+    }\n+\n     const to = typeof props.to === 'string'\n       ? { path: props.to, params: {}}\n       : { params: {}, ...props.to }\ndiff --git a/gridsome/app/utils/helpers.js b/gridsome/app/utils/helpers.js\nindex 935d499..377bb95 100644\n--- a/gridsome/app/utils/helpers.js\n+++ b/gridsome/app/utils/helpers.js\n@@ -49,3 +49,7 @@ export function parsePath (path) {\n export function normalizePath (path = '/') {\n   return `/${path}`.replace(/\\/+/g, '/')\n }\n+\n+export const isMailtoLink = string => String(string).startsWith('mailto:')\n+\n+export const isTelLink = string => String(string).startsWith('tel:')\n\\ No newline at end of file\ndiff --git a/gridsome/lib/utils/index.js b/gridsome/lib/utils/index.js\nindex a615b18..b666991 100644\n--- a/gridsome/lib/utils/index.js\n+++ b/gridsome/lib/utils/index.js\n@@ -51,3 +51,7 @@ exports.isResolvablePath = function (value) {\n     (value.startsWith('.') || path.isAbsolute(value))\n   )\n }\n+\n+exports.isMailtoLink = string => String(string).startsWith('mailto:')\n+\n+exports.isTelLink = string => String(string).startsWith('tel:')\n\\ No newline at end of file\ndiff --git a/gridsome/lib/webpack/modules/assets.js b/gridsome/lib/webpack/modules/assets.js\nindex 0b122e1..f18a6d8 100644\n--- a/gridsome/lib/webpack/modules/assets.js\n+++ b/gridsome/lib/webpack/modules/assets.js\n@@ -1,5 +1,6 @@\n const isUrl = require('is-url')\n const isRelative = require('is-relative')\n+const { isMailtoLink, isTelLink } = require('../../utils')\n \n module.exports = () => ({\n   postTransformNode (node) {\n@@ -30,7 +31,7 @@ function transformAttrValue (node, attr) {\n   const value = extractValue(attr.value)\n   let result = attr.value\n \n-  if (!isUrl(value) && isRelative(value)) {\n+  if (!isUrl(value) && !isMailtoLink(value) && !isTelLink(value) && isRelative(value)) {\n     const query = createOptionsQuery(node.attrs)\n     result = `require(\"!!assets-loader?${query}!${value}\")`\n   }",
    "output": "fix(g-link): don't use router-link for mailto and tel links (#755)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/README.md b/packages/transformer-remark/README.md\nindex e76e4b7..b96e716 100644\n--- a/packages/transformer-remark/README.md\n+++ b/packages/transformer-remark/README.md\n@@ -13,7 +13,6 @@ The transformer is automatically used if installed in your project. Custom trans\n \n ```js\n //gridsome.config.js\n-\n module.exports = {\n   plugins: [\n     {\n@@ -82,6 +81,14 @@ Add additional [Remark plugins](https://github.com/remarkjs/remark/blob/master/d\n \n Set this option to `false` to disable all built-in plugins.\n \n+#### grayMatter\n+\n+- Type: `object` Default: `{}`\n+\n+Options to pass through to [gray-matter][] for parsing front matter.\n+\n+[gray-matter]: https://github.com/jonschlinkert/gray-matter#options\n+\n #### squeezeParagraphs\n \n - Type: `boolean`\ndiff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex e706756..74de811 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -42,7 +42,7 @@ class RemarkTransformer {\n   }\n \n   parse (source) {\n-    const { data, content, excerpt } = parse(source)\n+    const { data, content, excerpt } = parse(source, this.options.grayMatter || {})\n \n     // if no title was found by gray-matter,\n     // try to find the first one in the content",
    "output": "feat(remark): set custom grayMatter options (#284)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/createSchema.js b/gridsome/lib/graphql/createSchema.js\nindex 5857f75..dff650a 100644\n--- a/gridsome/lib/graphql/createSchema.js\n+++ b/gridsome/lib/graphql/createSchema.js\n@@ -267,7 +267,8 @@ function processTypes (schemaComposer, extensions) {\n   const seen = new Set()\n \n   for (const typeComposer of schemaComposer.values()) {\n-    if (seen.has(typeComposer.getTypeName())) continue\n+    if (typeof typeComposer.getTypeName !== 'function') continue\n+    else if (seen.has(typeComposer.getTypeName())) continue\n     else seen.add(typeComposer.getTypeName())\n \n     switch (typeComposer.constructor) {",
    "output": "refactor(graphql): ensure processed type is a composer"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/__tests__/index.spec.js b/packages/vue-remark/__tests__/index.spec.js\nindex ce1fa70..7ec75e8 100644\n--- a/packages/vue-remark/__tests__/index.spec.js\n+++ b/packages/vue-remark/__tests__/index.spec.js\n@@ -182,6 +182,30 @@ test('image inside external link', async () => {\n   expect(res).toMatchSnapshot()\n })\n \n+test('don\\'t use g-link for mailto links', async () => {\n+  const plugin = await createPlugin()\n+  const res = await plugin.parse('[mailto](mailto:email@example.com)', { onlyTemplate: true })\n+\n+  expect(res).not.toMatch('g-link')\n+  expect(res).toMatch('href=\"mailto:email@example.com\"')\n+})\n+\n+test('don\\'t use g-link for email address', async () => {\n+  const plugin = await createPlugin()\n+  const res = await plugin.parse('<email@example.com>', { onlyTemplate: true })\n+\n+  expect(res).not.toMatch('g-link')\n+  expect(res).toMatch('href=\"mailto:email@example.com\"')\n+})\n+\n+test('don\\'t use g-link for phone links', async () => {\n+  const plugin = await createPlugin()\n+  const res = await plugin.parse('[phone](tel:12345678)', { onlyTemplate: true })\n+\n+  expect(res).not.toMatch('g-link')\n+  expect(res).toMatch('href=\"tel:12345678\"')\n+})\n+\n test('parse frontmatter', async () => {\n   const plugin = await createPlugin()\n   const res = await plugin.parse(`\ndiff --git a/packages/vue-remark/lib/plugins/file.js b/packages/vue-remark/lib/plugins/file.js\nindex 9e29494..fd65ad4 100644\n--- a/packages/vue-remark/lib/plugins/file.js\n+++ b/packages/vue-remark/lib/plugins/file.js\n@@ -10,7 +10,8 @@ module.exports = function attacher (options = {}) {\n         !isUrl(node.url) &&\n         isRelative(node.url) &&\n         path.extname(node.url) &&\n-        options.processFiles !== false\n+        options.processFiles !== false &&\n+        !/^mailto:/.test(node.url)\n       ) {\n         node.type = 'g-link'\n       }\ndiff --git a/packages/vue-remark/lib/sfcSyntax.js b/packages/vue-remark/lib/sfcSyntax.js\nindex b61ac96..624fc7b 100644\n--- a/packages/vue-remark/lib/sfcSyntax.js\n+++ b/packages/vue-remark/lib/sfcSyntax.js\n@@ -3,7 +3,7 @@ const htmlTags = require('html-tags')\n const isImport = value => /^import\\s+/.test(value)\n const isStyle = value => /^<style/.test(value)\n const isScript = value => /^<script/.test(value)\n-const isTag = value => /^<\\/?[a-zA-Z0-9_-][^>]*>/.test(value)\n+const isTag = value => /^<\\/?[\\w-]+/.test(value)\n const isQuery = value => /^<(page|static)-query/.test(value)\n \n const getValue = value => {\n@@ -40,9 +40,9 @@ function tokenizeVueComponents (eat, value) {\n   value = getValue(value)\n \n   if (isTag(value)) {\n-    const [, name] = value.match(/^<\\/?([a-zA-Z0-9_-]+)[^>]*>/) || []\n+    const [, name] = value.match(/^<\\/?([\\w-]+)[>\\s]/) || []\n \n-    if (!htmlTags.includes(name)) {\n+    if (name && !htmlTags.includes(name)) {\n       return eat(value)({ type: 'html', value })\n     }\n   }",
    "output": "fix(vue-remark): don't use g-link for mailto links (#740)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/actions.js b/gridsome/lib/app/actions.js\nindex 10753df..ec8f19f 100644\n--- a/gridsome/lib/app/actions.js\n+++ b/gridsome/lib/app/actions.js\n@@ -1,5 +1,6 @@\n const crypto = require('crypto')\n const { pick } = require('lodash')\n+const { specifiedDirectives } = require('graphql')\n const PluginStore = require('../store/PluginStore')\n const { deprecate } = require('../utils/deprecate')\n \n@@ -145,6 +146,8 @@ function createSchemaActions (api, app) {\n     'GraphQLID'\n   ])\n \n+  const directiveNames = specifiedDirectives.map(directive => directive.name)\n+\n   return {\n     ...baseActions,\n     ...graphqlTypes,\n@@ -168,8 +171,14 @@ function createSchemaActions (api, app) {\n     },\n \n     addSchemaFieldExtension (options) {\n+      if (directiveNames.includes(options.name)) {\n+        throw new Error(`Cannot override GraphQL directive: @${options.name}`)\n+      }\n+      if (['paginate', 'proxy', 'reference'].includes(options.name)) {\n+        throw new Error(`Cannot override built-in directive: @${options.name}`)\n+      }\n       if (app.schema._extensions[options.name]) {\n-        throw new Error(`Field extension already exist: ${options.name}`)\n+        throw new Error(`Field extension already exist: @${options.name}`)\n       }\n \n       app.schema._extensions[options.name] = options\ndiff --git a/gridsome/lib/graphql/__tests__/createSchema.spec.js b/gridsome/lib/graphql/__tests__/createSchema.spec.js\nindex e52d494..4c2bd04 100644\n--- a/gridsome/lib/graphql/__tests__/createSchema.spec.js\n+++ b/gridsome/lib/graphql/__tests__/createSchema.spec.js\n@@ -1062,6 +1062,33 @@ test('use extension multiple times on field', async () => {\n   expect(apply.mock.calls).toHaveLength(3)\n })\n \n+test('prevent overriding built-in GraphQL directives', done => {\n+  createApp(api => {\n+    api.loadSource(({ addSchemaFieldExtension }) => {\n+      expect(() => addSchemaFieldExtension({ name: 'skip' })).toThrow('@skip')\n+      done()\n+    })\n+  })\n+})\n+\n+test('prevent overriding @paginate directives', done => {\n+  createApp(api => {\n+    api.loadSource(({ addSchemaFieldExtension }) => {\n+      expect(() => addSchemaFieldExtension({ name: 'paginate' })).toThrow('@paginate')\n+      done()\n+    })\n+  })\n+})\n+\n+test('prevent overriding built-in extensions', done => {\n+  createApp(api => {\n+    api.loadSource(({ addSchemaFieldExtension }) => {\n+      expect(() => addSchemaFieldExtension({ name: 'reference' })).toThrow('@reference')\n+      done()\n+    })\n+  })\n+})\n+\n test('output field value as JSON', async () => {\n   const app = await initApp(({ addSchemaTypes }) => {\n     addSchemaTypes(`",
    "output": "fix(graphql): prevent overriding built-in directives"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/createSchema.spec.js b/gridsome/lib/graphql/__tests__/createSchema.spec.js\nindex d4fdf9a..0a51b5b 100644\n--- a/gridsome/lib/graphql/__tests__/createSchema.spec.js\n+++ b/gridsome/lib/graphql/__tests__/createSchema.spec.js\n@@ -940,6 +940,39 @@ test('add a experimental field extension', async () => {\n   expect(data.post.title).toEqual('test-test')\n })\n \n+test('apply extensions once per field', async () => {\n+  const resolve = jest.fn((src, args, ctx, info) => src[info.fieldName])\n+  const apply = jest.fn(() => ({ resolve }))\n+\n+  const app = await createApp(api => {\n+    api.loadSource(({ addCollection, addSchemaTypes, addSchemaFieldExtension }) => {\n+      addCollection('Post').addNode({ id: '1', title: 'test' })\n+      addSchemaTypes(`\n+        type Post implements Node {\n+          title: String @ext\n+          title2: String @ext @proxy(from: \"title\")\n+        }\n+      `)\n+      addSchemaFieldExtension({ name: 'ext', apply })\n+    })\n+  })\n+\n+  const { errors, data } = await app.graphql(`\n+    query {\n+      post(id:\"1\") {\n+        title\n+        title2\n+      }\n+    }\n+  `)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.post.title).toEqual('test')\n+  expect(data.post.title2).toEqual('test')\n+  expect(apply.mock.calls).toHaveLength(2)\n+  expect(resolve.mock.calls).toHaveLength(2)\n+})\n+\n test('output field value as JSON', async () => {\n   const app = await initApp(({ addSchemaTypes }) => {\n     addSchemaTypes(`\ndiff --git a/gridsome/lib/graphql/createSchema.js b/gridsome/lib/graphql/createSchema.js\nindex 3cc7630..37e638a 100644\n--- a/gridsome/lib/graphql/createSchema.js\n+++ b/gridsome/lib/graphql/createSchema.js\n@@ -242,13 +242,20 @@ function mergeTypes (schemaComposer, typeA, typeB) {\n }\n \n function processTypes (schemaComposer, extensions) {\n+  const seen = new Set()\n+\n   for (const typeComposer of schemaComposer.values()) {\n+    if (seen.has(typeComposer.getTypeName())) continue\n+    else seen.add(typeComposer.getTypeName())\n+\n     switch (typeComposer.constructor) {\n       case ObjectTypeComposer:\n         processObjectTypeFields(schemaComposer, typeComposer, extensions)\n         break\n     }\n   }\n+\n+  seen.clear()\n }\n \n function processObjectTypeFields (schemaComposer, typeComposer, extensions) {",
    "output": "fix(graphql): apply extensions once per usage"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 725a637..0d2ab9c 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -11,6 +11,10 @@ module.exports = async (name, starter = 'default') => {\n   const projectName = path.basename(dir)\n   const starters = ['default', 'wordpress']\n   const useYarn = await hasYarn()\n+  const commandName = {\n+    develop: 'gridsome develop',\n+    build: 'gridsome build'\n+  }\n \n   try {\n     const files = fs.existsSync(dir) ? fs.readdirSync(dir) : []\n@@ -27,9 +31,6 @@ module.exports = async (name, starter = 'default') => {\n     starter = `https://github.com/gridsome/gridsome-starter-${starter}.git`\n   }\n \n-  const developCommand = 'gridsome develop'\n-  const buildCommand = 'gridsome build'\n-\n   const tasks = new Tasks([\n     {\n       title: `Clone ${starter}`,\n@@ -103,7 +104,7 @@ module.exports = async (name, starter = 'default') => {\n                   `Failed to install dependencies with ${command}. ` +\n                   `Please enter ${chalk.cyan(name)} directory and ` +\n                   `install dependencies with yarn or npm manually. ` +\n-                  `Then run ${chalk.cyan(developCommand)} to start ` +\n+                  `Then run ${chalk.cyan(commandName.develop)} to start ` +\n                   `local development.\\n\\n    Exit code ${code}`\n                 )\n               )\n@@ -122,8 +123,8 @@ module.exports = async (name, starter = 'default') => {\n   if (process.cwd() !== dir) {\n     console.log(`  - Enter directory ${chalk.green(`cd ${name}`)}`)\n   }\n-  console.log(`  - Run ${chalk.green(developCommand)} to start local development`)\n-  console.log(`  - Run ${chalk.green(buildCommand)} to build for production`)\n+  console.log(`  - Run ${chalk.green(commandName.develop)} to start local development`)\n+  console.log(`  - Run ${chalk.green(commandName.build)} to build for production`)\n   console.log()\n }\n ",
    "output": "refactor(cli): change how to management command names (#741)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 1fb57bf..48dedd1 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -186,6 +186,11 @@ class TemplatesPlugin {\n         templates.byComponent.set(templateComponent, byComponent.concat(template))\n         templates.byTypeName.set(options.typeName, byTypeName.concat(template))\n       }\n+\n+      if (templates.byTypeName.has(options.typeName)) {\n+        options._indices = ['path']\n+        options._unique = ['path']\n+      }\n     })\n \n     api.onCreateNode((options, collection) => {\ndiff --git a/gridsome/lib/store/Collection.js b/gridsome/lib/store/Collection.js\nindex 069b2e0..191836d 100644\n--- a/gridsome/lib/store/Collection.js\n+++ b/gridsome/lib/store/Collection.js\n@@ -9,9 +9,9 @@ const normalizeNodeOptions = require('./normalizeNodeOptions')\n const { parseUrl, createFieldName } = require('./utils')\n const { warn } = require('../utils/log')\n const { mapValues, isPlainObject } = require('lodash')\n-const { Collection } = require('lokijs')\n+const Loki = require('lokijs')\n \n-class ContentType {\n+class Collection {\n   constructor (typeName, options, store) {\n     this.typeName = typeName\n     this.options = options || {}\n@@ -19,9 +19,9 @@ class ContentType {\n     this._store = store\n     this._transformers = store._transformers\n     this._events = new EventEmitter()\n-    this._collection = new Collection(typeName, {\n-      indices: ['id', 'path', 'internal.typeName'],\n-      unique: ['id', 'path'],\n+    this._collection = new Loki.Collection(typeName, {\n+      indices: ['id', 'internal.typeName', ...(options._indices || [])],\n+      unique: ['id', ...(options._unique || [])],\n       disableMeta: true\n     })\n \n@@ -205,4 +205,4 @@ class ContentType {\n   }\n }\n \n-module.exports = ContentType\n+module.exports = Collection",
    "output": "fix(store): require unique paths for templates only"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/PluginStore.js b/gridsome/lib/store/PluginStore.js\nindex 0dd3f48..50acfc8 100644\n--- a/gridsome/lib/store/PluginStore.js\n+++ b/gridsome/lib/store/PluginStore.js\n@@ -141,7 +141,9 @@ class PluginStore {\n       return { typeName: typeName.internal.typeName, id: typeName.id }\n     }\n \n-    return { typeName, id }\n+    const value = Array.isArray(id) ? id.map(String) : String(id)\n+\n+    return { typeName, id: value }\n   }\n \n   //\ndiff --git a/gridsome/lib/store/normalizeNodeOptions.js b/gridsome/lib/store/normalizeNodeOptions.js\nindex f3f4b4e..2ef7a67 100644\n--- a/gridsome/lib/store/normalizeNodeOptions.js\n+++ b/gridsome/lib/store/normalizeNodeOptions.js\n@@ -13,6 +13,13 @@ module.exports = function normalizeNodeOptions (options, collection, useFallback\n \n   nodeOptions.internal = createInternal(collection, nodeOptions.internal)\n \n+  if (\n+    typeof nodeOptions.id !== 'undefined' &&\n+    typeof nodeOptions.id !== 'string'\n+  ) {\n+    nodeOptions.id = String(nodeOptions.id)\n+  }\n+\n   if (useFallbacks) {\n     if (!nodeOptions.id) {\n       nodeOptions.id = hash(options)",
    "output": "fix(store): ensure reference node id\u2019s are strings"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 0cec16b..6449199 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -144,10 +144,11 @@ class WordPressSource {\n \n           if (post.hasOwnProperty(propName)) {\n             const typeName = this.createTypeName(type)\n-            const ref = createReference(typeName, post[propName])\n             const key = camelCase(propName)\n \n-            fields[key] = ref\n+            fields[key] = Array.isArray(post[propName])\n+              ? post[propName].map(id => createReference(typeName, id))\n+              : createReference(typeName, post[propName])\n           }\n         }\n ",
    "output": "fix(wordpress): add references as array fields (#745)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/nodes/index.js b/gridsome/lib/graphql/nodes/index.js\nindex 1fd0e4d..9a8645a 100644\n--- a/gridsome/lib/graphql/nodes/index.js\n+++ b/gridsome/lib/graphql/nodes/index.js\n@@ -184,7 +184,14 @@ function createThirdPartyFields (typeComposer, collection) {\n     }\n   }\n \n-  typeComposer.addFields(fields)\n+  for (const fieldName in fields) {\n+    const extensions = typeComposer.hasField(fieldName)\n+      ? typeComposer.getFieldExtensions(fieldName)\n+      : {}\n+\n+    typeComposer.setField(fieldName, fields[fieldName])\n+    typeComposer.extendFieldExtensions(fieldName, extensions)\n+  }\n }\n \n const {",
    "output": "fix(graphql): keep extensions for third party fields"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 61438d8..3cfc398 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -3,7 +3,7 @@ const fs = require('fs-extra')\n const slash = require('slash')\n const crypto = require('crypto')\n const mime = require('mime-types')\n-const { mapValues, trimStart } = require('lodash')\n+const { mapValues, trim, trimEnd } = require('lodash')\n \n const isDev = process.env.NODE_ENV === 'development'\n \n@@ -159,22 +159,24 @@ class FilesystemSource {\n \n   createPath ({ dir, name }, actions) {\n     const { permalinks = {}} = this.api.config\n-    const { index, pathPrefix = '/' } = this.options\n-    const suffix = permalinks.trailingSlash ? '/' : ''\n-    const joinedPath = path.join(pathPrefix, dir)\n+    const pathPrefix = trim(this.options.pathPrefix, '/')\n+    const pathSuffix = permalinks.trailingSlash ? '/' : ''\n \n-    const segments = slash(joinedPath)\n-      .split('/')\n-      .filter(Boolean)\n-      .map(segment => actions.slugify(segment))\n+    const segments = slash(dir).split('/').map(segment => {\n+      return actions.slugify(segment)\n+    })\n \n-    if (!index.includes(name)) {\n+    if (!this.options.index.includes(name)) {\n       segments.push(actions.slugify(name))\n     }\n \n-    const res = segments.join('/') + suffix\n+    if (pathPrefix) {\n+      segments.unshift(pathPrefix)\n+    }\n+\n+    const res = trimEnd('/' + segments.filter(Boolean).join('/'), '/')\n \n-    return '/' + trimStart(res, '/')\n+    return (res + pathSuffix) || '/'\n   }\n \n   normalizeRefs (refs) {",
    "output": "fix(filesystem): don\u2019t slugify path prefix (#739)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex c26954f..61438d8 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -101,7 +101,7 @@ class FilesystemSource {\n       const options = await this.createNodeOptions(slash(file), actions)\n       const node = this.collection.addNode(options)\n \n-      this.createNodeRefs(node)\n+      this.createNodeRefs(node, actions)\n     })\n \n     watcher.on('unlink', file => {\n@@ -116,7 +116,7 @@ class FilesystemSource {\n       const options = await this.createNodeOptions(slash(file), actions)\n       const node = this.collection.updateNode(options)\n \n-      this.createNodeRefs(node)\n+      this.createNodeRefs(node, actions)\n     })\n   }\n ",
    "output": "fix(filesystem): update auto ref nodes in dev mode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 22e6ef6..c26954f 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -74,7 +74,7 @@ class FilesystemSource {\n     for (const fieldName in this.refs) {\n       const ref = this.refs[fieldName]\n \n-      if (ref.create && node[fieldName]) {\n+      if (node && node[fieldName] && ref.create) {\n         const value = node[fieldName]\n         const typeName = ref.typeName\n ",
    "output": "fix(filesystem): don\u2019t create refs for filtered nodes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/build/executeQueries.js b/gridsome/lib/app/build/executeQueries.js\nindex db7ab6a..0d0d94a 100644\n--- a/gridsome/lib/app/build/executeQueries.js\n+++ b/gridsome/lib/app/build/executeQueries.js\n@@ -3,11 +3,24 @@ const pMap = require('p-map')\n const fs = require('fs-extra')\n const invariant = require('invariant')\n const hirestime = require('hirestime')\n+const { validate, specifiedRules } = require('graphql')\n const sysinfo = require('../../utils/sysinfo')\n const { error, info } = require('../../utils/log')\n \n-async function executeQueries (renderQueue, { context, pages, graphql }, hash) {\n+async function executeQueries (renderQueue, { context, pages, schema, graphql }, hash) {\n   const timer = hirestime()\n+  const validated = new Set()\n+  const withErrors = new Set()\n+\n+  // TODO: show all query errors\n+  const throwError = (err, component) => {\n+    if (!withErrors.has(component)) {\n+      const relPath = path.relative(context, component)\n+      error(`An error occurred while executing page-query for ${relPath}\\n`)\n+      withErrors.add(component)\n+      throw new Error(err)\n+    }\n+  }\n \n   const results = await pMap(renderQueue, async entry => {\n     const route = pages.getRoute(entry.routeId)\n@@ -20,12 +33,20 @@ async function executeQueries (renderQueue, { context, pages, graphql }, hash) {\n     const document = route.internal.query.document\n \n     if (document) {\n+      if (!validated.has(route.component)) {\n+        const errors = validate(schema.getSchema(), document, specifiedRules)\n+\n+        if (errors && errors.length) {\n+          throwError(errors[0], route.component)\n+        }\n+\n+        validated.add(route.component)\n+      }\n+\n       const { errors, data } = await graphql(document, entry.queryVariables)\n \n-      if (errors) {\n-        const relPath = path.relative(context, route.component)\n-        error(`An error occurred while executing page-query for ${relPath}\\n`)\n-        throw new Error(errors[0])\n+      if (errors && errors.length) {\n+        throwError(errors[0], route.component)\n       }\n \n       results.data = data",
    "output": "fix(build): validate page-query during build"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex c09f771..0cec16b 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -108,6 +108,7 @@ class WordPressSource {\n           title: term.name,\n           slug: term.slug,\n           content: term.description,\n+          meta: term.meta,\n           count: term.count\n         })\n       }",
    "output": "fix(wordpress): add meta to taxonomy terms (#672)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-ghost/index.js b/packages/source-ghost/index.js\nindex f40166f..c0317c8 100644\n--- a/packages/source-ghost/index.js\n+++ b/packages/source-ghost/index.js\n@@ -33,14 +33,6 @@ class GhostSource {\n       throw new Error(`${options.typeName}: perPage cannot be more than 100 or less than 1`)\n     }\n \n-    this.routes = {\n-      post: '/:year/:month/:day/:slug',\n-      tag: '/tag/:slug',\n-      page: '/page/:slug',\n-      author: '/author/:slug',\n-      ...this.options.routes\n-    }\n-\n     api.loadSource(async actions => {\n       console.log(`Loading data from ${options.url}`)\n       await this.loadAuthors(actions)\n@@ -51,38 +43,34 @@ class GhostSource {\n     })\n   }\n \n-  async loadTags ({ addContentType, addCollection = addContentType }) {\n+  async loadTags ({ addCollection }) {\n     const tags = addCollection({\n-      typeName: this.createTypeName(TYPE_TAG),\n-      route: this.routes[TYPE_TAG]\n+      typeName: this.createTypeName(TYPE_TAG)\n     })\n \n     await this.loadBasicEntity(tags, this.contentAPI.tags)\n   }\n \n-  async loadPages ({ addContentType, addCollection = addContentType }) {\n+  async loadPages ({ addCollection }) {\n     const pages = addCollection({\n       typeName: this.createTypeName(TYPE_PAGE),\n-      route: this.routes[TYPE_PAGE],\n       dateField: 'published_at'\n     })\n \n     await this.loadBasicEntity(pages, this.contentAPI.pages)\n   }\n \n-  async loadAuthors ({ addContentType, addCollection = addContentType }) {\n+  async loadAuthors ({ addCollection }) {\n     const authors = addCollection({\n-      typeName: this.createTypeName(TYPE_AUTHOR),\n-      route: this.routes[TYPE_AUTHOR]\n+      typeName: this.createTypeName(TYPE_AUTHOR)\n     })\n \n     await this.loadBasicEntity(authors, this.contentAPI.authors)\n   }\n \n-  async loadPosts ({ addContentType, createReference, addCollection = addContentType }) {\n+  async loadPosts ({ createReference, addCollection }) {\n     const posts = addCollection({\n       typeName: this.createTypeName(TYPE_POST),\n-      route: this.routes[TYPE_POST],\n       dateField: 'published_at'\n     })\n \n@@ -126,7 +114,7 @@ class GhostSource {\n     const settings = await this.contentAPI.settings.browse()\n     const fieldName = settingsName || camelCase(typeName)\n \n-    store.addMetaData(fieldName, settings)\n+    store.addMetadata(fieldName, settings)\n   }\n \n   async loadBasicEntity (collection, contentEntity) {",
    "output": "feat(ghost): remove deprecated options (#687)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 1c9adcd..9d0005e 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -28,6 +28,14 @@ program\n     return wrapCommand(create)(...args)\n   })\n \n+program\n+  .command('info')\n+  .description('output information about the local environment')\n+  .action(() => {\n+    const info = require('../lib/commands/info')\n+    return wrapCommand(info)()\n+  })\n+\n try {\n   const commandsPath = resolveCwd.silent('gridsome/commands')\n   const gridsomePath = resolveCwd.silent('gridsome')\ndiff --git a/packages/cli/lib/commands/info.js b/packages/cli/lib/commands/info.js\nnew file mode 100644\nindex 0000000..31ef786\n--- /dev/null\n+++ b/packages/cli/lib/commands/info.js\n@@ -0,0 +1,13 @@\n+const envinfo = require('envinfo')\n+\n+module.exports = async () => {\n+  const data = await envinfo\n+    .run({\n+      System: ['OS', 'CPU'],\n+      Binaries: ['Node', 'Yarn', 'npm'],\n+      Browsers: ['Chrome', 'Edge', 'Firefox', 'Safari'],\n+      npmPackages: '?(@)gridsome{-*,/*,}',\n+      npmGlobalPackages: ['@gridsome/cli']\n+    })\n+  console.log(data)\n+}\ndiff --git a/packages/cli/package.json b/packages/cli/package.json\nindex 6d867cd..92656b6 100644\n--- a/packages/cli/package.json\n+++ b/packages/cli/package.json\n@@ -18,6 +18,7 @@\n     \"chalk\": \"^2.4.1\",\n     \"commander\": \"^2.15.1\",\n     \"didyoumean\": \"^1.2.1\",\n+    \"envinfo\": \"^7.3.1\",\n     \"execa\": \"^0.10.0\",\n     \"find-up\": \"^2.1.0\",\n     \"fs-extra\": \"^6.0.1\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 148dc0e..2971133 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -5308,6 +5308,11 @@ env-paths@^1.0.0:\n   resolved \"https://registry.yarnpkg.com/env-paths/-/env-paths-1.0.0.tgz#4168133b42bb05c38a35b1ae4397c8298ab369e0\"\n   integrity sha1-QWgTO0K7BcOKNbGuQ5fIKYqzaeA=\n \n+envinfo@^7.3.1:\n+  version \"7.4.0\"\n+  resolved \"https://registry.yarnpkg.com/envinfo/-/envinfo-7.4.0.tgz#bef4ece9e717423aaf0c3584651430b735ad6630\"\n+  integrity sha512-FdDfnWnCVjxTTpWE3d6Jgh5JDIA3Cw7LCgpM/pI7kK1ORkjaqI2r6NqQ+ln2j0dfpgxY00AWieSvtkiZQKIItA==\n+\n err-code@^1.0.0:\n   version \"1.1.2\"\n   resolved \"https://registry.yarnpkg.com/err-code/-/err-code-1.1.2.tgz#06e0116d3028f6aef4806849eb0ea6a748ae6960\"",
    "output": "feat(cli): gridsome info command (#695)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/vue-components/lib/loaders/static-query.js b/gridsome/lib/plugins/vue-components/lib/loaders/static-query.js\nindex eb3220a..5890070 100644\n--- a/gridsome/lib/plugins/vue-components/lib/loaders/static-query.js\n+++ b/gridsome/lib/plugins/vue-components/lib/loaders/static-query.js\n@@ -1,6 +1,7 @@\n const path = require('path')\n const LRU = require('lru-cache')\n const hash = require('hash-sum')\n+const validate = require('../validate')\n const { parse, findDeprecatedUsages } = require('graphql')\n const { deprecate } = require('../../../../utils/deprecate')\n \n@@ -30,6 +31,18 @@ module.exports = async function (source, map) {\n     return\n   }\n \n+  try {\n+    const errors = validate(schema.getSchema(), source)\n+\n+    if (errors && errors.length) {\n+      this.callback(new Error(errors[0]), source, map)\n+      return\n+    }\n+  } catch (err) {\n+    this.callback(err, source, map)\n+    return\n+  }\n+\n   let ast = null\n \n   try {",
    "output": "fix(graphql): validate static queries"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\nindex f62c93b..f31a389 100644\n--- a/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/createFieldTypes.spec.js\n@@ -71,6 +71,7 @@ const nodes = [\n     ref: null,\n     refs: [],\n     objList: [],\n+    invalidList: [null, undefined],\n     numberList: [],\n     deep: {\n       object: {\n@@ -110,7 +111,8 @@ test('merge node fields', () => {\n   expect(fields.obj.value.test.value.emptyObj).toBeUndefined()\n   expect(fields.obj.value.test.value.emptyList).toBeUndefined()\n   expect(fields.obj.value.empty).toBeUndefined()\n-  expect(fields.invalidRef.value).toBeUndefined()\n+  expect(fields.invalidList).toBeUndefined()\n+  expect(fields.invalidRef).toBeUndefined()\n   expect(fields.emptyObj).toBeUndefined()\n   expect(fields.emptyList).toBeUndefined()\n   expect(fields.deep).toBeUndefined()\n@@ -162,6 +164,8 @@ test('create graphql types from node fields', async () => {\n   expect(types.obj.type.getFields().foo.type.getTypeName()).toEqual('String')\n   expect(types.obj.type.getFields().bar.type.getTypeName()).toEqual('String')\n   expect(types.obj.type.getFields().test.type).toBeInstanceOf(ObjectTypeComposer)\n+  expect(types.invalidList).toBeUndefined()\n+  expect(types.invalidRef).toBeUndefined()\n   expect(types.nullValue).toBeUndefined()\n   expect(types.emptyList).toBeUndefined()\n   expect(types.emptyObj).toBeUndefined()\ndiff --git a/gridsome/lib/graphql/createFieldDefinitions.js b/gridsome/lib/graphql/createFieldDefinitions.js\nindex 2324148..91d3c28 100644\n--- a/gridsome/lib/graphql/createFieldDefinitions.js\n+++ b/gridsome/lib/graphql/createFieldDefinitions.js\n@@ -5,6 +5,7 @@ const { isRefFieldDefinition } = require('./utils')\n \n const {\n   omit,\n+  isNil,\n   isEmpty,\n   isNumber,\n   isInteger,\n@@ -30,13 +31,13 @@ function resolveValues (obj, currentObj = {}, options = {}, path = []) {\n \n     if (key.startsWith('$')) continue\n     if (key.startsWith('__')) continue\n-    if (value === undefined) continue\n-    if (value === null) continue\n+    if (isNil(value)) continue\n \n     const currentValue = currentObj[key] ? currentObj[key].value : undefined\n     const resolvedValue = resolveValue(value, currentValue, options, path.concat(key))\n \n     if (\n+      isNil(resolvedValue) ||\n       (Array.isArray(resolvedValue) && !resolvedValue.length) ||\n       (isPlainObject(resolvedValue) && isEmpty(resolvedValue))\n     ) {\n@@ -92,7 +93,7 @@ function resolveValue (value, currentValue, options, path = []) {\n       arr[0] = resolveValue(value[i], arr[0], options, path.concat(i))\n     }\n \n-    return arr\n+    return arr.filter(v => !isNil(v))\n   } else if (isPlainObject(value)) {\n     if (isRefField(value)) {\n       if (!value.typeName) {\n@@ -113,7 +114,7 @@ function resolveValue (value, currentValue, options, path = []) {\n       : value\n   }\n \n-  return currentValue !== undefined ? currentValue : value\n+  return isNil(currentValue) ? value : currentValue\n }\n \n const nonValidCharsRE = new RegExp('[^a-zA-Z0-9_]', 'g')",
    "output": "fix(graphql): don\u2019t create fields for lists with invalid values"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 2c8f2eb..c09f771 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -1,7 +1,7 @@\n const pMap = require('p-map')\n const axios = require('axios')\n const camelCase = require('camelcase')\n-const { mapKeys, isPlainObject, trimEnd } = require('lodash')\n+const { mapKeys, isPlainObject, trimEnd, trimStart } = require('lodash')\n \n const TYPE_AUTHOR = 'author'\n const TYPE_ATTACHEMENT = 'attachment'\n@@ -56,7 +56,7 @@ class WordPressSource {\n     for (const type in data) {\n       const options = data[type]\n \n-      this.restBases.posts[type] = options.rest_base\n+      this.restBases.posts[type] = trimStart(options.rest_base, '/')\n \n       addCollection({\n         typeName: this.createTypeName(type),\n@@ -98,7 +98,7 @@ class WordPressSource {\n         route: this.routes[type]\n       })\n \n-      this.restBases.taxonomies[type] = options.rest_base\n+      this.restBases.taxonomies[type] = trimStart(options.rest_base, '/')\n \n       const terms = await this.fetchPaged(`wp/v2/${options.rest_base}`)\n ",
    "output": "fix(wordpress): remove starting slash from rest_base (#712)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex 8624865..9b99891 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -37,6 +37,11 @@ const head = {\n   link: []\n }\n \n+if (icons.favicons.length) {\n+  // prevent unnecessary request for /favicon.ico\n+  head.link.push({ rel: 'icon', href: 'data:,' })\n+}\n+\n icons.favicons.forEach(({ width, height, src: href }) => {\n   head.link.push({\n     rel: 'icon',",
    "output": "fix(app): prevent request to favicon.ico (#711)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 62157b6..21b21a1 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -63,7 +63,7 @@ document.addEventListener('click', event => {\n     return\n   }\n \n-  router.push(location)\n+  router.push(location, () => {})\n   event.preventDefault()\n }, false)\n ",
    "output": "fix(app): ignore NavigationDuplicated error (#703)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\nindex 138e616..f4fb123 100644\n--- a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n+++ b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n@@ -109,3 +109,15 @@ exports[`process SFC blocks extract <style> tag 1`] = `\n body {}\n </style>\"\n `;\n+\n+exports[`process SFC blocks extract <style> tag after component 1`] = `\n+\"<template>\n+<VueRemarkRoot>\n+<MyComponent></MyComponent>\n+</VueRemarkRoot>\n+</template>\n+\n+<style scoped>\n+body {}\n+</style>\"\n+`;\ndiff --git a/packages/vue-remark/__tests__/index.spec.js b/packages/vue-remark/__tests__/index.spec.js\nindex e103c29..539d75d 100644\n--- a/packages/vue-remark/__tests__/index.spec.js\n+++ b/packages/vue-remark/__tests__/index.spec.js\n@@ -206,6 +206,21 @@ body {}\n     expect(res).toMatchSnapshot()\n   })\n \n+  test('extract <style> tag after component', async () => {\n+    const plugin = await createPlugin()\n+    const res = await plugin.parse(`\n+<MyComponent></MyComponent>\n+\n+<style scoped>\n+body {}\n+</style>`, {\n+      withImport: false,\n+      withFrontMatter: false\n+    })\n+\n+    expect(res).toMatchSnapshot()\n+  })\n+\n   test('extract <page-query> tag', async () => {\n     const plugin = await createPlugin()\n     const res = await plugin.parse(`\ndiff --git a/packages/vue-remark/lib/sfcSyntax.js b/packages/vue-remark/lib/sfcSyntax.js\nindex 3033f3a..b61ac96 100644\n--- a/packages/vue-remark/lib/sfcSyntax.js\n+++ b/packages/vue-remark/lib/sfcSyntax.js\n@@ -12,6 +12,8 @@ const getValue = value => {\n }\n \n function tokenizeImportSyntax (eat, value) {\n+  value = getValue(value)\n+\n   if (isImport(value)) {\n     const lines = getValue(value).split('\\n')\n     const statements = lines.filter(line => line.startsWith('import'))\n@@ -22,6 +24,8 @@ function tokenizeImportSyntax (eat, value) {\n }\n \n function tokenizeSFCBlocks (eat, value) {\n+  value = getValue(value)\n+\n   if (isQuery(value) || isScript(value) || isStyle(value)) {\n     const [, name] = value.match(/^<([a-zA-Z0-9_-]+)[^>]*>/)\n     const re = new RegExp(`^<${name}[^>]*>(.|\\\\n|\\\\t)*?<\\\\/${name}>`)\n@@ -33,6 +37,8 @@ function tokenizeSFCBlocks (eat, value) {\n }\n \n function tokenizeVueComponents (eat, value) {\n+  value = getValue(value)\n+\n   if (isTag(value)) {\n     const [, name] = value.match(/^<\\/?([a-zA-Z0-9_-]+)[^>]*>/) || []\n ",
    "output": "fix(vue-remark): process style tags after components (#693)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-datocms/index.js b/packages/source-datocms/index.js\nindex d7e35cc..ab5946d 100644\n--- a/packages/source-datocms/index.js\n+++ b/packages/source-datocms/index.js\n@@ -29,8 +29,7 @@ class DatoCmsSource {\n       typeName: 'DatoCms',\n       apiToken: undefined,\n       previewMode: false,\n-      apiUrl: undefined,\n-      routes: {}\n+      apiUrl: undefined\n     }\n   }\n \n@@ -39,9 +38,16 @@ class DatoCmsSource {\n     api.loadSource(args => this.fetchContent(args))\n   }\n \n+  createTypeName (name) {\n+    return (\n+      this.options.typeName.charAt(0).toUpperCase() +\n+      camelize(`${this.options.typeName} ${name}`).slice(1)\n+    )\n+  }\n+\n   async fetchContent (store) {\n-    const { addContentType, getContentType, makeTypeName, slugify } = store\n-    const { apiToken, apiUrl, previewMode, routes } = this.options\n+    const { addCollection, getCollection } = store\n+    const { apiToken, apiUrl, previewMode } = this.options\n \n     const clientHeaders = {\n       'X-Reason': 'dump',\n@@ -66,12 +72,9 @@ class DatoCmsSource {\n \n       cache[itemType.id] = { titleField, slugField }\n \n-      const contentType = {\n-        typeName: makeTypeName(itemType.name),\n-        route: routes[itemType.name] || `/${slugify(itemType.name)}/:slug`\n-      }\n-\n-      const collection = addContentType(contentType)\n+      const collection = addCollection(\n+        this.createTypeName(itemType.name),\n+      )\n \n       fields\n         .filter(({ fieldType }) => ['link', 'links', 'rich_text'].includes(fieldType))\n@@ -81,13 +84,12 @@ class DatoCmsSource {\n             field.validators.itemsItemType ||\n             field.validators.richTextBlocks\n           ).itemTypes.map((id) => (\n-            makeTypeName(entitiesRepo.findEntity('item_type', id).name)\n+            this.createTypeName(entitiesRepo.findEntity('item_type', id).name)\n           ))\n \n           collection.addReference(\n             camelize(field.apiKey),\n             {\n-              key: '_id',\n               typeName: typeNames.length > 1 ? typeNames : typeNames[0]\n             }\n           )\n@@ -96,16 +98,16 @@ class DatoCmsSource {\n \n     for (const item of Object.values(itemsRepo.itemsById)) {\n       const { titleField, slugField } = cache[item.itemType.id]\n-      const typeName = makeTypeName(item.itemType.name)\n-      const collection = getContentType(typeName)\n+      const typeName = this.createTypeName(item.itemType.name)\n+      const collection = getCollection(typeName)\n \n       const node = {\n-        _id: item.id,\n+        id: item.id,\n         title: titleField && item[camelize(titleField.apiKey)],\n         slug: slugField && item[camelize(slugField.apiKey)],\n         created: new Date(item.createdAt),\n         updated: new Date(item.updatedAt),\n-        fields: item.itemType.fields.reduce((fields, field) => {\n+        ...item.itemType.fields.reduce((fields, field) => {\n           const val = item.readAttribute(field)\n \n           if (item.itemType.hasOwnProperty('apiKey')) {",
    "output": "feat(datocms): changes for gridsome v0.7 support"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex 8ec99a5..46316cd 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -2,7 +2,7 @@ const path = require('path')\n const pathToRegexp = require('path-to-regexp')\n const Filesystem = require('@gridsome/source-filesystem')\n const RemarkTransformer = require('@gridsome/transformer-remark')\n-const { trimEnd } = require('lodash')\n+const { trimEnd, kebabCase } = require('lodash')\n \n const toSFC = require('./lib/toSfc')\n const sfcSyntax = require('./lib/sfcSyntax')\n@@ -50,6 +50,16 @@ const createCustomBlockRule = (config, type) => {\n     })\n }\n \n+const genChunkName = (context, component) => {\n+  const chunkName = path.relative(context, component)\n+    .split('/')\n+    .filter(s => s !== '..')\n+    .map(s => kebabCase(s))\n+    .join('--')\n+\n+  return `vue-remark--${chunkName}`\n+}\n+\n // TODO: refactor and clean up\n \n class VueRemark {\n@@ -251,13 +261,18 @@ class VueRemark {\n       const node = nodes[i]\n \n       if (this.template) {\n+        const chunkName = genChunkName(\n+          this.api.context,\n+          node.internal.origin\n+        )\n+\n         createPage({\n           path: node.path,\n           component: this.template,\n           queryVariables: node,\n           route: {\n             meta: {\n-              $vueRemark: `() => import(${JSON.stringify(node.internal.origin)})`\n+              $vueRemark: `() => import(/* webpackChunkName: \"${chunkName}\" */ ${JSON.stringify(node.internal.origin)})`\n             }\n           }\n         })",
    "output": "fix(vue-remark): generate route chunk names"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex 01a4a49..0a61f2d 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -76,6 +76,14 @@ class VueRemark {\n       throw new Error(`@gridsome/vue-remark requires the 'typeName' option.`)\n     }\n \n+    if (api.config.templates[options.typeName]) {\n+      throw new Error(\n+        `@gridsome/vue-remark does not work with a template. ` +\n+        `Remove \"${options.typeName}\" from the global templates config ` +\n+        `and use the \"template\" option for the plugin instead.`\n+      )\n+    }\n+\n     this.api = api\n     this.options = options\n     this.context = options.baseDir ? api.resolve(options.baseDir) : api.context",
    "output": "fix(vue-remark): throw error if using global templates"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/transforms.js b/gridsome/lib/graphql/transforms.js\nindex 9e35335..ae6f93e 100644\n--- a/gridsome/lib/graphql/transforms.js\n+++ b/gridsome/lib/graphql/transforms.js\n@@ -19,18 +19,21 @@ function fixIncorrectVariableUsage (schema, ast, variableDef) {\n       if (node.value.kind === Kind.VARIABLE && node.name.value === name) {\n         const argumentType = schema.getType(typeNode.name.value)\n         const inputType = typeInfo.getInputType()\n-        const typeName = inputType.toString()\n \n-        if (argumentType && argumentType !== inputType) {\n-          incorrectNodes.push({\n-            name: node.name.value,\n-            oldType: typeNode.name.value,\n-            newType: typeName\n-          })\n+        if (inputType) {\n+          const typeName = inputType.toString()\n \n-          typeNode.name.value = typeName\n+          if (argumentType && argumentType !== inputType) {\n+            incorrectNodes.push({\n+              name: node.name.value,\n+              oldType: typeNode.name.value,\n+              newType: typeName\n+            })\n \n-          return BREAK\n+            typeNode.name.value = typeName\n+\n+            return BREAK\n+          }\n         }\n       }\n     }",
    "output": "fix(graphql): don\u2019t transform missing input types"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 5703a28..e3ea566 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -101,12 +101,21 @@ test('get node by path', async () => {\n   })\n \n   posts.addNode({ id: '1', path: '/test' })\n+  posts.addNode({ id: '2', path: '/test/2/' })\n+  posts.addNode({ id: '3', path: '/' })\n \n-  const query = '{ testPost (path: \"/test\") { id }}'\n-  const { errors, data } = await createSchemaAndExecute(query)\n+  const { errors, data } = await createSchemaAndExecute(`{\n+    testPost (path: \"/test\") { id }\n+    testPost2: testPost (path: \"/test/2\") { id }\n+    testPost3: testPost (path: \"/test/\") { id }\n+    testPost4: testPost (path: \"/\") { id }\n+  }`)\n \n   expect(errors).toBeUndefined()\n   expect(data.testPost.id).toEqual('1')\n+  expect(data.testPost2.id).toEqual('2')\n+  expect(data.testPost3.id).toEqual('1')\n+  expect(data.testPost4.id).toEqual('3')\n })\n \n test('get node by id', async () => {\n@@ -115,13 +124,17 @@ test('get node by id', async () => {\n   })\n \n   collection.addNode({ id: '20', title: 'Test' })\n+  collection.addNode({ id: 21, title: 'Test' })\n \n-  const query = '{ testPost (id: \"20\") { id title }}'\n-  const { errors, data } = await createSchemaAndExecute(query)\n+  const { errors, data } = await createSchemaAndExecute(`{\n+    testPost (id: \"20\") { id title }\n+    testPost2: testPost (id: \"21\") { id title }\n+  }`)\n \n   expect(errors).toBeUndefined()\n   expect(data.testPost.id).toEqual('20')\n   expect(data.testPost.title).toEqual('Test')\n+  expect(data.testPost2.id).toEqual('21')\n })\n \n test('create connection', async () => {\ndiff --git a/gridsome/lib/graphql/nodes/resolvers.js b/gridsome/lib/graphql/nodes/resolvers.js\nindex 7d8f106..d7cfb12 100644\n--- a/gridsome/lib/graphql/nodes/resolvers.js\n+++ b/gridsome/lib/graphql/nodes/resolvers.js\n@@ -1,5 +1,6 @@\n const { isRefField } = require('../../store/utils')\n const { toFilterArgs } = require('../filters/query')\n+const { trimEnd } = require('lodash')\n \n const {\n   applyChainArgs,\n@@ -19,7 +20,8 @@ exports.createFindOneResolver = function (typeComposer) {\n     } else if (args.path) {\n       // must use collection.findOne() here because\n       // collection.by() doesn't update after changes\n-      node = collection.findOne({ path: args.path })\n+      const re = new RegExp(`^${trimEnd(args.path, '/')}/?$`)\n+      node = collection.findOne({ path: { $regex: re } })\n     }\n \n     return node || null",
    "output": "fix(graphql): ignore trailing slash for path argument"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex 838025b..01a4a49 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -36,6 +36,20 @@ const normalizeRouteKeys = keys => keys\n     }\n   })\n \n+const createCustomBlockRule = (config, type) => {\n+  const re = new RegExp(`blockType=(${type})`)\n+\n+  config.module.rule(type)\n+    .resourceQuery(re)\n+    .use('babel-loader')\n+    .loader('babel-loader')\n+    .options({\n+      presets: [\n+        require.resolve('@vue/babel-preset-app')\n+      ]\n+    })\n+}\n+\n // TODO: refactor and clean up\n \n class VueRemark {\n@@ -197,6 +211,9 @@ class VueRemark {\n     const vueLoader = config.module.rule('vue').use('vue-loader')\n     const includePaths = this.options.includePaths.map(p => this.api.resolve(p))\n \n+    createCustomBlockRule(config, 'vue-remark-import')\n+    createCustomBlockRule(config, 'vue-remark-frontmatter')\n+\n     config.module.rule('vue-remark')\n       .test(/\\.md$/)\n       .include\ndiff --git a/packages/vue-remark/package.json b/packages/vue-remark/package.json\nindex 1badf91..a5e17be 100644\n--- a/packages/vue-remark/package.json\n+++ b/packages/vue-remark/package.json\n@@ -16,6 +16,7 @@\n     \"@babel/traverse\": \"^7.0.0\",\n     \"@gridsome/source-filesystem\": \"^0.6.0\",\n     \"@gridsome/transformer-remark\": \"^0.3.3\",\n+    \"@vue/babel-preset-app\": \"^3.11.0\",\n     \"hash-sum\": \"^1.0.2\",\n     \"hast-util-to-html\": \"^5.0.0\",\n     \"he\": \"^1.2.0\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 8f83c2a..bb9268f 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -1982,7 +1982,7 @@\n     lodash.kebabcase \"^4.1.1\"\n     svg-tags \"^1.0.0\"\n \n-\"@vue/babel-preset-app@^3.4.0\":\n+\"@vue/babel-preset-app@^3.11.0\", \"@vue/babel-preset-app@^3.4.0\":\n   version \"3.11.0\"\n   resolved \"https://registry.yarnpkg.com/@vue/babel-preset-app/-/babel-preset-app-3.11.0.tgz#52bf79c15560a304a13f4770e3e5530e01dd6173\"\n   integrity sha512-fcCq9nuGGx1WGnyaKHvIC8RnWjISXGf1rJH4mN9+bymDfosgDbwnfV4TYvTZlyK1/aTHEEpIoO3XimTXBo7QBw==",
    "output": "fix(vue-remark): transpile custom sfc blocks"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/README.md b/packages/transformer-remark/README.md\nindex 0b6bb4f..e76e4b7 100644\n--- a/packages/transformer-remark/README.md\n+++ b/packages/transformer-remark/README.md\n@@ -131,3 +131,22 @@ Automatically add links to headings. Disabled if `slug` is `false`.\n - Default: `true`\n \n Support ASCII guillements (`<<`, `>>`) and mapping them to HTML.\n+\n+#### imageQuality\n+\n+- Type: `number`\n+- Default: `75`\n+\n+#### imageBlurRatio\n+\n+- Type: `number`\n+- Default: `40`\n+\n+#### imageBackground\n+\n+- Type: `string`\n+\n+#### lazyLoadImages\n+\n+- Type: `boolean`\n+- Default: `true`\ndiff --git a/packages/transformer-remark/lib/plugins/image.js b/packages/transformer-remark/lib/plugins/image.js\nindex a885266..f1abbbf 100644\n--- a/packages/transformer-remark/lib/plugins/image.js\n+++ b/packages/transformer-remark/lib/plugins/image.js\n@@ -1,6 +1,6 @@\n const visit = require('unist-util-visit')\n \n-module.exports = function attacher () {\n+module.exports = function attacher (options = {}) {\n   const transformer = this.data('transformer')\n \n   return async function transform (tree, file, callback) {\n@@ -28,7 +28,8 @@ module.exports = function attacher () {\n           alt: props.alt || node.alt,\n           width: props.width,\n           height: props.height,\n-          classNames\n+          classNames,\n+          ...options\n         })\n \n         imageHTML = asset.imageHTML\ndiff --git a/packages/transformer-remark/lib/utils.js b/packages/transformer-remark/lib/utils.js\nindex 695a9a2..3264dac 100644\n--- a/packages/transformer-remark/lib/utils.js\n+++ b/packages/transformer-remark/lib/utils.js\n@@ -32,7 +32,12 @@ exports.createPlugins = function (options, localOptions) {\n   }\n \n   if (options.processImages !== false) {\n-    plugins.push(require('./plugins/image'))\n+    plugins.push([require('./plugins/image'), {\n+      blur: options.imageBlurRatio,\n+      quality: options.imageQuality,\n+      background: options.imageBackground,\n+      immediate: options.lazyLoadImages === false ? true : undefined\n+    }])\n   }\n \n   if (options.slug !== false) {",
    "output": "fix(remark): add more image options (#489, #674)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex c0b42c7..c097c4c 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -116,6 +116,12 @@ class VueRemark {\n     api.chainWebpack(config => this.chainWebpack(config))\n     api.createPages(actions => this.createPages(actions))\n \n+    if (api._app.compiler.hooks.cacheIdentifier) {\n+      api._app.compiler.hooks.cacheIdentifier.tap('VueRemark', id => {\n+        id['vue-remark'] = require('./package.json').version\n+      })\n+    }\n+\n     api._app.pages.hooks.parseComponent.for('md').tap('VueRemark', source => {\n       const pageQueryRE = /<page-query>([^</]+)<\\/page-query>/\n       const ast = this.remark.processor.parse(source)\ndiff --git a/packages/vue-remark/lib/toSfc.js b/packages/vue-remark/lib/toSfc.js\nindex 2e1bbdc..ddf229d 100644\n--- a/packages/vue-remark/lib/toSfc.js\n+++ b/packages/vue-remark/lib/toSfc.js\n@@ -33,7 +33,7 @@ module.exports = function toSfc () {\n           return h(node, 'g-link', { to: node.url }, node.children)\n         },\n         'g-image' (h, node) {\n-          return h(node, 'g-image', { src: node.url })\n+          return h(node, 'g-image', { src: node.url, alt: node.alt, title: node.title })\n         },\n         'text' (h, node) {\n           return h.augment(node, u('raw', he.encode(node.value)))",
    "output": "fix(vue-remark): include alt tag for images"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/lib/codegen.js b/packages/vue-remark/lib/codegen.js\nindex 040fd42..d7435c3 100644\n--- a/packages/vue-remark/lib/codegen.js\n+++ b/packages/vue-remark/lib/codegen.js\n@@ -24,12 +24,15 @@ exports.genImportBlock = function (statements, file) {\n   const identifiers = {}\n \n   traverse(ast, {\n-    Identifier (path) {\n-      identifiers[path.node.name] = true\n+    ImportDefaultSpecifier (path) {\n+      identifiers[path.node.local.name] = true\n+    },\n+    ImportSpecifier (path) {\n+      identifiers[path.node.local.name] = true\n     }\n   })\n \n-  code += '\\n\\n' +\n+  code += '\\n' +\n     `import Vue from 'vue'\\n\\n` +\n     `const strats = Vue.config.optionMergeStrategies\\n` +\n     `const imported = {${Object.keys(identifiers).join(', ')}}\\n\\n` +\n@@ -58,7 +61,7 @@ exports.genFrontMatterBlock = function (data) {\n       return acc\n     }, {})\n \n-  return '\\n' +\n+  return '' +\n    `<vue-remark-frontmatter>\\n` +\n    `import Vue from 'vue'\\n\\n` +\n    `const strats = Vue.config.optionMergeStrategies\\n` +",
    "output": "fix(vue-remark): support import as syntax"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 8ded053..5703a28 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -353,6 +353,25 @@ test('create references with collection.addReference()', async () => {\n   expect(data.post.authors).toHaveLength(1)\n })\n \n+test('create missing reference fields from collection.addReference()', async () => {\n+  const posts = api.store.addCollection('Post')\n+\n+  api.store.addCollection('Author')\n+  posts.addReference('author', 'Author')\n+  posts.addNode({ id: '1' })\n+\n+  const query = `{\n+    post (id: \"1\") {\n+      author { id }\n+    }\n+  }`\n+\n+  const { errors, data } = await createSchemaAndExecute(query)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.post.author).toBeNull()\n+})\n+\n test('don\\'t process invalid refs from collection.addReference()', () => {\n   const authors = api.store.addCollection('Author')\n   const posts = api.store.addCollection('Post')\ndiff --git a/gridsome/lib/graphql/nodes/index.js b/gridsome/lib/graphql/nodes/index.js\nindex 216dd21..ff5739a 100644\n--- a/gridsome/lib/graphql/nodes/index.js\n+++ b/gridsome/lib/graphql/nodes/index.js\n@@ -254,22 +254,10 @@ function createTypeResolvers (typeComposer, collection) {\n function createReferenceFields (schemaComposer, typeComposer, collection) {\n   if (isEmpty(collection._refs)) return\n \n-  const refs = mapValues(collection._refs, ({ typeName, extensions }, fieldName) => {\n+  const refs = mapValues(collection._refs, ({ typeName }, fieldName) => {\n     const refTypeComposer = schemaComposer.get(typeName)\n \n-    if (!typeComposer.hasField(fieldName)) {\n-      const typeName = typeComposer.getTypeName()\n-      const key = extensions && extensions.proxy\n-        ? extensions.proxy.from\n-        : fieldName\n-\n-      throw new Error(\n-        `Could not setup reference for ${typeName}.${fieldName}. ` +\n-        `The ${key} field does not exist.`\n-      )\n-    }\n-\n-    return typeComposer.isFieldPlural(fieldName)\n+    return typeComposer.hasField(fieldName) && typeComposer.isFieldPlural(fieldName)\n       ? refTypeComposer.getResolver('referenceManyAdvanced')\n       : refTypeComposer.getResolver('referenceOne')\n   })\n@@ -277,6 +265,8 @@ function createReferenceFields (schemaComposer, typeComposer, collection) {\n   typeComposer.addFields(refs)\n \n   mapValues(collection._refs, ({ extensions = {}}, fieldName) => {\n-    typeComposer.extendFieldExtensions(fieldName, extensions)\n+    if (typeComposer.hasField(fieldName)) {\n+      typeComposer.extendFieldExtensions(fieldName, extensions)\n+    }\n   })\n }\ndiff --git a/gridsome/lib/graphql/types/file.js b/gridsome/lib/graphql/types/file.js\nindex 2fea968..5cfd332 100644\n--- a/gridsome/lib/graphql/types/file.js\n+++ b/gridsome/lib/graphql/types/file.js\n@@ -41,7 +41,7 @@ exports.fileType = {\n \n     if (!value) return null\n \n-    const result = await context.queue.add(value)\n+    const result = await context.assets.add(value)\n \n     if (result.isUrl) {\n       return result.src",
    "output": "fix(graphql): auto create missing reference fields"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 202fd68..8ded053 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -353,6 +353,18 @@ test('create references with collection.addReference()', async () => {\n   expect(data.post.authors).toHaveLength(1)\n })\n \n+test('don\\'t process invalid refs from collection.addReference()', () => {\n+  const authors = api.store.addCollection('Author')\n+  const posts = api.store.addCollection('Post')\n+\n+  authors.addNode({ id: '1', title: 'An Author' })\n+  posts.addNode({ id: '1', authors: [null] })\n+\n+  posts.addReference('authors', 'Author')\n+\n+  expect(() => app.schema.buildSchema()).not.toThrow('object')\n+})\n+\n test('proxy invalid field names in collection.addReference()', async () => {\n   const authors = api.store.addCollection('Author')\n   const posts = api.store.addCollection('Post')\ndiff --git a/gridsome/lib/graphql/utils.js b/gridsome/lib/graphql/utils.js\nindex fbb4f18..df4afdc 100644\n--- a/gridsome/lib/graphql/utils.js\n+++ b/gridsome/lib/graphql/utils.js\n@@ -1,5 +1,5 @@\n const camelCase = require('camelcase')\n-const { isObject } = require('lodash')\n+const { isObject, isPlainObject } = require('lodash')\n \n const {\n   ThunkComposer,\n@@ -28,13 +28,9 @@ exports.is32BitInt = function (x) {\n \n exports.CreatedGraphQLType = CreatedGraphQLType\n \n-exports.is32BitInt = function (x) {\n-  return (x | 0) === x\n-}\n-\n exports.isRefFieldDefinition = function (field) {\n   return (\n-    typeof field === 'object' &&\n+    isPlainObject(field) &&\n     Object.keys(field).length === 2 &&\n     field.hasOwnProperty('typeName') &&\n     field.hasOwnProperty('isList')\ndiff --git a/gridsome/lib/store/utils.js b/gridsome/lib/store/utils.js\nindex 7f6474a..03d517e 100644\n--- a/gridsome/lib/store/utils.js\n+++ b/gridsome/lib/store/utils.js\n@@ -4,6 +4,7 @@ const isUrl = require('is-url')\n const mime = require('mime-types')\n const camelCase = require('camelcase')\n const isRelative = require('is-relative')\n+const { isPlainObject } = require('lodash')\n const { isResolvablePath } = require('../utils')\n \n const nonValidCharsRE = new RegExp('[^a-zA-Z0-9_]', 'g')\n@@ -19,7 +20,7 @@ exports.createFieldName = function (key, camelCased = false) {\n \n exports.isRefField = function (field) {\n   return (\n-    typeof field === 'object' &&\n+    isPlainObject(field) &&\n     Object.keys(field).length === 2 &&\n     field.hasOwnProperty('typeName') &&\n     field.hasOwnProperty('id')",
    "output": "fix(graphql): don\u2019t process invalid references"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/index.js b/gridsome/index.js\nindex 3d2d409..75a550e 100644\n--- a/gridsome/index.js\n+++ b/gridsome/index.js\n@@ -42,11 +42,13 @@ module.exports = ({ context, program }) => {\n function wrapCommand (fn) {\n   return (context, args) => {\n     return fn(context, args).catch(err => {\n-      const callSite = getCallSite(err)\n-      const fileName = callSite ? callSite.getFileName() : ''\n-      const filePath = path.resolve(context, fileName)\n+      const callSite = getCallSite(context, err)\n+      const fileName = callSite ? callSite.getFileName() : null\n+      const filePath = typeof fileName === 'string'\n+        ? path.resolve(context, fileName)\n+        : null\n \n-      if (callSite && fs.existsSync(filePath)) {\n+      if (filePath && fs.existsSync(filePath)) {\n         const line = callSite.getLineNumber()\n         const column = callSite.getColumnNumber() || 0\n         const fileContent = fs.readFileSync(filePath, 'utf8')\n@@ -69,8 +71,13 @@ function wrapCommand (fn) {\n   }\n }\n \n-function getCallSite (err) {\n+function getCallSite (context, err) {\n   return stackTrace.parse(err).find(callSite => {\n-    return !/node_modules/.test(callSite.getFileName())\n+    const fileName = callSite.getFileName() || ''\n+\n+    return (\n+      fileName.startsWith(context) &&\n+      !/node_modules/.test(fileName)\n+    )\n   })\n }\ndiff --git a/gridsome/lib/app/Compiler.js b/gridsome/lib/app/Compiler.js\nindex 04ad708..85f3b1c 100644\n--- a/gridsome/lib/app/Compiler.js\n+++ b/gridsome/lib/app/Compiler.js\n@@ -1,5 +1,5 @@\n const fs = require('fs-extra')\n-const { AsyncSeriesHook } = require('tapable')\n+const { SyncWaterfallHook, AsyncSeriesHook } = require('tapable')\n const createClientConfig = require('../webpack/createClientConfig')\n const createServerConfig = require('../webpack/createServerConfig')\n \n@@ -8,6 +8,7 @@ class Compiler {\n     this._app = app\n \n     this.hooks = {\n+      cacheIdentifier: new SyncWaterfallHook(['identifier']),\n       chainWebpack: new AsyncSeriesHook(['chain', 'env'])\n     }\n   }\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 8ac32b8..9667b06 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -244,7 +244,7 @@ module.exports = (app, { isProd, isServer }) => {\n   // helpes\n \n   function createCacheOptions () {\n-    const values = {\n+    const values = app.compiler.hooks.cacheIdentifier.call({\n       'gridsome': require('../../package.json').version,\n       'cache-loader': require('cache-loader/package.json').version,\n       'vue-loader': require('vue-loader/package.json').version,\n@@ -254,7 +254,7 @@ module.exports = (app, { isProd, isServer }) => {\n       config: (\n         (projectConfig.chainWebpack || '').toString()\n       )\n-    }\n+    })\n \n     return {\n       cacheDirectory: app.resolve('node_modules/.cache/gridsome'),",
    "output": "fix(develop): show original error when no filename"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex 773c3fe..b7f230b 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -380,7 +380,11 @@ class Pages {\n \n     const ext = path.extname(component).substring(1)\n     const hook = this.hooks.parseComponent.get(ext)\n-    let results\n+    let results = {}\n+\n+    if (!fs.existsSync(component)) {\n+      throw new Error(`Could not find component ${component}.`)\n+    }\n \n     if (hook) {\n       const source = fs.readFileSync(component, 'utf8')",
    "output": "fix(pages): show an error if component is not found"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex cae96c4..107eaba 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -37,21 +37,23 @@ class ContentfulSource {\n     const contentTypes = await this.fetch('getContentTypes')\n     const richTextType = createRichTextType(this.options)\n \n-    const addCollection = actions.addCollection || actions.addContentType\n-\n     for (const contentType of contentTypes) {\n       const { name, sys: { id }} = contentType\n       const typeName = this.createTypeName(name)\n       const route = this.options.routes[name]\n-\n-      const collection = addCollection({ typeName, route })\n+      const resolvers = {}\n \n       for (const field of contentType.fields) {\n         if (field.type === 'RichText') {\n-          collection.addSchemaField(field.id, () => richTextType)\n+          resolvers[field.id] = richTextType\n         }\n       }\n \n+      actions.addCollection({ typeName, route })\n+      actions.addSchemaResolvers({\n+        [typeName]: resolvers\n+      })\n+\n       this.typesIndex[id] = { ...contentType, typeName }\n     }\n   }\ndiff --git a/packages/source-contentful/lib/types/rich-text.js b/packages/source-contentful/lib/types/rich-text.js\nindex 1d05af4..6f3fb5c 100644\n--- a/packages/source-contentful/lib/types/rich-text.js\n+++ b/packages/source-contentful/lib/types/rich-text.js\n@@ -1,5 +1,5 @@\n const { documentToHtmlString } = require('@contentful/rich-text-html-renderer')\n-const { GraphQLScalarType, GraphQLBoolean } = require('gridsome/graphql')\n+const { GraphQLScalarType } = require('gridsome/graphql')\n \n const ContentfulRichTextField = new GraphQLScalarType({\n   name: 'ContentfulRichTextField',\n@@ -9,12 +9,10 @@ const ContentfulRichTextField = new GraphQLScalarType({\n module.exports = options => ({\n   type: ContentfulRichTextField,\n   args: {\n-    html: { type: GraphQLBoolean, defaultValue: false }\n+    html: { type: 'Boolean', defaultValue: false }\n   },\n   resolve (obj, args, context, info) {\n-    const value = obj.$loki && obj.fields && obj.fields[info.fieldName]\n-      ? obj.fields[info.fieldName] // for gridsome < 0.6\n-      : obj[info.fieldName]\n+    const value = obj[info.fieldName]\n \n     const json = typeof value === 'string'\n       ? JSON.parse(value)",
    "output": "fix(contentful): add resolvers with schema api"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex fe2e451..cae96c4 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -17,7 +17,6 @@ class ContentfulSource {\n \n   constructor (api, options) {\n     this.options = options\n-    this.store = api.store\n     this.typesIndex = {}\n \n     this.client = contentful.createClient({\n@@ -60,10 +59,8 @@ class ContentfulSource {\n   async getAssets (actions) {\n     const assets = await this.fetch('getAssets')\n     const typeName = this.createTypeName('asset')\n-    const route = this.options.routes.asset || '/asset/:id'\n-\n-    const addCollection = actions.addCollection || actions.addContentType\n-    const collection = addCollection({ typeName, route })\n+    const route = this.options.routes.asset\n+    const collection = actions.addCollection({ typeName, route })\n \n     for (const asset of assets) {\n       collection.addNode({ ...asset.fields, id: asset.sys.id })\n@@ -72,12 +69,11 @@ class ContentfulSource {\n \n   async getEntries (actions) {\n     const entries = await this.fetch('getEntries')\n-    const getCollection = actions.getCollection || actions.getContentType\n \n     for (const entry of entries) {\n       const typeId = entry.sys.contentType.sys.id\n       const { typeName, displayField } = this.typesIndex[typeId]\n-      const collection = getCollection(typeName)\n+      const collection = actions.getCollection(typeName)\n       const node = {}\n \n       node.title = entry.fields[displayField]",
    "output": "fix(contentful): remove default routes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex b65eb8f..2c8f2eb 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -13,7 +13,6 @@ class WordPressSource {\n       apiBase: 'wp-json',\n       perPage: 100,\n       concurrent: 10,\n-      routes: {},\n       typeName: 'WordPress'\n     }\n   }\n@@ -36,13 +35,7 @@ class WordPressSource {\n       baseURL: `${baseUrl}/${options.apiBase}`\n     })\n \n-    this.routes = {\n-      post: '/:year/:month/:day/:slug',\n-      post_tag: '/tag/:slug',\n-      category: '/category/:slug',\n-      author: '/author/:slug',\n-      ...this.options.routes\n-    }\n+    this.routes = this.options.routes || {}\n \n     api.loadSource(async actions => {\n       this.store = actions\n@@ -67,7 +60,7 @@ class WordPressSource {\n \n       addCollection({\n         typeName: this.createTypeName(type),\n-        route: this.routes[type] || `/${options.rest_base}/:slug`\n+        route: this.routes[type]\n       })\n     }\n   }",
    "output": "fix(wordpress): don\u2019t add default routes"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/watch.js b/gridsome/lib/pages/watch.js\nindex 23d0c0d..92e0652 100644\n--- a/gridsome/lib/pages/watch.js\n+++ b/gridsome/lib/pages/watch.js\n@@ -1,3 +1,4 @@\n+const path = require('path')\n const { debounce } = require('lodash')\n \n module.exports = (app, pages) => {\n@@ -19,9 +20,10 @@ module.exports = (app, pages) => {\n     fetchQueries()\n   })\n \n-  pages._watcher.on('change', component => {\n+  pages._watcher.on('change', filePath => {\n     if (!app.isBootstrapped) return\n \n+    const component = path.normalize(filePath)\n     const routes = pages._routes.find({ component })\n     const length = routes.length\n \ndiff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 2b7d9e8..1fb57bf 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -1,6 +1,5 @@\n const path = require('path')\n const glob = require('globby')\n-const slash = require('slash')\n const crypto = require('crypto')\n const moment = require('moment')\n const chokidar = require('chokidar')\n@@ -325,7 +324,7 @@ class TemplatesPlugin {\n       const files = await glob(paths, { globstar: false, extglob: false })\n \n       for (const filePath of files) {\n-        createTemplate(filePath)\n+        createTemplate(path.normalize(filePath))\n       }\n \n       if (isDev) {\n@@ -334,8 +333,8 @@ class TemplatesPlugin {\n           ignoreInitial: true\n         })\n \n-        watcher.on('add', file => createTemplate(slash(file)))\n-        watcher.on('unlink', file => removeTemplate(slash(file)))\n+        watcher.on('add', file => createTemplate(path.normalize(file)))\n+        watcher.on('unlink', file => removeTemplate(path.normalize(file)))\n       }\n     })\n   }",
    "output": "fix(templates): fix templates on windows"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 57e1bba..553cd27 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -32,7 +32,9 @@ module.exports = async (context, args) => {\n \n   // copy static files\n   if (fs.existsSync(config.staticDir)) {\n-    await fs.copy(config.staticDir, config.outDir)\n+    await fs.copy(config.staticDir, config.outDir, {\n+      dereference: true\n+    })\n   }\n \n   await app.plugins.run('afterBuild', () => ({ context, config, queue, redirects }))",
    "output": "fix(build): support symlinks in static folder (#671)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-critical/index.js b/packages/plugin-critical/index.js\nindex b78a845..7ab017e 100644\n--- a/packages/plugin-critical/index.js\n+++ b/packages/plugin-critical/index.js\n@@ -1,12 +1,15 @@\n const micromatch = require('micromatch')\n const Worker = require('jest-worker').default\n \n+const normalize = p => p.replace(/\\/+$/, '') || '/'\n+\n module.exports = function (api, options) {\n   api.afterBuild(async ({ queue, config }) => {\n     const { outDir: base, pathPrefix, publicPath } = config\n+    const patterns = options.paths.map(p => normalize(p))\n \n     const pages = queue.filter(page => {\n-      return micromatch(page.path, options.paths).length\n+      return micromatch(page.path, patterns).length\n     })\n \n     const worker = new Worker(require.resolve('./lib/worker'))",
    "output": "fix(critical): ignore trailing slash in patterns"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex 5d412b6..5b77e50 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -2,7 +2,9 @@ module.exports = function (api, options) {\n   const path = require('path')\n   const fs = require('fs-extra')\n   const micromatch = require('micromatch')\n-  const exclude = options.exclude.slice()\n+\n+  const normalize = p => p.replace(/\\/+$/, '') || '/'\n+  const exclude = options.exclude.slice().map(p => normalize(p))\n \n   exclude.push('/404') // always exclude 404 page\n \n@@ -11,27 +13,36 @@ module.exports = function (api, options) {\n       throw new Error(`Sitemap plugin is missing a required siteUrl config.`)\n     }\n \n-    const patterns = Object.keys(options.config)\n+    const patterns = Object.keys(options.config).map(key => ({\n+      pattern: normalize(key),\n+      key\n+    }))\n+\n     const filename = path.join(config.outDir, options.output)\n     const pathPrefix = config.pathPrefix !== '/' ? config.pathPrefix : ''\n-    const pages = queue.filter(page => micromatch(page.path, exclude).length < 1)\n     const staticUrls = options.staticUrls || []\n+    const pages = queue\n+      .filter(page => page.type ? page.type === 'static' : true)\n+      .filter(page => micromatch(page.path, exclude).length < 1)\n \n     console.log(`Generate ${options.output} (${pages.length + staticUrls.length} pages)`)\n \n     const generatedUrls = pages.map(page => {\n-      const pattern = patterns.find(p => micromatch.isMatch(page.path, p))\n-      const urlConfig = options.config[pattern] || {}\n+      const pattern = patterns.find(p => micromatch.isMatch(page.path, p.pattern))\n+      const urlConfig = pattern ? options.config[pattern.key] : {}\n+      const url = page.publicPath || `${page.path}/`.replace(/\\/+$/, '/')\n \n       return {\n-        url: `${page.path}/`.replace(/\\/+$/, '/'),\n+        url: url.startsWith(pathPrefix)\n+          ? url.substr(pathPrefix.length)\n+          : url,\n         priority: urlConfig.priority,\n         changefreq: urlConfig.changefreq\n       }\n     })\n \n     const sitemap = require('sitemap').createSitemap({\n-      hostname: config.siteUrl.replace(/\\/+$/, '') + pathPrefix,\n+      hostname: normalize(config.siteUrl) + pathPrefix,\n       cacheTime: options.cacheTime,\n       urls: [...generatedUrls, ...staticUrls]\n     })",
    "output": "fix(sitemap): ignore trailing slash in patterns"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/createSchema.js b/gridsome/lib/graphql/createSchema.js\nindex 4f61e37..ddb5f06 100644\n--- a/gridsome/lib/graphql/createSchema.js\n+++ b/gridsome/lib/graphql/createSchema.js\n@@ -359,22 +359,25 @@ function addResolvers (schemaComposer, resolvers = {}) {\n           ? { resolve: fields[fieldName] }\n           : fields[fieldName]\n \n+        if (typeof fieldOptions.resolve !== 'function') {\n+          throw new Error(`Resolver for ${typeName}.${fieldName} must have a \"resolve\" function.`)\n+        }\n+\n         if (typeComposer.hasField(fieldName)) {\n-          const field = typeComposer.getFieldConfig(fieldName)\n-          const originalResolver = field.resolve || defaultFieldResolver\n-          const resolve = fieldOptions.resolve || originalResolver\n+          const fieldConfig = typeComposer.getFieldConfig(fieldName)\n+          const originalResolver = fieldConfig.resolve || defaultFieldResolver\n \n           typeComposer.setField(fieldName, {\n-            type: fieldOptions.type || field.type,\n-            args: fieldOptions.args || field.args,\n+            type: fieldOptions.type || fieldConfig.type,\n+            args: fieldOptions.args || fieldConfig.args,\n             extensions: fieldOptions.extensions || {},\n             resolve: (obj, args, ctx, info) => {\n-              return resolve(obj, args, ctx, { ...info, originalResolver })\n+              return fieldOptions.resolve(obj, args, ctx, { ...info, originalResolver })\n             }\n           })\n         } else {\n           if (!fieldOptions.type) {\n-            throw new Error(`${typeName}.${fieldName} must have a \"type\" property.`)\n+            throw new Error(`Resolver for ${typeName}.${fieldName} must have a \"type\" property.`)\n           }\n \n           typeComposer.setField(fieldName, fieldOptions)\ndiff --git a/gridsome/lib/graphql/extensions/index.js b/gridsome/lib/graphql/extensions/index.js\nindex fa6ba8c..3639db6 100644\n--- a/gridsome/lib/graphql/extensions/index.js\n+++ b/gridsome/lib/graphql/extensions/index.js\n@@ -87,7 +87,9 @@ function applyFieldExtensions (typeComposer, customExtensions = {}) {\n             fieldName\n           })\n \n-          typeComposer.extendField(fieldName, newFieldConfig)\n+          if (newFieldConfig) {\n+            typeComposer.extendField(fieldName, newFieldConfig)\n+          }\n         }\n       })\n   })\ndiff --git a/gridsome/lib/graphql/extensions/proxy.js b/gridsome/lib/graphql/extensions/proxy.js\nindex 74b82a7..09deece 100644\n--- a/gridsome/lib/graphql/extensions/proxy.js\n+++ b/gridsome/lib/graphql/extensions/proxy.js\n@@ -7,6 +7,8 @@ module.exports = {\n     from: 'String'\n   },\n   apply (ext, config) {\n+    if (typeof ext.from !== 'string') return\n+\n     const resolve = config.resolve || defaultFieldResolver\n     const fromPath = ext.from.split('.') // only supporting dot notation for now\n ",
    "output": "fix(graphql): require resolve for custom resolvers"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/createSchema.js b/gridsome/lib/graphql/createSchema.js\nindex 4a4ec2d..4f61e37 100644\n--- a/gridsome/lib/graphql/createSchema.js\n+++ b/gridsome/lib/graphql/createSchema.js\n@@ -238,16 +238,16 @@ function mergeTypes (schemaComposer, typeA, typeB) {\n }\n \n function processTypes (schemaComposer, extensions) {\n-  for (const [typeComposer] of schemaComposer.entries()) {\n+  for (const typeComposer of schemaComposer.values()) {\n     switch (typeComposer.constructor) {\n       case ObjectTypeComposer:\n-        processFields(schemaComposer, typeComposer, extensions)\n+        processObjectTypeFields(schemaComposer, typeComposer, extensions)\n         break\n     }\n   }\n }\n \n-function processFields (schemaComposer, typeComposer, extensions) {\n+function processObjectTypeFields (schemaComposer, typeComposer, extensions) {\n   const fields = typeComposer.getFields()\n \n   for (const fieldName in fields) {\n@@ -256,14 +256,6 @@ function processFields (schemaComposer, typeComposer, extensions) {\n     const extensions = typeComposer.getFieldExtensions(fieldName)\n     const typeName = fieldTypeComposer.getTypeName()\n \n-    if (\n-      !typeComposer.getExtension('isExternalType') &&\n-      fieldTypeComposer instanceof ObjectTypeComposer &&\n-      fieldTypeComposer !== typeComposer\n-    ) {\n-      processFields(schemaComposer, fieldTypeComposer)\n-    }\n-\n     if (\n       !typeComposer.getExtension('isCustomType') ||\n       // already has a custom resolver",
    "output": "fix(graphql): process object types only once"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex db12f66..00e7d91 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -18,8 +18,8 @@ export default (route, options = {}) => {\n     }\n \n     return new Promise((resolve, reject) => {\n-      if (force || !isLoaded[route.fullPath]) {\n-        isLoaded[route.fullPath] = fetch(process.env.GRAPHQL_ENDPOINT, {\n+      if (force || !isLoaded[route.path]) {\n+        isLoaded[route.path] = fetch(process.env.GRAPHQL_ENDPOINT, {\n           method: 'POST',\n           headers: { 'Content-Type': 'application/json' },\n           body: JSON.stringify({ path, dynamic })\n@@ -28,7 +28,7 @@ export default (route, options = {}) => {\n           .catch(reject)\n       }\n \n-      isLoaded[route.fullPath]\n+      isLoaded[route.path]\n         .then(res => {\n           if (res.errors) reject(res.errors[0])\n           else if (res.code) resolve({ code: res.code })\n@@ -38,6 +38,8 @@ export default (route, options = {}) => {\n               ? res.extensions.context\n               : {}\n           })\n+\n+          isLoaded[route.path] = null\n         })\n     })\n   }\ndiff --git a/gridsome/app/graphql/shared.js b/gridsome/app/graphql/shared.js\nindex 5d1cc71..254999e 100644\n--- a/gridsome/app/graphql/shared.js\n+++ b/gridsome/app/graphql/shared.js\n@@ -1,16 +1,20 @@\n import Vue from 'vue'\n+import { unslash } from '../utils/helpers'\n \n const cache = Vue.observable({})\n+const normalize = path => unslash(path) || '/'\n \n export function setResults (path, res) {\n-  return Vue.set(cache, path, res)\n+  return Vue.set(cache, normalize(path), res)\n }\n \n export function getResults (path) {\n-  return cache[path]\n+  return cache[normalize(path)]\n }\n \n export function clearAllResults (currentPath) {\n+  currentPath = normalize(currentPath)\n+\n   for (const path in cache) {\n     if (path !== currentPath) {\n       Vue.delete(cache, path)",
    "output": "fix(develop): refresh query results on navigation"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/lib/toVueRemarkAst.js b/packages/vue-remark/lib/toVueRemarkAst.js\nindex 879ca77..7ca7d2b 100644\n--- a/packages/vue-remark/lib/toVueRemarkAst.js\n+++ b/packages/vue-remark/lib/toVueRemarkAst.js\n@@ -4,12 +4,12 @@ module.exports = () => tree => {\n   visit(tree, 'code', node => {\n     const data = node.data = (node.data || {})\n     const props = data.hProperties = (data.hProperties || {})\n-    const lang = getLanguage(node)\n-\n-    // the language-* class name disappears\n-    // somehow when adding the v-pre prop\n-    if (lang) props.className = ['language-' + lang]\n+    props['v-pre'] = true\n+  })\n \n+  visit(tree, 'inlineCode', node => {\n+    const data = node.data = (node.data || {})\n+    const props = data.hProperties = (data.hProperties || {})\n     props['v-pre'] = true\n   })\n ",
    "output": "fix(vue-remark): don\u2019t interpolate inline code"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/gridsome.client.js b/packages/vue-remark/gridsome.client.js\nindex a083a56..05d72bd 100644\n--- a/packages/vue-remark/gridsome.client.js\n+++ b/packages/vue-remark/gridsome.client.js\n@@ -1,5 +1,13 @@\n import VueRemarkContent from './src/VueRemarkContent'\n \n-export default function (Vue) {\n+export default function (Vue, options, { router }) {\n   Vue.component('VueRemarkContent', VueRemarkContent)\n+\n+  router.beforeEach((to, from, next) => {\n+    if (typeof to.meta.$vueRemark === 'function') {\n+      to.meta.$vueRemark().then(() => next())\n+    } else {\n+      next()\n+    }\n+  })\n }",
    "output": "fix(vue-remark): preload VueRemarkContent component"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 59cb4fb..62a935a 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -8,14 +8,6 @@ const toHTML = require('hast-util-to-html')\n // load all prismjs languages\n require('prismjs/components/index')()\n \n-// highlight page-query and static-query in html\n-Prism.languages.html.graphql = {\n-  pattern: /(<(page|static)-query[\\s\\S]*?>)[\\s\\S]*?(?=<\\/(page|static)-query>)/i,\n-  inside: Prism.languages.graphql,\n-  lookbehind: true,\n-  greedy: true\n-}\n-\n module.exports = () => tree => {\n   visit(tree, 'code', (node, index, parent) => {\n     parent.children.splice(index, 1, createCode(node))",
    "output": "fix(prismjs): dont highlight page-query in html"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 8376c08..ca4519c 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -50,6 +50,8 @@ test('create node type with custom fields', async () => {\n     foo: 'bar',\n     emptyString: '',\n     price: '',\n+    emptyObj: {},\n+    emtpyList: [],\n     list: ['item'],\n     obj: {\n       foo: 'foo',\ndiff --git a/gridsome/lib/graphql/nodes/index.js b/gridsome/lib/graphql/nodes/index.js\nindex 25aef32..d50f071 100644\n--- a/gridsome/lib/graphql/nodes/index.js\n+++ b/gridsome/lib/graphql/nodes/index.js\n@@ -135,6 +135,8 @@ function processInferredFields (typeComposer, fieldDefs, fieldTypes) {\n     const options = fieldDefs[key]\n     const fieldType = fieldTypes[options.fieldName]\n \n+    if (!fieldType) continue\n+\n     fieldType.extensions = options.extensions\n \n     if (isPlainObject(options.value) && !isRefFieldDefinition(options.value)) {",
    "output": "fix(graphql): don\u2019t process empty object fields (#662)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/utils/deprecate.js b/gridsome/lib/utils/deprecate.js\nindex fa5cd03..df25636 100644\n--- a/gridsome/lib/utils/deprecate.js\n+++ b/gridsome/lib/utils/deprecate.js\n@@ -173,7 +173,7 @@ exports.logAllWarnings = context => {\n   })\n \n   const renderedColumns = columnify(columns, {\n-    maxWidth: Math.min(80, process.stdout.columns),\n+    maxWidth: Math.min(80, process.stdout.columns || Infinity),\n     preserveNewLines: true,\n     showHeaders: false\n   })",
    "output": "fix(build): ensure column width for deprecation notices"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 9f98aab..2b7d9e8 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -235,6 +235,23 @@ class TemplatesPlugin {\n           )\n         }\n \n+        const typeTemplates = templates.byTypeName.get(typeName)\n+        const collection = collections[typeName]\n+        const nodes = collection.data()\n+\n+        // remove automatic templates from collections\n+        // without a route where no nodes has a path\n+        for (const [index, tmpl] of typeTemplates.entries()) {\n+          if (\n+            tmpl.from === FROM_CONTENT_TYPE &&\n+            typeof tmpl.path === 'undefined' &&\n+            nodes.filter(node => node.path).length < 1\n+          ) {\n+            templates.byComponent.delete(tmpl.component)\n+            typeTemplates.splice(index, 1)\n+          }\n+        }\n+\n         templates.byTypeName.get(typeName).forEach(() => {\n           addSchemaResolvers({\n             [typeName]: {",
    "output": "fix(templates): skip auto template if no node paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/actions.js b/gridsome/lib/app/actions.js\nindex 35d18fa..e2a4847 100644\n--- a/gridsome/lib/app/actions.js\n+++ b/gridsome/lib/app/actions.js\n@@ -54,6 +54,14 @@ function createStoreActions (api, app) {\n     addCollection,\n     getCollection,\n \n+    getNodeByUid (uid) {\n+      return app.store.getNodeByUid(uid)\n+    },\n+\n+    getNode (typeName, id) {\n+      return app.store.getNode(typeName, id)\n+    },\n+\n     addMetadata (key, data) {\n       return app.store.addMetadata(key, data)\n     },\ndiff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex a2cd1c0..8af669c 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -838,17 +838,24 @@ test('modify node with api.onCreateNode()', async () => {\n \n test('get collection through actions', async () => {\n   let collection = null\n+  let node1\n+  let node2\n \n   await createApp(function (api) {\n     api.loadSource(({ addCollection }) => {\n-      addCollection('Test')\n+      const test = addCollection('Test')\n+      test.addNode({ id: '1', $uid: '123' })\n     })\n-    api.createSchema(({ getCollection }) => {\n+    api.createSchema(({ getCollection, getNodeByUid, getNode }) => {\n       collection = getCollection('Test')\n+      node1 = getNodeByUid('123')\n+      node2 = getNode('Test', '1')\n     })\n   })\n \n   expect(collection).not.toBeFalsy()\n+  expect(node1).not.toBeFalsy()\n+  expect(node2).not.toBeFalsy()\n })\n \n test('exclude node with api.onCreateNode()', async () => {",
    "output": "refactor(store): add getNodeByUid and getNode actions"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/normalizeNodeOptions.js b/gridsome/lib/store/normalizeNodeOptions.js\nindex fad8055..f3f4b4e 100644\n--- a/gridsome/lib/store/normalizeNodeOptions.js\n+++ b/gridsome/lib/store/normalizeNodeOptions.js\n@@ -11,12 +11,6 @@ module.exports = function normalizeNodeOptions (options, collection, useFallback\n   const nodeOptions = pick(options, NODE_FIELDS)\n   const customFields = omit(options, NODE_FIELDS)\n \n-  // TODO: remove before 1.0\n-  if (customFields.fields) {\n-    Object.assign(customFields, customFields.fields)\n-    delete customFields.fields\n-  }\n-\n   nodeOptions.internal = createInternal(collection, nodeOptions.internal)\n \n   if (useFallbacks) {\n@@ -28,9 +22,6 @@ module.exports = function normalizeNodeOptions (options, collection, useFallback\n     }\n   }\n \n-  // TODO: remove before 1.0\n-  if (nodeOptions._id) nodeOptions.id = nodeOptions._id\n-\n   return { ...customFields, ...nodeOptions }\n }\n \ndiff --git a/gridsome/lib/utils/constants.js b/gridsome/lib/utils/constants.js\nindex 8d34612..535c1b3 100644\n--- a/gridsome/lib/utils/constants.js\n+++ b/gridsome/lib/utils/constants.js\n@@ -18,7 +18,7 @@ module.exports = {\n   internalRE: /^internal:\\/\\//,\n   transformerRE: /(?:^@?gridsome[/-]|\\/)transformer-([\\w-]+)/,\n \n-  NODE_FIELDS: ['$uid', '$loki', 'internal', 'id', '_id'],\n+  NODE_FIELDS: ['$uid', '$loki', 'internal', 'id'],\n \n   SORT_ORDER: 'DESC',\n   PER_PAGE: 25,",
    "output": "fix(store): keep custom _id field on node"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/actions.js b/gridsome/lib/app/actions.js\nindex a1d1b41..35d18fa 100644\n--- a/gridsome/lib/app/actions.js\n+++ b/gridsome/lib/app/actions.js\n@@ -46,7 +46,7 @@ function createStoreActions (api, app) {\n   }\n \n   const getCollection = typeName => {\n-    store.getCollection(typeName)\n+    return store.getCollection(typeName)\n   }\n \n   return {\ndiff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex 8d00b82..a2cd1c0 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -836,6 +836,21 @@ test('modify node with api.onCreateNode()', async () => {\n   expect(node.title).toEqual('Some title')\n })\n \n+test('get collection through actions', async () => {\n+  let collection = null\n+\n+  await createApp(function (api) {\n+    api.loadSource(({ addCollection }) => {\n+      addCollection('Test')\n+    })\n+    api.createSchema(({ getCollection }) => {\n+      collection = getCollection('Test')\n+    })\n+  })\n+\n+  expect(collection).not.toBeFalsy()\n+})\n+\n test('exclude node with api.onCreateNode()', async () => {\n   const app = await createApp(function (api) {\n     api.loadSource(store => {",
    "output": "fix(store): return collection in getCollection action"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex 757827b..4a94a46 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -6,6 +6,10 @@ module.exports = ({ pages }) => {\n   return async function graphqlMiddleware (req, res, next) {\n     const { body = {}} = req\n \n+    const notFound = () => res\n+      .status(404)\n+      .send({ code: 404, message: `Could not find ${body.path}` })\n+\n     // allow OPTIONS method for cors\n     if (req.method === 'OPTIONS') {\n       return res.sendStatus(200)\n@@ -28,11 +32,7 @@ module.exports = ({ pages }) => {\n       params = match.params\n     }\n \n-    if (!route) {\n-      return res\n-        .status(404)\n-        .send({ code: 404, message: `Could not find ${body.path}` })\n-    }\n+    if (!route) return notFound()\n \n     // page/1/index.html is not statically generated\n     // in production and should return 404 in develop\n@@ -40,9 +40,7 @@ module.exports = ({ pages }) => {\n       currentPage = parseInt(params.page, 10) || 0\n \n       if (params.page && currentPage <= 1) {\n-        return res\n-          .status(404)\n-          .send({ code: 404, message: `Could not find ${body.path}` })\n+        return notFound()\n       }\n \n       delete params.page\n@@ -54,6 +52,8 @@ module.exports = ({ pages }) => {\n \n     const page = pages._pages.by('path', path)\n \n+    if (!page) return notFound()\n+\n     if (!route.internal.query.document) {\n       return res.json({\n         extensions: {",
    "output": "fix(graphql): return 404 for missing pages"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/metadata/index.js b/gridsome/lib/graphql/metadata.js\nsimilarity index 91%\nrename from gridsome/lib/graphql/metadata/index.js\nrename to gridsome/lib/graphql/metadata.js\nindex 93d0cef..187de8e 100644\n--- a/gridsome/lib/graphql/metadata/index.js\n+++ b/gridsome/lib/graphql/metadata.js\n@@ -1,6 +1,6 @@\n const { isEmpty } = require('lodash')\n-const { createFieldTypes } = require('../createFieldTypes')\n-const createFieldDefinitions = require('../createFieldDefinitions')\n+const { createFieldTypes } = require('./createFieldTypes')\n+const createFieldDefinitions = require('./createFieldDefinitions')\n \n module.exports = (schemaComposer, store) => {\n   const metadata = store.metadata.find().reduce((fields, obj) => {\ndiff --git a/gridsome/lib/graphql/pages/index.js b/gridsome/lib/graphql/pages.js\nsimilarity index 91%\nrename from gridsome/lib/graphql/pages/index.js\nrename to gridsome/lib/graphql/pages.js\nindex 0315d03..2564974 100644\n--- a/gridsome/lib/graphql/pages/index.js\n+++ b/gridsome/lib/graphql/pages.js\n@@ -1,5 +1,5 @@\n-const { createFilterInput } = require('../filters/input')\n-const { toFilterArgs } = require('../filters/query')\n+const { createFilterInput } = require('./filters/input')\n+const { toFilterArgs } = require('./filters/query')\n const { trimEnd } = require('lodash')\n \n module.exports = schemaComposer => {",
    "output": "fix(graphql): fix metadata module error"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/lib/utils.js b/packages/transformer-remark/lib/utils.js\nindex 099ab37..695a9a2 100644\n--- a/packages/transformer-remark/lib/utils.js\n+++ b/packages/transformer-remark/lib/utils.js\n@@ -27,8 +27,13 @@ exports.createPlugins = function (options, localOptions) {\n     return normalizePlugins(userPlugins || [])\n   }\n \n-  plugins.push(require('./plugins/file'))\n-  plugins.push(require('./plugins/image'))\n+  if (options.processFiles !== false) {\n+    plugins.push(require('./plugins/file'))\n+  }\n+\n+  if (options.processImages !== false) {\n+    plugins.push(require('./plugins/image'))\n+  }\n \n   if (options.slug !== false) {\n     plugins.push('remark-slug')",
    "output": "fix(remark): more options for disabling plugins"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/__tests__/gridsome.spec.js b/packages/cli/__tests__/gridsome.spec.js\nindex 16fe9c6..ed9c5a3 100644\n--- a/packages/cli/__tests__/gridsome.spec.js\n+++ b/packages/cli/__tests__/gridsome.spec.js\n@@ -23,7 +23,7 @@ test('warn about unknown command', async () => {\n })\n \n test('warn about missing dependencies', async () => {\n-  const { stdout } = await execa(cli, ['asdf'], {\n+  const { stdout } = await execa(cli, ['noop'], {\n     cwd: path.join(__dirname, '__fixtures__', 'project')\n   })\n \ndiff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 8c76211..a66f809 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -11,18 +11,6 @@ const pkgPath = require('find-up').sync('package.json')\n const context = pkgPath ? path.resolve(path.dirname(pkgPath)) : process.cwd()\n const version = resolveVersions(pkgPath)\n \n-function suggestCommands (cmd) {\n-  const availableCommands = program.commands.map(cmd => {\n-    return cmd._name\n-  })\n-\n-  const suggestion = didYouMean(cmd, availableCommands)\n-  if (suggestion) {\n-    console.log()\n-    console.log(`Did you mean ${suggestion}?`)\n-  }\n-}\n-\n program\n   .version(version, '-v, --version')\n   .usage('<command> [options]')\n@@ -36,9 +24,12 @@ program\n   })\n \n try {\n+  const commandsPath = resolveCwd.silent('gridsome/commands')\n   const gridsomePath = resolveCwd.silent('gridsome')\n \n-  if (gridsomePath) {\n+  if (commandsPath) {\n+    require(commandsPath)({ context, program })\n+  } else if (gridsomePath) {\n     require(gridsomePath)({ context, program })\n   }\n } catch (err) {\n@@ -48,8 +39,10 @@ try {\n // show a warning if the command does not exist\n program.arguments('<command>').action(async command => {\n   const { isGridsomeProject, hasYarn } = require('../lib/utils')\n+  const availableCommands = program.commands.map(cmd => cmd._name)\n+  const suggestion = didYouMean(command, availableCommands)\n \n-  if (isGridsomeProject(pkgPath)) {\n+  if (isGridsomeProject(pkgPath) && !suggestion) {\n     const useYarn = await hasYarn()\n \n     console.log()\n@@ -57,7 +50,10 @@ program.arguments('<command>').action(async command => {\n     console.log()\n   } else {\n     console.log(chalk.red(`Unknown command ${chalk.bold(command)}`))\n-    suggestCommands(command)\n+    if (suggestion) {\n+      console.log()\n+      console.log(`Did you mean ${suggestion}?`)\n+    }\n   }\n })\n ",
    "output": "fix(cli): show suggested command when installed"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/package.json b/gridsome/package.json\nindex c5e1ff9..c48b353 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -88,9 +88,9 @@\n     \"tapable\": \"2.0.0-beta.5\",\n     \"url-loader\": \"^1.1.2\",\n     \"vue\": \"^2.6.10\",\n-    \"vue-loader\": \"^15.7.0\",\n-    \"vue-meta\": \"^1.6.0\",\n-    \"vue-router\": \"^3.0.6\",\n+    \"vue-loader\": \"^15.7.1\",\n+    \"vue-meta\": \"^2.2.2\",\n+    \"vue-router\": \"^3.1.3\",\n     \"vue-server-renderer\": \"^2.6.10\",\n     \"vue-template-compiler\": \"^2.6.10\",\n     \"webpack\": \"^4.29.3\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 5aeb187..7217d4f 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -4687,11 +4687,6 @@ deepmerge@^1.5.2:\n   resolved \"https://registry.yarnpkg.com/deepmerge/-/deepmerge-1.5.2.tgz#10499d868844cdad4fee0842df8c7f6f0c95a753\"\n   integrity sha512-95k0GDqvBjZavkuvzx/YqVLv/6YYa17fz6ILMSf7neqQITCPbnfEnQvEgMPNjH4kgobe7+WIL0yJEHku+H3qtQ==\n \n-deepmerge@^3.2.0:\n-  version \"3.3.0\"\n-  resolved \"https://registry.yarnpkg.com/deepmerge/-/deepmerge-3.3.0.tgz#d3c47fd6f3a93d517b14426b0628a17b0125f5f7\"\n-  integrity sha512-GRQOafGHwMHpjPx9iCvTgpu9NojZ49q794EEL94JVEw6VaeA8XTUyBKvAkOOjBX9oJNiV6G3P+T+tihFjo2TqA==\n-\n deepmerge@^4.0.0:\n   version \"4.0.0\"\n   resolved \"https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.0.0.tgz#3e3110ca29205f120d7cb064960a39c3d2087c09\"\n@@ -8611,11 +8606,6 @@ lodash.uniq@^4.5.0:\n   resolved \"https://registry.yarnpkg.com/lodash.uniq/-/lodash.uniq-4.5.0.tgz#d0225373aeb652adc1bc82e4945339a842754773\"\n   integrity sha1-0CJTc662Uq3BvILklFM5qEJ1R3M=\n \n-lodash.uniqueid@^4.0.1:\n-  version \"4.0.1\"\n-  resolved \"https://registry.yarnpkg.com/lodash.uniqueid/-/lodash.uniqueid-4.0.1.tgz#3268f26a7c88e4f4b1758d679271814e31fa5b26\"\n-  integrity sha1-MmjyanyI5PSxdY1nknGBTjH6WyY=\n-\n lodash@4.17.11:\n   version \"4.17.11\"\n   resolved \"https://registry.yarnpkg.com/lodash/-/lodash-4.17.11.tgz#b39ea6229ef607ecd89e2c8df12536891cac9b8d\"\n@@ -13543,7 +13533,7 @@ vue-hot-reload-api@^2.3.0:\n   resolved \"https://registry.yarnpkg.com/vue-hot-reload-api/-/vue-hot-reload-api-2.3.3.tgz#2756f46cb3258054c5f4723de8ae7e87302a1ccf\"\n   integrity sha512-KmvZVtmM26BQOMK1rwUZsrqxEGeKiYSZGA7SNWE6uExx8UX/cj9hq2MRV/wWC3Cq6AoeDGk57rL9YMFRel/q+g==\n \n-vue-loader@^15.7.0:\n+vue-loader@^15.7.1:\n   version \"15.7.1\"\n   resolved \"https://registry.yarnpkg.com/vue-loader/-/vue-loader-15.7.1.tgz#6ccacd4122aa80f69baaac08ff295a62e3aefcfd\"\n   integrity sha512-fwIKtA23Pl/rqfYP5TSGK7gkEuLhoTvRYW+TU7ER3q9GpNLt/PjG5NLv3XHRDiTg7OPM1JcckBgds+VnAc+HbA==\n@@ -13554,17 +13544,14 @@ vue-loader@^15.7.0:\n     vue-hot-reload-api \"^2.3.0\"\n     vue-style-loader \"^4.1.0\"\n \n-vue-meta@^1.6.0:\n-  version \"1.6.0\"\n-  resolved \"https://registry.yarnpkg.com/vue-meta/-/vue-meta-1.6.0.tgz#89b664f6011a207e098e8ba3b9d32e29c819b65d\"\n-  integrity sha512-LLHejsOYbJiSEDSgZvjHB3fFY7lUxsDFLkuSqf5eBohEvhhddBTOHa3heoFTcI5sxsZSZt26uUzoLVe4CT6Y4A==\n+vue-meta@^2.2.2:\n+  version \"2.2.2\"\n+  resolved \"https://registry.yarnpkg.com/vue-meta/-/vue-meta-2.2.2.tgz#ec6be76d75b7d6e4abb6d995d92245487081428b\"\n+  integrity sha512-aSzjfc5xV3szxPZMsSk6JeoHUqwrVHNPzpMciTCek56LDd2xKWCv+Ch4IGWL5EIxVyfxA+krsD7T11PTyLY4TQ==\n   dependencies:\n-    deepmerge \"^3.2.0\"\n-    lodash.isplainobject \"^4.0.6\"\n-    lodash.uniqueid \"^4.0.1\"\n-    object-assign \"^4.1.1\"\n+    deepmerge \"^4.0.0\"\n \n-vue-router@^3.0.6:\n+vue-router@^3.1.3:\n   version \"3.1.3\"\n   resolved \"https://registry.yarnpkg.com/vue-router/-/vue-router-3.1.3.tgz#e6b14fabc0c0ee9fda0e2cbbda74b350e28e412b\"\n   integrity sha512-8iSa4mGNXBjyuSZFCCO4fiKfvzqk+mhL0lnKuGcQtO1eoj8nq3CmbEG8FwK5QqoqwDgsjsf1GDuisDX4cdb/aQ==",
    "output": "feat(app): upgrade to vue-meta v2.0"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-airtable/README.md b/packages/source-airtable/README.md\nindex 0f2d0f4..e27642b 100644\n--- a/packages/source-airtable/README.md\n+++ b/packages/source-airtable/README.md\n@@ -18,10 +18,12 @@ module.exports = {\n         baseId: 'YOUR_BASE_ID', // required\n         tableName: 'YOUR_TABLE_NAME', // required\n         typeName: 'YOUR_TYPE_NAME', // required\n-        route: 'YOUR_OPTIONAL_ROUTE' // optional\n       }\n     }\n-  ]\n+  ],\n+  templates: {\n+    YOUR_TYPE_NAME: 'YOUR_OPTIONAL_ROUTE' // optional\n+  }\n }\n ```\n \n@@ -31,4 +33,3 @@ module.exports = {\n 1. `baseId`: This can be found by going to https://airtable.com/api, clicking on your workspace, and will be visible in the url: https://airtable.com/{YOUR_BASE_ID}/api/docs#curl/introduction\n 1. `tableName`: This is the full name of your chosen workspace table, for example \"Furniture\" is the first and main table in the pre-defined workspace named \"Product Catalog & Orders\"\n 1. `typeName`: Your chosen type name. The type name \"Product\" is an example of an fitting route for the pre-defined airtable workspace named \"Product Catalog & Orders\"\n-1. `route`: Your chosen optional route name. The route \"/products/:name\" is an example of an fitting route for the pre-defined airtable workspace named \"Product Catalog & Orders\"\ndiff --git a/packages/source-airtable/index.js b/packages/source-airtable/index.js\nindex 2b6a54c..d3be6ec 100644\n--- a/packages/source-airtable/index.js\n+++ b/packages/source-airtable/index.js\n@@ -3,8 +3,10 @@ const Airtable = require('airtable')\n module.exports = function (api, options) {\n   const base = new Airtable({ apiKey: options.apiKey }).base(options.baseId)\n \n-  api.loadSource(async store => {\n-    const contentType = store.addContentType({\n+  api.loadSource(async actions => {\n+    const addCollection = actions.addCollection || actions.addContentType\n+\n+    const collection = addCollection({\n       camelCasedFieldNames: true,\n       typeName: options.typeName,\n       route: options.route\n@@ -13,7 +15,7 @@ module.exports = function (api, options) {\n     await base(options.tableName).select().eachPage((records, fetchNextPage) => {\n       records.forEach((record) => {\n         const item = record._rawJson\n-        contentType.addNode({\n+        collection.addNode({\n           id: item.id,\n           ...item.fields\n         })",
    "output": "fix(airtable): basic gridsome v0.7 support"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 620f073..e706756 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -32,11 +32,13 @@ class RemarkTransformer {\n     return ['text/markdown', 'text/x-markdown']\n   }\n \n-  constructor (options, { localOptions, resolveNodeFilePath, assets, queue }) {\n+  constructor (options, context) {\n+    const { localOptions, resolveNodeFilePath } = context\n+\n     this.options = defaultsDeep(localOptions, options)\n     this.processor = this.createProcessor(localOptions)\n     this.resolveNodeFilePath = resolveNodeFilePath\n-    this.assets = assets || queue\n+    this.assets = context.assets || context.queue\n   }\n \n   parse (source) {",
    "output": "fix(remark): basic gridsome v0.7 support"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Link.js b/gridsome/app/components/Link.js\nindex 877387b..48aada5 100644\n--- a/gridsome/app/components/Link.js\n+++ b/gridsome/app/components/Link.js\n@@ -23,7 +23,12 @@ export default {\n       return h('a', data, children)\n     }\n \n-    if (isExternalLink(attrs.href)){\n+    if (isExternalLink(props.to)) {\n+      // TODO: warn if props.to is an external url\n+      attrs.href = props.to\n+    }\n+\n+    if (isExternalLink(attrs.href)) {\n       attrs.target = attrs.target || '_blank'\n       attrs.rel = attrs.rel || 'noopener'\n \n@@ -69,6 +74,12 @@ export default {\n const externalRE = new RegExp('^(https?:|//)')\n \n function isExternalLink (string) {\n-  if (String(string).startsWith(config.siteUrl)) return false\n+  if (\n+    config.siteUrl &&\n+    String(string).startsWith(config.siteUrl)\n+  ) {\n+    return false\n+  }\n+\n   return externalRE.test(string)\n }\ndiff --git a/gridsome/app/utils/helpers.js b/gridsome/app/utils/helpers.js\nindex 7d09d28..86db41d 100644\n--- a/gridsome/app/utils/helpers.js\n+++ b/gridsome/app/utils/helpers.js\n@@ -1,5 +1,3 @@\n-import config from '~/.temp/config.js'\n-\n const publicPath = process.env.PUBLIC_PATH\n \n export function unslash (string) {\n@@ -48,19 +46,7 @@ export function parsePath (path) {\n   }\n }\n \n-export function normalizePath (path) {\n-  const { pathname, query, hash } = parsePath(path)\n-  const trailingSlash = config.trailingSlash === 'always'\n-  const unslashed = unslashStart(pathname).replace(/\\/+/g, '/')\n-\n-  if (/\\.\\w+$/.test(pathname)) {\n-    return path\n-  } else if (/\\/$/.test(unslashed)) {\n-    return `/${unslashed + query + hash}`\n-  }\n-\n-  const normalized = unslashed ? `/${unslashed}` : '/'\n-  const trailingValue = unslashed && trailingSlash ? '/' : ''\n-\n-  return normalized + trailingValue + query + hash\n+export function normalizePath (path = '/') {\n+  // TODO: warn if path misses a leading slash\n+  return `/${unslashStart(path)}`.replace(/\\/+/g, '/')\n }",
    "output": "fix(app): ensure siteUrl is set before checking url"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-filesystem/index.js b/packages/source-filesystem/index.js\nindex 9c66ff5..44c69bb 100644\n--- a/packages/source-filesystem/index.js\n+++ b/packages/source-filesystem/index.js\n@@ -122,7 +122,7 @@ class FilesystemSource {\n   async createNodeOptions (file) {\n     const origin = path.join(this.context, file)\n     const relPath = path.relative(this.context, file)\n-    const mimeType = this.store.mime.lookup(file)\n+    const mimeType = this.store.mime.lookup(file) || `application/x-${path.extname(file).replace('.', '')}`\n     const content = await fs.readFile(origin, 'utf8')\n     const id = this.store.makeUid(relPath)\n     const { dir, name, ext = '' } = path.parse(file)",
    "output": "fix(filesystem): add fallback mime type (#642)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex e85c686..64fed6c 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -54,7 +54,8 @@ test('create node type with custom fields', async () => {\n     price: '',\n     list: ['item'],\n     obj: {\n-      foo: 'foo'\n+      foo: 'foo',\n+      list: ['item']\n     }\n   })\n \n@@ -64,7 +65,8 @@ test('create node type with custom fields', async () => {\n     list: ['item'],\n     price: '198.00',\n     obj: {\n-      foo: 'bar'\n+      foo: 'bar',\n+      list: null\n     }\n   })\n \n@@ -74,18 +76,23 @@ test('create node type with custom fields', async () => {\n       list\n       price\n       emptyString\n-      obj { foo }\n+      obj {\n+        foo\n+        list\n+      }\n     }\n   }`\n \n-  const { data } = await createSchemaAndExecute(query)\n+  const { errors, data } = await createSchemaAndExecute(query)\n \n+  expect(errors).toBeUndefined()\n   expect(data.testPost.foo).toEqual('bar')\n   expect(data.testPost.emptyString).toEqual('')\n   expect(data.testPost.price).toEqual('198.00')\n   expect(data.testPost.list).toHaveLength(1)\n   expect(data.testPost.list[0]).toEqual('item')\n   expect(data.testPost.obj.foo).toEqual('bar')\n+  expect(data.testPost.obj.list).toHaveLength(0)\n })\n \n test('get node by path', async () => {\ndiff --git a/gridsome/lib/graphql/createFieldTypes.js b/gridsome/lib/graphql/createFieldTypes.js\nindex 14e58c1..46720fd 100644\n--- a/gridsome/lib/graphql/createFieldTypes.js\n+++ b/gridsome/lib/graphql/createFieldTypes.js\n@@ -45,7 +45,9 @@ function createFieldType (value, key, typeName, nodeTypes) {\n       args: type.args,\n       resolve: (obj, args, context, info) => {\n         const arr = fieldResolver(obj, args, context, info)\n-        return arr.map((_, i) => type.resolve(arr, args, context, {...info, fieldName: i}))\n+        return Array.isArray(arr)\n+          ? arr.map((_, i) => type.resolve(arr, args, context, { ...info, fieldName: i }))\n+          : []\n       }\n     } : null\n   }",
    "output": "fix(graphql): ensure field value is array for lists"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-drupal/README.md b/packages/source-drupal/README.md\nindex f7ed727..5765137 100644\n--- a/packages/source-drupal/README.md\n+++ b/packages/source-drupal/README.md\n@@ -15,6 +15,9 @@\n \n ### Quick Overview\n \n+**BREAKING CHANGE FROM 0.2.1 to 0.3.0**\n+The shape for accessing relationships on a node via GraphQL has changed. See [Example Page Queries](#example-page-queries).\n+\n This is the source plugin for pulling in data from the Drupal content management system for Gridsome. The Drupal module [JSON:API](https://www.drupal.org/project/jsonapi) is required for this plugin to work correctly. \n \n ### Install\n@@ -221,16 +224,26 @@ Get the details of an individual `DrupalNodeArticle` using `<page-query>` in a G\n         processed\n       },\n       field_image {\n-        filename,\n-        uri {\n-          url\n+        node {\n+          filename,\n+          uri {\n+            url\n+          }\n+        },\n+        meta {\n+          alt,\n+          title\n         }\n       },\n       field_tags {\n-        name,\n-        path\n+        node {\n+          name,\n+          path\n+        }\n       }\n     }\n   }\n </page-query>\n ```\n+\n+Any `relationships` containing a `meta` object in the JSON:API response will be merged as a sibling object alongside `node`. See `field_image` above as an example.\ndiff --git a/packages/source-drupal/lib/Entity.js b/packages/source-drupal/lib/Entity.js\nindex 3d64148..5b49506 100644\n--- a/packages/source-drupal/lib/Entity.js\n+++ b/packages/source-drupal/lib/Entity.js\n@@ -138,20 +138,28 @@ class Entity {\n   }\n \n   processRelationships (relationships) {\n-    const { createReference } = this.source.store\n-\n     return reduce(relationships, (result, relationship, key) => {\n       const { data } = relationship\n \n       if (data !== null) {\n         result[key] = Array.isArray(data)\n-          ? data.map(relation => createReference(this.createTypeName(relation.type), relation.id))\n-          : createReference(this.createTypeName(data.type), data.id)\n+          ? data.map(relation => this.createReference(relation))\n+          : this.createReference(data)\n       }\n \n       return result\n     }, {})\n   }\n+\n+  createReference (data) {\n+    const { createReference } = this.source.store\n+    const typeName = this.createTypeName(data.type)\n+\n+    return {\n+      node: createReference(typeName, data.id),\n+      meta: data.meta\n+    }\n+  }\n }\n \n module.exports = Entity",
    "output": "feat(drupal): meta and node fields for references (#619)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex d2a7056..1144cae 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -71,7 +71,7 @@ module.exports = (context, options = {}) => {\n \n   config.pkg = options.pkg || resolvePkg(context)\n   config.host = args.host || localConfig.host || 'localhost'\n-  config.port = parseInt(args.port || localConfig.port, 10) || 8080\n+  config.port = parseInt(args.port || localConfig.port, 10) || null\n   config.plugins = normalizePlugins(context, plugins)\n   config.transformers = resolveTransformers(config.pkg, localConfig)\n   config.pathPrefix = normalizePathPrefix(isProd ? localConfig.pathPrefix : '')\ndiff --git a/gridsome/lib/server/createExpressServer.js b/gridsome/lib/server/createExpressServer.js\nindex 421d1b9..d788b95 100644\n--- a/gridsome/lib/server/createExpressServer.js\n+++ b/gridsome/lib/server/createExpressServer.js\n@@ -12,7 +12,7 @@ const endpoint = {\n }\n \n module.exports = async (app, options = {}) => {\n-  const port = await resolvePort(app.config.port)\n+  const port = app.config.port || await resolvePort()\n   const { config, schema } = app\n   const server = express()\n ",
    "output": "fix(develop): always use port from cli args"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 96f12f2..8c76211 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -8,7 +8,7 @@ const resolveCwd = require('resolve-cwd')\n const resolveVersions = require('../lib/utils/version')\n const pkgPath = require('find-up').sync('package.json')\n \n-const context = pkgPath ? path.dirname(pkgPath) : process.cwd()\n+const context = pkgPath ? path.resolve(path.dirname(pkgPath)) : process.cwd()\n const version = resolveVersions(pkgPath)\n \n function suggestCommands (cmd) {",
    "output": "fix(cli): resolve context with package.json"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/utils.js b/gridsome/lib/store/utils.js\nindex 8dbd6db..1aba60b 100644\n--- a/gridsome/lib/store/utils.js\n+++ b/gridsome/lib/store/utils.js\n@@ -21,7 +21,7 @@ exports.parseUrl = function (input) {\n   const { protocol, host, path: pathName } = url.parse(input)\n   const basePath = pathName.endsWith('/') ? pathName : path.dirname(pathName)\n   const baseUrl = `${protocol}//${host}`\n-  const fullUrl = `${baseUrl}${path.join(basePath, '/')}`\n+  const fullUrl = `${baseUrl}${path.posix.join(basePath, '/')}`\n \n   return {\n     baseUrl,\n@@ -46,6 +46,7 @@ exports.resolvePath = function (origin, toPath, options = {}) {\n   const url = isUrl(origin) ? exports.parseUrl(origin) : null\n   const contextPath = url && resolveAbsolute === true ? url.baseUrl : context\n   const fromPath = url ? url.fullUrl : origin\n+  const resolver = url ? path.posix : path\n \n   if (path.isAbsolute(toPath) && !resolveAbsolute) {\n     return toPath\n@@ -54,12 +55,12 @@ exports.resolvePath = function (origin, toPath, options = {}) {\n   if (isRelative(toPath)) {\n     if (!fromPath) return toPath\n     const { rootPath, basePath } = parsePath(fromPath)\n-    return rootPath + path.resolve(basePath, toPath)\n+    return rootPath + resolver.resolve(basePath, toPath)\n   }\n \n   if (typeof contextPath === 'string') {\n     const { rootPath, basePath } = parsePath(contextPath)\n-    return rootPath + path.join(basePath, toPath)\n+    return rootPath + resolver.join(basePath, toPath)\n   }\n \n   return toPath",
    "output": "fix(store): resolve absolute url paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/__tests__/nodes.spec.js b/gridsome/lib/graphql/__tests__/nodes.spec.js\nindex 6267ceb..bd97694 100644\n--- a/gridsome/lib/graphql/__tests__/nodes.spec.js\n+++ b/gridsome/lib/graphql/__tests__/nodes.spec.js\n@@ -860,6 +860,28 @@ test('process image types in schema', async () => {\n   expect(data.testPost2.image5).toEqual('350x250.png')\n })\n \n+test('set background color for contain', async () => {\n+  const posts = api.store.addContentType('Post')\n+\n+  posts.addNode({\n+    id: '1',\n+    image: './350x250.png',\n+    internal: {\n+      origin: `${context}/assets/file.md`\n+    }\n+  })\n+\n+  const { errors, data } = await createSchemaAndExecute(`{\n+    post (id: \"1\") {\n+      image (width: 260, height: 70, fit:contain, background:\"blue\")\n+    }\n+  }`)\n+\n+  expect(errors).toBeUndefined()\n+  expect(data.post.image.src).toEqual('/assets/static/350x250.e38261d.test.png')\n+  expect(data.post.image.size).toMatchObject({ width: 260, height: 70 })\n+})\n+\n test('process file types in schema', async () => {\n   const posts = api.store.addContentType('TestPost')\n \ndiff --git a/gridsome/lib/graphql/types/image.js b/gridsome/lib/graphql/types/image.js\nindex c32e4c4..d4db05e 100644\n--- a/gridsome/lib/graphql/types/image.js\n+++ b/gridsome/lib/graphql/types/image.js\n@@ -5,6 +5,7 @@ const { SUPPORTED_IMAGE_TYPES } = require('../../utils/constants')\n \n const {\n   GraphQLInt,\n+  GraphQLString,\n   GraphQLEnumType,\n   GraphQLScalarType\n } = require('graphql')\n@@ -70,7 +71,8 @@ exports.imageType = {\n     height: { type: GraphQLInt, description: 'Height' },\n     fit: { type: imageFitType, description: 'Fit', defaultValue: 'cover' },\n     quality: { type: GraphQLInt, description: 'Quality (default: 75)' },\n-    blur: { type: GraphQLInt, description: 'Blur level for base64 string' }\n+    blur: { type: GraphQLInt, description: 'Blur level for base64 string' },\n+    background: { type: GraphQLString, description: 'Background color for \\'contain\\''}\n   },\n   async resolve (obj, args, context, { fieldName }) {\n     const value = obj[fieldName]",
    "output": "fix(graphql): image background argument (#596)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 1e255f4..d2a7056 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -270,18 +270,11 @@ function normalizeIconsConfig (config = {}) {\n \n   res.favicon = typeof icon.favicon === 'string'\n     ? { src: icon.favicon, sizes: faviconSizes }\n-    : Object.assign({}, icon.favicon, {\n-      sizes: faviconSizes,\n-      src: defaultIcon\n-    })\n+    : Object.assign({}, { src: defaultIcon, sizes: faviconSizes }, icon.favicon)\n \n   res.touchicon = typeof icon.touchicon === 'string'\n     ? { src: icon.touchicon, sizes: touchiconSizes, precomposed: false }\n-    : Object.assign({}, icon.touchicon, {\n-      sizes: touchiconSizes,\n-      src: res.favicon.src,\n-      precomposed: false\n-    })\n+    : Object.assign({}, { src: res.favicon.src, sizes: touchiconSizes, precomposed: false }, icon.touchicon)\n \n   return res\n }",
    "output": "fix(config): load custom favicon config (#526)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/types/date.js b/gridsome/lib/graphql/types/date.js\nindex 88c58ad..94a14b3 100644\n--- a/gridsome/lib/graphql/types/date.js\n+++ b/gridsome/lib/graphql/types/date.js\n@@ -24,7 +24,7 @@ exports.dateType = {\n     locale: { type: GraphQLString, description: 'Locale' }\n   },\n   resolve: (obj, args, context, { fieldName }) => {\n-    return formatDate(obj[fieldName], args)\n+    return obj[fieldName] ? formatDate(obj[fieldName], args) : null\n   }\n }\n \n@@ -33,7 +33,7 @@ exports.dateTypeField = {\n   ...exports.dateType,\n   resolve: (obj, args, context, info) => {\n     const value = fieldResolver(obj, args, context, info)\n-    return formatDate(value, args)\n+    return value ? formatDate(value, args) : null\n   }\n }\n ",
    "output": "fix(graphql): return null if date value is null or falsy (#527)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex 238ef6a..ed7b1e3 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -99,15 +99,19 @@ function fetchJSON (jsonPath) {\n     req.withCredentials = true\n \n     req.onload = () => {\n-      const contentType = req.getResponseHeader('Content-Type')\n-\n       switch (req.status) {\n         case 200: {\n-          if (contentType && /application\\/json/.test(contentType)) {\n-            return resolve(JSON.parse(req.responseText))\n-          } else {\n-            return reject(new Error(`Resource at ${jsonPath} is not JSON.`))\n+          let results\n+\n+          try {\n+            results = JSON.parse(req.responseText)\n+          } catch (err) {\n+            return reject(\n+              new Error(`Failed to parse JSON from ${jsonPath}. ${err.message}.`)\n+            )\n           }\n+\n+          return resolve(results)\n         }\n         case 404: {\n           const error = new Error(req.statusText)",
    "output": "fix(app): parse json regardless of content-type (#534)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex da9aac6..6fc2531 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -524,6 +524,7 @@ test('resolve file paths', () => {\n     url3: 'git@github.com:gridsome/gridsome.git',\n     url4: 'ftp://ftp.example.com',\n     email: 'email@example.com',\n+    email2: 'mailto:email@example.me',\n     text: 'Lorem ipsum dolor sit amet.',\n     text2: 'example.com',\n     text3: 'md',\n@@ -541,6 +542,7 @@ test('resolve file paths', () => {\n   expect(node.url3).toEqual('git@github.com:gridsome/gridsome.git')\n   expect(node.url4).toEqual('ftp://ftp.example.com')\n   expect(node.email).toEqual('email@example.com')\n+  expect(node.email2).toEqual('mailto:email@example.me')\n   expect(node.text).toEqual('Lorem ipsum dolor sit amet.')\n   expect(node.text2).toEqual('example.com')\n   expect(node.text3).toEqual('md')\ndiff --git a/gridsome/lib/store/utils.js b/gridsome/lib/store/utils.js\nindex 253b83a..8dbd6db 100644\n--- a/gridsome/lib/store/utils.js\n+++ b/gridsome/lib/store/utils.js\n@@ -4,6 +4,7 @@ const isUrl = require('is-url')\n const mime = require('mime-types')\n const camelCase = require('camelcase')\n const isRelative = require('is-relative')\n+const { isResolvablePath } = require('../utils')\n \n const nonValidCharsRE = new RegExp('[^a-zA-Z0-9_]', 'g')\n const leadingNumberRE = new RegExp('^([0-9])')\n@@ -34,10 +35,13 @@ exports.resolvePath = function (origin, toPath, options = {}) {\n \n   if (typeof toPath !== 'string') return toPath\n   if (typeof origin !== 'string') return toPath\n-  if (path.extname(toPath).length <= 1) return toPath\n   if (isUrl(toPath)) return toPath\n-  if (mime.lookup(toPath) === 'application/x-msdownload') return toPath\n-  if (!mime.lookup(toPath)) return toPath\n+  if (!isResolvablePath(toPath)) return toPath\n+\n+  const mimeType = mime.lookup(toPath)\n+\n+  if (!mimeType) return toPath\n+  if (mimeType === 'application/x-msdownload') return toPath\n \n   const url = isUrl(origin) ? exports.parseUrl(origin) : null\n   const contextPath = url && resolveAbsolute === true ? url.baseUrl : context",
    "output": "fix(store): do not resolve emails (#500)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex 0605b9a..83a0b18 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -16,7 +16,9 @@ module.exports = ({ pages }) => {\n \n     const page = pages.findPage({ path: body.path })\n \n-    if (!page) {\n+    // page/1/index.html is not statically generated\n+    // in production and should return 404 in develop\n+    if (!page || body.page === 1) {\n       return res\n         .status(404)\n         .send({ code: 404, message: `Could not find ${body.path}` })",
    "output": "fix(develop): show 404 for page/1 in development (#515)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/createExpressServer.js b/gridsome/lib/server/createExpressServer.js\nindex 14985ce..421d1b9 100644\n--- a/gridsome/lib/server/createExpressServer.js\n+++ b/gridsome/lib/server/createExpressServer.js\n@@ -40,10 +40,15 @@ module.exports = async (app, options = {}) => {\n         message: err.message,\n         stringified: err.toString()\n       }),\n-      extensions ({ variables: { __path }}) {\n-        if (__path) {\n-          const page = app.pages.findPage({ path: __path })\n-          return { context: page ? page.context : {}}\n+      extensions ({ variables }) {\n+        if (variables && variables.__path) {\n+          const page = app.pages.findPage({\n+            path: variables.__path\n+          })\n+\n+          return {\n+            context: page ? page.context : {}\n+          }\n         }\n       }\n     })\ndiff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex 647fd81..0605b9a 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -10,7 +10,7 @@ module.exports = ({ pages }) => {\n       return res.sendStatus(200)\n     }\n \n-    if (body.query) {\n+    if (body.query || !body.path) {\n       return next()\n     }\n ",
    "output": "fix(develop): request graphql endpoint without page path (#518)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/nodes/createType.js b/gridsome/lib/graphql/nodes/createType.js\nindex c3a4eb0..e9192af 100644\n--- a/gridsome/lib/graphql/nodes/createType.js\n+++ b/gridsome/lib/graphql/nodes/createType.js\n@@ -71,6 +71,7 @@ function createFields (contentType, customFields) {\n   if (isEmpty(customFields)) return {}\n \n   const fields = {\n+    resolve: obj => obj,\n     deprecationReason: 'Get field on node instead.',\n     type: new GraphQLObjectType({\n       name: `${contentType.typeName}Fields`,",
    "output": "fix(graphql): resolve deprecated node.fields field (#477)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex 6d6114f..25d1e6c 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -4,7 +4,6 @@ import icons from '~/.temp/icons.js'\n import config from '~/.temp/config.js'\n \n Vue.use(Meta, {\n-  // keyName: 'head', TODO: change this to 'head'\n   attribute: 'data-vue-tag',\n   ssrAttribute: 'data-html-server-rendered',\n   tagIDKeyName: 'key'\n@@ -22,8 +21,7 @@ const head = {\n     { charset: 'utf-8' },\n     { name: 'generator', content: `Gridsome v${config.version}` },\n     { key: 'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1, viewport-fit=cover' },\n-    { key: 'description', name: 'description', content: config.siteDescription },\n-    \n+\n     // do not convert telephone numbers\n     // into hypertext links because it\n     // will cause hydration errors\n@@ -40,6 +38,14 @@ const head = {\n   link: []\n }\n \n+if (config.siteDescription) {\n+  head.meta.push({\n+    key: 'description',\n+    name: 'description',\n+    content: config.siteDescription\n+  })\n+}\n+\n icons.favicons.forEach(({ width, height, src: href }) => {\n   head.link.push({\n     rel: 'icon',\ndiff --git a/gridsome/lib/__tests__/project-simple.build.e2e.js b/gridsome/lib/__tests__/project-simple.build.e2e.js\nindex 61da57c..33febda 100644\n--- a/gridsome/lib/__tests__/project-simple.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-simple.build.e2e.js\n@@ -37,6 +37,11 @@ test('build simple project', () => {\n   expect($home('h1').text()).toEqual('Index.vue')\n })\n \n+test('don\\'t render empty siteDescription ', () => {\n+  const $home = load('dist/index.html')\n+  expect($home('meta[data-key=\"description\"]').length).toEqual(0)\n+})\n+\n test('data dir should be empty', () => {\n   expect(exists('dist/assets/data/1')).toBeFalsy()\n })",
    "output": "fix(app): don\u2019t use empty siteDescription (#511, #516)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex 02cdb0a..d2cb0dd 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -1,11 +1,10 @@\n const path = require('path')\n const fs = require('fs-extra')\n const pMap = require('p-map')\n-const readline = require('readline')\n const hirestime = require('hirestime')\n const { chunk, groupBy } = require('lodash')\n const sysinfo = require('./utils/sysinfo')\n-const { log, info } = require('./utils/log')\n+const { log, info, writeLine } = require('./utils/log')\n \n module.exports = async (context, args) => {\n   process.env.NODE_ENV = 'production'\n@@ -155,13 +154,7 @@ async function processImages (images, config) {\n \n   let progress = 0\n \n-  function status (msg) {\n-    readline.clearLine(process.stdout, 0)\n-    readline.cursorTo(process.stdout, 0, null)\n-    process.stdout.write(msg)\n-  }\n-\n-  status(`Processing images (${totalAssets} images) - 0%`)\n+  writeLine(`Processing images (${totalAssets} images) - 0%`)\n \n   try {\n     await pMap(chunks, async queue => {\n@@ -172,7 +165,7 @@ async function processImages (images, config) {\n         backgroundColor: config.images.backgroundColor\n       })\n \n-      status(`Processing images (${totalAssets} images) - ${Math.round((++progress) * 100 / totalJobs)}%`)\n+      writeLine(`Processing images (${totalAssets} images) - ${Math.round((++progress) * 100 / totalJobs)}%`)\n     }, {\n       concurrency: sysinfo.cpus.logical\n     })\n@@ -183,5 +176,5 @@ async function processImages (images, config) {\n \n   worker.end()\n \n-  status(`Process images (${totalAssets} images) - ${timer(hirestime.S)}s\\n`)\n+  writeLine(`Process images (${totalAssets} images) - ${timer(hirestime.S)}s\\n`)\n }\ndiff --git a/gridsome/lib/utils/log.js b/gridsome/lib/utils/log.js\nindex f4d8d3f..d988b77 100644\n--- a/gridsome/lib/utils/log.js\n+++ b/gridsome/lib/utils/log.js\n@@ -1,4 +1,5 @@\n const chalk = require('chalk')\n+const readline = require('readline')\n \n exports.log = function (message, tag) {\n   log('log', null, message, tag)\n@@ -16,6 +17,16 @@ exports.error = function (message, tag) {\n   log('error', 'red', message, tag)\n }\n \n+exports.writeLine = function (message) {\n+  if (process.env.GRIDSOME_TEST) {\n+    return\n+  }\n+\n+  readline.clearLine(process.stdout, 0)\n+  readline.cursorTo(process.stdout, 0, null)\n+  process.stdout.write(message)\n+}\n+\n function log (type, color, message = '', tag = '') {\n   const formatted = color ? chalk[color](message) : message\n   const fn = console[type]",
    "output": "refactor(build): don\u2019t log image progress in tests"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 76b3430..09df26c 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -35,5 +35,10 @@ function highlight ({ value, lang }, tag = 'pre') {\n     code = escapeHtml(code)\n   }\n \n-  return `<${tag} class=\"language-${lang}\">${code}</${tag}>`\n+  const className = `language-${lang}`\n+  const codeTag = `<code class=\"${className}\">${code}</code>`\n+\n+  return tag === 'pre'\n+    ? `<pre class=\"${className}\">${codeTag}</pre>`\n+    : codeTag\n }",
    "output": "feat(prismjs): wrap code blocks in code tag (#506)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex 30addf1..4624ff5 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -8,6 +8,7 @@ const md5File = require('md5-file/promise')\n const imageSize = require('probe-image-size')\n const svgDataUri = require('mini-svg-data-uri')\n const { forwardSlash } = require('../../utils')\n+const { warmupSharp } = require('../../utils/sharp')\n \n class ImageProcessQueue {\n   constructor ({ context, config }) {\n@@ -247,7 +248,8 @@ async function createDataUri (buffer, type, width, height, options = {}) {\n async function createBlurSvg (buffer, mimeType, width, height, blur, resize = {}) {\n   const blurWidth = 64\n   const blurHeight = Math.round(height * (blurWidth / width))\n-  const blurBuffer = await sharp(buffer).resize(blurWidth, blurHeight, resize).toBuffer()\n+  const warmSharp = await warmupSharp(sharp)\n+  const blurBuffer = await warmSharp(buffer).resize(blurWidth, blurHeight, resize).toBuffer()\n   const base64 = blurBuffer.toString('base64')\n   const id = `__svg-blur-${ImageProcessQueue.uid++}`\n \ndiff --git a/gridsome/lib/utils/sharp.js b/gridsome/lib/utils/sharp.js\nnew file mode 100644\nindex 0000000..40cdcd7\n--- /dev/null\n+++ b/gridsome/lib/utils/sharp.js\n@@ -0,0 +1,20 @@\n+let isWarming = null\n+\n+// First run might cause a xmllib error, run safe warmup\n+// See https://github.com/lovell/sharp/issues/1593\n+function warmupSharp (sharp) {\n+  if (isWarming) return isWarming\n+\n+  const svg = '<svg><rect width=\"1\" height=\"1\" /></svg>'\n+  const buffer = Buffer.from(svg, 'utf-8')\n+\n+  sharp.simd(true)\n+\n+  isWarming = sharp(buffer).metadata().then(() => sharp, () => sharp)\n+\n+  return isWarming\n+}\n+\n+module.exports = {\n+  warmupSharp\n+}\ndiff --git a/gridsome/lib/workers/image-processor.js b/gridsome/lib/workers/image-processor.js\nindex 78fd0e3..0cb6e8f 100644\n--- a/gridsome/lib/workers/image-processor.js\n+++ b/gridsome/lib/workers/image-processor.js\n@@ -6,8 +6,7 @@ const colorString = require('color-string')\n const imageminWebp = require('imagemin-webp')\n const imageminMozjpeg = require('imagemin-mozjpeg')\n const imageminPngquant = require('imagemin-pngquant')\n-\n-sharp.simd(true)\n+const { warmupSharp } = require('../utils/sharp')\n \n exports.processImage = async function ({\n   size,\n@@ -92,6 +91,8 @@ exports.processImage = async function ({\n }\n \n exports.process = async function ({ queue, cacheDir, backgroundColor }) {\n+  await warmupSharp(sharp)\n+\n   return Promise.all(queue.map(set => {\n     const cachePath = cacheDir ? path.join(cacheDir, set.filename) : null\n ",
    "output": "fix(build): warm up sharp to prevent xmllib error"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/codegen/routes.js b/gridsome/lib/app/codegen/routes.js\nindex f849cb1..92b90d3 100644\n--- a/gridsome/lib/app/codegen/routes.js\n+++ b/gridsome/lib/app/codegen/routes.js\n@@ -19,6 +19,7 @@ function genRoutes (app, routeMeta = {}) {\n     const component = JSON.stringify(page.component)\n     const chunkName = JSON.stringify(page.chunkName)\n     const dataInfo = page.dataInfo || routeMeta[page.route]\n+    const hasContext = Object.keys(page.context).length > 0\n     const props = []\n     const metas = []\n \n@@ -29,7 +30,7 @@ function genRoutes (app, routeMeta = {}) {\n       metas.push(`data: () => import(/* webpackChunkName: ${chunkName} */ ${JSON.stringify(dataInfo)})`)\n     } else if (Array.isArray(dataInfo)) {\n       metas.push(`data: ${JSON.stringify(dataInfo)}`)\n-    } else if (process.env.GRIDSOME_MODE !== 'static' && (page.query.document || page.context)) {\n+    } else if (process.env.GRIDSOME_MODE !== 'static' && (page.query.document || hasContext)) {\n       metas.push(`data: true`)\n     }\n ",
    "output": "fix(app): don\u2019t fetch data if no context in development"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-google-analytics/gridsome.server.js b/packages/plugin-google-analytics/gridsome.server.js\nnew file mode 100644\nindex 0000000..d3bb7e3\n--- /dev/null\n+++ b/packages/plugin-google-analytics/gridsome.server.js\n@@ -0,0 +1,3 @@\n+module.exports = (api, options) => {\n+  api.setClientOptions(options)\n+}",
    "output": "refactor(google-analytics): send options to client"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex a400594..c0a32c2 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -106,6 +106,8 @@ class VueRemark {\n     this.options = options\n     this.context = options.baseDir ? api.resolve(options.baseDir) : api.context\n \n+    api.setClientOptions({})\n+\n     if (typeof options.template === 'string') {\n       this.template = api.resolve(options.template)\n     }",
    "output": "refactor(vue-remark): don\u2019t send options to client"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/scripts/testSetup.js b/scripts/testSetup.js\nindex 26d6564..971ffe6 100644\n--- a/scripts/testSetup.js\n+++ b/scripts/testSetup.js\n@@ -1 +1,3 @@\n-process.env.GRIDSOME_TEST = true\n+const e2e = process.argv.some(v => v === '--e2e')\n+\n+process.env.GRIDSOME_TEST = e2e ? 'e2e' : 'unit'",
    "output": "test: set unit or e2e in environment variable"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 7f8e5a2..ef0bc4e 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -116,6 +116,37 @@ class RemarkTransformer {\n \n           return cached\n         }\n+      },\n+      excerpt: {\n+        type: GraphQLString,\n+        args: {\n+          length: {\n+            type: GraphQLInt,\n+            description: 'Maximum length of generated excerpt (characters)',\n+            defaultValue: 200\n+          }\n+        },\n+        resolve: async (node, { length }) => {\n+          const key = cacheKey(node, 'excerpt')\n+          let excerpt = node.excerpt || cache.get(key)\n+\n+          if (!excerpt) {\n+            const html = await this._nodeToHTML(node)\n+            // Remove html tags, then newlines.\n+            excerpt = sanitizeHTML(html, {\n+              allowedAttributes: {},\n+              allowedTags: []\n+            }).replace(/\\r?\\n|\\r/g, ' ')\n+\n+            if (excerpt.length > length && length) {\n+              excerpt = excerpt.substr(0, excerpt.lastIndexOf(' ', length - 1))\n+            }\n+\n+            cache.set(key, excerpt)\n+          }\n+\n+          return excerpt\n+        }\n       }\n     }\n   }",
    "output": "feat(remark): generate excerpt automatically (#1085)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/lib/utils.js b/packages/vue-remark/lib/utils.js\nindex d6f3568..48a289a 100644\n--- a/packages/vue-remark/lib/utils.js\n+++ b/packages/vue-remark/lib/utils.js\n@@ -51,7 +51,7 @@ exports.createCacheIdentifier = function (context, options, attachers = []) {\n   const { dependencies: deps1 = {}, devDependencies: deps2 = {}} = pkg\n \n   const remarkPlugins = Object.keys({ ...deps1, ...deps2 })\n-    .filter(name => /remark-/.test(name))\n+    .filter(name => /remark-(?!cli$)/.test(name))\n     .map(name => ({\n       fn: require(name),\n       pkg: require(`${name}/package.json`)",
    "output": "fix(vue-remark): exclude remark-cli in cache identifier (#1128)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/__tests__/pages.spec.js b/gridsome/lib/pages/__tests__/pages.spec.js\nindex 9c3bc51..c66c40a 100644\n--- a/gridsome/lib/pages/__tests__/pages.spec.js\n+++ b/gridsome/lib/pages/__tests__/pages.spec.js\n@@ -527,7 +527,7 @@ describe('dynamic pages', () => {\n     expect(route.path).toEqual('/user/:id')\n     expect(route.id).toEqual('9c1d306d222b94fa197459d7b9a32712')\n     expect(route.options.name).toEqual('__user_id')\n-    expect(route.internal.regexp).toEqual(/^\\/user\\/([^/]+?)(?:\\/)?$/i)\n+    expect(route.internal.regexp).toEqual(/^\\/user\\/([^\\/]+?)(?:\\/)?$/i) // eslint-disable-line no-useless-escape\n     expect(route.internal.isDynamic).toEqual(true)\n   })\n })\n@@ -548,7 +548,7 @@ describe('create routes', () => {\n     expect(route.path).toEqual('/page/:id/:page(\\\\d+)?/')\n     expect(route.internal.path).toEqual('/page/:id')\n     expect(route.internal.isDynamic).toEqual(true)\n-    expect(route.internal.regexp).toEqual(/^\\/page\\/([^/]+?)(?:\\/(\\d+))?(?:\\/)?$/i)\n+    expect(route.internal.regexp).toEqual(/^\\/page\\/([^\\/]+?)(?:\\/(\\d+))?(?:\\/)?$/i) // eslint-disable-line no-useless-escape\n   })\n \n   test('add pages to route', async () => {",
    "output": "test: make sure the tests pass on Node.js v14 (#1129)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex be99394..a400594 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -3,6 +3,7 @@ const pathToRegexp = require('path-to-regexp')\n const Filesystem = require('@gridsome/source-filesystem')\n const RemarkTransformer = require('@gridsome/transformer-remark')\n const { omit, trimEnd, kebabCase } = require('lodash')\n+const { GraphQLList, GraphQLBoolean } = require('gridsome/graphql')\n \n const toSFC = require('./lib/toSfc')\n const sfcSyntax = require('./lib/sfcSyntax')\n@@ -10,6 +11,11 @@ const toVueRemarkAst = require('./lib/toVueRemarkAst')\n const remarkFilePlugin = require('./lib/plugins/file')\n const remarkImagePlugin = require('./lib/plugins/image')\n \n+const {\n+  HeadingType,\n+  HeadingLevels\n+} = require('./lib/types/HeadingType')\n+\n const {\n   createFile,\n   makePathParams,\n@@ -231,7 +237,21 @@ class VueRemark {\n       const { headings } = this.remark.extendNodeType()\n \n       addSchemaResolvers({\n-        [this.options.typeName]: { headings }\n+        [this.options.typeName]: {\n+          headings: {\n+            ...headings,\n+            type: new GraphQLList(HeadingType),\n+            args: {\n+              ...headings.args,\n+              depth: {\n+                type: HeadingLevels\n+              },\n+              stripTags: {\n+                type: GraphQLBoolean, defaultValue: true\n+              }\n+            }\n+          }\n+        }\n       })\n     })\n   }\ndiff --git a/packages/vue-remark/lib/types/HeadingType.js b/packages/vue-remark/lib/types/HeadingType.js\nnew file mode 100644\nindex 0000000..8706318\n--- /dev/null\n+++ b/packages/vue-remark/lib/types/HeadingType.js\n@@ -0,0 +1,32 @@\n+const {\n+  GraphQLInt,\n+  GraphQLString,\n+  GraphQLEnumType,\n+  GraphQLObjectType\n+} = require('gridsome/graphql')\n+\n+const HeadingType = new GraphQLObjectType({\n+  name: 'VueRemarkHeading',\n+  fields: {\n+    depth: { type: GraphQLInt },\n+    value: { type: GraphQLString },\n+    anchor: { type: GraphQLString }\n+  }\n+})\n+\n+const HeadingLevels = new GraphQLEnumType({\n+  name: 'VueRemarkHeadingLevels',\n+  values: {\n+    h1: { value: 1 },\n+    h2: { value: 2 },\n+    h3: { value: 3 },\n+    h4: { value: 4 },\n+    h5: { value: 5 },\n+    h6: { value: 6 }\n+  }\n+})\n+\n+module.exports = {\n+  HeadingType,\n+  HeadingLevels\n+}\ndiff --git a/packages/vue-remark/package.json b/packages/vue-remark/package.json\nindex 4eddaf5..3c0f91e 100644\n--- a/packages/vue-remark/package.json\n+++ b/packages/vue-remark/package.json\n@@ -33,6 +33,9 @@\n     \"unist-builder\": \"^1.0.3\",\n     \"unist-util-visit\": \"^1.4.0\"\n   },\n+  \"peerDependencies\": {\n+    \"gridsome\": \"0.x\"\n+  },\n   \"publishConfig\": {\n     \"access\": \"public\"\n   },",
    "output": "fix(vue-remark): prevent type name conflicts in schema (#815)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/project-blog.build.e2e.js b/gridsome/lib/__tests__/project-blog.build.e2e.js\nindex b2a2615..402a9c8 100644\n--- a/gridsome/lib/__tests__/project-blog.build.e2e.js\n+++ b/gridsome/lib/__tests__/project-blog.build.e2e.js\n@@ -85,14 +85,14 @@ test('render belongsTo with pagination', () => {\n   expect($tag3('.post-3 a').text()).toEqual('Third post')\n   expect($tag4('.post-3 a').text()).toEqual('Third post')\n   expect($tag4('.post-2 a').text()).toEqual('Second post')\n-  expect($tag4('nav[role=\"navigation\"] a[href=\"/tag/fourth-tag\"]').attr('aria-label')).toEqual('Current page. Page 1')\n+  expect($tag4('nav[role=\"navigation\"] a[href=\"/tag/fourth-tag/\"]').attr('aria-label')).toEqual('Current page. Page 1')\n   expect($tag4page2('.post-1 a').text()).toEqual('First post')\n-  expect($tag4page2('nav[role=\"navigation\"] a[href=\"/tag/fourth-tag/2\"]').attr('aria-label')).toEqual('Current page. Page 2')\n+  expect($tag4page2('nav[role=\"navigation\"] a[href=\"/tag/fourth-tag/2/\"]').attr('aria-label')).toEqual('Current page. Page 2')\n   expect($category1('.post-3 a').text()).toEqual('Third post')\n   expect($category1('.post-2 a').text()).toEqual('Second post')\n-  expect($category1('nav[role=\"navigation\"] a[href=\"/category/first\"]').attr('aria-label')).toEqual('Current page. Page 1')\n+  expect($category1('nav[role=\"navigation\"] a[href=\"/category/first/\"]').attr('aria-label')).toEqual('Current page. Page 1')\n   expect($category1page2('.post-1 a').text()).toEqual('First post')\n-  expect($category1page2('nav[role=\"navigation\"] a[href=\"/category/first/2\"]').attr('aria-label')).toEqual('Current page. Page 2')\n+  expect($category1page2('nav[role=\"navigation\"] a[href=\"/category/first/2/\"]').attr('aria-label')).toEqual('Current page. Page 2')\n })\n \n test('open blog in browser', async () => {",
    "output": "test(e2e): update pagination paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/utils/helpers.js b/gridsome/app/utils/helpers.js\nindex 377bb95..49eaa02 100644\n--- a/gridsome/app/utils/helpers.js\n+++ b/gridsome/app/utils/helpers.js\n@@ -21,10 +21,11 @@ export function url (string = '/') {\n export function stripPageParam (route) {\n   const { path, params: { page }} = route\n   const normalizedPath = unslashEnd(path)\n+  const suffix = /\\/$/.test(path) ? '/' : ''\n \n   return page && /^\\d+$/.test(page) && /\\/\\d+$/.test(normalizedPath)\n-    ? normalizedPath.split('/').slice(0, -1).join('/') || '/'\n-    : normalizedPath || '/'\n+    ? `${normalizedPath.split('/').slice(0, -1).join('/')}${suffix}` || '/'\n+    : `${normalizedPath}${suffix}` || '/'\n }\n \n export function stripPathPrefix (string) {",
    "output": "fix(app): add trailing slash to paths in Pager component (#1073)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-ghost/ghost-schema.js b/packages/source-ghost/ghost-schema.js\nindex 11d7299..94ffe45 100644\n--- a/packages/source-ghost/ghost-schema.js\n+++ b/packages/source-ghost/ghost-schema.js\n@@ -50,6 +50,7 @@ const GhostPost = ({ post, author, tag }) => `type ${post} implements Node {\n   url: String\n   page: Boolean\n   excerpt: String\n+  reading_time: Int\n   og_image: String\n   og_title: String\n   og_description: String",
    "output": "feat(ghost): reading_time field for posts (#1090)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-ghost/index.js b/packages/source-ghost/index.js\nindex 40fb7a9..eedaae2 100644\n--- a/packages/source-ghost/index.js\n+++ b/packages/source-ghost/index.js\n@@ -66,14 +66,45 @@ class GhostSource {\n     await this.loadBasicEntity(tags, this.contentAPI.tags)\n   }\n \n-  async loadPages ({ addCollection }) {\n+  async loadPages ({ addCollection, createReference }) {\n     console.log(`Loading ${TYPE_PAGE}`)\n     const pages = addCollection({\n       typeName: this.typeNames.page,\n       dateField: 'published_at'\n     })\n+    const tagTypeName = this.typeNames.tag\n+    const authorTypeName = this.typeNames.author\n+\n+    let keepGoing = true\n+    let currentPage = 1\n+\n+    while (keepGoing) {\n+      const entities = await this.contentAPI.pages.browse({\n+        limit: this.options.perPage,\n+        include: 'tags,authors',\n+        page: currentPage\n+      })\n+\n+      entities.forEach(entity => {\n+        const { tags = [], authors = [], ...options } = entity\n+        const { primary_tag, primary_author } = options // eslint-disable-line\n \n-    await this.loadBasicEntity(pages, this.contentAPI.pages)\n+        options.primary_tag = primary_tag // eslint-disable-line\n+          ? createReference(tagTypeName, primary_tag.id)\n+          : null\n+        options.primary_author = createReference(authorTypeName, primary_author.id)\n+        options.tags = tags.map(tag => createReference(tagTypeName, tag.id))\n+        options.authors = authors.map(author => createReference(authorTypeName, author.id))\n+\n+        pages.addNode(options)\n+      })\n+\n+      if (currentPage === entities.meta.pagination.pages) {\n+        keepGoing = false\n+      }\n+\n+      currentPage++\n+    }\n   }\n \n   async loadAuthors ({ addCollection }) {",
    "output": "feat(ghost): tags and author references for pages (#963)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex b836091..be99394 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -2,7 +2,7 @@ const path = require('path')\n const pathToRegexp = require('path-to-regexp')\n const Filesystem = require('@gridsome/source-filesystem')\n const RemarkTransformer = require('@gridsome/transformer-remark')\n-const { trimEnd, kebabCase } = require('lodash')\n+const { omit, trimEnd, kebabCase } = require('lodash')\n \n const toSFC = require('./lib/toSfc')\n const sfcSyntax = require('./lib/sfcSyntax')\n@@ -210,7 +210,7 @@ class VueRemark {\n \n         if (!parsed.excerpt) parsed.excerpt = null\n \n-        Object.assign(options, parsed)\n+        Object.assign(options, omit(parsed, ['layout']))\n \n         options.internal.mimeType = null\n         options.internal.content = null",
    "output": "fix(vue-remark): exclude layout settings from schema (#991)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 48dedd1..7acb71a 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -1,9 +1,9 @@\n const path = require('path')\n const glob = require('globby')\n+const leven = require('leven')\n const crypto = require('crypto')\n const moment = require('moment')\n const chokidar = require('chokidar')\n-const didYouMean = require('didyoumean')\n const pathToRegexp = require('path-to-regexp')\n const { deprecate } = require('../utils/deprecate')\n const { ISO_8601_FORMAT } = require('../utils/constants')\n@@ -231,7 +231,9 @@ class TemplatesPlugin {\n \n       for (const typeName of templates.byTypeName.keys()) {\n         if (!typeNames.includes(typeName)) {\n-          const suggestion = didYouMean(typeName, typeNames)\n+          const suggestion = typeNames.find(value => {\n+            return leven(value, typeName) < 3\n+          })\n \n           throw new Error(\n             `A content type for the ${typeName} template does not exist.` +\ndiff --git a/gridsome/package.json b/gridsome/package.json\nindex ee26cd1..f0e899d 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -41,7 +41,6 @@\n     \"connect-history-api-fallback\": \"^1.6.0\",\n     \"core-js\": \"^3.6.4\",\n     \"css-loader\": \"^2.1.0\",\n-    \"didyoumean\": \"^1.2.1\",\n     \"dotenv\": \"^6.2.0\",\n     \"eventemitter3\": \"^3.1.0\",\n     \"express\": \"^4.16.4\",\n@@ -65,6 +64,7 @@\n     \"is-url\": \"^1.2.4\",\n     \"jest-worker\": \"24.0.0\",\n     \"json-loader\": \"^0.5.7\",\n+    \"leven\": \"^3.1.0\",\n     \"loader-utils\": \"^1.2.3\",\n     \"lodash\": \"^4.17.11\",\n     \"lokijs\": \"^1.5.6\",",
    "output": "refactor: use leven for template name suggestion"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/__tests__/gridsome.spec.js b/packages/cli/__tests__/gridsome.spec.js\nindex ed9c5a3..0e4b88d 100644\n--- a/packages/cli/__tests__/gridsome.spec.js\n+++ b/packages/cli/__tests__/gridsome.spec.js\n@@ -22,6 +22,12 @@ test('warn about unknown command', async () => {\n   expect(stdout).toMatch('Unknown command asdf')\n })\n \n+test('suggest matching command', async () => {\n+  const { stdout } = await execa(cli, ['creaet'])\n+\n+  expect(stdout).toContain('Did you mean create?')\n+})\n+\n test('warn about missing dependencies', async () => {\n   const { stdout } = await execa(cli, ['noop'], {\n     cwd: path.join(__dirname, '__fixtures__', 'project')",
    "output": "test(cli): test case for command suggestion (#1063)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 6f1a0c1..22b5bb4 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -42,7 +42,7 @@ export default {\n         attrs.width = size.width\n \n         if (isLazy) attrs['data-src'] = src\n-        if (srcset.length) attrs[`${isLazy ? 'data-' : ''}srcset`] = srcset.join(', ')\n+        if (srcset.length) attrs[`${isLazy ? 'data-' : ''}srcset`] = Array.isArray(srcset) ? srcset.join(', ') : srcset\n         if (sizes) attrs[`${isLazy ? 'data-' : ''}sizes`] = sizes\n \n         if (isLazy) {",
    "output": "refactor(g-image): allow srcset to be an array (#997)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex 69b336b..a182afa 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -3,7 +3,7 @@\n const path = require('path')\n const chalk = require('chalk')\n const program = require('commander')\n-const didYouMean = require('didyoumean')\n+const leven = require('leven')\n const resolveCwd = require('resolve-cwd')\n const updateNotifier = require('update-notifier')\n const resolveVersions = require('../lib/utils/version')\n@@ -53,7 +53,10 @@ try {\n program.arguments('<command>').action(async command => {\n   const { isGridsomeProject, hasYarn } = require('../lib/utils')\n   const availableCommands = program.commands.map(cmd => cmd._name)\n-  const suggestion = didYouMean(command, availableCommands)\n+  const suggestion = availableCommands.find(cmd => {\n+    const steps = leven(cmd, command)\n+    return steps < 3\n+  })\n \n   if (isGridsomeProject(pkgPath) && !suggestion) {\n     const useYarn = await hasYarn()\ndiff --git a/packages/cli/package.json b/packages/cli/package.json\nindex 8c0825a..86990f1 100644\n--- a/packages/cli/package.json\n+++ b/packages/cli/package.json\n@@ -17,11 +17,11 @@\n     \"@hjvedvik/tasks\": \"^0.0.8\",\n     \"chalk\": \"^2.4.1\",\n     \"commander\": \"^2.15.1\",\n-    \"didyoumean\": \"^1.2.1\",\n     \"envinfo\": \"^7.3.1\",\n     \"execa\": \"^0.10.0\",\n     \"find-up\": \"^2.1.0\",\n     \"fs-extra\": \"^6.0.1\",\n+    \"leven\": \"^3.1.0\",\n     \"resolve-cwd\": \"^2.0.0\",\n     \"semver\": \"^5.6.0\",\n     \"sort-package-json\": \"^1.15.0\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 952e0a3..a8ed4fe 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -5628,11 +5628,6 @@ dezalgo@^1.0.0:\n     asap \"^2.0.0\"\n     wrappy \"1\"\n \n-didyoumean@^1.2.1:\n-  version \"1.2.1\"\n-  resolved \"https://registry.yarnpkg.com/didyoumean/-/didyoumean-1.2.1.tgz#e92edfdada6537d484d73c0172fd1eba0c4976ff\"\n-  integrity sha1-6S7f2tplN9SE1zwBcv0eugxJdv8=\n-\n diff-sequences@^24.9.0:\n   version \"24.9.0\"\n   resolved \"https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-24.9.0.tgz#5715d6244e2aa65f48bba0bc972db0b0b11e95b5\"",
    "output": "refactor(cli): use leven for command suggestions (#1016)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/Schema.js b/gridsome/lib/app/Schema.js\nindex ec34790..0185b3b 100644\n--- a/gridsome/lib/app/Schema.js\n+++ b/gridsome/lib/app/Schema.js\n@@ -57,7 +57,7 @@ class Schema {\n     return context\n   }\n \n-  runQuery (docOrQuery, variables = {}) {\n+  runQuery (docOrQuery, variables = {}, operationName) {\n     const context = this.createContext()\n     const func = typeof docOrQuery === 'string' ? graphql : execute\n \n@@ -65,7 +65,7 @@ class Schema {\n       throw new Error(`GraphQL schema is not generated yet...`)\n     }\n \n-    return func(this._schema, docOrQuery, undefined, context, variables)\n+    return func(this._schema, docOrQuery, undefined, context, variables, operationName)\n   }\n }\n \ndiff --git a/gridsome/lib/app/actions.js b/gridsome/lib/app/actions.js\nindex d351203..e95e34b 100644\n--- a/gridsome/lib/app/actions.js\n+++ b/gridsome/lib/app/actions.js\n@@ -6,8 +6,8 @@ const { deprecate } = require('../utils/deprecate')\n \n function createBaseActions (api, app) {\n   return {\n-    graphql (docOrQuery, variables = {}) {\n-      return app.schema.runQuery(docOrQuery, variables)\n+    graphql (docOrQuery, variables = {}, operationName) {\n+      return app.schema.runQuery(docOrQuery, variables, operationName)\n     },\n     resolve (...args) {\n       return app.resolve(...args)",
    "output": "fix(graphql): pass operationName argument to graphql method (#1047)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 9cd1631..dc8999d 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -28,7 +28,8 @@ if (process.env.NODE_ENV === 'production') {\n       .catch(err => {\n         // reload page if a component failed to load\n         if (err.request && to.path !== window.location.pathname) {\n-          window.location.assign(to.fullPath)\n+          const fullPathWithPrefix = (config.pathPrefix ?? '') + to.fullPath\n+          window.location.assign(fullPathWithPrefix)\n         } else {\n           next(err)\n         }\ndiff --git a/gridsome/app/graphql/guard.js b/gridsome/app/graphql/guard.js\nindex 9abd750..33b5c74 100644\n--- a/gridsome/app/graphql/guard.js\n+++ b/gridsome/app/graphql/guard.js\n@@ -1,4 +1,5 @@\n import fetch from '../fetch'\n+import config from '~/.temp/config'\n import { getResults, setResults, formatError } from './shared'\n \n export default (to, from, next) => {\n@@ -32,7 +33,8 @@ export default (to, from, next) => {\n         console.error(err)\n         next({ name: '*', params: { 0: to.path } })\n       } else if (err.code === 'INVALID_HASH' && to.path !== window.location.pathname) {\n-        window.location.assign(to.fullPath)\n+        const fullPathWithPrefix = (config.pathPrefix ?? '') + to.fullPath\n+        window.location.assign(fullPathWithPrefix)\n       } else {\n         formatError(err, to)\n         next(err)",
    "output": "fix(app): include pathPrefix when hard reloading app (#1044)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\nindex 810bd1f..0a4cc4c 100644\n--- a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n+++ b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n@@ -26,6 +26,17 @@ exports[`don't touch normal HTML tags multiple sections 1`] = `\n </template>\"\n `;\n \n+exports[`don't wrap end tag in paragraph 1`] = `\n+\"<template>\n+<VueRemarkRoot>\n+<GridCol col=\\\\\"span-4\\\\\">\n+Some text...\n+\n+</GridCol>\n+</VueRemarkRoot>\n+</template>\"\n+`;\n+\n exports[`image inside external link 1`] = `\n \"<template>\n <VueRemarkRoot>\ndiff --git a/packages/vue-remark/__tests__/index.spec.js b/packages/vue-remark/__tests__/index.spec.js\nindex 7ec75e8..679de79 100644\n--- a/packages/vue-remark/__tests__/index.spec.js\n+++ b/packages/vue-remark/__tests__/index.spec.js\n@@ -48,6 +48,18 @@ test('parse nested Vue components', async () => {\n   expect(res).toMatchSnapshot()\n })\n \n+test('don\\'t wrap end tag in paragraph', async () => {\n+  const plugin = await createPlugin()\n+  const res = await plugin.parse(`\n+<GridCol col=\"span-4\">\n+\n+Some text...\n+</GridCol>\n+`, { onlyTemplate: true })\n+\n+  expect(res).toMatchSnapshot()\n+})\n+\n test('add v-pre to fenced code blocks', async () => {\n   const plugin = await createPlugin()\n   const res = await plugin.parse(`\ndiff --git a/packages/vue-remark/lib/sfcSyntax.js b/packages/vue-remark/lib/sfcSyntax.js\nindex 624fc7b..3891ffa 100644\n--- a/packages/vue-remark/lib/sfcSyntax.js\n+++ b/packages/vue-remark/lib/sfcSyntax.js\n@@ -3,7 +3,8 @@ const htmlTags = require('html-tags')\n const isImport = value => /^import\\s+/.test(value)\n const isStyle = value => /^<style/.test(value)\n const isScript = value => /^<script/.test(value)\n-const isTag = value => /^<\\/?[\\w-]+/.test(value)\n+const isStartTag = value => /^<\\/?[\\w-]+/.test(value)\n+const isEndTag = value => /<\\/?[\\w-]+>$/.test(value)\n const isQuery = value => /^<(page|static)-query/.test(value)\n \n const getValue = value => {\n@@ -39,12 +40,19 @@ function tokenizeSFCBlocks (eat, value) {\n function tokenizeVueComponents (eat, value) {\n   value = getValue(value)\n \n-  if (isTag(value)) {\n+  if (isStartTag(value)) {\n     const [, name] = value.match(/^<\\/?([\\w-]+)[>\\s]/) || []\n \n     if (name && !htmlTags.includes(name)) {\n       return eat(value)({ type: 'html', value })\n     }\n+  } else if (isEndTag(value)) {\n+    const [, name] = value.match(/<\\/?([\\w-]+)[>\\s]$/) || []\n+\n+    if (name && !htmlTags.includes(name)) {\n+      const portion = value.substr(0, value.length - name.length - 3)\n+      return eat(portion)({ type: 'html', value: portion })\n+    }\n   }\n }\n ",
    "output": "fix(vue-remark): don't wrap end tag in paragraph (#941)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/README.md b/packages/vue-remark/README.md\nindex f55a6a4..ba8b8e4 100644\n--- a/packages/vue-remark/README.md\n+++ b/packages/vue-remark/README.md\n@@ -172,6 +172,12 @@ module.exports = {\n }\n ```\n \n+#### ignore\n+- Type: `Array`\n+- Default: `[]`\n+\n+List of glob patterns that should be ignored when searching for markdown files.\n+\n #### includePaths\n \n - Type: `Array`\ndiff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex 8b00867..b836091 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -74,7 +74,8 @@ class VueRemark {\n       includePaths: [],\n       plugins: [],\n       remark: {},\n-      refs: {}\n+      refs: {},\n+      ignore: []\n     }\n   }\n \n@@ -119,8 +120,13 @@ class VueRemark {\n       this.route.routeKeys = normalizeRouteKeys(routeKeys)\n     }\n \n+    const paths = [\n+      '**/*.md',\n+      ...options.ignore.map((path) => `!${path}`)\n+    ]\n+\n     this.filesystem = new Filesystem(api, {\n-      path: '**/*.md',\n+      path: paths,\n       typeName: options.typeName,\n       baseDir: options.baseDir,\n       pathPrefix: options.pathPrefix,",
    "output": "feat(vue-remark): option for ignoring files with glob patterns (#1003)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 375c302..bd920de 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -1,7 +1,7 @@\n import Vue from 'vue'\n import plugins from '~/.temp/plugins-server'\n \n-import main from '~/main'\n+import * as main from '~/main'\n import App from '~/App.vue'\n \n import head from './head'\n@@ -50,8 +50,9 @@ export function runPlugins(plugins) {\n }\n \n export function runMain() {\n-  if (typeof main === 'function') {\n-    main(Vue, context)\n+  const defaultExport = 'default'\n+  if (main && typeof main[defaultExport] === 'function') {\n+    main[defaultExport](Vue, context)\n   }\n }\n ",
    "output": "fix(webpack): ignore missing default export in main.js"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/app.js b/gridsome/app/app.js\nindex 14fd58a..375c302 100644\n--- a/gridsome/app/app.js\n+++ b/gridsome/app/app.js\n@@ -16,8 +16,8 @@ import Image from './components/Image'\n import ClientOnly from './components/ClientOnly'\n \n Vue.mixin(graphqlMixin)\n-Vue.component('g-link', Link)\n-Vue.component('g-image', Image)\n+Vue.component('GLink', Link)\n+Vue.component('GImage', Image)\n Vue.component('ClientOnly', ClientOnly)\n \n Vue.prototype.$url = url\ndiff --git a/gridsome/lib/webpack/modules/assets.js b/gridsome/lib/webpack/modules/assets.js\nindex ccea9a7..356c15b 100644\n--- a/gridsome/lib/webpack/modules/assets.js\n+++ b/gridsome/lib/webpack/modules/assets.js\n@@ -1,21 +1,21 @@\n const isUrl = require('is-url')\n const camelcase = require('camelcase')\n const isRelative = require('is-relative')\n-const { isMailtoLink, isTelLink } = require('../../utils')\n+const {isMailtoLink, isTelLink} = require('../../utils')\n \n module.exports = () => ({\n-  postTransformNode (node) {\n-    if (node.tag === 'g-link') {\n+  postTransformNode(node) {\n+    if (['GLink', 'g-link'].includes(node.tag)) {\n       transformNodeAttr(node, 'to')\n     }\n \n-    if (node.tag === 'g-image') {\n+    if (['GImage', 'g-image'].includes(node.tag)) {\n       transformNodeAttr(node, 'src')\n     }\n   }\n })\n \n-function transformNodeAttr (node, attrName) {\n+function transformNodeAttr(node, attrName) {\n   if (!Array.isArray(node.attrs)) return\n \n   for (const attr of node.attrs) {\n@@ -28,7 +28,7 @@ function transformNodeAttr (node, attrName) {\n   }\n }\n \n-function transformAttrValue (node, attr) {\n+function transformAttrValue(node, attr) {\n   const value = extractValue(attr.value)\n   let result = attr.value\n \n@@ -40,19 +40,19 @@ function transformAttrValue (node, attr) {\n   return result\n }\n \n-function isStatic (value) {\n+function isStatic(value) {\n   return /^\"[^\"]+\"$/.test(value)\n }\n \n-function extractValue (value) {\n+function extractValue(value) {\n   return value.substr(1, value.length - 2)\n }\n \n-function createOptionsQuery (attrs) {\n+function createOptionsQuery(attrs) {\n   return attrs\n     .filter(attr => attr.name !== 'src')\n     .filter(attr => isStatic(attr.value))\n-    .map(attr => ({ name: camelcase(attr.name), value: extractValue(attr.value) }))\n+    .map(attr => ({name: camelcase(attr.name), value: extractValue(attr.value)}))\n     .map(attr => `${attr.name}=${encodeURIComponent(attr.value)}`)\n     .join('&')\n }",
    "output": "fix(app): allow pascal cased g-link and g-image (#985)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 3aec18d..9cd1631 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -43,6 +43,7 @@ document.addEventListener('click', event => {\n   const { hostname, port } = document.location\n \n   if (\n+    !config.catchLinks || // disables this behavior by config settings\n     event.defaultPrevented || // disables this behavior\n     event.which !== 1 || // not a left click\n     event.metaKey ||\ndiff --git a/gridsome/lib/app/codegen/config.js b/gridsome/lib/app/codegen/config.js\nindex 75868f4..fe7cdb0 100644\n--- a/gridsome/lib/app/codegen/config.js\n+++ b/gridsome/lib/app/codegen/config.js\n@@ -1,13 +1,14 @@\n function genConfig ({ config }) {\n   const { version } = require('../../../package.json')\n-  const { permalinks, titleTemplate, _pathPrefix, siteUrl } = config\n+  const { permalinks, titleTemplate, _pathPrefix, siteUrl, catchLinks } = config\n \n   return `export default ${JSON.stringify({\n     trailingSlash: permalinks.trailingSlash,\n     pathPrefix: _pathPrefix,\n     titleTemplate,\n     siteUrl,\n-    version\n+    version,\n+    catchLinks\n   }, null, 2)}`\n }\n \ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 3849496..0117ac2 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -162,6 +162,8 @@ module.exports = (context, options = {}) => {\n \n   config.cacheBusting = typeof localConfig.cacheBusting === 'boolean' ? localConfig.cacheBusting : true\n \n+  config.catchLinks = typeof localConfig.catchLinks === 'boolean' ? localConfig.catchLinks : true\n+\n   return Object.freeze(config)\n }\n ",
    "output": "fix(app): option for disabling global link catcher (#959)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/compileAssets.js b/gridsome/lib/webpack/compileAssets.js\nindex 327061f..a8cb3e3 100644\n--- a/gridsome/lib/webpack/compileAssets.js\n+++ b/gridsome/lib/webpack/compileAssets.js\n@@ -25,9 +25,10 @@ module.exports = async (app, defines = {}) => {\n \n       if (stats.hasErrors()) {\n         const errors = stats.stats\n+          // .flatMap(stats => stats.compilation.errors) only exists in Node v11+\n           .map(stats => stats.compilation.errors)\n           .reduce((acc, errors) => acc.concat(errors), [])\n-          .map(err => err.error)\n+          .map(err => err.error || err)\n \n         return reject(errors[0])\n       }",
    "output": "fix(build): handle some webpack errors properly (#932)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/README.md b/packages/transformer-remark/README.md\nindex b96e716..1b9c4c6 100644\n--- a/packages/transformer-remark/README.md\n+++ b/packages/transformer-remark/README.md\n@@ -54,7 +54,7 @@ The following example adds the `remark-attr` plugin globally if it is installed\n \n #### plugins\n \n-- Type: `array`\n+- Type: `Array`\n - Default: `[]`\n \n Add additional [Remark plugins](https://github.com/remarkjs/remark/blob/master/doc/plugins.md#list-of-plugins).\n@@ -83,7 +83,8 @@ Set this option to `false` to disable all built-in plugins.\n \n #### grayMatter\n \n-- Type: `object` Default: `{}`\n+- Type: `object` \n+- Default: `{}`\n \n Options to pass through to [gray-matter][] for parsing front matter.\n \n@@ -157,3 +158,45 @@ Support ASCII guillements (`<<`, `>>`) and mapping them to HTML.\n \n - Type: `boolean`\n - Default: `true`\n+\n+#### config\n+\n+- Type: `Object`\n+- Default: `{}`\n+\n+Add additional [Remark options](https://github.com/remarkjs/remark/blob/master/packages/remark-parse/readme.md#options).\n+\n+This allows you to enable/disable `gfm`, `commonmark`, `footnotes`,  `pedantic` and `blocks`.\n+\n+* gfm\n+  * Type: `boolean`\n+  * Default: `true`\n+\n+* commonmark\n+  * Type: `boolean`\n+  * Default: `false`\n+  \n+* footnotes\n+  * Type: `boolean`\n+  * Default: `false`\n+  \n+* pedantic\n+  * Type: `boolean`\n+  * Default: `false`\n+  \n+* blocks\n+  * Type: `Array | string`\n+  * Default: list of [block HTML elements](https://github.com/remarkjs/remark/blob/master/packages/remark-parse/lib/block-elements.js)\n+\n+```js\n+{\n+  remark: {\n+    plugins: [\n+      //...\n+    ],\n+    config: {\n+      footnotes: true\n+    }\n+  }\n+}\n+```\ndiff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 74de811..7f8e5a2 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -123,9 +123,10 @@ class RemarkTransformer {\n   createProcessor (options = {}) {\n     const processor = unified().data('transformer', this)\n     const plugins = createPlugins(this.options, options)\n+    const config = this.options.config || {}\n \n     return processor\n-      .use(remarkParse)\n+      .use(remarkParse, config)\n       .use(plugins)\n       .use(options.stringifier || remarkHtml)\n   }",
    "output": "feat(remark): set custom parser config (#944)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/__tests__/pages.spec.js b/gridsome/lib/pages/__tests__/pages.spec.js\nindex 9b7ea41..9c3bc51 100644\n--- a/gridsome/lib/pages/__tests__/pages.spec.js\n+++ b/gridsome/lib/pages/__tests__/pages.spec.js\n@@ -283,6 +283,77 @@ test('remove pages by component', async () => {\n   expect(pages.pages()).toHaveLength(1)\n })\n \n+test('find and remove pages by query', async () => {\n+  const { pages } = await createApp()\n+\n+  pages.createPage({\n+    path: '/page',\n+    component: './__fixtures__/DefaultPage.vue'\n+  })\n+\n+  expect(pages.pages()).toHaveLength(2)\n+\n+  pages.findAndRemovePages({ path: { '$eq': '/page' }})\n+\n+  expect(pages.pages()).toHaveLength(1)\n+} )\n+\n+test('find pages by query', async () => {\n+  const { pages } = await createApp()\n+\n+  const postSlugs = [\n+    'lorem-ipsum-dolor-amet-brunch',\n+    'tofu-schlitz-knausgaard-lomo',\n+    'vaporware-dreamcatcher-tousled',\n+    'godard-ramps-butcher-mumblecore',\n+    'listicle-tattooed-quinoa-poke-occupy'\n+  ]\n+\n+  for (const slug of postSlugs) {\n+    pages.createPage({\n+      path: `/posts/${slug}`,\n+      component: './__fixtures__/DefaultPage.vue'\n+    })\n+  }\n+\n+\n+  expect(pages.pages()).toHaveLength(6)\n+\n+  let matchingPages = pages.findPages({ path: { '$eq': '/posts/lorem-ipsum-dolor-amet-brunch' }})\n+  expect(matchingPages).toHaveLength(1)\n+\n+  matchingPages = pages.findPages({ path: { '$contains': 'posts' }})\n+  expect(matchingPages).toHaveLength(5)\n+})\n+\n+test('find page by query', async () => {\n+  const { pages } = await createApp()\n+\n+  const postSlugs = [\n+    'lorem-ipsum-dolor-amet-brunch',\n+    'tofu-schlitz-knausgaard-lomo',\n+    'vaporware-dreamcatcher-tousled',\n+    'godard-ramps-butcher-mumblecore',\n+    'listicle-tattooed-quinoa-poke-occupy'\n+  ]\n+\n+  for (const slug of postSlugs) {\n+    pages.createPage({\n+      path: `/posts/${slug}`,\n+      component: './__fixtures__/DefaultPage.vue'\n+    })\n+  }\n+\n+  expect(pages.pages()).toHaveLength(6)\n+\n+  const pathToMatch = '/posts/lorem-ipsum-dolor-amet-brunch'\n+  const matchingPage = pages.findPage({ path: { '$eq': pathToMatch } })\n+\n+  expect(matchingPage).toEqual(\n+    expect.objectContaining({ path: pathToMatch })\n+  )\n+})\n+\n test('api.createManagedPages() should only be called once', async () => {\n   const createPages = jest.fn()\n   const createManagedPages = jest.fn()\ndiff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex 012eeb2..6df2f3b 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -232,6 +232,22 @@ class Pages {\n         this.removeRoute(options.id)\n       })\n   }\n+  \n+  findAndRemovePages (query) {\n+    this._pages.find(query).forEach(page => {\n+      this.removePage(page.id)\n+    })\n+  }\n+\n+  findPages (query) {\n+    const matchingPages = this._pages.find(query)\n+    return matchingPages\n+  }\n+\n+  findPage (query) {\n+    const [ matchingPage ] = this._pages.find(query)\n+    return matchingPage\n+  }\n \n   getRoute (id) {\n     const options = this._routes.by('id', id)",
    "output": "fix(pages): add missing find* API methods (#927)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex 63cbc80..012eeb2 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -203,6 +203,7 @@ class Pages {\n \n   removePage (id) {\n     const page = this.getPage(id)\n+    if (!page) return\n     const route = this.getRoute(page.internal.route)\n \n     if (route.internal.isDynamic) {",
    "output": "fix(pages): return if no page is found in `removePage()` (#926)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-ghost/index.js b/packages/source-ghost/index.js\nindex e375701..40fb7a9 100644\n--- a/packages/source-ghost/index.js\n+++ b/packages/source-ghost/index.js\n@@ -41,7 +41,7 @@ class GhostSource {\n     }\n \n     api.loadSource(async actions => {\n-      console.log(`Loading data from ${options.url}`)\n+      console.log(`Loading data from ${options.baseUrl}`)\n       await this.loadAuthors(actions)\n       await this.loadPosts(actions)\n       await this.loadTags(actions)",
    "output": "fix(ghost): show baseUrl when loading data (#958)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/utils/sysinfo.js b/gridsome/lib/utils/sysinfo.js\nindex 5ffc0f8..6f0a774 100644\n--- a/gridsome/lib/utils/sysinfo.js\n+++ b/gridsome/lib/utils/sysinfo.js\n@@ -4,8 +4,7 @@ const cpus = os.cpus()\n \n module.exports = {\n   cpus: {\n-    model: cpus.length ? cpus[0].model : '',\n-    logical: cpus.length,\n-    physical: physical || 1\n+    logical: parseInt(process.env.GRIDSOME_CPU_COUNT || cpus.length, 10),\n+    physical: parseInt(process.env.GRIDSOME_CPU_COUNT || physical || 1, 10)\n   }\n }",
    "output": "fix(build): allow overriding cpu count with env var (#923)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex c48749b..3cf8f7b 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -190,14 +190,11 @@ class WordPressSource {\n         throw new Error(`${code} - ${config.url}`)\n       }\n \n-      const { url } = response.config\n-      const { status } = response.data.data\n-\n-      if ([401, 403].includes(status)) {\n-        console.warn(`Error: Status ${status} - ${url}`)\n+      if ([401, 403].includes(response.status)) {\n+        console.warn(`Error: Status ${response.status} - ${config.url}`)\n         return { ...response, data: fallbackData }\n       } else {\n-        throw new Error(`${status} - ${url}`)\n+        throw new Error(`${response.status} - ${config.url}`)\n       }\n     }\n ",
    "output": "fix(wordpress): update error formatting in fetch method (#905)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-ghost/README.md b/packages/source-ghost/README.md\nindex d531d1c..d206739 100644\n--- a/packages/source-ghost/README.md\n+++ b/packages/source-ghost/README.md\n@@ -17,7 +17,8 @@ module.exports = {\n       options: {\n         typeName: 'Ghost',\n         baseUrl: 'http://localhost:2368',\n-        contentKey: '0b7050113fba7147f358cc2f4d'\n+        contentKey: '0b7050113fba7147f358cc2f4d',\n+        version: 'v3' // default\n       }\n     }\n   ],\ndiff --git a/packages/source-ghost/index.js b/packages/source-ghost/index.js\nindex a944156..e375701 100644\n--- a/packages/source-ghost/index.js\n+++ b/packages/source-ghost/index.js\n@@ -13,7 +13,7 @@ class GhostSource {\n       baseUrl: '',\n       contentKey: '',\n       perPage: 100,\n-      version: 'v2',\n+      version: 'v3',\n       typeName: 'Ghost',\n       settingsName: null\n     }",
    "output": "feat(ghost): use api v3 by default"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 3d7ca4e..9f5b2d0 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -38,6 +38,7 @@ module.exports = async (context, args) => {\n   server.hooks.afterSetup.tap('develop', server => {\n     const devMiddleware = require('webpack-dev-middleware')(compiler, {\n       pathPrefix: webpackConfig.output.pathPrefix,\n+      watchOptions: webpackConfig.devServer ? webpackConfig.devServer.watchOptions : null,\n       logLevel: 'silent'\n     })\n ",
    "output": "fix(webpack): use devServer.watchOptions for dev middleware (#865)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex 107eaba..294499c 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -74,7 +74,7 @@ class ContentfulSource {\n \n     for (const entry of entries) {\n       const typeId = entry.sys.contentType.sys.id\n-      const { typeName, displayField } = this.typesIndex[typeId]\n+      const { typeName, displayField, fields } = this.typesIndex[typeId]\n       const collection = actions.getCollection(typeName)\n       const node = {}\n \n@@ -84,7 +84,8 @@ class ContentfulSource {\n       node.updatedAt = entry.sys.updatedAt\n       node.locale = entry.sys.locale\n \n-      for (const key in entry.fields) {\n+      for (const idx in fields) {\n+        const key = fields[idx].id\n         const value = entry.fields[key]\n \n         if (Array.isArray(value)) {",
    "output": "fix(contentful): properly handle empty asset fields (#866)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-airtable/README.md b/packages/source-airtable/README.md\nindex e27642b..f0bc256 100644\n--- a/packages/source-airtable/README.md\n+++ b/packages/source-airtable/README.md\n@@ -18,18 +18,20 @@ module.exports = {\n         baseId: 'YOUR_BASE_ID', // required\n         tableName: 'YOUR_TABLE_NAME', // required\n         typeName: 'YOUR_TYPE_NAME', // required\n-      }\n-    }\n+        select: {}, // optional\n+      },\n+    },\n   ],\n   templates: {\n-    YOUR_TYPE_NAME: 'YOUR_OPTIONAL_ROUTE' // optional\n-  }\n+    YOUR_TYPE_NAME: 'YOUR_OPTIONAL_ROUTE', // optional\n+  },\n }\n ```\n \n ## Options\n \n-1. `apiKey`: This can be found when logged in to airtable.com, under \"ACCOUNT > API\".\n+1. `apiKey`: This can be found when logged in to airtable.com, under \"ACCOUNT > API\"\n 1. `baseId`: This can be found by going to https://airtable.com/api, clicking on your workspace, and will be visible in the url: https://airtable.com/{YOUR_BASE_ID}/api/docs#curl/introduction\n 1. `tableName`: This is the full name of your chosen workspace table, for example \"Furniture\" is the first and main table in the pre-defined workspace named \"Product Catalog & Orders\"\n 1. `typeName`: Your chosen type name. The type name \"Product\" is an example of an fitting route for the pre-defined airtable workspace named \"Product Catalog & Orders\"\n+1. `select`: Your select options. These can be found by going to https://airtable.com/api, clicking on your workspace, and will be visible under the _List records_ of your table\ndiff --git a/packages/source-airtable/index.js b/packages/source-airtable/index.js\nindex d3be6ec..4cdd830 100644\n--- a/packages/source-airtable/index.js\n+++ b/packages/source-airtable/index.js\n@@ -12,15 +12,17 @@ module.exports = function (api, options) {\n       route: options.route\n     })\n \n-    await base(options.tableName).select().eachPage((records, fetchNextPage) => {\n-      records.forEach((record) => {\n-        const item = record._rawJson\n-        collection.addNode({\n-          id: item.id,\n-          ...item.fields\n+    await base(options.tableName)\n+      .select(options.select || {})\n+      .eachPage((records, fetchNextPage) => {\n+        records.forEach((record) => {\n+          const item = record._rawJson\n+          collection.addNode({\n+            id: item.id,\n+            ...item.fields\n+          })\n         })\n+        fetchNextPage()\n       })\n-      fetchNextPage()\n-    })\n   })\n }",
    "output": "fix(airtable): add select option for queries (#861)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 8286da8..3849496 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -160,6 +160,8 @@ module.exports = (context, options = {}) => {\n   config.prefetch = localConfig.prefetch || {}\n   config.preload = localConfig.preload || {}\n \n+  config.cacheBusting = typeof localConfig.cacheBusting === 'boolean' ? localConfig.cacheBusting : true\n+\n   return Object.freeze(config)\n }\n \ndiff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex f77e30f..04c0cb0 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -24,9 +24,10 @@ module.exports = async (context, args) => {\n   const queue = createRenderQueue(app)\n   const redirects = app.hooks.redirects.call([], queue)\n   const stats = await runWebpack(app)\n+  const hashString = config.cacheBusting ? stats.hash : 'gridsome'\n \n-  await executeQueries(queue, app, stats.hash)\n-  await renderHTML(queue, app, stats.hash)\n+  await executeQueries(queue, app, hashString)\n+  await renderHTML(queue, app, hashString)\n   await processFiles(app.assets.files)\n   await processImages(app.assets.images, app.config)\n \ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 49a3cab..24c4d94 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -17,7 +17,7 @@ module.exports = (app, { isProd, isServer }) => {\n   const assetsDir = path.relative(projectConfig.outputDir, projectConfig.assetsDir)\n   const config = new Config()\n \n-  const useHash = isProd && !process.env.GRIDSOME_TEST\n+  const useHash = isProd && !process.env.GRIDSOME_TEST && projectConfig.cacheBusting\n   const filename = `[name]${useHash ? '.[contenthash:8]' : ''}.js`\n   const assetname = `[name]${useHash ? '.[hash:8]' : ''}.[ext]`\n   const inlineLimit = 10000",
    "output": "fix(build): option for disabling hash in asset filenames (#840)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex 2265b61..8f7c015 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -128,7 +128,7 @@ class ImageProcessQueue {\n     })\n \n     const results = {\n-      src: sets[sets.length - 1].src,\n+      src: sets.length != 0 ? sets[sets.length - 1].src : '',\n       size: { width: imageWidth, height: imageHeight },\n       width: originalSize.width,\n       height: originalSize.height,",
    "output": "fix(g-image): set blank src if sets is empty (#824)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/README.md b/packages/source-wordpress/README.md\nindex a5179ff..1c7267b 100644\n--- a/packages/source-wordpress/README.md\n+++ b/packages/source-wordpress/README.md\n@@ -56,6 +56,7 @@ add_filter( 'acf/format_value', function ( $value ) {\n \n To use REST endpoints from plugins or defined in your theme add a `customEndpoints` array to source-wordpress options.\n \n+\n ```js\n   use: '@gridsome/source-wordpress',\n   options: {\n@@ -68,3 +69,34 @@ To use REST endpoints from plugins or defined in your theme add a `customEndpoin\n     ]\n   }\n ```\n+\n+If you are trying to query posts, you will need to add the `normalize: true` option to make sure the data is properly added:\n+\n+```js\n+    customEndpoints: [\n+        {\n+            typeName: \"Posts\",\n+            route: \"/wp/v2/posts\",\n+            normalize: true,\n+        },\n+    ]\n+```\n+\n+## Create Collections based on REST Endpoints\n+\n+`customEndpoints` allow you to neatly create separate [Collections](https://gridsome.org/docs/collections/#collections) by querying different REST endpoints.\n+\n+```js\n+    customEndpoints: [\n+        {\n+            typeName: \"Collection1\",\n+            route: \"/wp/v2/posts?categories=<category_id>\",\n+            normalize: true,\n+        },\n+        {\n+            typeName: \"Collection2\",\n+            route: \"/wp/v2/posts?tags=<tag_id>\",\n+            normalize: true,\n+        },\n+    ]\n+```\n\\ No newline at end of file\ndiff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 161eaa5..c48749b 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -167,7 +167,11 @@ class WordPressSource {\n         typeName: endpoint.typeName\n       })\n       const { data } = await this.fetch(endpoint.route, {}, {})\n-      for (const item of data) {\n+      for (let item of data) {\n+        if (endpoint.normalize) {\n+          item = this.normalizeFields(item)\n+        }\n+\n         cepCollection.addNode({\n           ...item,\n           id: item.id || item.slug",
    "output": "fix(wordpress): normalize option for custom endpoints (#785)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/actions.js b/gridsome/lib/app/actions.js\nindex ec8f19f..d351203 100644\n--- a/gridsome/lib/app/actions.js\n+++ b/gridsome/lib/app/actions.js\n@@ -111,6 +111,7 @@ function createStoreActions (api, app) {\n }\n \n const {\n+  createEnumType,\n   createObjectType,\n   createUnionType,\n   createScalarType,\n@@ -185,6 +186,7 @@ function createSchemaActions (api, app) {\n     },\n \n     schema: {\n+      createEnumType,\n       createObjectType,\n       createUnionType,\n       createScalarType,",
    "output": "fix(graphql): createEnumType schema method (#814)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex 46316cd..8b00867 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -13,7 +13,8 @@ const remarkImagePlugin = require('./lib/plugins/image')\n const {\n   createFile,\n   makePathParams,\n-  normalizeLayout\n+  normalizeLayout,\n+  createCacheIdentifier\n } = require('./lib/utils')\n \n const normalizeRouteKeys = keys => keys\n@@ -160,7 +161,11 @@ class VueRemark {\n \n     if (api._app.compiler.hooks.cacheIdentifier) {\n       api._app.compiler.hooks.cacheIdentifier.tap('VueRemark', id => {\n-        id['vue-remark'] = require('./package.json').version\n+        id[`vue-remark-${api._entry.uid}`] = createCacheIdentifier(\n+          api.context,\n+          this.options.remark,\n+          this.remark.processor.attachers\n+        )\n       })\n     }\n \ndiff --git a/packages/vue-remark/lib/utils.js b/packages/vue-remark/lib/utils.js\nindex 44b99c5..d6f3568 100644\n--- a/packages/vue-remark/lib/utils.js\n+++ b/packages/vue-remark/lib/utils.js\n@@ -1,3 +1,4 @@\n+const path = require('path')\n const moment = require('moment')\n const { isPlainObject, get } = require('lodash')\n \n@@ -44,6 +45,33 @@ exports.createFile = function (options) {\n   return file\n }\n \n+exports.createCacheIdentifier = function (context, options, attachers = []) {\n+  const version = require('../package.json').version\n+  const pkg = require(path.resolve(context, 'package.json'))\n+  const { dependencies: deps1 = {}, devDependencies: deps2 = {}} = pkg\n+\n+  const remarkPlugins = Object.keys({ ...deps1, ...deps2 })\n+    .filter(name => /remark-/.test(name))\n+    .map(name => ({\n+      fn: require(name),\n+      pkg: require(`${name}/package.json`)\n+    }))\n+\n+  const plugins = attachers\n+    .map(([fn, options = {}]) => {\n+      const plugin = remarkPlugins.find(plugin => plugin.fn === fn)\n+\n+      return plugin && {\n+        name: plugin.pkg.name,\n+        version: plugin.pkg.version,\n+        options\n+      }\n+    })\n+    .filter(Boolean)\n+\n+  return JSON.stringify({ version, options, plugins })\n+}\n+\n exports.normalizeLayout = function (layout) {\n   const defaultLayout = require.resolve('../src/VueRemarkRoot.js')\n ",
    "output": "fix(vue-remark): improve cache invalidation (#707)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/head.js b/gridsome/app/head.js\nindex 9b99891..f0f0572 100644\n--- a/gridsome/app/head.js\n+++ b/gridsome/app/head.js\n@@ -42,7 +42,7 @@ if (icons.favicons.length) {\n   head.link.push({ rel: 'icon', href: 'data:,' })\n }\n \n-icons.favicons.forEach(({ width, height, src: href }) => {\n+icons.favicons.forEach(({ width, height = width, src: href }) => {\n   head.link.push({\n     rel: 'icon',\n     type: icons.faviconMimeType,\n@@ -51,7 +51,7 @@ icons.favicons.forEach(({ width, height, src: href }) => {\n   })\n })\n \n-icons.touchicons.forEach(({ width, height, src: href }) => {\n+icons.touchicons.forEach(({ width, height = width, src: href }) => {\n   head.link.push({\n     rel: `apple-touch-icon${icons.precomposed ? '-precomposed' : ''}`,\n     type: icons.touchiconMimeType,",
    "output": "fix(app): ensure favicon height is set"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/__tests__/ImageProcessQueue.spec.js b/gridsome/lib/app/__tests__/ImageProcessQueue.spec.js\nindex 2d3ee1c..3a91947 100644\n--- a/gridsome/lib/app/__tests__/ImageProcessQueue.spec.js\n+++ b/gridsome/lib/app/__tests__/ImageProcessQueue.spec.js\n@@ -74,10 +74,10 @@ test('encode src in serve mode', async () => {\n   process.env.GRIDSOME_MODE = mode\n \n   expect(result.filePath).toEqual(filePath)\n-  expect(result.src).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=8c00e11')\n-  expect(result.sets[0].src).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=8c00e11')\n-  expect(result.sets[0].destPath).toEqual(path.join(imagesDir, 'assets/folder name/350 250.png?width=350&key=8c00e11'))\n-  expect(result.srcset[0]).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=8c00e11 350w')\n+  expect(result.src).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=test')\n+  expect(result.sets[0].src).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=test')\n+  expect(result.sets[0].destPath).toEqual(path.join(imagesDir, 'assets/folder name/350 250.png?width=350&key=test'))\n+  expect(result.srcset[0]).toEqual('/assets/static/assets/folder%20name/350%20250.png?width=350&key=test 350w')\n })\n \n test('generate srcset for image with path prefix', async () => {\n@@ -361,8 +361,8 @@ test('get url for server in serve mode', async () => {\n   process.env.GRIDSOME_MODE = mode\n \n   expect(queue.images.queue).toHaveLength(0)\n-  expect(result.src).toEqual('/assets/static/assets/1000x600.png?width=500&key=f1803fe')\n-  expect(result2.src).toEqual('/assets/static/assets/1000x600.png?width=200&quality=50&key=6661cc5')\n+  expect(result.src).toEqual('/assets/static/assets/1000x600.png?width=500&key=test')\n+  expect(result2.src).toEqual('/assets/static/assets/1000x600.png?width=200&quality=50&key=test')\n })\n \n test('get queue values', async () => {\ndiff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex e7aebae..84333c4 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -102,7 +102,8 @@ class ImageProcessQueue {\n \n     const createDestPath = (filename, imageOptions) => {\n       if (process.env.GRIDSOME_MODE === 'serve') {\n-        const query = '?' + createOptionsQuery(imageOptions.concat({ key: 'key', value: cacheKey }))\n+        const key = process.env.GRIDSOME_TEST ? 'test' : cacheKey\n+        const query = '?' + createOptionsQuery(imageOptions.concat({ key: 'key', value: key }))\n         return path.join('/', imagesDir, forwardSlash(relPath)) + query\n       }\n ",
    "output": "test(g-image): don\u2019t include asset key in tests"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/__tests__/PluginStore.spec.js b/gridsome/lib/store/__tests__/PluginStore.spec.js\nindex 8af669c..c081c8c 100644\n--- a/gridsome/lib/store/__tests__/PluginStore.spec.js\n+++ b/gridsome/lib/store/__tests__/PluginStore.spec.js\n@@ -618,6 +618,30 @@ test('resolve file paths', async () => {\n   expect(node.text3).toEqual('md')\n })\n \n+test('resolve file paths when folder as extension', async () => {\n+  const api = await createPlugin('/absolute/dir/to/project.com')\n+\n+  const collection = api.store.addCollection({\n+    typeName: 'Test',\n+    resolveAbsolutePaths: true\n+  })\n+\n+  const node = collection.addNode({\n+    file: 'image.png',\n+    file2: '/image.png',\n+    file3: '../image.png',\n+    filepath: 'dir/to/image.png',\n+    internal: {\n+      origin: '/absolute/dir/to/project.com/a/b/file.md'\n+    }\n+  })\n+\n+  expect(node.file).toEqual('image.png')\n+  expect(node.file2).toEqual('/absolute/dir/to/project.com/image.png')\n+  expect(node.file3).toEqual('/absolute/dir/to/project.com/a/image.png')\n+  expect(node.filepath).toEqual('dir/to/image.png')\n+})\n+\n test('resolve absolute file paths with no origin', async () => {\n   const api = await createPlugin('/absolute/dir/to/project')\n \ndiff --git a/gridsome/lib/store/utils.js b/gridsome/lib/store/utils.js\nindex 03d517e..49847de 100644\n--- a/gridsome/lib/store/utils.js\n+++ b/gridsome/lib/store/utils.js\n@@ -69,8 +69,11 @@ exports.resolvePath = function (origin, toPath, options = {}) {\n   }\n \n   if (typeof contextPath === 'string') {\n-    const { rootPath, basePath } = parsePath(contextPath)\n-    return rootPath + resolver.join(basePath, toPath)\n+    if (isUrl(contextPath)) {\n+      const { rootPath, basePath } = parsePath(contextPath)\n+      return rootPath + resolver.join(basePath, toPath)\n+    }\n+    return resolver.join(contextPath, toPath)\n   }\n \n   return toPath",
    "output": "fix(store): resolve absolute paths in fields correctly (#792)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/README.md b/packages/remark-prismjs/README.md\nindex 9ac6f4a..e701960 100644\n--- a/packages/remark-prismjs/README.md\n+++ b/packages/remark-prismjs/README.md\n@@ -59,3 +59,24 @@ module.exports = {\n   }\n }\n ```\n+\n+If you'd like to disable highlighting of inline code blocks, pass `transformInlineCode: false` in the plugin options\n+\n+```js\n+module.exports = {\n+  plugins: [\n+    {\n+      use: '@gridsome/source-filesystem',\n+      options: {}\n+    }\n+  ],\n+\n+  transformers: {\n+    remark: {\n+      plugins: [\n+        ['@gridsome/remark-prismjs', { transformInlineCode: false }]\n+      ]\n+    }\n+  }\n+}\n+```\ndiff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 62a935a..3776a3d 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -8,14 +8,16 @@ const toHTML = require('hast-util-to-html')\n // load all prismjs languages\n require('prismjs/components/index')()\n \n-module.exports = () => tree => {\n+module.exports = (options = { transformInlineCode: true }) => tree => {\n   visit(tree, 'code', (node, index, parent) => {\n     parent.children.splice(index, 1, createCode(node))\n   })\n \n-  visit(tree, 'inlineCode', (node, index, parent) => {\n-    parent.children.splice(index, 1, createInlineCode(node))\n-  })\n+  if (options.transformInlineCode) {\n+    visit(tree, 'inlineCode', (node, index, parent) => {\n+      parent.children.splice(index, 1, createInlineCode(node))\n+    })\n+  }\n }\n \n function highlight (node) {",
    "output": "feat(prismjs): option to skip inline code blocks (#773)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-datocms/index.js b/packages/source-datocms/index.js\nindex ab5946d..e77728f 100644\n--- a/packages/source-datocms/index.js\n+++ b/packages/source-datocms/index.js\n@@ -107,6 +107,7 @@ class DatoCmsSource {\n         slug: slugField && item[camelize(slugField.apiKey)],\n         created: new Date(item.createdAt),\n         updated: new Date(item.updatedAt),\n+        position: item.position,\n         ...item.itemType.fields.reduce((fields, field) => {\n           const val = item.readAttribute(field)\n ",
    "output": "fix(datocms): include position for custom sorting (#778)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/createHTMLRenderer.js b/gridsome/lib/server/createHTMLRenderer.js\nindex 722a955..5f04957 100644\n--- a/gridsome/lib/server/createHTMLRenderer.js\n+++ b/gridsome/lib/server/createHTMLRenderer.js\n@@ -7,9 +7,19 @@ function createHTMLRenderer (htmlTemplate) {\n     return render(Object.assign({\n       htmlAttrs: '',\n       bodyAttrs: '',\n-      scripts: '',\n       head: '',\n-      app: ''\n+      title: '',\n+      base: '',\n+      hash: '',\n+      vueMetaTags: '',\n+      vueMetaLinks: '',\n+      resourceHints: '',\n+      styles: '',\n+      vueMetaStyles: '',\n+      vueMetaScripts: '',\n+      noscript: '',\n+      app: '',\n+      scripts: ''\n     }, variables))\n   }\n }\ndiff --git a/gridsome/lib/server/createRenderFn.js b/gridsome/lib/server/createRenderFn.js\nindex cb79a9f..bb26ff4 100644\n--- a/gridsome/lib/server/createRenderFn.js\n+++ b/gridsome/lib/server/createRenderFn.js\n@@ -44,17 +44,29 @@ module.exports = function createRenderFn ({\n     const htmlAttrs = inject.htmlAttrs.text()\n     const bodyAttrs = inject.bodyAttrs.text()\n \n-    const head = '' +\n-      inject.title.text() +\n-      inject.base.text() +\n-      `<meta name=\"gridsome:hash\" content=\"${hash}\">` +\n-      inject.meta.text() +\n-      inject.link.text() +\n-      inject.style.text() +\n-      inject.script.text() +\n-      inject.noscript.text() +\n-      context.renderResourceHints() +\n-      context.renderStyles()\n+    const pageTitle = inject.title.text()\n+    const metaBase = inject.base.text()\n+    const gridsomeHash = `<meta name=\"gridsome:hash\" content=\"${hash}\">`\n+    const vueMetaTags = inject.meta.text()\n+    const vueMetaLinks = inject.link.text()\n+    const styles = context.renderStyles()\n+    const noscript = inject.noscript.text()\n+    const vueMetaStyles = inject.style.text()\n+    const vueMetaScripts = inject.script.text()\n+    const resourceHints = context.renderResourceHints()\n+\n+    const head =\n+      '' +\n+      pageTitle +\n+      metaBase +\n+      gridsomeHash +\n+      vueMetaTags +\n+      vueMetaLinks +\n+      resourceHints +\n+      styles +\n+      vueMetaStyles +\n+      vueMetaScripts +\n+      noscript\n \n     const renderedState = state && stateSize <= MAX_STATE_SIZE\n       ? context.renderState()\n@@ -65,13 +77,23 @@ module.exports = function createRenderFn ({\n       context.renderScripts() +\n       inject.script.text({ body: true })\n \n-    return renderHTML({\n-      htmlAttrs: `data-html-server-rendered=\"true\" ${htmlAttrs}`,\n-      bodyAttrs,\n-      scripts,\n-      head,\n-      app\n-    })\n+      return renderHTML({\n+        htmlAttrs: `data-html-server-rendered=\"true\" ${htmlAttrs}`,\n+        bodyAttrs,\n+        head,\n+        title: pageTitle,\n+        base: metaBase,\n+        hash: gridsomeHash,\n+        vueMetaTags,\n+        vueMetaLinks,\n+        resourceHints,\n+        styles,\n+        vueMetaStyles,\n+        vueMetaScripts,\n+        noscript,\n+        app,\n+        scripts\n+      })\n   }\n }\n ",
    "output": "refactor(build): split head html template variable (#767)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 6449199..161eaa5 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -29,6 +29,8 @@ class WordPressSource {\n       throw new Error(`${options.typeName}: perPage cannot be more than 100 or less than 1.`)\n     }\n \n+    this.customEndpoints = this.sanitizeCustomEndpoints()\n+\n     const baseUrl = trimEnd(options.baseUrl, '/')\n \n     this.client = axios.create({\n@@ -46,6 +48,7 @@ class WordPressSource {\n       await this.getUsers(actions)\n       await this.getTaxonomies(actions)\n       await this.getPosts(actions)\n+      await this.getCustomEndpoints(actions)\n     })\n   }\n \n@@ -157,6 +160,22 @@ class WordPressSource {\n     }\n   }\n \n+  async getCustomEndpoints (actions) {\n+    for (const endpoint of this.customEndpoints) {\n+      const makeCollection = actions.addCollection || actions.addContentType\n+      const cepCollection = makeCollection({\n+        typeName: endpoint.typeName\n+      })\n+      const { data } = await this.fetch(endpoint.route, {}, {})\n+      for (const item of data) {\n+        cepCollection.addNode({\n+          ...item,\n+          id: item.id || item.slug\n+        })\n+      }\n+    }\n+  }\n+\n   async fetch (url, params = {}, fallbackData = []) {\n     let res\n \n@@ -225,6 +244,20 @@ class WordPressSource {\n     })\n   }\n \n+  sanitizeCustomEndpoints () {\n+    if (!this.options.customEndpoints) return []\n+    if (!Array.isArray(this.options.customEndpoints)) throw Error('customEndpoints must be an array')\n+    this.options.customEndpoints.forEach(endpoint => {\n+      if (!endpoint.typeName) {\n+        throw Error('Please provide a typeName option for all customEndpoints\\n')\n+      }\n+      if (!endpoint.route) {\n+        throw Error(`No route option in endpoint: ${endpoint.typeName}\\n Ex: 'apiName/versionNumber/endpointObject'`)\n+      }\n+    })\n+    return this.options.customEndpoints ? this.options.customEndpoints : []\n+  }\n+\n   normalizeFields (fields) {\n     const res = {}\n ",
    "output": "feat(wordpress): custom REST route support (#706)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 858c482..3aec18d 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -7,6 +7,7 @@ import plugins from '~/.temp/plugins-client'\n import linkDirective from './directives/link'\n import imageDirective from './directives/image'\n import { stripPathPrefix } from './utils/helpers'\n+import { isFunc, isNil } from './utils/lang'\n \n Vue.directive('g-link', linkDirective)\n Vue.directive('g-image', imageDirective)\n@@ -19,7 +20,7 @@ const { app, router } = createApp()\n if (process.env.NODE_ENV === 'production') {\n   router.beforeEach((to, from, next) => {\n     const components = router.getMatchedComponents(to).map(\n-      c => typeof c === 'function' ? c() : c\n+      c => isFunc(c) && isNil(c.cid) ? c() : c\n     )\n \n     Promise.all(components)\ndiff --git a/gridsome/app/utils/lang.js b/gridsome/app/utils/lang.js\nindex 6d0b851..3043cea 100644\n--- a/gridsome/app/utils/lang.js\n+++ b/gridsome/app/utils/lang.js\n@@ -1,6 +1,6 @@\n-export function isDef (v) {\n-  return v !== undefined && v !== null\n-}\n+export const isDef = v => v !== undefined && v !== null\n+export const isNil = v => v === undefined || v === null\n+export const isFunc = v => typeof v === 'function'\n \n export function isObject (obj) {\n   return obj !== null && typeof obj === 'object'",
    "output": "fix(app): don\u2019t resolve constructor components (#552)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/composables.js b/gridsome/app/composables.js\nindex 5cc22fd..0b357ca 100644\n--- a/gridsome/app/composables.js\n+++ b/gridsome/app/composables.js\n@@ -1,4 +1,4 @@\n-import { getCurrentInstance, onMounted, onUnmounted, shallowReactive, ref, watch, computed, unref } from 'vue'\n+import { getCurrentInstance, onUnmounted, shallowReactive, ref, watch, computed } from 'vue'\n import { getResults } from './graphql/shared'\n import { throwNoCurrentInstance } from './utils/helpers'\n \n@@ -32,7 +32,7 @@ export function useMetaInfo(metaInfo) {\n     ? computed(metaInfo)\n     : ref(metaInfo)\n \n-  $options.metaInfo = metaInfoRef\n+  $options.metaInfo = metaInfo\n \n   watch(metaInfoRef, (nextValue) => {\n     instance.proxy.$metaInfo = nextValue\n@@ -99,6 +99,18 @@ export function usePageQuery() {\n   return data\n }\n \n+export function useStaticQuery() {\n+  const instance = getCurrentInstance()\n+\n+  if (!instance) {\n+    throwNoCurrentInstance('useStaticQuery')\n+  }\n+\n+  const { $options } = instance.proxy\n+\n+  return $options.computed?.$static?.() ?? null\n+}\n+\n function isSameRoute(a, b) {\n   return a.matched[0] === b.matched[0]\n }\ndiff --git a/gridsome/app/index.js b/gridsome/app/index.js\nindex 49f06f3..b781849 100644\n--- a/gridsome/app/index.js\n+++ b/gridsome/app/index.js\n@@ -5,7 +5,7 @@ export { default as Link } from './components/Link'\n export { default as Image } from './components/Image'\n export { default as Pager } from './components/Pager'\n export { default as ClientOnly } from './components/ClientOnly'\n-export { useMetaInfo, useRouter, useRoute, usePageQuery } from './composables'\n+export { useMetaInfo, useRouter, useRoute, usePageQuery, useStaticQuery } from './composables'\n export { url } from './utils/helpers'\n \n export function fetch(path) {\ndiff --git a/playground/src/App.vue b/playground/src/App.vue\nnew file mode 100644\nindex 0000000..69b1504\n--- /dev/null\n+++ b/playground/src/App.vue\n@@ -0,0 +1,56 @@\n+<script lang=\"ts\" setup>\n+import { useStaticQuery } from 'gridsome'\n+\n+const data = useStaticQuery()\n+</script>\n+\n+<template>\n+  <div class=\"app\">\n+    <header class=\"header\">\n+      <strong>\n+        <g-link to=\"/\">{{ data?.metadata.siteName }}</g-link>\n+      </strong>\n+      <nav class=\"nav\">\n+        <g-link class=\"nav__link\" to=\"/\">Home</g-link>\n+        <g-link class=\"nav__link\" to=\"/about/\">About</g-link>\n+      </nav>\n+    </header>\n+    <router-view />\n+  </div>\n+</template>\n+\n+<static-query>\n+query {\n+  metadata {\n+    siteName\n+  }\n+}\n+</static-query>\n+\n+<style>\n+body {\n+  font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\n+  margin:0;\n+  padding:0;\n+  line-height: 1.5;\n+}\n+\n+.app {\n+  max-width: 760px;\n+  margin: 0 auto;\n+  padding-left: 20px;\n+  padding-right: 20px;\n+}\n+\n+.header {\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  margin-bottom: 20px;\n+  height: 80px;\n+}\n+\n+.nav__link {\n+  margin-left: 20px;\n+}\n+</style>",
    "output": "feat: `useStaticQuery`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/index.js b/gridsome/app/index.js\nindex 0610a1a..608d78d 100644\n--- a/gridsome/app/index.js\n+++ b/gridsome/app/index.js\n@@ -21,3 +21,13 @@ export function useMeta(meta) {\n   instance.proxy.$options.metaInfo = meta\n   instance.proxy._vueMeta = true\n }\n+\n+export function useRouter() {\n+  const instance = getCurrentInstance()\n+  return instance.proxy.$router\n+}\n+\n+export function useRoute() {\n+  const instance = getCurrentInstance()\n+  return instance.proxy.$route\n+}",
    "output": "feat: `useRouter` and `useRoute`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/index.js b/gridsome/app/index.js\nindex 12d5cc0..0610a1a 100644\n--- a/gridsome/app/index.js\n+++ b/gridsome/app/index.js\n@@ -1,4 +1,4 @@\n-import Vue from 'vue'\n+import Vue, { getCurrentInstance } from 'vue'\n \n export { default as Vue } from 'vue'\n export { default as Link } from './components/Link'\n@@ -10,3 +10,14 @@ export { url } from './utils/helpers'\n export function fetch(path) {\n   return Vue.prototype.$fetch(path)\n }\n+\n+export function useMeta(meta) {\n+  const instance = getCurrentInstance()\n+  if (instance.proxy.$options.metaInfo) {\n+    throw new Error(\n+      `\\`metaInfo\\` has already been defined in the normal <string> tag.`\n+    )\n+  }\n+  instance.proxy.$options.metaInfo = meta\n+  instance.proxy._vueMeta = true\n+}",
    "output": "feat: `useMetaInfo`"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/workers/image-processor.js b/gridsome/lib/workers/image-processor.js\nindex d16fd41..0b49146 100644\n--- a/gridsome/lib/workers/image-processor.js\n+++ b/gridsome/lib/workers/image-processor.js\n@@ -17,11 +17,11 @@ exports.processImage = async function ({\n     return\n   }\n \n+  await fs.ensureDir(path.dirname(destPath))\n+\n   const { ext } = path.parse(filePath)\n   const { backgroundColor, defaultQuality = 75 } = imagesConfig\n \n-  const buffer = await fs.readFile(filePath)\n-\n   if (['.png', '.jpeg', '.jpg', '.webp'].includes(ext.toLowerCase())) {\n     const config = {\n       pngCompressionLevel: parseInt(options.pngCompressionLevel, 10) || 9,\n@@ -31,11 +31,16 @@ exports.processImage = async function ({\n       jpegProgressive: true\n     }\n \n-    const sharpImage = sharp(buffer)\n     const compress = imagesConfig.compress !== false && config.quality < 100\n \n+    const pipeline = sharp()\n+    const readStream = fs.createReadStream(filePath)\n+    const writeStream = fs.createWriteStream(destPath)\n+\n+    readStream.pipe(pipeline).pipe(writeStream)\n+\n     // Rotate based on EXIF Orientation tag\n-    sharpImage.rotate()\n+    pipeline.rotate()\n \n     if (\n       (config.width && config.width <= width) ||\n@@ -53,19 +58,19 @@ exports.processImage = async function ({\n         resizeOptions.background = backgroundColor\n       }\n \n-      sharpImage.resize(resizeOptions)\n+      pipeline.resize(resizeOptions)\n     }\n \n     if (compress) {\n       if (/\\.png$/.test(ext)) {\n-        sharpImage.png({\n+        pipeline.png({\n           compressionLevel: config.pngCompressionLevel,\n           quality: config.quality\n         })\n       }\n \n       if (/\\.jpe?g$/.test(ext)) {\n-        sharpImage.jpeg({\n+        pipeline.jpeg({\n           progressive: config.jpegProgressive,\n           quality: config.quality,\n           mozjpeg: true\n@@ -73,25 +78,29 @@ exports.processImage = async function ({\n       }\n \n       if (/\\.webp$/.test(ext)) {\n-        sharpImage.webp({\n+        pipeline.webp({\n           quality: config.quality\n         })\n       }\n     }\n \n-    const sharpBuffer = await sharpImage.toBuffer()\n-    const sharpLength = Buffer.byteLength(sharpBuffer)\n-    const initLength = Buffer.byteLength(buffer)\n+    return new Promise((resolve, reject) => {\n+      writeStream.on('finish', async () => {\n+        const stats = await fs.stat(filePath)\n+        const destStats = await fs.stat(destPath)\n+\n+        // Ensures that the resulting file size\n+        // is not larger than the original file.\n+        if (stats.size < destStats.size) {\n+          await fs.copy(filePath, destPath, { overwrite: true, errorOnExist: false })\n+        }\n \n-    return fs.outputFile(\n-      destPath,\n-      sharpLength < initLength\n-        ? sharpBuffer\n-        : buffer\n-    )\n+        resolve()\n+      }).on('error', reject)\n+    })\n   }\n \n-  return fs.outputFile(destPath, buffer)\n+  await fs.copy(filePath, destPath, { overwrite: true, errorOnExist: false })\n }\n \n exports.process = async function ({ queue, context, imagesConfig }) {",
    "output": "perf: stream images while processing them"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex 9cc58cf..ce12ed0 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -42,7 +42,7 @@ class Pages {\n     })\n \n     this._pages = new Collection('pages', {\n-      indices: ['id'],\n+      indices: ['id', 'internal.route'],\n       unique: ['id', 'path'],\n       disableMeta: true,\n       adaptiveBinaryIndices: false\n@@ -467,8 +467,8 @@ class Route {\n   pages () {\n     return this._pages\n       .chain()\n-      .simplesort('path', false)\n       .find({ 'internal.route': this.id })\n+      .simplesort('path', false)\n       .data()\n   }\n ",
    "output": "perf(build): improve render queue performance"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/directives/catch-links.js b/gridsome/app/directives/catch-links.js\nindex 1adb6fa..5a3551b 100644\n--- a/gridsome/app/directives/catch-links.js\n+++ b/gridsome/app/directives/catch-links.js\n@@ -3,7 +3,7 @@ import config from '#gridsome/config'\n import { NOT_FOUND_NAME } from '#gridsome/constants'\n import { stripPathPrefix } from '../utils/helpers'\n \n-function onCatchLink(event) {\n+export function onCatchLink(event) {\n   const { hostname, port } = event.target.ownerDocument.location\n   const $el = event.target.closest('a')\n \n@@ -14,12 +14,15 @@ function onCatchLink(event) {\n     event.altKey ||\n     event.ctrlKey ||\n     event.shiftKey ||\n+    event.button ||\n     $el === null || // no link clicked\n     $el.__gLink__ || // g-link component\n     $el.hostname !== hostname || // external link\n     $el.port !== port || // external link\n-    /\\.[^.]+$/.test($el.pathname) || // link to a file\n-    /\\b_blank\\b/i.test($el.target) // opens in new tab\n+    $el.download ||\n+    /\\bexternal\\b/i.test($el.rel) ||\n+    /\\b_blank\\b/i.test($el.target) || // opens in new tab\n+    /\\.[^.]+$/.test($el.pathname) // link to a file\n   ) return\n \n   if (\n@@ -47,7 +50,6 @@ export default {\n     el.addEventListener('click', onCatchLink, false)\n   },\n   unbind (el) {\n-    console.log('unbind', el)\n     el.removeEventListener('click', onCatchLink)\n   }\n }\ndiff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 1685b48..cf3aa37 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -6,7 +6,7 @@ import config from '#gridsome/config'\n import plugins from '#gridsome/plugins-client'\n import linkDirective from './directives/link'\n import imageDirective from './directives/image'\n-import catchLinksDirective from './directives/catch-links'\n+import catchLinksDirective, { onCatchLink } from './directives/catch-links'\n import { isFunc, isNil } from './utils/lang'\n \n Vue.directive('g-link', linkDirective)\n@@ -38,6 +38,10 @@ if (process.env.NODE_ENV === 'production') {\n   })\n }\n \n+if (config.catchLinks !== false) {\n+  addEventListener('click', onCatchLink, false)\n+}\n+\n router.onError((err) => {\n   console.error(err)\n })",
    "output": "refactor: catch links if not disabled"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/lib/plugins/file.js b/packages/transformer-remark/lib/plugins/file.js\nindex d8b541e..33b95fd 100644\n--- a/packages/transformer-remark/lib/plugins/file.js\n+++ b/packages/transformer-remark/lib/plugins/file.js\n@@ -9,7 +9,7 @@ module.exports = function attacher () {\n \n     const links = []\n \n-    visit(tree, 'link', node => links.push(node))\n+    visit(tree, 'link', node => { links.push(node) })\n \n     for (const node of links) {\n       const path = file.data.node\ndiff --git a/packages/transformer-remark/lib/plugins/image.js b/packages/transformer-remark/lib/plugins/image.js\nindex f1abbbf..3d37b00 100644\n--- a/packages/transformer-remark/lib/plugins/image.js\n+++ b/packages/transformer-remark/lib/plugins/image.js\n@@ -9,7 +9,7 @@ module.exports = function attacher (options = {}) {\n \n     const images = []\n \n-    visit(tree, 'image', node => images.push(node))\n+    visit(tree, 'image', node => { images.push(node) })\n \n     for (const node of images) {\n       const data = node.data || {}",
    "output": "fix(remark): fix return value from visitor (#1586)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 1d9e9dc..ea24437 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -211,22 +211,33 @@ function registerTsExtension() {\n   }\n }\n \n-function resolveEnv (context) {\n-  const env = process.env.NODE_ENV || 'development'\n-  const envPath = path.resolve(context, '.env')\n-  const envPathByMode = path.resolve(context, `.env.${env}`)\n-  const readPath = fs.existsSync(envPathByMode) ? envPathByMode : envPath\n+function resolveEnv(context) {\n+  const mode = process.env.NODE_ENV || 'development'\n+  const envFiles = [\n+    /** default file */ `.env`,\n+    /** local file */ `.env.local`,\n+    /** mode file */ `.env.${mode}`,\n+    /** mode local file */ `.env.${mode}.local`\n+  ].map(p => path.resolve(context, p))\n+\n+  const variables = {}\n+\n+  for (const file of envFiles) {\n+    try {\n+      const parsed = dotenv.parse(fs.readFileSync(file), {\n+        debug: !!process.env.DEBUG || undefined\n+      })\n \n-  let parsed = {}\n-  try {\n-    parsed = dotenv.parse(fs.readFileSync(readPath, 'utf8'))\n-  } catch (err) {\n-    if (err.code !== 'ENOENT') {\n-      console.error('There was a problem processing the .env file', err)\n+      Object.assign(variables, parsed)\n+    } catch (err) {\n+      if (err.code !== 'ENOENT')\n+        console.error(`There was a problem processing the ${file} file`, err)\n     }\n   }\n \n-  return parsed\n+  // Existing environment variables have precedence\n+  // https://12factor.net/config\n+  return Object.assign(variables, process.env)\n }\n \n function resolvePkg (context) {",
    "output": "feat: load `.env.local` and `.env.*.local` (#1583)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 82f5ea8..1d9e9dc 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -113,7 +113,8 @@ module.exports = async (context, options = {}) => {\n   config.publicPath = config.pathPrefix ? `${config.pathPrefix}/` : '/'\n   config.staticDir = resolve('static')\n \n-  config.outputDir = resolve(localConfig.outputDir || localConfig.outDir || 'dist')\n+  config.outputDir = resolve(localConfig.outputDir || 'dist')\n+  config.emptyOutputDir = localConfig.emptyOutputDir !== false\n   config.assetsDir = path.join(config.outputDir, assetsDir)\n   config.imagesDir = path.join(config.assetsDir, 'static')\n   config.filesDir = path.join(config.assetsDir, 'files')\ndiff --git a/gridsome/lib/build.js b/gridsome/lib/build.js\nindex bd2f2a1..0f3379b 100644\n--- a/gridsome/lib/build.js\n+++ b/gridsome/lib/build.js\n@@ -19,7 +19,9 @@ module.exports = async (context, args) => {\n \n   await app.plugins.run('beforeBuild', { context, config })\n \n-  await fs.emptyDir(config.outputDir)\n+  if (config.emptyOutputDir) {\n+    await fs.emptyDir(config.outputDir)\n+  }\n \n   const stats = await runWebpack(app)\n   const hashString = config.cacheBusting ? stats.hash : 'gridsome'",
    "output": "feat(config): `emptyOutputDir` config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex c6a9289..d7d3228 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -43,7 +43,7 @@ export default {\n         attrs.height = size.height\n \n         if (isLazy) attrs['data-src'] = src\n-        if (srcset.length) attrs[`${isLazy ? 'data-' : ''}srcset`] = Array.isArray(srcset) ? srcset.join(', ') : srcset\n+        if (srcset && srcset.length) attrs[`${isLazy ? 'data-' : ''}srcset`] = Array.isArray(srcset) ? srcset.join(', ') : srcset\n         if (sizes) attrs[`${isLazy ? 'data-' : ''}sizes`] = sizes\n \n         if (isLazy) {\ndiff --git a/gridsome/app/directives/image.js b/gridsome/app/directives/image.js\nindex 4a89b68..81f5be0 100644\n--- a/gridsome/app/directives/image.js\n+++ b/gridsome/app/directives/image.js\n@@ -83,7 +83,7 @@ function loadImage (el) {\n     addClass(el, 'g-image--error')\n   }\n \n-  el.srcset = srcset\n-  el.sizes = sizes\n+  if (srcset) el.srcset = srcset\n+  if (sizes) el.sizes = sizes\n   el.src = src\n }",
    "output": "fix(g-image): optional `srcset` and `sizes` (#1574)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex f73cb79..6b2b7ba 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -51,9 +51,12 @@ const makePath = (object, { routeKeys, createPath }, dateField = 'date', slugify\n         ) {\n           return String(value.id)\n         } else if (!isPlainObject(value)) {\n-          return suffix === 'raw'\n-            ? String(value)\n-            : slugify(String(value))\n+          const slugifyValue = slugify(String(value))\n+          if (suffix === 'raw' || slugifyValue === '') {\n+            return String(value)\n+          } else {\n+            return slugifyValue\n+          }\n         } else {\n           return ''\n         }",
    "output": "refactor: fallback to raw value when slug is empty (#1513)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/Plugins.js b/gridsome/lib/app/Plugins.js\nindex 51d5720..2d69996 100644\n--- a/gridsome/lib/app/Plugins.js\n+++ b/gridsome/lib/app/Plugins.js\n@@ -100,8 +100,8 @@ class Plugins {\n     this._app.schema.buildSchema()\n   }\n \n-  async configureServer(server) {\n-    return this.run('configureServer', null, server)\n+  configureServer(server) {\n+    return this.runSync('configureServer', null, server)\n   }\n \n   async createPages() {\n@@ -147,6 +147,26 @@ class Plugins {\n \n     return results\n   }\n+\n+  runSync(eventName, cb, ...args) {\n+    if (!this._listeners[eventName]) return []\n+\n+    const results = []\n+\n+    for (const entry of this._listeners[eventName]) {\n+      if (entry.options.once && entry.done) continue\n+\n+      const { api, handler } = entry\n+      const result = typeof cb === 'function'\n+        ? handler(cb(api))\n+        : handler(...args, api)\n+\n+      results.push(result)\n+      entry.done = true\n+    }\n+\n+    return results\n+  }\n }\n \n module.exports = Plugins\ndiff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 3ec2e96..ee1d143 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -90,7 +90,7 @@ module.exports = async (context, options = {}) => {\n     })\n   }\n \n-  // add project root as plugin\n+  // add server entry as plugin\n   if (serverEntryPath) {\n     plugins.push(requireEsModule(serverEntryPath))\n   }\ndiff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex e2c23fc..38005ac 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -82,14 +82,11 @@ async function createDevServer(app, compiler) {\n   devServer.onBeforeSetupMiddleware = (server) => {\n     setupGraphQLMiddleware(app, server)\n     setupAssetsMiddleware(app, server)\n+    app.plugins.configureServer(server.app)\n     onBeforeSetupMiddleware && onBeforeSetupMiddleware(server)\n   }\n \n-  const server = new WebpackDevServer(compiler, devServer)\n-\n-  await app.plugins.configureServer(server.app)\n-\n-  return server\n+  return new WebpackDevServer(devServer, compiler)\n }\n \n function createSocketServer(app, server) {",
    "output": "refactor: make configureServer a sync hook (#1557)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex a7c7aac..944be3c 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -27,7 +27,7 @@ jobs:\n     strategy:\n       matrix:\n         node-version: ['12', '14', '16']\n-        os: [macOS-latest, ubuntu-latest]\n+        os: [ubuntu-latest]\n     steps:\n       - name: Checkout\n         uses: actions/checkout@v2",
    "output": "ci(test): disable slow macos tests for now"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 2bcc2bc..83562d2 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -90,7 +90,7 @@ module.exports = (app, { isProd, isServer }) => {\n     .loader(require.resolve('vue-loader'))\n     .options({\n       compilerOptions: {\n-        preserveWhitespace: false,\n+        whitespace: 'condense',\n         modules: [\n           require('./modules/html')(),\n           require('./modules/assets')()",
    "output": "refactor: set vue-loader whitespace to condense"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 21e31a9..eb96f5e 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -130,7 +130,13 @@ module.exports = async (context, options = {}) => {\n   config.appPath = path.resolve(__dirname, '../../app')\n \n   // Cache paths\n-  config.cacheDir = resolve('node_modules/.cache/gridsome')\n+  if (process.versions.pnp === '1') {\n+    config.cacheDir = resolve('.pnp/.cache/gridsome')\n+  } else if (process.versions.pnp === '3') {\n+    config.cacheDir = resolve('.yarn/.cache/gridsome')\n+  } else {\n+    config.cacheDir = resolve('node_modules/.cache/gridsome')\n+  }\n   config.appCacheDir = path.join(config.cacheDir, 'app')\n   config.imageCacheDir = path.join(config.cacheDir, 'assets')\n ",
    "output": "refactor: set correct cache dir for pnp"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 13d604a..0f8c2bf 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -23,7 +23,7 @@ module.exports = (app, { isProd, isServer }) => {\n \n   const useHash = isProd && !process.env.GRIDSOME_TEST && projectConfig.cacheBusting\n   const filename = `[name]${useHash ? '.[contenthash:8]' : ''}.js`\n-  const assetname = `[name]${useHash ? '.[hash:8]' : ''}.[ext]`\n+  const assetname = `[name]${useHash ? '.[hash:8]' : ''}[ext]`\n   const inlineLimit = 10000\n \n   config.name(isServer ? 'server' : 'client')",
    "output": "refactor: remove duplicate dot in asset filenames"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 8de3d43..13d604a 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -135,7 +135,10 @@ module.exports = (app, { isProd, isServer }) => {\n \n   // css\n \n-  const hasPostCSSConfig = glob.sync(['.postcssrc?({.js,.yaml,.json})', 'postcss.config.js']).length > 0\n+  const postcssConfigFiles = glob.sync(\n+    ['.postcssrc?({.js,.yaml,.json})', 'postcss.config.js'],\n+    { cwd: projectConfig.context }\n+  )\n \n   ;[\n     ['css', /\\.css$/],\n@@ -176,7 +179,7 @@ module.exports = (app, { isProd, isServer }) => {\n         .options({\n           sourceMap: !isProd,\n           ...postcss,\n-          postcssOptions: !hasPostCSSConfig\n+          postcssOptions: !postcssConfigFiles.length\n             ? {\n               ...postcssOptions,\n               plugins: [...(postcssOptions.plugins || []), require('autoprefixer')]",
    "output": "refactor: resolve postcss config in project root folder"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex b31b66a..a7c7aac 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -41,4 +41,4 @@ jobs:\n       - name: Install dependencies\n         run: yarn install --frozen-lockfile\n       - name: Run tests\n-        run: yarn test:unit\n+        run: yarn test:unit --ci\ndiff --git a/jest.config.js b/jest.config.js\nindex 98ce55e..d27f896 100644\n--- a/jest.config.js\n+++ b/jest.config.js\n@@ -1,26 +1,22 @@\n-const e2e = process.argv.some(v => v === '--e2e')\n-\n-const testPathIgnorePatterns = [\n-  '/__fixtures__/',\n-  '/projects/',\n-  '/scripts/'\n-]\n+const { GRIDSOME_TEST = 'unit' } = process.env\n \n module.exports = {\n   testEnvironment: 'node',\n-  testPathIgnorePatterns,\n   testMatch: [\n-    `**/__tests__/**/*.${e2e ? 'e2e' : 'spec'}.js`\n-  ],\n-  setupFiles: [\n-    '<rootDir>/scripts/testSetup.js'\n+    `**/__tests__/**/*.${GRIDSOME_TEST === 'e2e' ? 'e2e' : 'spec'}.js`\n   ],\n   collectCoverageFrom: [\n     'gridsome/lib/**/*.js'\n   ],\n+  testPathIgnorePatterns: [\n+    '/__fixtures__/',\n+    '/projects/',\n+    '/scripts/'\n+  ],\n   watchPathIgnorePatterns: [\n     '/__fixtures__/',\n     '/node_modules/',\n-    '/projects/'\n+    '/projects/',\n+    '/.git/'\n   ]\n }\ndiff --git a/package.json b/package.json\nindex 950690a..877f0cc 100644\n--- a/package.json\n+++ b/package.json\n@@ -7,8 +7,8 @@\n   ],\n   \"scripts\": {\n     \"bootstrap\": \"lerna bootstrap\",\n-    \"test:unit\": \"node scripts/test.js\",\n-    \"test:e2e\": \"node scripts/test.js --e2e\",\n+    \"test:unit\": \"GRIDSOME_TEST=unit jest --runInBand\",\n+    \"test:e2e\": \"GRIDSOME_TEST=e2e jest --runInBand\",\n     \"changelog\": \"node scripts/changelog.js\",\n     \"lint\": \"eslint \\\"@(gridsome|packages)/**/*.js\\\"\"\n   },\ndiff --git a/scripts/test.js b/scripts/test.js\ndeleted file mode 100644\nindex 7b45759..0000000\n--- a/scripts/test.js\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-const minimist = require('minimist')\n-const argv = minimist(process.argv.slice(2))\n-const options = []\n-\n-options.push('--config', 'jest.config.js')\n-options.push('--runInBand')\n-\n-if (argv.path) options.push('--testPathPattern', argv.path)\n-if (argv.name) options.push('--testNamePattern', argv.name)\n-if (argv.watch) options.push('--watchAll')\n-\n-require('jest').run(options)\ndiff --git a/scripts/testSetup.js b/scripts/testSetup.js\ndeleted file mode 100644\nindex 971ffe6..0000000\n--- a/scripts/testSetup.js\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-const e2e = process.argv.some(v => v === '--e2e')\n-\n-process.env.GRIDSOME_TEST = e2e ? 'e2e' : 'unit'",
    "output": "test: update jest config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.github/workflows/pnp.yml b/.github/workflows/pnp.yml\nindex f89da98..1a55da4 100644\n--- a/.github/workflows/pnp.yml\n+++ b/.github/workflows/pnp.yml\n@@ -5,12 +5,14 @@ on:\n     branches:\n       - master\n     paths:\n+      - 'yarn.lock'\n       - 'gridsome/**'\n       - '.github/workflows/pnp.yml'\n   pull_request:\n     branches:\n       - master\n     paths:\n+      - 'yarn.lock'\n       - 'gridsome/**'\n       - '.github/workflows/pnp.yml'\n \ndiff --git a/.github/workflows/test.yml b/.github/workflows/test.yml\nindex f59a4ca..b31b66a 100644\n--- a/.github/workflows/test.yml\n+++ b/.github/workflows/test.yml\n@@ -5,6 +5,7 @@ on:\n     branches:\n       - master\n     paths:\n+      - 'yarn.lock'\n       - 'jest.config.js'\n       - 'gridsome/**/*.js'\n       - 'packages/**/*.js'\n@@ -13,6 +14,7 @@ on:\n     branches:\n       - master\n     paths:\n+      - 'yarn.lock'\n       - 'jest.config.js'\n       - 'gridsome/**/*.js'\n       - 'packages/**/*.js'",
    "output": "ci: add yarn.lock to pnp and test workflow paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-drupal/README.md b/packages/source-drupal/README.md\nindex a91c399..aa3f52d 100644\n--- a/packages/source-drupal/README.md\n+++ b/packages/source-drupal/README.md\n@@ -93,6 +93,7 @@ user--user -> DrupalUser\n \n > The `keys` above are the defaults, but can be changed using [JSON:API\n > Extras](https://www.drupal.org/project/jsonapi_extras) (i.e. `node--article` can become just `article`\n+> Note: JSON:API can return an attribute `path` that contains an object. This `path` attribute conflicts with Gridsome's GraphQL `path` field. To avoid conflict the Drupal data contained in `path` has been renamed to `drupal_path`.\n \n The url `values` of the `links` object get looped over and requested via `axios` and each response becomes processed, converted into `nodes` on each respective GraphQL Type. Each entity response comes with a `relationship` object which is merged into each `node` - the Gridsome Core then intelligently creates all the GraphQL Connects. [See example page queries below](#example-page-queries).\n \ndiff --git a/packages/source-drupal/lib/Entity.js b/packages/source-drupal/lib/Entity.js\nindex 73d1838..325fb31 100644\n--- a/packages/source-drupal/lib/Entity.js\n+++ b/packages/source-drupal/lib/Entity.js\n@@ -109,7 +109,8 @@ class Entity {\n \n   processFields (fields = {}) {\n     const processedFields = reduce(fields, (newFields, field, key) => {\n-      newFields[key] = (field !== 'null') ? field : ''\n+      const modifiedKey = (key !== 'path') ? key : 'drupal_' + key\n+      newFields[modifiedKey] = (field !== 'null') ? field : ''\n \n       return newFields\n     }, {})",
    "output": "feat(drupal): handle path attribute in drupal's jsonapi response [ci skip] (#1489)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 3615a26..de7f6b8 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -105,8 +105,16 @@ module.exports = async (name, starter = '') => {\n   }\n \n   if (starter) {\n+    const officialTemplates = starters\n+      // Official starter kit entries\n+      .filter(({ author }) => author === 'gridsome')\n+      // Extract the starter kit name\n+      .map(({ repo }) => repo.split('-').pop())\n+\n     if (/^([a-z0-9_-]+)\\//i.test(starter)) {\n       starter = `https://github.com/${starter}.git`\n+    } else if (officialTemplates.includes(starter)) {\n+      starter = `https://github.com/gridsome/gridsome-starter-${starter}.git`\n     }\n   } else {\n     starter = 'https://github.com/gridsome/gridsome-starter-default'",
    "output": "refactor(cli): support gridsome-starter-name syntax (#1483)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex a558781..96cca89 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -105,6 +105,7 @@ class ContentfulSource {\n       }\n \n       node.id = entry.sys.id\n+      node.metadata = entry.metadata\n \n       collection.addNode(node)\n     }",
    "output": "feat(contentful): metadata for graphql nodes (#1477)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-wordpress/index.js b/packages/source-wordpress/index.js\nindex 3cf8f7b..fa48b32 100644\n--- a/packages/source-wordpress/index.js\n+++ b/packages/source-wordpress/index.js\n@@ -69,7 +69,7 @@ class WordPressSource {\n   }\n \n   async getUsers (actions) {\n-    const { data } = await this.fetch('wp/v2/users')\n+    const data = await this.fetchPaged('wp/v2/users')\n     const addCollection = actions.addCollection || actions.addContentType\n \n     const authors = addCollection({",
    "output": "fix(wordpress): paginated users endpoint (#1405)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/Compiler.js b/gridsome/lib/app/Compiler.js\nindex 1b36393..a6daf8a 100644\n--- a/gridsome/lib/app/Compiler.js\n+++ b/gridsome/lib/app/Compiler.js\n@@ -54,7 +54,8 @@ class Compiler {\n \n   getCompiler() {\n     if (!this._compiler) {\n-      this._compiler = webpack(this.getConfigs())\n+      const configs = this.getConfigs()\n+      this._compiler = webpack(configs.length === 1 ? configs[0] : configs)\n     }\n     return this._compiler\n   }",
    "output": "refactor: prevent multi-compiler in develop mode"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/Compiler.js b/gridsome/lib/app/Compiler.js\nindex 5f39253..1b36393 100644\n--- a/gridsome/lib/app/Compiler.js\n+++ b/gridsome/lib/app/Compiler.js\n@@ -36,8 +36,8 @@ class Compiler {\n     this._serverConfig = serverConfig\n     this._clientConfig = clientConfig\n \n-    this._resolve = enhancedResolve.create(serverConfig.resolve)\n-    this._resolveSync = enhancedResolve.create.sync(serverConfig.resolve)\n+    this._resolve = enhancedResolve.create(clientConfig.resolve)\n+    this._resolveSync = enhancedResolve.create.sync(clientConfig.resolve)\n   }\n \n   getClientConfig() {\n@@ -63,7 +63,7 @@ class Compiler {\n     try {\n       return this._resolve(context, path)\n     } catch(err) {\n-      return null\n+      return undefined\n     }\n   }\n \n@@ -71,7 +71,7 @@ class Compiler {\n     try {\n       return this._resolveSync(context, path)\n     } catch(err) {\n-      return null\n+      return undefined\n     }\n   }\n ",
    "output": "refactor: use client config for compiler resolvers"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex e3d87b0..21d40c8 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -265,7 +265,7 @@ module.exports = (app, { isProd, isServer }) => {\n     })\n \n     return {\n-      cacheDirectory: app.resolve('node_modules/.cache/gridsome'),\n+      cacheDirectory: app.resolve('node_modules/.cache/gridsome/webpack'),\n       cacheIdentifier: hash(values)\n     }\n   }",
    "output": "refactor(webpack): move cache folder to a subfolder"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex a82bf65..45238c6 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -7,9 +7,27 @@ const normalize = p => p.replace(/\\/+$/, '') || '/'\n module.exports = function (api, options) {\n   const include = options.include.map(normalize)\n   const exclude = options.exclude.map(normalize)\n+  const staticUrls = []\n \n   exclude.push('/404') // allways exclude /404 page\n \n+  if (process.env.NODE_ENV !== 'production') {\n+    return\n+  }\n+\n+  api.createPages(async ({ graphql }) => {\n+    if (typeof options.staticUrls === 'function') {\n+      const urls = await options.staticUrls({ graphql })\n+      if (Array.isArray(urls)) {\n+        staticUrls.push(...urls)\n+      } else {\n+        throw new Error('The staticUrls option must return an array.')\n+      }\n+    } else if (Array.isArray(options.staticUrls)) {\n+      staticUrls.push(...options.staticUrls)\n+    }\n+  })\n+\n   api.afterBuild(async ({ queue, config }) => {\n     if (!config.siteUrl) {\n       throw new Error(`Sitemap plugin is missing a required siteUrl config.`)\n@@ -22,7 +40,6 @@ module.exports = function (api, options) {\n \n     const filename = path.join(config.outputDir, options.output)\n     const pathPrefix = config.pathPrefix !== '/' ? config.pathPrefix : ''\n-    const staticUrls = options.staticUrls || []\n \n     let pages = queue.filter(page => page.type ? page.type === 'static' : true)\n ",
    "output": "feat(sitemap): allow function as staticUrls option"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 04a3e09..9760c5f 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -30,8 +30,8 @@ builtInPlugins.push(api => {\n \n     config.entryPoints.store.forEach((entry, name) => {\n       config.entry(name)\n-        .prepend(`webpack-hot-middleware/client?name=${name}&reload=true&noInfo=true`)\n-        .prepend('webpack/hot/dev-server')\n+        .prepend(`${require.resolve('webpack-hot-middleware/client')}?name=${name}&reload=true&noInfo=true`)\n+        .prepend(require.resolve('webpack/hot/dev-server'))\n     })\n   })\n })",
    "output": "fix(develop): yarn PnP in develop (#1434)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 845e447..3615a26 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -39,14 +39,20 @@ module.exports = async (name, starter = '') => {\n       type: 'autocomplete',\n       name: 'starter',\n       message: 'Pick a starter template',\n+      pageSize: 12,\n       prefix: ' ',\n       when: () => !starter && starters.length,\n       async source (answers, input) {\n-        const choices = starters.map((starter) => ({\n-          name: `${starter.title} by ${starter.author} (${starter.platforms || 'any'})`,\n-          short: `${starter.title} by ${starter.author}`,\n-          value: starter.repo\n-        }))\n+        const choices = starters.map((starter) => {\n+          const preview = starter.preview ? chalk.dim(`\\n  - ${starter.preview}`) : ''\n+          const platforms = starter.platforms ? ` (${starter.platforms})` : ''\n+          const title = `${starter.title} by ${starter.author}`\n+          return {\n+            name: `${title}${platforms}${preview}`,\n+            value: starter.repo,\n+            short: title\n+          }\n+        })\n \n         if (input) {\n           return choices.filter((choice) => {",
    "output": "refactor(cli): show preview url for each starter"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/workers/image-processor.js b/gridsome/lib/workers/image-processor.js\nindex 3727986..4eba754 100644\n--- a/gridsome/lib/workers/image-processor.js\n+++ b/gridsome/lib/workers/image-processor.js\n@@ -21,6 +21,8 @@ exports.processImage = async function ({\n }) {\n   if (cachePath && await fs.exists(cachePath)) {\n     return fs.copy(cachePath, destPath)\n+  } else if (await fs.exists(destPath)) {\n+    return\n   }\n \n   const { ext } = path.parse(filePath)",
    "output": "fix(build): don\u2019t process existing images"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 76f26f2..eef52b4 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -7,6 +7,7 @@ const moment = require('moment')\n const chokidar = require('chokidar')\n const pathToRegexp = require('path-to-regexp')\n const { deprecate } = require('../utils/deprecate')\n+const { validateTypeName } = require('../graphql/utils')\n const { ISO_8601_FORMAT } = require('../utils/constants')\n const { isPlainObject, trimStart, trimEnd, get, memoize } = require('lodash')\n \n@@ -132,6 +133,7 @@ const setupTemplates = ({ context, templates, permalinks }) => {\n   }\n \n   for (const typeName in templates) {\n+    validateTypeName(typeName)\n     templates[typeName].forEach(options => {\n       if (!isDev && !isUnitTest && !fs.existsSync(options.component)) {\n         const relPath = path.relative(context, options.component)",
    "output": "fix(templates): don't allow reserved names (#1427)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Pager.js b/gridsome/app/components/Pager.js\nindex d7a0917..0d8bd28 100644\n--- a/gridsome/app/components/Pager.js\n+++ b/gridsome/app/components/Pager.js\n@@ -78,7 +78,8 @@ export default {\n       if (end < total) links.push(renderLink(total, lastLabel, ariaLastLabel, [lastClass, navClass]))\n     }\n \n-    if (links.length < 2) return null\n+    if (showLinks && links.length < 2) return null\n+    if (!showLinks && links.length === 0) return null\n \n     return h('nav', {\n       ...data,",
    "output": "fix(pager): make showLinks prop work correctly  (#215) (#1429)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/directives/image.js b/gridsome/app/directives/image.js\nindex b0b07b6..a110b2b 100644\n--- a/gridsome/app/directives/image.js\n+++ b/gridsome/app/directives/image.js\n@@ -64,8 +64,9 @@ function loadImage (el) {\n   const src = el.getAttribute('data-src')\n   const sizes = el.getAttribute('data-sizes')\n   const srcset = el.getAttribute('data-srcset')\n+  const dataUri = el.src\n \n-  if (!src || el.src.endsWith(src)) {\n+  if (!src || dataUri.endsWith(src)) {\n     return // src is already switched\n   }\n \n@@ -73,6 +74,14 @@ function loadImage (el) {\n     removeClass(el, 'g-image--loading')\n     addClass(el, 'g-image--loaded')\n   }\n+  \n+  el.onerror = () => {\n+    el.srcset = ''\n+    el.sizes = ''\n+    el.src = dataUri\n+    removeClass(el, 'g-image--loading')\n+    addClass(el, 'g-image--error')\n+  }\n \n   el.srcset = srcset\n   el.sizes = sizes",
    "output": "fix(g-image): fallback to dataUri if image fails to load (#1430)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/TemplatesPlugin.js b/gridsome/lib/plugins/TemplatesPlugin.js\nindex 3baa88b..6dc5b63 100644\n--- a/gridsome/lib/plugins/TemplatesPlugin.js\n+++ b/gridsome/lib/plugins/TemplatesPlugin.js\n@@ -1,5 +1,6 @@\n const path = require('path')\n const glob = require('globby')\n+const fs = require('fs-extra')\n const leven = require('leven')\n const crypto = require('crypto')\n const moment = require('moment')\n@@ -10,6 +11,7 @@ const { ISO_8601_FORMAT } = require('../utils/constants')\n const { isPlainObject, trimStart, trimEnd, get, memoize } = require('lodash')\n \n const isDev = process.env.NODE_ENV === 'development'\n+const isUnitTest = process.env.GRIDSOME_TEST === 'unit'\n const FROM_CONTENT_TYPE = 'content-type'\n const FROM_CONFIG = 'config'\n \n@@ -123,7 +125,7 @@ const createTemplateOptions = (options, trailingSlash) => {\n   }\n }\n \n-const setupTemplates = ({ templates, permalinks }) => {\n+const setupTemplates = ({ context, templates, permalinks }) => {\n   const res = {\n     byComponent: new Map(),\n     byTypeName: new Map()\n@@ -131,6 +133,11 @@ const setupTemplates = ({ templates, permalinks }) => {\n \n   for (const typeName in templates) {\n     templates[typeName].forEach(options => {\n+      if (!isDev && !isUnitTest && !fs.existsSync(options.component)) {\n+        const relPath = path.relative(context, options.component)\n+        throw new Error(`Could not find component for the ${typeName} template: ${relPath}`)\n+      }\n+\n       const byTypeName = res.byTypeName.get(typeName) || []\n       const byComponent = res.byComponent.get(options.component) || []\n       const template = createTemplateOptions(options, permalinks.trailingSlash)",
    "output": "fix(templates): throw error if component is missing in prod"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 7e6c8e7..445d16e 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -40,6 +40,7 @@ export default {\n \n         attrs.src = isLazy ? dataUri : src\n         attrs.width = size.width\n+        attrs.height = size.height\n \n         if (isLazy) attrs['data-src'] = src\n         if (srcset.length) attrs[`${isLazy ? 'data-' : ''}srcset`] = Array.isArray(srcset) ? srcset.join(', ') : srcset",
    "output": "fix(g-image): add height attribute (#1257)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/.circleci/config.yml b/.circleci/config.yml\nindex 29897f8..1cd1438 100644\n--- a/.circleci/config.yml\n+++ b/.circleci/config.yml\n@@ -45,6 +45,21 @@ jobs:\n           name: Run unit tests\n           command: yarn run test:unit\n \n+  test-pnp:\n+    <<: *defaults\n+    steps:\n+      - attach_workspace:\n+          at: ~/\n+      - run: |\n+          git clone https://github.com/gridsome/gridsome-starter-default.git pnp-e2e\n+          cd pnp-e2e\n+          touch yarn.lock\n+          yarn set version 2\n+          yarn config set pnpFallbackMode none\n+          yarn config set compressionLevel 0\n+          yarn link -A ../\n+          yarn build\n+\n workflows:\n   version: 2\n   lint-and-test:\n@@ -56,3 +71,6 @@ workflows:\n       - test-unit:\n           requires:\n             - install\n+      - test-pnp:\n+          requires:\n+            - install\ndiff --git a/.gitignore b/.gitignore\nindex 3b1c87e..86d912e 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -3,3 +3,4 @@\n node_modules\n coverage\n dist\n+pnp-e2e",
    "output": "ci: add a pnp e2e test"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/utils/index.js b/packages/cli/lib/utils/index.js\nindex a85ce10..22330f5 100644\n--- a/packages/cli/lib/utils/index.js\n+++ b/packages/cli/lib/utils/index.js\n@@ -4,7 +4,7 @@ const semver = require('semver')\n exports.hasYarn = async function () {\n   try {\n     const { stdout: version } = await execa('yarn', ['--version'])\n-    return semver.satisfies(version, '>= 1.4.0')\n+    return semver.satisfies(version, '>= 1.4.0', { includePrerelease: true })\n   } catch (err) {}\n   return false\n }",
    "output": "fix: detect yarn 2 built from sources correctly"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 3c0cb40..a44fa73 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -40,10 +40,6 @@ module.exports = (app, { isProd, isServer }) => {\n     .extensions\n     .merge(['.js', '.vue'])\n     .end()\n-    .modules\n-    .add(resolve('../../node_modules'))\n-    .add(resolve('../../../packages'))\n-    .add('node_modules')\n \n   config.resolve\n     .plugin('gridsome-fallback-resolver-plugin')\n@@ -63,11 +59,6 @@ module.exports = (app, { isProd, isServer }) => {\n       .use({ ...require('pnp-webpack-plugin').topLevelLoader })\n       .end()\n     .set('symlinks', true)\n-    .modules\n-      .add(resolve('./loaders'))\n-      .add(resolve('../../node_modules'))\n-      .add(resolve('../../../packages'))\n-      .add('node_modules')\n \n   config.module.noParse(/^(vue|vue-router|vue-meta)$/)\n \ndiff --git a/gridsome/lib/webpack/modules/assets.js b/gridsome/lib/webpack/modules/assets.js\nindex 3b2993a..e498abf 100644\n--- a/gridsome/lib/webpack/modules/assets.js\n+++ b/gridsome/lib/webpack/modules/assets.js\n@@ -34,7 +34,7 @@ function transformAttrValue(node, attr) {\n \n   if (!isUrl(value) && !isMailtoLink(value) && !isTelLink(value) && isRelative(value)) {\n     const query = createOptionsQuery(node.attrs)\n-    result = `require(\"!!assets-loader?${query}!${value}\")`\n+    result = `require(\"!!${require.resolve('../loaders/assets-loader.js').replace(/\\\\/g, '/')}?${query}!${value}\")`\n   }\n \n   return result",
    "output": "fix: remove unnecessary modules"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex c6874bf..3c0cb40 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -72,7 +72,9 @@ module.exports = (app, { isProd, isServer }) => {\n   config.module.noParse(/^(vue|vue-router|vue-meta)$/)\n \n   if (app.config.runtimeCompiler) {\n-    config.resolve.alias.set('vue$', 'vue/dist/vue.esm.js')\n+    config.resolve.alias.set('vue$', require.resolve('vue/dist/vue.esm.js'))\n+  } else {\n+    config.resolve.alias.set('vue$', path.dirname(require.resolve('vue/package.json')))\n   }\n \n   if (!isProd) {",
    "output": "fix: alias vue to an absolute path"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/vue-components/index.js b/gridsome/lib/plugins/vue-components/index.js\nindex 0d006b0..0677d42 100644\n--- a/gridsome/lib/plugins/vue-components/index.js\n+++ b/gridsome/lib/plugins/vue-components/index.js\n@@ -37,6 +37,9 @@ class VueComponents {\n       .options({\n         presets: [\n           require.resolve('@vue/babel-preset-app')\n+        ],\n+        plugins: [\n+          require.resolve('../../webpack/plugins/corejsBabelPlugin.js')\n         ]\n       })\n       .end()\ndiff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex e94efa9..c6874bf 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -150,6 +150,9 @@ module.exports = (app, { isProd, isServer }) => {\n             resolve('../../app/entry.client.js')\n           ]\n         }]\n+      ],\n+      plugins: [\n+        require.resolve('./plugins/corejsBabelPlugin.js')\n       ]\n     })\n \ndiff --git a/gridsome/lib/webpack/plugins/corejsBabelPlugin.js b/gridsome/lib/webpack/plugins/corejsBabelPlugin.js\nnew file mode 100644\nindex 0000000..c237c3f\n--- /dev/null\n+++ b/gridsome/lib/webpack/plugins/corejsBabelPlugin.js\n@@ -0,0 +1,13 @@\n+const corejsPath = require('path').dirname(require.resolve('core-js/package.json')).replace(/\\\\/g, '/')\n+\n+module.exports = () => ({\n+  visitor: {\n+    ImportDeclaration(path) {\n+      if (path.node.specifiers.length !== 0 || path.node.source.value.indexOf('core-js/') !== 0) {\n+        return\n+      }\n+\n+      path.node.source.value = corejsPath + path.node.source.value.substr('core-js'.length)\n+    },\n+  },\n+})",
    "output": "feat: make core-js imports absolute"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/createRenderFn.js b/gridsome/lib/server/createRenderFn.js\nindex bb26ff4..eb5cb1d 100644\n--- a/gridsome/lib/server/createRenderFn.js\n+++ b/gridsome/lib/server/createRenderFn.js\n@@ -20,7 +20,8 @@ module.exports = function createRenderFn ({\n     clientManifest,\n     runInNewContext: false,\n     shouldPrefetch,\n-    shouldPreload\n+    shouldPreload,\n+    basedir: __dirname\n   })\n \n   return async function render(page, state, stateSize, hash) {",
    "output": "fix: provide vue-server-renderer with a basedir"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 9ad7e1e..fc47655 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -405,7 +405,10 @@ function resolvePluginEntries (id, context) {\n   } else if (id.startsWith('~/')) {\n     dirName = path.join(context, id.replace(/^~\\//, ''))\n   } else {\n-    dirName = path.dirname(require.resolve(id))\n+    // TODO: Replace with require.resolve(id, { paths: [context] }) when support for node is >= v8.9.0    \n+    // https://nodejs.org/api/modules.html#modules_require_resolve_request_options\n+    const resolvedPath = require('resolve-from')(context, id)\n+    dirName = path.dirname(resolvedPath)\n   }\n \n   if (\ndiff --git a/gridsome/package.json b/gridsome/package.json\nindex fe4080a..14a9b85 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -83,6 +83,7 @@\n     \"portfinder\": \"^1.0.20\",\n     \"postcss-loader\": \"^3.0.0\",\n     \"probe-image-size\": \"^4.0.0\",\n+    \"resolve-from\": \"^5.0.0\",\n     \"sharp\": \"^0.25.2\",\n     \"slash\": \"^2.0.0\",\n     \"sockjs\": \"^0.3.19\",\ndiff --git a/yarn.lock b/yarn.lock\nindex da5636d..bf47450 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -12879,6 +12879,11 @@ resolve-from@^4.0.0:\n   resolved \"https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6\"\n   integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\n \n+resolve-from@^5.0.0:\n+  version \"5.0.0\"\n+  resolved \"https://registry.yarnpkg.com/resolve-from/-/resolve-from-5.0.0.tgz#c35225843df8f776df21c57557bc087e9dfdfc69\"\n+  integrity sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\n+\n resolve-url@^0.2.1:\n   version \"0.2.1\"\n   resolved \"https://registry.yarnpkg.com/resolve-url/-/resolve-url-0.2.1.tgz#2c637fe77c893afd2a663fe21aa9080068e2052a\"",
    "output": "fix: resolve plugins relative to config"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/develop.js b/gridsome/lib/develop.js\nindex 3f505e7..dc10de9 100644\n--- a/gridsome/lib/develop.js\n+++ b/gridsome/lib/develop.js\n@@ -126,8 +126,8 @@ module.exports = async (context, args) => {\n \n     config.entryPoints.store.forEach((entry, name) => {\n       config.entry(name)\n-        .prepend(`webpack-hot-middleware/client?name=${name}&reload=true&noInfo=true`)\n-        .prepend('webpack/hot/dev-server')\n+        .prepend(`${require.resolve('webpack-hot-middleware/client')}?name=${name}&reload=true&noInfo=true`)\n+        .prepend(require.resolve('webpack/hot/dev-server'))\n     })\n \n     return app.compiler.resolveWebpackConfig(false, config)",
    "output": "fix(gridsome): require.resolve develop entries"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 640dae8..e94efa9 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -52,14 +52,22 @@ module.exports = (app, { isProd, isServer }) => {\n         optionalDir: path.join(app.context, 'src'),\n         resolve: ['main', 'App.vue']\n       }])\n-\n+      .end()\n+    // TODO: Remove plugin when using webpack 5\n+    .plugin('pnp')\n+      .use({...require(`pnp-webpack-plugin`)})\n+    \n   config.resolveLoader\n+    // TODO: Remove plugin when using webpack 5\n+    .plugin('pnp-loaders')\n+      .use({ ...require('pnp-webpack-plugin').topLevelLoader })\n+      .end()\n     .set('symlinks', true)\n     .modules\n-    .add(resolve('./loaders'))\n-    .add(resolve('../../node_modules'))\n-    .add(resolve('../../../packages'))\n-    .add('node_modules')\n+      .add(resolve('./loaders'))\n+      .add(resolve('../../node_modules'))\n+      .add(resolve('../../../packages'))\n+      .add('node_modules')\n \n   config.module.noParse(/^(vue|vue-router|vue-meta)$/)\n \ndiff --git a/gridsome/package.json b/gridsome/package.json\nindex 27d3380..fe4080a 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -79,6 +79,7 @@\n     \"p-map\": \"^2.0.0\",\n     \"path-to-regexp\": \"^2.2.1\",\n     \"physical-cpu-count\": \"^2.0.0\",\n+    \"pnp-webpack-plugin\": \"^1.6.4\",\n     \"portfinder\": \"^1.0.20\",\n     \"postcss-loader\": \"^3.0.0\",\n     \"probe-image-size\": \"^4.0.0\",\ndiff --git a/yarn.lock b/yarn.lock\nindex b707df9..da5636d 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -11540,6 +11540,13 @@ pngquant-bin@^5.0.0:\n     execa \"^0.10.0\"\n     logalot \"^2.0.0\"\n \n+pnp-webpack-plugin@^1.6.4:\n+  version \"1.6.4\"\n+  resolved \"https://registry.yarnpkg.com/pnp-webpack-plugin/-/pnp-webpack-plugin-1.6.4.tgz#c9711ac4dc48a685dabafc86f8b6dd9f8df84149\"\n+  integrity sha512-7Wjy+9E3WwLOEL30D+m8TSTF7qJJUJLONBnwQp0518siuMxUQUbgZwssaFX+QKlZkjHZcw/IpZCt/H0srrntSg==\n+  dependencies:\n+    ts-pnp \"^1.1.6\"\n+\n portfinder@^1.0.20:\n   version \"1.0.28\"\n   resolved \"https://registry.yarnpkg.com/portfinder/-/portfinder-1.0.28.tgz#67c4622852bd5374dd1dd900f779f53462fac778\"\n@@ -14423,6 +14430,11 @@ ts-invariant@^0.4.0:\n   dependencies:\n     tslib \"^1.9.3\"\n \n+ts-pnp@^1.1.6:\n+  version \"1.2.0\"\n+  resolved \"https://registry.yarnpkg.com/ts-pnp/-/ts-pnp-1.2.0.tgz#a500ad084b0798f1c3071af391e65912c86bca92\"\n+  integrity sha512-csd+vJOb/gkzvcCHgTGSChYpy5f1/XKNsmvBGO4JXS+z1v2HobugDz4s1IeFXM3wZB44uczs+eazB5Q/ccdhQw==\n+\n tsconfig-paths@^3.9.0:\n   version \"3.9.0\"\n   resolved \"https://registry.yarnpkg.com/tsconfig-paths/-/tsconfig-paths-3.9.0.tgz#098547a6c4448807e8fcb8eae081064ee9a3c90b\"",
    "output": "feat(gridsome): add pnp support"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/webpack/createBaseConfig.js b/gridsome/lib/webpack/createBaseConfig.js\nindex 57eef94..640dae8 100644\n--- a/gridsome/lib/webpack/createBaseConfig.js\n+++ b/gridsome/lib/webpack/createBaseConfig.js\n@@ -303,7 +303,11 @@ module.exports = (app, { isProd, isServer }) => {\n         }))\n \n       if (loader) {\n-        rule.use(loader).loader(loader).options(options)\n+        try {\n+          rule.use(loader).loader(require.resolve(loader)).options(options)\n+        } catch {\n+          rule.use(loader).loader(loader).options(options)\n+        }\n       }\n     }\n   }\ndiff --git a/gridsome/package.json b/gridsome/package.json\nindex 0508ff5..27d3380 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -103,6 +103,22 @@\n     \"webpack-merge\": \"^4.2.1\",\n     \"yaml-loader\": \"^0.5.0\"\n   },\n+  \"peerDependencies\": {\n+    \"less-loader\": \"*\",\n+    \"sass-loader\": \"*\",\n+    \"stylus-loader\": \"*\"\n+  },\n+  \"peerDependenciesMeta\": {\n+    \"sass-loader\": {\n+      \"optional\": true\n+    },\n+    \"less-loader\": {\n+      \"optional\": true\n+    },\n+    \"stylus-loader\": {\n+      \"optional\": true\n+    }\n+  },\n   \"engines\": {\n     \"node\": \">=8.3\"\n   },",
    "output": "fix(gridsome): require.resolve style loaders"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-graphql/package.json b/packages/source-graphql/package.json\nindex df0d776..6542edc 100644\n--- a/packages/source-graphql/package.json\n+++ b/packages/source-graphql/package.json\n@@ -17,7 +17,8 @@\n     \"node-fetch\": \"^2.6.0\"\n   },\n   \"peerDependencies\": {\n-    \"gridsome\": \"0.x\"\n+    \"gridsome\": \"0.x\",\n+    \"graphql\": \"^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0\"\n   },\n   \"publishConfig\": {\n     \"access\": \"public\"",
    "output": "fix(source-graphql): add missing peer dependency graphql"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/package.json b/packages/vue-remark/package.json\nindex cd3edd1..1073d93 100644\n--- a/packages/vue-remark/package.json\n+++ b/packages/vue-remark/package.json\n@@ -18,6 +18,7 @@\n     \"@babel/traverse\": \"^7.0.0\",\n     \"@gridsome/source-filesystem\": \"^0.6.2\",\n     \"@gridsome/transformer-remark\": \"^0.6.4\",\n+    \"babel-loader\": \"8.0.5\",\n     \"hash-sum\": \"^1.0.2\",\n     \"hast-util-to-html\": \"^5.0.0\",\n     \"he\": \"^1.2.0\",\n@@ -31,7 +32,8 @@\n     \"moment\": \"^2.24.0\",\n     \"path-to-regexp\": \"^3.1.0\",\n     \"unist-builder\": \"^1.0.3\",\n-    \"unist-util-visit\": \"^1.4.0\"\n+    \"unist-util-visit\": \"^1.4.0\",\n+    \"vue-loader\": \"^15.7.1\"\n   },\n   \"peerDependencies\": {\n     \"gridsome\": \"0.x\"",
    "output": "fix(vue-remark): add undeclared dependencies babel-loader and vue-loader"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/index.js b/packages/vue-remark/index.js\nindex c0a32c2..c6ef77a 100644\n--- a/packages/vue-remark/index.js\n+++ b/packages/vue-remark/index.js\n@@ -49,7 +49,7 @@ const createCustomBlockRule = (config, type) => {\n   config.module.rule(type)\n     .resourceQuery(re)\n     .use('babel-loader')\n-    .loader('babel-loader')\n+    .loader(require.resolve('babel-loader'))\n     .options({\n       presets: [\n         require.resolve('@babel/preset-env')\n@@ -277,7 +277,7 @@ class VueRemark {\n       })\n       .end()\n       .use('vue-loader')\n-      .loader('vue-loader')\n+      .loader(require.resolve('vue-loader'))\n       .options(vueLoader.toConfig().options)\n       .end()\n       .use('vue-remark-loader')",
    "output": "fix(vue-remark): require.resolve webpack loaders"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/package.json b/gridsome/package.json\nindex b1128fa..0508ff5 100644\n--- a/gridsome/package.json\n+++ b/gridsome/package.json\n@@ -94,6 +94,7 @@\n     \"vue-meta\": \"^2.2.2\",\n     \"vue-router\": \"^3.1.3\",\n     \"vue-server-renderer\": \"^2.6.10\",\n+    \"vue-style-loader\": \"^4.1.2\",\n     \"vue-template-compiler\": \"^2.6.10\",\n     \"webpack\": \"^4.29.3\",\n     \"webpack-chain\": \"^5.2.0\",\ndiff --git a/yarn.lock b/yarn.lock\nindex 88b84f9..b707df9 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -15085,7 +15085,7 @@ vue-server-renderer@^2.6.10:\n     serialize-javascript \"^3.1.0\"\n     source-map \"0.5.6\"\n \n-vue-style-loader@^4.1.0:\n+vue-style-loader@^4.1.0, vue-style-loader@^4.1.2:\n   version \"4.1.2\"\n   resolved \"https://registry.yarnpkg.com/vue-style-loader/-/vue-style-loader-4.1.2.tgz#dedf349806f25ceb4e64f3ad7c0a44fba735fcf8\"\n   integrity sha512-0ip8ge6Gzz/Bk0iHovU9XAUQaFt/G2B61bnWa2tCcqqdgfHs1lF9xXorFbE55Gmy92okFT+8bfmySuUOu13vxQ==",
    "output": "fix(gridsome): add undeclared dependency vue-style-loader"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex aeb7faa..9ad7e1e 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -34,7 +34,9 @@ module.exports = (context, options = {}) => {\n     split: false,\n     loaderOptions: {\n       sass: {\n-        indentedSyntax: true\n+        sassOptions: {\n+          indentedSyntax: true\n+        }\n       },\n       stylus: {\n         preferPathResolver: 'webpack'",
    "output": "feat(sass-loader): support for sass-loader@8 and above (#1108)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/Server.js b/gridsome/lib/server/Server.js\nindex dacafca..5fda5e5 100644\n--- a/gridsome/lib/server/Server.js\n+++ b/gridsome/lib/server/Server.js\n@@ -105,6 +105,7 @@ class Server {\n       const echo = sockjs.createServer({ log: () => null })\n \n       echo.on('connection', connection => {\n+        if(!connection) return\n         this._app.clients[connection.id] = connection\n \n         connection.on('close', () => {",
    "output": "fix(develop): guard against sockjs `null` argument (#1383)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Link.js b/gridsome/app/components/Link.js\nindex 1b6c224..f03d25e 100644\n--- a/gridsome/app/components/Link.js\n+++ b/gridsome/app/components/Link.js\n@@ -69,6 +69,7 @@ export default {\n       attrs,\n       directives,\n       domProps: {\n+        ...data.domProps,\n         __gLink__: true\n       }\n     }, children)",
    "output": "fix(g-link): add support for v-html (#1373)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/remark-prismjs/README.md b/packages/remark-prismjs/README.md\nindex a9b8854..55c6d23 100644\n--- a/packages/remark-prismjs/README.md\n+++ b/packages/remark-prismjs/README.md\n@@ -62,6 +62,14 @@ module.exports = {\n \n ## Options\n \n+#### customClassPrefix\n+\n+- Type: `String`\n+- Default: `''`\n+\n+If Prism's default classes are too generic and cause conflicts, you can add a prefix like `\"prism--\"` to all Prism\n+classes by passing it in as the `customClassPrefix`. \n+\n #### transformInlineCode\n \n - Type: `Boolean`\ndiff --git a/packages/remark-prismjs/index.js b/packages/remark-prismjs/index.js\nindex 7cead9b..286e385 100644\n--- a/packages/remark-prismjs/index.js\n+++ b/packages/remark-prismjs/index.js\n@@ -1,5 +1,6 @@\n const h = require('hastscript')\n const Prism = require('prismjs')\n+require('prismjs/plugins/custom-class/prism-custom-class')\n const u = require('unist-builder')\n const escapeHtml = require('escape-html')\n const visit = require('unist-util-visit')\n@@ -12,10 +13,13 @@ require('prismjs/components/index')()\n \n module.exports = (\n   {\n+    customClassPrefix = '',\n     transformInlineCode = false,\n     showLineNumbers: showLineNumbersGlobal = false\n   } = {}\n ) => tree => {\n+  Prism.plugins.customClass.prefix(customClassPrefix)\n+\n   visit(tree, 'code', (node, index, parent) => {\n     parent.children.splice(index, 1, createCode(node, showLineNumbersGlobal))\n   })",
    "output": "feat(prismjs): add custom class prefix (#1348)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/components/Image.js b/gridsome/app/components/Image.js\nindex 22b5bb4..7e6c8e7 100644\n--- a/gridsome/app/components/Image.js\n+++ b/gridsome/app/components/Image.js\n@@ -13,14 +13,14 @@ export default {\n     position: { type: String, default: '' },\n     background: { type: String, default: '' },\n     blur: { type: String, default: '' },\n-    immediate: { type: true, default: undefined },\n+    immediate: { type: Boolean, default: false },\n     imageWidths: { type: String, default: undefined }\n   },\n \n   render: (h, { data, props }) => {\n     const classNames = [data.class, 'g-image']\n     const noscriptClassNames = [data.staticClass, classNames.slice()]\n-    const isImmediate = props.immediate || props.immediate !== undefined\n+    const isImmediate = props.immediate\n     const directives = data.directives || []\n     const attrs = data.attrs || {}\n     const hook = data.hook || {}",
    "output": "fix(g-image): proper immediate typing and behaviour (#1372)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/plugins/vue-pages/index.js b/gridsome/lib/plugins/vue-pages/index.js\nindex 349c8c4..bff71fe 100644\n--- a/gridsome/lib/plugins/vue-pages/index.js\n+++ b/gridsome/lib/plugins/vue-pages/index.js\n@@ -21,36 +21,46 @@ class VuePages {\n   }\n \n   async createPages ({ slugify, createPage, removePagesByComponent }) {\n-    const files = await glob('**/*.vue', { cwd: this.pagesDir })\n+    const files = await glob('**/*.vue', {\n+      cwd: this.pagesDir,\n+      absolute: true\n+    })\n \n     for (const file of files) {\n       createPage(this.createPageOptions(file, slugify))\n     }\n \n     if (process.env.NODE_ENV === 'development') {\n-      const watcher = chokidar.watch('**/*.vue', {\n-        ignoreInitial: true,\n-        cwd: this.pagesDir\n+      // Watch pages directory without globbing to make\n+      // dynamic route params work in folder names.\n+      const watcher = chokidar.watch(this.pagesDir, {\n+        disableGlobbing: true,\n+        ignoreInitial: true\n       })\n \n       watcher.on('add', file => {\n-        createPage(this.createPageOptions(slash(file), slugify))\n+        if (/\\.vue$/.test(file)) {\n+          createPage(this.createPageOptions(slash(file), slugify))\n+        }\n       })\n \n       watcher.on('unlink', file => {\n-        removePagesByComponent(path.join(this.pagesDir, slash(file)))\n+        if (/\\.vue$/.test(file)) {\n+          removePagesByComponent(slash(file))\n+        }\n       })\n     }\n   }\n \n-  createPageOptions (file, slugify) {\n+  createPageOptions (absolutePath, slugify) {\n     const { trailingSlash } = this.api.config.permalinks\n-    const pagePath = createPagePath(file, slugify)\n+    const relativePath = path.relative(this.pagesDir, absolutePath)\n+    const pagePath = createPagePath(relativePath, slugify)\n \n     return {\n       path: trailingSlash ? trimEnd(pagePath, '/') + '/' : pagePath,\n-      name: /^[iI]ndex\\.vue$/.test(file) ? 'home' : undefined,\n-      component: path.join(this.pagesDir, file)\n+      name: /^[iI]ndex\\.vue$/.test(relativePath) ? 'home' : undefined,\n+      component: absolutePath\n     }\n   }\n }",
    "output": "fix(pages): dynamic route params in directories on windows (#1359)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/filters/input.js b/gridsome/lib/graphql/filters/input.js\nindex c03844f..08411b4 100644\n--- a/gridsome/lib/graphql/filters/input.js\n+++ b/gridsome/lib/graphql/filters/input.js\n@@ -62,13 +62,17 @@ function createFilterInput (schemaComposer, typeComposer) {\n   return removeEmptyTypes(filterTypeComposer)\n }\n \n-function removeEmptyTypes (typeComposer) {\n+function removeEmptyTypes (typeComposer, done = new Set()) {\n+  if (done.has(typeComposer)) return typeComposer\n+\n+  done.add(typeComposer)\n+\n   typeComposer.getFieldNames().forEach(fieldName => {\n     const fieldTypeComposer = typeComposer.getFieldTC(fieldName)\n \n     if (fieldTypeComposer instanceof InputTypeComposer) {\n       if (fieldTypeComposer.getFieldNames().length > 0) {\n-        removeEmptyTypes(fieldTypeComposer)\n+        removeEmptyTypes(fieldTypeComposer, done)\n       } else {\n         typeComposer.removeField(fieldName)\n       }",
    "output": "fix(graphql): prevent infinite loop while creating input types"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/source-contentful/index.js b/packages/source-contentful/index.js\nindex 294499c..a558781 100644\n--- a/packages/source-contentful/index.js\n+++ b/packages/source-contentful/index.js\n@@ -11,7 +11,8 @@ class ContentfulSource {\n       host: 'cdn.contentful.com',\n       typeName: 'Contentful',\n       richText: {},\n-      routes: {}\n+      routes: {},\n+      parameters: {}\n     }\n   }\n \n@@ -70,7 +71,8 @@ class ContentfulSource {\n   }\n \n   async getEntries (actions) {\n-    const entries = await this.fetch('getEntries')\n+    const parameters = this.options.parameters\n+    const entries = await this.fetch('getEntries', 1000, 'sys.createdAt', parameters)\n \n     for (const entry of entries) {\n       const typeId = entry.sys.contentType.sys.id\n@@ -108,8 +110,8 @@ class ContentfulSource {\n     }\n   }\n \n-  async fetch (method, limit = 1000, order = 'sys.createdAt') {\n-    const fetch = skip => this.client[method]({ skip, limit, order })\n+  async fetch (method, limit = 1000, order = 'sys.createdAt', parameters = {}) {\n+    const fetch = skip => this.client[method]({ ...parameters, skip, limit, order })\n     const { total, items } = await fetch(0)\n     const pages = Math.ceil(total / limit)\n ",
    "output": "feat(contentful): custom search parameters for entries (#1331)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex 3188a67..9f3d768 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -139,7 +139,7 @@ class RemarkTransformer {\n               allowedTags: []\n             }).replace(/\\r?\\n|\\r/g, ' ')\n \n-            if (excerpt.length > length && length) {\n+            if (length && excerpt.length > length) {\n               excerpt = excerpt.substr(0, excerpt.lastIndexOf(' ', length - 1))\n             }\n ",
    "output": "refactor(remark): fix illogically ordered conditions (#1330)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/pages/__tests__/pages.spec.js b/gridsome/lib/pages/__tests__/pages.spec.js\nindex c66c40a..29cab47 100644\n--- a/gridsome/lib/pages/__tests__/pages.spec.js\n+++ b/gridsome/lib/pages/__tests__/pages.spec.js\n@@ -509,7 +509,7 @@ test('get matched route by path', async () => {\n })\n \n describe('dynamic pages', () => {\n-  test('create dynamic page', async () => {\n+  test('create page', async () => {\n     const { pages } = await createApp()\n \n     const component = './__fixtures__/DefaultPage.vue'\n@@ -530,6 +530,17 @@ describe('dynamic pages', () => {\n     expect(route.internal.regexp).toEqual(/^\\/user\\/([^\\/]+?)(?:\\/)?$/i) // eslint-disable-line no-useless-escape\n     expect(route.internal.isDynamic).toEqual(true)\n   })\n+\n+  test('trim trailing slash', async () => {\n+    const { pages } = await createApp()\n+\n+    const component = './__fixtures__/DefaultPage.vue'\n+    const page = pages.createPage({ path: '/products/:slug/', component })\n+    const route = pages.getRoute(page.internal.route)\n+\n+    expect(page.path).toEqual('/products/:slug')\n+    expect(route.path).toEqual('/products/:slug')\n+  })\n })\n \n describe('create routes', () => {\ndiff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex c40c52c..1580c2b 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -37,8 +37,8 @@ class Pages {\n     this._watcher = null\n \n     this._routes = new Collection('routes', {\n-      indices: ['id'],\n-      unique: ['id', 'path', 'internal.priority'],\n+      indices: ['id', 'internal.priority'],\n+      unique: ['id', 'path'],\n       disableMeta: true\n     })\n \n@@ -319,16 +319,15 @@ class Pages {\n     const hasTrailingSlash = /\\/$/.test(options.path)\n     const isDynamic = /:/.test(options.path)\n \n-    if (type === TYPE_DYNAMIC) {\n-      name = name || `__${snakeCase(path)}`\n-    }\n-\n     if (query.directives.paginate) {\n       path = trimEnd(path, '/') + '/:page(\\\\d+)?' + (hasTrailingSlash ? '/' : '')\n     }\n \n     if (type === TYPE_STATIC && trailingSlash) {\n       path = trimEnd(path, '/') + '/'\n+    } else if (type === TYPE_DYNAMIC) {\n+      path = trimEnd(path, '/') || '/'\n+      name = name || `__${snakeCase(path)}`\n     }\n \n     const keys = []",
    "output": "fix(develop): ensure dynamic page loads on first run"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex 64d84ba..31d81e3 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -79,6 +79,10 @@ document.addEventListener('click', event => {\n   event.preventDefault()\n }, false)\n \n+router.onError((err) => {\n+  console.error(err)\n+})\n+\n router.onReady(() => {\n   app.$mount('#app')\n })\ndiff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex f4e0cb3..1d299be 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -18,6 +18,16 @@ export default (route, options = {}) => {\n     }\n \n     return new Promise((resolve, reject) => {\n+      const onFail = err => {\n+        isLoaded[route.path] = null\n+        reject(err)\n+      }\n+\n+      const onSuccess = res => {\n+        isLoaded[route.path] = null\n+        resolve(res)\n+      }\n+\n       if (force || !isLoaded[route.path]) {\n         isLoaded[route.path] = fetch(process.env.GRAPHQL_ENDPOINT, {\n           method: 'POST',\n@@ -25,22 +35,21 @@ export default (route, options = {}) => {\n           body: JSON.stringify({ path, dynamic })\n         })\n           .then(res => res.json())\n-          .catch(reject)\n       }\n \n       isLoaded[route.path]\n         .then(res => {\n-          if (res.errors) reject(res.errors[0])\n-          else if (res.code) resolve({ code: res.code })\n-          else resolve({\n+          if (res.errors) onFail(res.errors[0])\n+          else if (res.code) onSuccess({ code: res.code })\n+          else onSuccess({\n             data: res.data,\n             context: res.extensions\n               ? res.extensions.context\n               : {}\n           })\n-\n           isLoaded[route.path] = null\n         })\n+        .catch(onFail)\n     })\n   }\n \n@@ -69,13 +78,21 @@ export default (route, options = {}) => {\n \n     return isLoaded[jsonPath]\n       .then(res => {\n-        if (res.hash !== hashMeta) reject(\n-          createError(`Hash did not match: json=${res.hash}, document=${hashMeta}`,\n-                      'INVALID_HASH')\n+        if (res.hash !== hashMeta) {\n+          reject(\n+            createError(\n+              `Hash did not match: json=${res.hash}, document=${hashMeta}`,\n+              'INVALID_HASH'\n+            )\n           )\n-        else resolve(res)\n+        } else {\n+          resolve(res)\n+        }\n+      })\n+      .catch(err => {\n+        isLoaded[jsonPath] = null\n+        reject(err)\n       })\n-      .catch(reject)\n   })\n }\n \n@@ -121,6 +138,10 @@ function fetchJSON (jsonPath) {\n       reject(new Error(`Failed to fetch ${jsonPath}.`))\n     }\n \n+    req.onerror = () => {\n+      reject(new Error(`Failed to fetch ${jsonPath}.`))\n+    }\n+\n     req.send(null)\n   })\n }",
    "output": "fix(app): clear cache if the request fails (#1312)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/lib/commands/create.js b/packages/cli/lib/commands/create.js\nindex 30d93c7..d278f31 100644\n--- a/packages/cli/lib/commands/create.js\n+++ b/packages/cli/lib/commands/create.js\n@@ -59,7 +59,10 @@ module.exports = async (name, starter = 'default') => {\n     {\n       title: `Install dependencies`,\n       task: (_, task) => {\n-        const command = useYarn ? 'yarn' : 'npm'\n+        let command = 'npm'\n+        if (!fs.existsSync(path.join(dir, 'package-lock.json'))) {\n+          command = useYarn ? 'yarn' : 'npm'\n+        }\n         const stdio = ['ignore', 'pipe', 'ignore']\n         const options = { cwd: dir, stdio }\n         const args = []",
    "output": "fix(cli): prefer npm if the starter has package-lock.json (#1282)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/entry.client.js b/gridsome/app/entry.client.js\nindex dc8999d..64d84ba 100644\n--- a/gridsome/app/entry.client.js\n+++ b/gridsome/app/entry.client.js\n@@ -68,7 +68,7 @@ document.addEventListener('click', event => {\n \n   const path = stripPathPrefix($el.pathname)\n   const { route, location } = router.resolve({\n-    path: path + ($el.search || '') + ($el.hash || '')\n+    path: path + ($el.search || '') + decodeURI($el.hash || '')\n   })\n \n   if (route.name === '*') {",
    "output": "fix(app): decode anchor hash value (#1281) (#1293)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/lib/codegen.js b/packages/vue-remark/lib/codegen.js\nindex d7435c3..444d775 100644\n--- a/packages/vue-remark/lib/codegen.js\n+++ b/packages/vue-remark/lib/codegen.js\n@@ -42,6 +42,8 @@ exports.genImportBlock = function (statements, file) {\n     `  Object.keys(imported).forEach(function (key) {\\n` +\n     `    if (typeof imported[key] === 'object' && typeof imported[key].render === 'function') {\\n` +\n     `      components[key] = imported[key]\\n` +\n+    `    } else if (typeof imported[key] === 'function' && typeof imported[key].options.render === 'function') {\\n` +\n+    `      components[key] = imported[key]\\n` +\n     `    } else {\\n` +\n     `      computed[key] = function () {\\n` +\n     `        return imported[key]\\n` +",
    "output": "fix(vue-remark): support VueComponent function (#1264)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/__tests__/assets/1000x600-compressed.jpg b/gridsome/lib/__tests__/assets/1000x600-compressed.jpg\nnew file mode 100644\nindex 0000000..bca615b\nBinary files /dev/null and b/gridsome/lib/__tests__/assets/1000x600-compressed.jpg differ\ndiff --git a/gridsome/lib/__tests__/assets/350x250-compressed.png b/gridsome/lib/__tests__/assets/350x250-compressed.png\nnew file mode 100644\nindex 0000000..9428166\nBinary files /dev/null and b/gridsome/lib/__tests__/assets/350x250-compressed.png differ\ndiff --git a/gridsome/lib/workers/__tests__/image-processor.spec.js b/gridsome/lib/workers/__tests__/image-processor.spec.js\nindex e3e5188..bba7c97 100644\n--- a/gridsome/lib/workers/__tests__/image-processor.spec.js\n+++ b/gridsome/lib/workers/__tests__/image-processor.spec.js\n@@ -113,6 +113,23 @@ test('do not upscale images', async () => {\n   expect(height).toEqual(250)\n })\n \n+\n+test('do not use processed image if file size gets bigger', async () => {\n+  const files = await process([\n+    'rotated.jpg',\n+    '1000x600.jpg',\n+    '350x250.png',\n+    '1000x600-compressed.jpg',\n+    '350x250-compressed.png'\n+  ], { quality: 100 })\n+\n+  for (const file of files) {\n+    const originalImage = fs.statSync(file.filePath)\n+    const resultImage = fs.statSync(file.destPath)\n+    expect(resultImage.size).toBeLessThanOrEqual(originalImage.size)\n+  }\n+})\n+\n test('use cached process results', async () => {\n   await fs.copy(\n     path.join(context, 'assets', '1000x600.png'),\n@@ -154,7 +171,7 @@ async function process (filenames, options = {}, withCache = false) {\n     queue: processQueue.images.queue,\n     cacheDir: withCache ? imageCacheDir : false,\n     imagesConfig: config.images,\n-    outputDir: context\n+    context\n   })\n \n   return Promise.all(assets.map(async ({ filePath, src, hash }) => {\ndiff --git a/gridsome/lib/workers/image-processor.js b/gridsome/lib/workers/image-processor.js\nindex 1860c6b..077940f 100644\n--- a/gridsome/lib/workers/image-processor.js\n+++ b/gridsome/lib/workers/image-processor.js\n@@ -26,7 +26,7 @@ exports.processImage = async function ({\n   const { ext } = path.parse(filePath)\n   const { backgroundColor } = imagesConfig\n \n-  let buffer = await fs.readFile(filePath)\n+  const buffer = await fs.readFile(filePath)\n \n   if (['.png', '.jpeg', '.jpg', '.webp'].includes(ext)) {\n     const config = {\n@@ -93,11 +93,18 @@ exports.processImage = async function ({\n       }))\n     }\n \n-    buffer = await sharpImage.toBuffer()\n-    buffer = await imagemin.buffer(buffer, { plugins })\n+    const sharpBuffer = await sharpImage.toBuffer()\n+    const resultBuffer = await imagemin.buffer(sharpBuffer, { plugins })\n+    const resultLength = Buffer.byteLength(resultBuffer)\n+    const initLength = Buffer.byteLength(buffer)\n+\n+    return fs.outputFile(\n+      destPath,\n+      resultLength < initLength ? resultBuffer : buffer\n+    )\n   }\n \n-  await fs.outputFile(destPath, buffer)\n+  return fs.outputFile(destPath, buffer)\n }\n \n exports.process = async function ({",
    "output": "fix(g-image): prevent increased image sizes (#1256)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/__tests__/createRenderQueue.spec.js b/gridsome/lib/app/__tests__/createRenderQueue.spec.js\nindex 54be613..34a45cf 100644\n--- a/gridsome/lib/app/__tests__/createRenderQueue.spec.js\n+++ b/gridsome/lib/app/__tests__/createRenderQueue.spec.js\n@@ -205,7 +205,9 @@ describe('dynamic pages', () => {\n     const component = './__fixtures__/DefaultPage.vue'\n \n     app.pages.createPage({ path: '/', component })\n-    app.pages.createPage({ path: '/a', component })\n+    app.pages.createPage({ path: '/ab', component })\n+    app.pages.createPage({ path: '/ac', component })\n+    app.pages.createPage({ path: '/aa', component })\n     app.pages.createPage({ path: '/a/b', component })\n     app.pages.createPage({ path: '/a/:b', component })\n     app.pages.createPage({ path: '/a/:b(\\\\d+)', component })\n@@ -227,7 +229,9 @@ describe('dynamic pages', () => {\n       '/a/:b',\n       '/a/:b*',\n       '/a/:b+',\n-      '/a/',\n+      '/aa/',\n+      '/ab/',\n+      '/ac/',\n       '/404/',\n       '/'\n     ])\n@@ -246,7 +250,9 @@ describe('dynamic pages', () => {\n       'a/_b.html',\n       'a/_b_star.html',\n       'a/_b_plus.html',\n-      'a/index.html',\n+      'aa/index.html',\n+      'ab/index.html',\n+      'ac/index.html',\n       '404/index.html',\n       'index.html'\n     ])\ndiff --git a/gridsome/lib/pages/pages.js b/gridsome/lib/pages/pages.js\nindex aa2803c..c40c52c 100644\n--- a/gridsome/lib/pages/pages.js\n+++ b/gridsome/lib/pages/pages.js\n@@ -60,7 +60,10 @@ class Pages {\n   routes () {\n     return this._routes\n       .chain()\n-      .simplesort('internal.priority', true)\n+      .compoundsort([\n+        ['internal.priority', /* desc */ true],\n+        ['path', /* asc */ false]\n+      ])\n       .data()\n       .map(route => {\n         return new Route(route, this)\n@@ -455,9 +458,11 @@ class Route {\n   }\n \n   pages () {\n-    return this._pages.find({\n-      'internal.route': this.id\n-    })\n+    return this._pages\n+      .chain()\n+      .simplesort('path', false)\n+      .find({ 'internal.route': this.id })\n+      .data()\n   }\n \n   addPage (input) {",
    "output": "fix(build): ensure routes always have the same order (#1247)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/queue/AssetsQueue.js b/gridsome/lib/app/queue/AssetsQueue.js\nindex d36622c..b175798 100644\n--- a/gridsome/lib/app/queue/AssetsQueue.js\n+++ b/gridsome/lib/app/queue/AssetsQueue.js\n@@ -39,8 +39,12 @@ class AssetsQueue {\n \n     const entry = { ...data, ...asset }\n \n-    if (isDev && asset.cacheKey) {\n-      this.index.set(asset.cacheKey, entry)\n+    if (isDev) {\n+      if (asset.cacheKey) {\n+        this.index.set(asset.cacheKey, entry)\n+      } else {\n+        this.index.set(asset.src, entry)\n+      }\n     }\n \n     return entry\ndiff --git a/gridsome/lib/server/middlewares/assets.js b/gridsome/lib/server/middlewares/assets.js\nindex 2927ea5..a9dde45 100644\n--- a/gridsome/lib/server/middlewares/assets.js\n+++ b/gridsome/lib/server/middlewares/assets.js\n@@ -23,7 +23,7 @@ module.exports = ({ context, config, assets }) => {\n       return decodeURIComponent(value)\n     })\n \n-    const asset = assets.get(key)\n+    const asset = assets.get(key || req.url)\n \n     if (!asset) return res.sendStatus(404)\n ",
    "output": "fix(develop): fallback to url when no key param is set"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/assets.js b/gridsome/lib/server/middlewares/assets.js\nindex 49c399e..2927ea5 100644\n--- a/gridsome/lib/server/middlewares/assets.js\n+++ b/gridsome/lib/server/middlewares/assets.js\n@@ -36,8 +36,9 @@ module.exports = ({ context, config, assets }) => {\n         res.header('Expires', '-1')\n       }\n \n+      res.header('Accept-Ranges', 'bytes')\n       res.contentType(ext)\n-      res.end(buffer, 'binary')\n+      res.end(buffer)\n     }\n \n     try {",
    "output": "fix(develop): audio/video playback issues in Chrome (#1220)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/README.md b/packages/plugin-sitemap/README.md\nindex 1f08a48..fb4f33b 100644\n--- a/packages/plugin-sitemap/README.md\n+++ b/packages/plugin-sitemap/README.md\n@@ -21,11 +21,13 @@ module.exports = {\n         config: {\n           '/articles/*': {\n             changefreq: 'weekly',\n-            priority: 0.5\n+            priority: 0.5,\n+            lastmod: '2020-02-19',\n           },\n           '/about': {\n             changefreq: 'monthly',\n-            priority: 0.7\n+            priority: 0.7,\n+            lastmod: '2020-05-12',\n           }\n         }\n       }\n@@ -53,11 +55,13 @@ Set custom config for specific URLs.\n config: {\n   '/articles/*': {\n     changefreq: 'weekly',\n-    priority: 0.5\n+    priority: 0.5,\n+    lastmod: '2020-02-19',\n   },\n   '/about': {\n     changefreq: 'monthly',\n-    priority: 0.7\n+    priority: 0.7,\n+    lastmod: '2020-05-12',\n   }\n }\n ```\ndiff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex cf01ae3..a82bf65 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -46,7 +46,8 @@ module.exports = function (api, options) {\n           ? url.substr(pathPrefix.length)\n           : url,\n         priority: urlConfig.priority,\n-        changefreq: urlConfig.changefreq\n+        changefreq: urlConfig.changefreq,\n+        lastmod: urlConfig.lastmod\n       }\n     })\n ",
    "output": "feat(sitemap): set lastmod config for urls (#1228)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/store/NodeIndex.js b/gridsome/lib/store/NodeIndex.js\nindex 0b96f64..bd5530f 100644\n--- a/gridsome/lib/store/NodeIndex.js\n+++ b/gridsome/lib/store/NodeIndex.js\n@@ -14,7 +14,8 @@ class NodeIndex {\n     this.index = new Collection('NodeIndex', {\n       indices: ['typeName', 'id'],\n       unique: ['uid'],\n-      disableMeta: true\n+      disableMeta: true,\n+      adaptiveBinaryIndices: false\n     })\n   }\n ",
    "output": "perf(store): disable adaptive indices for node index (#1190)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/queue/ImageProcessQueue.js b/gridsome/lib/app/queue/ImageProcessQueue.js\nindex 945ba8e..597b301 100644\n--- a/gridsome/lib/app/queue/ImageProcessQueue.js\n+++ b/gridsome/lib/app/queue/ImageProcessQueue.js\n@@ -5,7 +5,6 @@ const crypto = require('crypto')\n const mime = require('mime-types')\n const colorString = require('color-string')\n const md5File = require('md5-file/promise')\n-const imageSize = require('probe-image-size')\n const svgDataUri = require('mini-svg-data-uri')\n const { forwardSlash } = require('../../utils')\n const { warmupSharp } = require('../../utils/sharp')\n@@ -72,17 +71,26 @@ class ImageProcessQueue {\n     const warmSharp = await warmupSharp(sharp)\n \n     let pipeline\n-    let buffer\n+    let metadata\n \n     try {\n       // Rotate based on EXIF Orientation tag\n       pipeline = warmSharp(fileBuffer).rotate()\n-      buffer = await pipeline.toBuffer()\n+      metadata = await pipeline.metadata()\n     } catch (err) {\n       throw new Error(`Failed to process image ${relPath}. ${err.message}`)\n     }\n \n-    const originalSize = imageSize.sync(buffer) || { width: 1, height: 1 }\n+    const originalSize = {\n+      width: metadata.width,\n+      height: metadata.height\n+    }\n+\n+    // https://www.impulseadventure.com/photo/exif-orientation.html\n+    if (metadata.orientation && metadata.orientation >= 5) {\n+      originalSize.width = metadata.height\n+      originalSize.height = metadata.width\n+    }\n \n     const { imageWidth, imageHeight } = computeScaledImageSize(originalSize, options, maxImageWidth)\n ",
    "output": "perf(g-image): get dimensions from sharp metadata"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/graphql/nodes/resolvers.js b/gridsome/lib/graphql/nodes/resolvers.js\nindex d7cfb12..2688e78 100644\n--- a/gridsome/lib/graphql/nodes/resolvers.js\n+++ b/gridsome/lib/graphql/nodes/resolvers.js\n@@ -18,10 +18,14 @@ exports.createFindOneResolver = function (typeComposer) {\n     if (args.id) {\n       node = collection.by('id', args.id)\n     } else if (args.path) {\n-      // must use collection.findOne() here because\n-      // collection.by() doesn't update after changes\n-      const re = new RegExp(`^${trimEnd(args.path, '/')}/?$`)\n-      node = collection.findOne({ path: { $regex: re } })\n+      const path = trimEnd(args.path, '/') + '/'\n+      const path2 = trimEnd(args.path, '/') || '/'\n+      node = collection.findOne({\n+        $or: [\n+          { path },\n+          { path: path2 }\n+        ]\n+      })\n     }\n \n     return node || null",
    "output": "perf(graphql): improve path argument performance (#1190)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/build/executeQueries.js b/gridsome/lib/app/build/executeQueries.js\nindex 3c75641..34d8bd9 100644\n--- a/gridsome/lib/app/build/executeQueries.js\n+++ b/gridsome/lib/app/build/executeQueries.js\n@@ -22,7 +22,7 @@ async function executeQueries (renderQueue, { context, pages, schema, graphql },\n     }\n   }\n \n-  const results = await pMap(renderQueue, async entry => {\n+  const files = await pMap(renderQueue, async entry => {\n     const route = pages.getRoute(entry.routeId)\n     const page = pages.getPage(entry.pageId)\n \n@@ -31,7 +31,7 @@ async function executeQueries (renderQueue, { context, pages, schema, graphql },\n \n     const document = route.internal.query.document\n     const context = pages._createPageContext(page, entry.queryVariables)\n-    const results = { data: null, context }\n+    const result = { hash, data: null, context }\n \n     if (document) {\n       if (!validated.has(route.component)) {\n@@ -50,22 +50,24 @@ async function executeQueries (renderQueue, { context, pages, schema, graphql },\n         throwError(errors[0], route.component)\n       }\n \n-      results.data = data\n+      result.data = data\n     }\n \n-    return { dataOutput: entry.dataOutput, data: results }\n+    return {\n+      path: entry.dataOutput,\n+      content: JSON.stringify(result)\n+    }\n   }, { concurrency: sysinfo.cpus.physical })\n \n   info(`Execute GraphQL (${renderQueue.length} queries) - ${timer(hirestime.S)}s`)\n \n   const timer2 = hirestime()\n \n-  await Promise.all(results.map(result => {\n-    const content = JSON.stringify({ hash, ...result.data })\n-    return fs.outputFile(result.dataOutput, content)\n-  }))\n+  await pMap( files, ({ path, content }) => fs.outputFile(path, content), {\n+    concurrency: sysinfo.cpus.physical\n+  })\n \n-  info(`Write out page data (${results.length} files) - ${timer2(hirestime.S)}s`)\n+  info(`Write out page data (${files.length} files) - ${timer2(hirestime.S)}s`)\n }\n \n module.exports = executeQueries",
    "output": "perf(build): improve page-query output performance (#1190)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/__tests__/.gitignore b/packages/cli/__tests__/.gitignore\nnew file mode 100644\nindex 0000000..88f42ff\n--- /dev/null\n+++ b/packages/cli/__tests__/.gitignore\n@@ -0,0 +1 @@\n+/my-project\ndiff --git a/packages/cli/__tests__/create.spec.js b/packages/cli/__tests__/create.spec.js\nindex 5380210..330a979 100644\n--- a/packages/cli/__tests__/create.spec.js\n+++ b/packages/cli/__tests__/create.spec.js\n@@ -1,16 +1,17 @@\n-const fs = require('fs')\n+const fs = require('fs-extra')\n+const { join } = require('path')\n \n const runCLI = require('./utils/helpers')\n \n-const genPath = `${__dirname}/my-project`\n+const genPath = join(__dirname, 'my-project')\n \n beforeEach(() => {\n-  fs.mkdirSync(genPath)\n-  fs.writeFileSync(`${genPath}/index.js`, '// Test')\n+  fs.ensureDirSync(genPath)\n+  fs.writeFileSync(join(genPath, 'index.js'), '// Test')\n })\n \n afterEach(() => {\n-  fs.rmdirSync(genPath, { recursive: true })\n+  fs.removeSync(genPath)\n })\n \n test('warns if a directory with the same name exists in path', async () => {",
    "output": "test(cli): ensure tests pass for node < 12.10"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex cbac7bc..1f3fa83 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -20,7 +20,7 @@ module.exports = ({ pages }) => {\n     }\n \n     let route = null\n-    let currentPage = null\n+    let currentPage = undefined\n     let params = {}\n \n     if (body.dynamic) {\n@@ -34,15 +34,17 @@ module.exports = ({ pages }) => {\n \n     if (!route) return notFound()\n \n-    // page/1/index.html is not statically generated\n-    // in production and should return 404 in develop\n     if (route.internal.query.directives.paginate) {\n-      currentPage = parseInt(params.page, 10) || 0\n+      const pageParam = parseInt(params.page, 10)\n \n-      if (params.page && currentPage <= 1) {\n+      // page/1/index.html is not statically generated\n+      // in production and should return 404 in develop\n+      if (pageParam && pageParam <= 1) {\n         return notFound()\n       }\n \n+      currentPage = Math.max(pageParam || 0, 1)\n+\n       delete params.page\n     }\n \n@@ -68,7 +70,7 @@ module.exports = ({ pages }) => {\n       variables: createQueryVariables(\n         page.path,\n         page.internal.query.variables,\n-        currentPage || undefined\n+        currentPage\n       )\n     }\n ",
    "output": "fix(graphql): calculate pagination in dev mode (#1198)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/__tests__/create.spec.js b/packages/cli/__tests__/create.spec.js\nnew file mode 100644\nindex 0000000..5380210\n--- /dev/null\n+++ b/packages/cli/__tests__/create.spec.js\n@@ -0,0 +1,20 @@\n+const fs = require('fs')\n+\n+const runCLI = require('./utils/helpers')\n+\n+const genPath = `${__dirname}/my-project`\n+\n+beforeEach(() => {\n+  fs.mkdirSync(genPath)\n+  fs.writeFileSync(`${genPath}/index.js`, '// Test')\n+})\n+\n+afterEach(() => {\n+  fs.rmdirSync(genPath, { recursive: true })\n+})\n+\n+test('warns if a directory with the same name exists in path', async () => {\n+  const { stdout } = await runCLI(['create', 'my-project'], __dirname)\n+\n+  expect(stdout).toBe(`Can't create my-project because there's already a non-empty directory my-project existing in path.`)\n+})\ndiff --git a/packages/cli/__tests__/gridsome.spec.js b/packages/cli/__tests__/gridsome.spec.js\nindex 396fa74..52e0c45 100644\n--- a/packages/cli/__tests__/gridsome.spec.js\n+++ b/packages/cli/__tests__/gridsome.spec.js\n@@ -1,29 +1,28 @@\n const path = require('path')\n-const execa = require('execa')\n-const cli = require.resolve('../bin/gridsome')\n+\n+const runCLI = require('./utils/helpers')\n \n test('show @gridsome/cli version', async () => {\n-  const { stdout } = await execa(cli, ['-v'])\n+  const { stdout } = await runCLI(['-v'])\n \n   expect(stdout).toMatch(/@gridsome\\/cli v(\\d+\\.?){3}/)\n })\n \n test('show local gridsome version', async () => {\n-  const { stdout } = await execa(cli, ['-v'], {\n-    cwd: path.join(__dirname, '__fixtures__', 'project')\n-  })\n+  const testPath = path.join(__dirname, '__fixtures__', 'project')\n+  const { stdout } = await runCLI(['-v'], testPath)\n \n   expect(stdout).toMatch(/gridsome v(\\d+\\.?){3}/)\n })\n \n test('warn about unknown command', async () => {\n-  const { stdout } = await execa(cli, ['asdf'])\n+  const { stdout } = await runCLI(['asdf'])\n \n   expect(stdout).toMatch('Unknown command asdf')\n })\n \n test('suggest matching command', async () => {\n-  const { stdout } = await execa(cli, ['creaet'])\n+  const { stdout } = await runCLI(['creaet'])\n \n   expect(stdout).toContain('Did you mean create?')\n })\ndiff --git a/packages/cli/__tests__/utils/helpers.js b/packages/cli/__tests__/utils/helpers.js\nnew file mode 100644\nindex 0000000..f224fb3\n--- /dev/null\n+++ b/packages/cli/__tests__/utils/helpers.js\n@@ -0,0 +1,12 @@\n+const execa = require('execa')\n+\n+const CLI_PATH = require.resolve('../../bin/gridsome')\n+\n+const runCLI = (args, dir = process.cwd()) => {\n+  const options = {\n+    cwd: dir\n+  }\n+  return execa(CLI_PATH, args, options)\n+}\n+\n+module.exports = runCLI",
    "output": "test(cli): add new helper and increase coverage (#1193)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/PluginAPI.js b/gridsome/lib/app/PluginAPI.js\nindex b366a06..4a16f16 100644\n--- a/gridsome/lib/app/PluginAPI.js\n+++ b/gridsome/lib/app/PluginAPI.js\n@@ -81,11 +81,11 @@ class PluginAPI {\n   //\n \n   onInit (fn) {\n-    this._app.hooks.beforeBootstrap.tapAsync(this._entry.name || 'OnInit', fn)\n+    this._app.hooks.beforeBootstrap.tapPromise(this._entry.name || 'OnInit', fn)\n   }\n \n   onBootstrap (fn) {\n-    this._app.hooks.bootstrap.tapAsync(this._entry.name || 'OnBootstrap', fn)\n+    this._app.hooks.bootstrap.tapPromise(this._entry.name || 'OnBootstrap', fn)\n   }\n \n   onCreateNode (fn) {",
    "output": "refactor: use tapPromise instead of tapAsync (#1176)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/app/loadConfig.js b/gridsome/lib/app/loadConfig.js\nindex 0117ac2..3951467 100644\n--- a/gridsome/lib/app/loadConfig.js\n+++ b/gridsome/lib/app/loadConfig.js\n@@ -300,7 +300,7 @@ function normalizeTemplates (context, config, localConfig) {\n }\n \n function normalizePlugins (context, plugins) {\n-  return plugins.map((plugin, index) => {\n+  return plugins.filter(Boolean).map((plugin, index) => {\n     if (typeof plugin !== 'object') {\n       plugin = { use: plugin }\n     }",
    "output": "fix(config): skip undefined plugins"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/plugin-sitemap/index.js b/packages/plugin-sitemap/index.js\nindex 2f2b2e1..cf01ae3 100644\n--- a/packages/plugin-sitemap/index.js\n+++ b/packages/plugin-sitemap/index.js\n@@ -1,14 +1,16 @@\n-module.exports = function (api, options) {\n-  const path = require('path')\n-  const fs = require('fs-extra')\n-  const micromatch = require('micromatch')\n+const path = require('path')\n+const fs = require('fs-extra')\n+const micromatch = require('micromatch')\n+\n+const normalize = p => p.replace(/\\/+$/, '') || '/'\n \n-  const normalize = p => p.replace(/\\/+$/, '') || '/'\n-  const exclude = options.exclude.slice().map(p => normalize(p))\n+module.exports = function (api, options) {\n+  const include = options.include.map(normalize)\n+  const exclude = options.exclude.map(normalize)\n \n-  exclude.push('/404') // always exclude 404 page\n+  exclude.push('/404') // allways exclude /404 page\n \n-  api.afterBuild(({ queue, config }) => {\n+  api.afterBuild(async ({ queue, config }) => {\n     if (!config.siteUrl) {\n       throw new Error(`Sitemap plugin is missing a required siteUrl config.`)\n     }\n@@ -21,9 +23,16 @@ module.exports = function (api, options) {\n     const filename = path.join(config.outputDir, options.output)\n     const pathPrefix = config.pathPrefix !== '/' ? config.pathPrefix : ''\n     const staticUrls = options.staticUrls || []\n-    const pages = queue\n-      .filter(page => page.type ? page.type === 'static' : true)\n-      .filter(page => micromatch(page.path, exclude).length < 1)\n+\n+    let pages = queue.filter(page => page.type ? page.type === 'static' : true)\n+\n+    if (include.length) {\n+      pages = pages.filter(page => micromatch(page.path, include).length > 0)\n+    }\n+\n+    if (exclude.length) {\n+      pages = pages.filter(page => micromatch(page.path, exclude).length < 1)\n+    }\n \n     console.log(`Generate ${options.output} (${pages.length + staticUrls.length} pages)`)\n \n@@ -47,7 +56,7 @@ module.exports = function (api, options) {\n       urls: [...generatedUrls, ...staticUrls]\n     })\n \n-    return fs.outputFile(filename, sitemap.toString())\n+    await fs.outputFile(filename, sitemap.toString())\n   })\n }\n \n@@ -55,6 +64,7 @@ module.exports.defaultOptions = () => ({\n   output: '/sitemap.xml',\n   cacheTime: 600000,\n   staticUrls: [],\n+  include: [],\n   exclude: [],\n   config: {}\n })",
    "output": "feat(sitemap): option to include paths"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\nindex 0a4cc4c..267966f 100644\n--- a/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n+++ b/packages/vue-remark/__tests__/__snapshots__/index.spec.js.snap\n@@ -3,9 +3,9 @@\n exports[`add v-pre to fenced code blocks 1`] = `\n \"<template>\n <VueRemarkRoot>\n-<pre><code class=\\\\\"language-html\\\\\" v-pre>&#x3C;div>\n+<pre><code class=\\\\\"language-html\\\\\" v-pre>&lt;div id=\\\\\"test\\\\\">\n # title\n-&#x3C;/div>\n+&lt;/div>\n </code></pre>\n </VueRemarkRoot>\n </template>\"\ndiff --git a/packages/vue-remark/__tests__/index.spec.js b/packages/vue-remark/__tests__/index.spec.js\nindex 679de79..cfc3585 100644\n--- a/packages/vue-remark/__tests__/index.spec.js\n+++ b/packages/vue-remark/__tests__/index.spec.js\n@@ -1,5 +1,5 @@\n const VueRemark = require('..')\n-const App = require('../../../gridsome/lib/app/App')\n+const App = require('gridsome/lib/app/App')\n \n test('parse simple title', async () => {\n   const plugin = await createPlugin()\n@@ -64,7 +64,7 @@ test('add v-pre to fenced code blocks', async () => {\n   const plugin = await createPlugin()\n   const res = await plugin.parse(`\n \\`\\`\\`html\n-<div>\n+<div id=\"test\">\n # title\n </div>\n \\`\\`\\`\n@@ -84,7 +84,7 @@ test('parse inline code with tag-like syntax', async () => {\n   const plugin = await createPlugin()\n   const res = await plugin.parse('`<test>.example.com`', { onlyTemplate: true })\n \n-  expect(res).toMatch('<code v-pre>&#x3C;test>.example.com</code>')\n+  expect(res).toMatch('<code v-pre>&lt;test>.example.com</code>')\n })\n \n test('parse markdown inside Vue component', async () => {\n@@ -180,6 +180,13 @@ test('disable g-link for urls', async () => {\n   )\n })\n \n+test('use named entities when encoding attributes', async () => {\n+  const plugin = await createPlugin()\n+  const res = await plugin.parse('[External](https://example.com/?x&y)', { onlyTemplate: true })\n+\n+  expect(res).toMatch('href=\"https://example.com/?x&amp;y\"')\n+})\n+\n test('keep italic text in links', async () => {\n   const plugin = await createPlugin()\n   const res = await plugin.parse('[*Italic link*](https://example.com)', { onlyTemplate: true })\ndiff --git a/packages/vue-remark/lib/toSfc.js b/packages/vue-remark/lib/toSfc.js\nindex 87be9cf..c2a2fce 100644\n--- a/packages/vue-remark/lib/toSfc.js\n+++ b/packages/vue-remark/lib/toSfc.js\n@@ -42,7 +42,12 @@ module.exports = function toSfc () {\n       }\n     })\n \n-    const html = toHTML(hast, { allowDangerousHTML: true })\n+    const html = toHTML(hast, {\n+      allowDangerousHTML: true,\n+      entities: {\n+        useNamedReferences: true\n+      }\n+    })\n \n     if (file.data.onlyBlocks) {\n       return blocks.join('\\n\\n')",
    "output": "fix(vue-remark): use named entities when encoding (#1179)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/lib/server/middlewares/graphql.js b/gridsome/lib/server/middlewares/graphql.js\nindex ab70bfc..cbac7bc 100644\n--- a/gridsome/lib/server/middlewares/graphql.js\n+++ b/gridsome/lib/server/middlewares/graphql.js\n@@ -4,7 +4,7 @@ const { createQueryVariables } = require('../../graphql/utils')\n \n module.exports = ({ pages }) => {\n   return async function graphqlMiddleware (req, res, next) {\n-    const { body = {}} = req\n+    const { body = {}, query = {} } = req\n \n     const notFound = () => res\n       .status(404)\n@@ -15,7 +15,7 @@ module.exports = ({ pages }) => {\n       return res.sendStatus(200)\n     }\n \n-    if (body.query) {\n+    if (body.query || query.query) {\n       return next()\n     }\n ",
    "output": "fix(graphql): allow GET request with query param (#1127)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/transformer-remark/index.js b/packages/transformer-remark/index.js\nindex ef0bc4e..3188a67 100644\n--- a/packages/transformer-remark/index.js\n+++ b/packages/transformer-remark/index.js\n@@ -4,7 +4,7 @@ const parse = require('gray-matter')\n const remarkHtml = require('remark-html')\n const remarkParse = require('remark-parse')\n const sanitizeHTML = require('sanitize-html')\n-const { words, defaultsDeep } = require('lodash')\n+const { defaultsDeep } = require('lodash')\n \n const cache = new LRU({ max: 1000 })\n \n@@ -15,6 +15,8 @@ const {\n   createPlugins\n } = require('./lib/utils')\n \n+const { estimateTimeToRead } = require('./lib/timeToRead')\n+\n const {\n   HeadingType,\n   HeadingLevels\n@@ -109,8 +111,7 @@ class RemarkTransformer {\n               allowedTags: []\n             })\n \n-            const count = words(text).length\n-            cached = Math.round(count / speed) || 1\n+            cached = estimateTimeToRead(text, speed)\n             cache.set(key, cached)\n           }\n \ndiff --git a/packages/transformer-remark/lib/timeToRead.js b/packages/transformer-remark/lib/timeToRead.js\nnew file mode 100644\nindex 0000000..ccb66d0\n--- /dev/null\n+++ b/packages/transformer-remark/lib/timeToRead.js\n@@ -0,0 +1,28 @@\n+// Word count in respect of CJK characters\n+// Borrowed from: https://github.com/yuehu/word-count\n+\n+const pattern = /[a-zA-Z0-9_\\u0392-\\u03c9\\u00c0-\\u00ff\\u0600-\\u06ff\\u0400-\\u04ff]+|[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af]+/g\n+\n+function estimateTimeToRead (text, speed) {\n+  const m = text.match(pattern)\n+  let count = 0\n+\n+  // Empty string\n+  if (!m) {\n+    return 0\n+  }\n+\n+  for (const c of m) {\n+    if (c.charCodeAt(0) >= 0x4e00) {\n+      count += c.length\n+    } else {\n+      count += 1\n+    }\n+  }\n+\n+  return Math.round(count / speed) || 1\n+}\n+\n+module.exports = {\n+  estimateTimeToRead\n+}",
    "output": "feat(remark): timeToRead with CJK support (#1160)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/gridsome/app/fetch.js b/gridsome/app/fetch.js\nindex 00e7d91..f4e0cb3 100644\n--- a/gridsome/app/fetch.js\n+++ b/gridsome/app/fetch.js\n@@ -69,7 +69,10 @@ export default (route, options = {}) => {\n \n     return isLoaded[jsonPath]\n       .then(res => {\n-        if (res.hash !== hashMeta) reject(createError('Hash did not match.', 'INVALID_HASH'))\n+        if (res.hash !== hashMeta) reject(\n+          createError(`Hash did not match: json=${res.hash}, document=${hashMeta}`,\n+                      'INVALID_HASH')\n+          )\n         else resolve(res)\n       })\n       .catch(reject)",
    "output": "fix(app): add extra debugging output on hash mismatch failure (#1150)"
  },
  {
    "instruction": "You are an expert at analyzing Git diffs and classifying their changes in short, 10-15 word summaries. Make sure to read the diffs line-by-line for the provided diff by reading what has been added, and removed on the currently unstaged files in the repository. Then proceed to classify it with one of the tags, that are the following: feat: A new feature, fix: A bug fix, docs: Documentation only changes, style: Changes that do not affect the meaning of the code, refactor: A code change that neither fixes a bug nor adds a feature, perf: A code change that improves performance, test: Adding missing tests or correcting existing tests, build: Changes that affect the build system or external dependencies, ci: Changes to CI configuration files and scripts, chore: Other changes that don't modify src or test files. You can also use these tags with scopes in parentheses to provide more context, for example: fix(deps): Update dependency versions, feat(auth): Add new authentication method. Your response should be a short 10-15 word summary starting with the tag. For example: 'feat: implemented user authentication with JWT tokens' or 'fix(deps): updated npm dependencies to fix security vulnerabilities'. By any means, do not exceed the 15 word limit, and do not produce anything more than this one sentence.",
    "input": "diff --git a/packages/cli/__tests__/gridsome.spec.js b/packages/cli/__tests__/gridsome.spec.js\nindex 0e4b88d..396fa74 100644\n--- a/packages/cli/__tests__/gridsome.spec.js\n+++ b/packages/cli/__tests__/gridsome.spec.js\n@@ -27,11 +27,3 @@ test('suggest matching command', async () => {\n \n   expect(stdout).toContain('Did you mean create?')\n })\n-\n-test('warn about missing dependencies', async () => {\n-  const { stdout } = await execa(cli, ['noop'], {\n-    cwd: path.join(__dirname, '__fixtures__', 'project')\n-  })\n-\n-  expect(stdout).toMatch('install dependencies')\n-})\ndiff --git a/packages/cli/bin/gridsome.js b/packages/cli/bin/gridsome.js\nindex a182afa..f758d71 100755\n--- a/packages/cli/bin/gridsome.js\n+++ b/packages/cli/bin/gridsome.js\n@@ -51,25 +51,22 @@ try {\n \n // show a warning if the command does not exist\n program.arguments('<command>').action(async command => {\n-  const { isGridsomeProject, hasYarn } = require('../lib/utils')\n+  const { isGridsomeProject } = require('../lib/utils')\n   const availableCommands = program.commands.map(cmd => cmd._name)\n   const suggestion = availableCommands.find(cmd => {\n     const steps = leven(cmd, command)\n     return steps < 3\n   })\n \n-  if (isGridsomeProject(pkgPath) && !suggestion) {\n-    const useYarn = await hasYarn()\n+  console.log(chalk.red(`Unknown command ${chalk.bold(command)}`))\n \n+  if (isGridsomeProject(pkgPath) && !suggestion) {\n+    console.log()\n     console.log()\n-    console.log(`  Please run ${chalk.cyan(useYarn ? 'yarn' : 'npm install')} to install dependencies first.`)\n+    program.outputHelp()\n+  } else if (suggestion) {\n     console.log()\n-  } else {\n-    console.log(chalk.red(`Unknown command ${chalk.bold(command)}`))\n-    if (suggestion) {\n-      console.log()\n-      console.log(`Did you mean ${suggestion}?`)\n-    }\n+    console.log(`Did you mean ${suggestion}?`)\n   }\n })\n ",
    "output": "fix(cli): show help for unknown commands (#1130)"
  }
]